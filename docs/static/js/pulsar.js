(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.pulsar = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
    'use strict';
    
    var $ = require('jquery');
    
    function ButtonComponent(html) {
        this.$html = html;
    };
    
    ButtonComponent.prototype.init = function () {
    
        var component = this;
    
        component.$html.on('click', '.is-disabled', component.isDisabled);
    
        component.$html.on('click', '.js-submit-disable', component.submitDisable);
    
        component.$html.on('click', '.js-submit-enable', function (e) {
            component.submitEnable();
        });
    };
    
    /**
     * Prevent a disabled button from opening links or modals
     */
    ButtonComponent.prototype.isDisabled = function (e) {
    
        e.preventDefault();
        e.stopPropagation();
    };
    
    /**
     * Disable a button when clicked
     *
     * Form submit buttons use this behaviour by default to prevent accidental
     * re-submissions.
     */
    ButtonComponent.prototype.submitDisable = function () {
    
        $(this).addClass('is-disabled').attr('disabled', 'disabled');
    };
    
    /**
     * Enables any button containing class="js-disable-submit is-disabled"
     *
     * Used by XHR methods to re-enable a form's actions after a success/failed call
     */
    ButtonComponent.prototype.submitEnable = function () {
    
        var component = this;
    
        component.$html.find('.js-submit-disable.is-disabled').removeClass('is-disabled').removeAttr('disabled');
    };
    
    module.exports = ButtonComponent;
    
    },{"jquery":416}],2:[function(require,module,exports){
    'use strict';
    
    module.exports.drawCallback = function () {
        var pagination = $(this).closest('.dataTables_wrapper').find('.dataTables_paginate'),
            paginationNumbers = void 0;
    
        // Only show pagination when needed
        pagination.toggle(this.api().page.info().pages > 1);
    
        // Make pagination links appear as buttons to AT
        pagination.find('.paginate_button').attr('role', 'button');
    
        // Add aria-current to current page number
        pagination.find('.paginate_button.current').attr('aria-current', 'true');
    
        // Remove disable links
        pagination.find('.paginate_button.disabled').addClass('u-display-none');
    
        // Add aria-labels to numbered links
        paginationNumbers = pagination.find('.paginate_button:not(.first, .previous, .next, .last)');
        paginationNumbers.each(function () {
            var $numberLink = $(this);
            $numberLink.attr('aria-label', 'Page ' + $numberLink.text());
        });
    };
    
    },{}],3:[function(require,module,exports){
    'use strict';
    
    module.exports.initComplete = function () {
        var pagination = $(this).closest('.dataTables_wrapper').find('.dataTables_paginate');
    
        if (this.api().page.info().pages > 1) {
            pagination.wrap('<nav aria-label="Table pagination"></nav>');
        }
    };
    
    },{}],4:[function(require,module,exports){
    'use strict';
    
    var $ = require('jquery');
    
    function DisableUiComponent(html) {
        this.$html = html;
    }
    
    function preventDefaultAndStopPropagation(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    
    DisableUiComponent.prototype.init = function () {
        var component = this;
    
        component.disable(component.$html.find('[data-disable-ui="true"]'));
    };
    
    DisableUiComponent.prototype.disable = function (target) {
        var FORM_ELEMENTS = 'button:not(.disabled), input:not(.disabled), select:not(.disabled)',
            LINK_ELEMENTS = 'a:not(.disabled)',
            LABEL_ELEMENTS = 'label';
    
        target.each(function () {
            var $this = $(this);
    
            // Disable form elements
            $this.find(FORM_ELEMENTS).on('click', preventDefaultAndStopPropagation).addClass('disabled').prop('disabled', true);
    
            // Disable labels
            $this.find(LABEL_ELEMENTS).addClass('u-cursor-not-allowed');
    
            // Disable links (uses .js-disable as any existing disabled)
            $this.find(LINK_ELEMENTS).on('click', preventDefaultAndStopPropagation).addClass('js-disabled u-cursor-not-allowed').attr('aria-disabled', 'true').attr('tabindex', '-1');
    
            // Wrap with disabled wrapper to visually disable
            $this.wrap('<div class="u-ui-disabled" aria-disabled="true"></div>');
        });
    };
    
    DisableUiComponent.prototype.enable = function (target) {
        var FORM_ELEMENTS = 'button.disabled, input.disabled, select.disabled',
            LINK_ELEMENTS = 'a.js-disabled',
            LABEL_ELEMENTS = 'label';
    
        target.each(function () {
            var $this = $(this);
    
            // Remove attribute used to disable a UI on load
            $this.removeAttr('data-disable-ui aria-disabled');
    
            // Enable form elements
            $this.find(FORM_ELEMENTS).off('click', preventDefaultAndStopPropagation).removeClass('disabled').prop('disabled', false);
    
            // Enable labels
            $this.find(LABEL_ELEMENTS).removeClass('u-cursor-not-allowed');
    
            // Enable links
            $this.find(LINK_ELEMENTS).off('click', preventDefaultAndStopPropagation).removeClass('js-disabled u-cursor-not-allowed').removeAttr('aria-disabled').removeAttr('tabindex');
    
            // Remove wrapper which provides visually disabled styling
            if ($this.parent().hasClass('u-ui-disabled')) {
                $this.unwrap();
            }
        });
    };
    
    module.exports = DisableUiComponent;
    
    },{"jquery":416}],5:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZone = function () {
        /**
         * DropZone
         * @param {Element} node
         * @param {Object} options
         * @param {DropZoneValidatorDispatcher} validator
         * @param {DropZoneEventManager} eventManager
         * @param {DropZoneIdleTimer} idleTimer
         * @param {DropZoneFileManager} fileManager
         * @param {DropZoneCallbackManager} callbackManager
         */
        function DropZone(node, options, validator, eventManager, idleTimer, fileManager, callbackManager) {
            _classCallCheck(this, DropZone);
    
            this.validator = validator;
            this.eventManager = eventManager;
            this.idleTimer = idleTimer;
            this.fileManager = fileManager;
            this.callbackManager = callbackManager;
            this.node = window.$ && node instanceof window.$ ? node[0] : node;
            this.options = options;
            this.id = this.options.dropZoneId;
            // cache methods with context
            this.handleDropWithContext = this.handleDrop.bind(this);
            this.handleWindowEnterWithContext = this.handleWindowEnter.bind(this);
            this.handleWindowLeaveWithContext = this.handleWindowLeave.bind(this);
            // a flag for determining support
            this.supportsDataTransfer = true;
            // setup files and size storage
            this.files = [];
            this.size = 0;
            this.enabled = true;
        }
    
        /**
         * Initialise plugin
         */
    
    
        _createClass(DropZone, [{
            key: 'init',
            value: function init() {
                // prevent this for all environments as the default behaviour can be frustrating
                this.eventManager.add(window, 'drop', this.eventManager.preventer);
                // add events for environments that support data transfer items
                if (this.options.supported) {
                    this.windowActive = false;
                    this.dropZoneActive = false;
                    // prevent
                    this.eventManager.add(window, 'drag', this.eventManager.preventer);
                    this.eventManager.add(window, 'dragstart', this.eventManager.preventer);
                    this.eventManager.add(window, 'dragend', this.eventManager.preventer);
                    this.eventManager.add(window, 'dragover', this.eventManager.preventer);
                    this.eventManager.add(window, 'dragenter', this.eventManager.preventer);
                    this.eventManager.add(window, 'dragleave', this.eventManager.preventer);
                    // interactions
                    this.eventManager.add(window, 'dragenter', this.handleWindowEnterWithContext);
                    this.eventManager.add(window, 'dragleave', this.handleWindowLeaveWithContext);
                    this.eventManager.add(window, 'drop', this.handleDropWithContext);
    
                    // attempt to handle missed callbacks
                    // mouseout has proven to be more reliable than dragleave
                    this.eventManager.add(document, 'mouseout', this.idleTimer.start.bind(this, this.forceWindowLeave.bind(this)));
                }
            }
    
            /**
             * Handle drop event
             * @param  {Event} event
             */
    
        }, {
            key: 'handleDrop',
            value: function handleDrop(event) {
                var files = event.dataTransfer.items || event.dataTransfer.files;
    
                if (this.enabled) {
                    // determine where the drop has taken place
                    // dropped on the DropZone
                    if (this.windowActive && this.dropZoneActive) {
                        this.addFiles(files);
                        // dropped on the window
                    } else if (this.windowActive && !this.dropZoneActive) {
                        this.callbackManager.create(this.options.windowDrop, this, { files: this.files });
                    }
    
                    // reset DropZone state
                    this.windowActive = false;
                    this.dropZoneActive = false;
                }
            }
    
            /**
             * Validate and add files to the DropZone
             * @param {Array} files
             * @param {Object} meta
             */
    
        }, {
            key: 'addFiles',
            value: function addFiles(files) {
                var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
                var _validator$validate = this.validator.validate(files, this.files.length, this.size),
                    valid = _validator$validate.valid,
                    text = _validator$validate.text;
    
                var processedFiles = [];
    
                for (var i = 0; i < files.length; i++) {
                    var file = files[i].getAsFile ? files[i].getAsFile() : files[i];
                    var id = this.files.length + i;
    
                    // increment size store
                    this.size += file.size;
                    // process file
                    processedFiles.push(this.fileManager.createFileObject(file, id, meta));
                }
    
                if (valid) {
                    // add processed files to file store
                    this.files = [].concat(_toConsumableArray(this.files), processedFiles);
                }
    
                // fire dropped callback
                this.callbackManager.create(this.options.dropZoneDrop, this, { files: processedFiles, valid: valid, text: text });
            }
    
            /**
             * Determine if file is on window
             * @param {number} x
             * @param {number} y
             * @returns {boolean|Element}
             */
    
        }, {
            key: 'fileOnWindow',
            value: function fileOnWindow(x, y) {
                var offWindow = x === 0 && y === 0;
                return !offWindow && document.elementFromPoint(x, y);
            }
    
            /**
             * Force window leave
             * @param {Event} event
             */
    
        }, {
            key: 'forceWindowLeave',
            value: function forceWindowLeave(event) {
                var active = this.windowActive || this.dropZoneActive;
    
                if (active && !this.fileOnWindow(event.clientX, event.clientY)) {
                    this.handleWindowLeave(event, true);
                }
            }
    
            /**
             * Handle a file dragged into the window
             * @param {Event} event
             */
    
        }, {
            key: 'handleWindowEnter',
            value: function handleWindowEnter(event) {
                var onWindow = this.fileOnWindow(event.clientX, event.clientY);
                var onDropZone = this.node.contains(onWindow);
                var files = event.dataTransfer.items || event.dataTransfer.files;
    
                // clear idle timer
                this.idleTimer.clear();
    
                // if we are unable to get a length from the files we know data transfer
                // isn't supported, so we'll set this flag to use later
                if (!files.length) {
                    this.supportsDataTransfer = false;
                }
    
                if (onWindow && !this.windowActive && this.enabled) {
                    // handle files on window
                    var _validator$validate2 = this.validator.validate(files, this.files.length, this.size),
                        valid = _validator$validate2.valid,
                        text = _validator$validate2.text;
    
                    this.windowActive = true;
                    this.callbackManager.create(this.options.windowEnter, this, { valid: valid, text: text });
                }
    
                if (onDropZone && !this.dropZoneActive && this.enabled) {
                    // handle files on DropZone
                    this.handleDropZoneEnter(files);
                }
            }
    
            /**
             * Handle a file being dragged off of the window
             * @param {Event} event
             * @param {Boolean} force
             */
    
        }, {
            key: 'handleWindowLeave',
            value: function handleWindowLeave(event) {
                var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    
                var onDropZone = this.node.contains(document.elementFromPoint(event.clientX, event.clientY));
                var onWindow = this.fileOnWindow(event.clientX, event.clientY);
                var files = null;
    
                // if we are forcing this method, there is a good chance we do not have dataTransfer items
                if (!force) {
                    files = event.dataTransfer.items || event.dataTransfer.files;
                }
    
                if (force || !onWindow) {
                    this.windowActive = false;
                    this.dropZoneActive = false;
                    this.idleTimer.clear();
                    this.callbackManager.create(this.options.windowLeave, this);
                } else if (!onDropZone && this.dropZoneActive) {
                    this.handleDropZoneLeave(files);
                }
            }
    
            /**
             * Handle drag entering the DropZone
             * @param {Array} files
             */
    
        }, {
            key: 'handleDropZoneEnter',
            value: function handleDropZoneEnter(files) {
                var _validator$validate3 = this.validator.validate(files, this.files.length, this.size),
                    valid = _validator$validate3.valid,
                    text = _validator$validate3.text;
    
                this.idleTimer.clear();
                this.dropZoneActive = true;
                this.callbackManager.create(this.options.dropZoneEnter, this, { valid: valid, text: text });
            }
    
            /**
             * Handle drag leaving the DropZone
             * @param {Array} files
             */
    
        }, {
            key: 'handleDropZoneLeave',
            value: function handleDropZoneLeave(files) {
                var _validator$validate4 = this.validator.validate(files, this.files.length, this.size),
                    valid = _validator$validate4.valid,
                    text = _validator$validate4.text;
    
                this.idleTimer.clear();
                this.dropZoneActive = false;
                this.callbackManager.create(this.options.dropZoneLeave, this, { valid: valid, text: text });
            }
    
            /**
             * Return all files in the store or a file at a specified index
             * @return {Array} files
             */
    
        }, {
            key: 'getFiles',
            value: function getFiles() {
                return this.files;
            }
    
            /**
             * Return a file at an index
             * @param {number} index
             * @returns {Object} file
             */
    
        }, {
            key: 'getFile',
            value: function getFile(index) {
                return this.files[index];
            }
    
            /**
             * Return total size of files on the DropZone
             * @return {Number}
             */
    
        }, {
            key: 'getSize',
            value: function getSize() {
                return this.size;
            }
    
            /**
             * Remove a file from the store using it's ID
             * @param {number} id
             */
    
        }, {
            key: 'removeFile',
            value: function removeFile(id) {
                var _this = this;
    
                this.files = this.files.filter(function (file) {
                    if (file.id === id) {
                        _this.size -= file.raw.size;
                    } else {
                        return file;
                    }
                });
    
                this.callbackManager.create(this.options.fileRemoved, this);
            }
    
            /**
             * Reset
             * - Remove any events attached by DropZone
             * - re-initialise default values, and event handlers
             */
    
        }, {
            key: 'reset',
            value: function reset() {
                this.files = [];
                this.size = 0;
                this.eventManager.removeAll();
                this.init();
            }
    
            /**
             * Get DropZone ID
             * @returns {number}
             */
    
        }, {
            key: 'getDropZoneId',
            value: function getDropZoneId() {
                return this.id;
            }
    
            /**
             * Get dataTransfer support
             * @returns {boolean}
             */
    
        }, {
            key: 'getSupportsDataTransfer',
            value: function getSupportsDataTransfer() {
                return this.supportsDataTransfer;
            }
    
            /**
             * Enable DropZoneComponent
             */
    
        }, {
            key: 'enable',
            value: function enable() {
                this.enabled = true;
            }
    
            /**
             * Disable DropZoneComponent
             */
    
        }, {
            key: 'disable',
            value: function disable() {
                this.enabled = false;
            }
        }]);
    
        return DropZone;
    }();
    
    exports.default = DropZone;
    
    },{}],6:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneBodyClassManager = function () {
        function DropZoneBodyClassManager() {
            _classCallCheck(this, DropZoneBodyClassManager);
        }
    
        _createClass(DropZoneBodyClassManager, [{
            key: 'update',
    
            /**
             * Update body dropZone class state
             * @param {Element} body
             * @param {Array} classNames
             */
            value: function update(body) {
                var classNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    
                var cleanBodyClass = body.className.replace(/dropzone-[a-zA-Z0-9\-]+/g, '').trim();
    
                body.className = classNames.length ? cleanBodyClass + ' ' + classNames.join(' ') : cleanBodyClass;
            }
        }]);
    
        return DropZoneBodyClassManager;
    }();
    
    module.exports = DropZoneBodyClassManager;
    
    },{}],7:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _DropZoneBrowseNodeManager = require('./DropZoneBrowseNodeManager');
    
    var _DropZoneBrowseNodeManager2 = _interopRequireDefault(_DropZoneBrowseNodeManager);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneBrowseNodeFactory = function () {
        function DropZoneBrowseNodeFactory() {
            _classCallCheck(this, DropZoneBrowseNodeFactory);
        }
    
        _createClass(DropZoneBrowseNodeFactory, null, [{
            key: 'create',
    
            /**
             * Create a Browse Node manager instance
             * @param {Element} node
             * @returns {DropZoneBrowseNodeManager}
             */
            value: function create(node) {
                return new _DropZoneBrowseNodeManager2.default(node);
            }
        }]);
    
        return DropZoneBrowseNodeFactory;
    }();
    
    module.exports = DropZoneBrowseNodeFactory;
    
    },{"./DropZoneBrowseNodeManager":8}],8:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneBrowseNodeManager = function () {
        function DropZoneBrowseNodeManager(node) {
            _classCallCheck(this, DropZoneBrowseNodeManager);
    
            this.node = node;
            this.events = [];
            // We always want to prevent default whether the node is enabled or not
            if (node) {
                this.node.addEventListener('click', function (event) {
                    event.preventDefault();
                });
            }
        }
    
        /**
         * Update node reference
         * @param {Element} node
         */
    
    
        _createClass(DropZoneBrowseNodeManager, [{
            key: 'update',
            value: function update(node) {
                this.node = node;
                this.node.addEventListener('click', function (event) {
                    event.preventDefault();
                });
            }
    
            /**
             * Return node
             * @returns {Element}
             */
    
        }, {
            key: 'getNode',
            value: function getNode() {
                return this.node;
            }
    
            /**
             * Add an event listener to node
             * @param {String} event
             * @param {Function} handler
             */
    
        }, {
            key: 'addEvent',
            value: function addEvent(event, handler) {
                this.events.push({ event: event, handler: handler, active: true });
                this.node.addEventListener(event, handler);
            }
    
            /**
             * Remove attached events
             */
    
        }, {
            key: 'disableEvents',
            value: function disableEvents() {
                var _this = this;
    
                this.events = this.events.map(function (event) {
                    _this.node.removeEventListener(event.event, event.handler);
                    return { event: event.event, handler: event.handler, active: false };
                });
            }
    
            /**
             * Re-attach events
             */
    
        }, {
            key: 'enableEvents',
            value: function enableEvents() {
                var _this2 = this;
    
                this.events = this.events.map(function (event) {
                    _this2.node.addEventListener(event.event, event.handler);
                    return { event: event.event, handler: event.handler, active: true };
                });
            }
        }]);
    
        return DropZoneBrowseNodeManager;
    }();
    
    module.exports = DropZoneBrowseNodeManager;
    
    },{}],9:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _lodash = require('lodash');
    
    var _lodash2 = _interopRequireDefault(_lodash);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneCallbackManager = function () {
        function DropZoneCallbackManager() {
            _classCallCheck(this, DropZoneCallbackManager);
        }
    
        _createClass(DropZoneCallbackManager, [{
            key: 'create',
    
            /**
             * Check for a callback, if it exists, call it
             * @param {Function} callback
             * @param {Object} instance
             * @param {Object} data
             */
            value: function create(callback, instance) {
                var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    
                data = _lodash2.default.extend({}, data, { instance: instance });
    
                if (typeof callback === 'function') {
                    callback(data);
                }
            }
        }]);
    
        return DropZoneCallbackManager;
    }();
    
    module.exports = DropZoneCallbackManager;
    
    },{"lodash":418}],10:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _lodash = require('lodash');
    
    var _lodash2 = _interopRequireDefault(_lodash);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneComponent = function () {
        /**
         * DropZoneComponent
         * @param {Element} body
         * @param {string} selector
         * @param {DropZoneInstanceManager} instanceManager
         * @param {DropZoneOptionsManager} optionsManager
         * @param {DropZoneComponentUtils} utils
         * @param {DropZoneComponentValidationManager} validationManager
         * @param {DropZoneBodyClassManager} classManager
         */
        function DropZoneComponent(body, selector, instanceManager, optionsManager, utils, validationManager, classManager) {
            _classCallCheck(this, DropZoneComponent);
    
            this.body = body;
            this.selector = selector;
            this.instanceManager = instanceManager;
            this.optionsManager = optionsManager;
            this.utils = utils;
            this.validationManager = validationManager;
            this.classManager = classManager;
        }
    
        /**
         * Initiate DropZone component, this wraps and defines options for
         * multiple instances of DropZone
         */
    
    
        _createClass(DropZoneComponent, [{
            key: 'init',
            value: function init() {
                var _this = this;
    
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    
                var defaults = {
                    // values
                    maxFiles: 5,
                    maxSize: 3e+8, // 300mb
                    idleTimerDuration: 1000,
                    // helper html
                    idleHtml: 'your files here or <button class="dropzone__browse btn" aria-label="Browse files to upload">Browse Files</button>',
                    windowEnterHtml: 'Drag your files here',
                    dropZoneEnterHtml: 'Drop your files here',
                    fileRemoveLabel: 'Remove',
                    // passive
                    passive: false,
                    // support
                    supported: true,
                    // input
                    inputNodeId: null,
                    showInputNode: false,
                    // file node config
                    fileNodeDesc: true,
                    fileNodeName: true,
                    fileNodeSize: true,
                    fileNodeType: true,
                    // node classes
                    nodeClasses: {
                        info: 'dropzone__info',
                        wrapper: 'dropzone__file-wrapper',
                        validation: 'dropzone__validation',
                        help: 'dropzone__help',
                        browse: 'dropzone__browse',
                        inner: 'dropzone__file-inner',
                        close: 'dropzone__close',
                        error: 'dropzone__error',
                        file: 'dropzone__file',
                        meta: 'dropzone__meta',
                        name: 'dropzone__name',
                        description: 'dropzone__description',
                        type: 'dropzone__type',
                        size: 'dropzone__size',
                        thumbnail: 'dropzone__thumbnail'
                    },
                    // interaction classes
                    interactionClasses: {
                        windowEnter: 'dropzone-window-active',
                        dropZoneEnter: 'dropzone-dropzone-active',
                        dropZoneSuccess: 'dropzone-success',
                        dropZoneError: 'dropzone-error'
                    }
                };
    
                var callbacks = {
                    windowEnter: this.handleWindowEnter.bind(this),
                    windowLeave: this.handleWindowLeave.bind(this),
                    dropZoneEnter: this.handleDropZoneEnter.bind(this),
                    dropZoneLeave: this.handleDropzoneLeave.bind(this),
                    dropZoneDrop: this.handleDropZoneDrop.bind(this),
                    windowDrop: this.handleWindowDrop.bind(this),
                    fileRemoved: this.handleFileRemoved.bind(this)
                };
    
                // get all DropZone elements
                this.dropZoneInstances = [].slice.call(this.body.querySelectorAll(this.selector));
    
                // build options from options passed to the constructor and the defaults
                this.optionsManager.buildComponentOptions(defaults, options, callbacks);
    
                // add DropZone(s) to instance manager
                this.dropZoneInstances.forEach(function (node) {
                    // create and store DropZone instance
                    _this.instanceManager.addInstance(node, _this.optionsManager);
                });
    
                // iterate over our DropZoneInstanceManagerInstances to process any input nodes & update help state
                this.instanceManager.getInstance().forEach(function (instance) {
                    if (instance.input && _this.instanceManager.getSupported(instance.id)) {
                        _this.processInputNode(instance.input, instance.id, instance.options.showInputNode);
    
                        if (instance.browse) {
                            instance.browse.addEvent('click', _this.handleBrowseNodeClick.bind(_this, instance.input));
                        }
                    }
                });
    
                // bind this here, so we have a ref
                this.removeFile = this.removeFile.bind(this);
            }
    
            /**
             * If an input node ID has been passed in, we'll take care of linking the DropZone
             * instance to this node
             * @param {Element} input
             * @param {number} id
             * @param {boolean} show
             */
    
        }, {
            key: 'processInputNode',
            value: function processInputNode(input, id, show) {
                var _this2 = this;
    
                // for now these handlers can stay anonymous, the likely hood of wanting to disable a DropZone
                // at some point in a session seems unlikely. famous. last. words.
                input.addEventListener('change', function () {
                    var files = input.files;
    
                    // we'll add a persist property to our file objects, this can be used to
                    // persist the front-end validation, which is essential when using an
                    // associated file input
                    if (input.value) {
                        _this2.instanceManager.addFiles(files, id, { persist: true });
                    }
    
                    // reset input node value, this will ensure our change event
                    // fires each time we use the browse files functionality - even
                    // if we try to add an identical value
                    input.value = '';
                    input.type = '';
                    input.type = 'file';
                });
    
                // visually hide input - this should ideally be done in the CSS also to prevent a
                // flash on load (with some consideration for non javascript users)
                if (!show) {
                    input.style.display = 'none';
                }
            }
    
            /**
             * Handle browse node click
             * @param {Element} input
             */
    
        }, {
            key: 'handleBrowseNodeClick',
            value: function handleBrowseNodeClick(input) {
                // trigger a synthetic click on the input node which will activate the
                // native Browse Files interaction
                input.click();
            }
    
            /**
             * Update DropZone info node innerHTML
             * @param {number} id
             * @param {String} string
             */
    
        }, {
            key: 'updateInfoState',
            value: function updateInfoState(id, string) {
                var _instanceManager$getI = this.instanceManager.getInstance(id),
                    info = _instanceManager$getI.info,
                    node = _instanceManager$getI.node;
    
                var options = this.optionsManager.getInstanceOptions(id);
    
                if (info) {
                    info.innerHTML = string;
    
                    var browse = node.querySelector('.' + options.nodeClasses.browse);
    
                    if (browse) {
                        this.instanceManager.updateBrowseNode(id, browse);
                    }
                }
            }
    
            /**
             * Update DropZone Html
             * - remove validation node if we have one
             * - add / remove files Html
             * - remove wrapper if we have no files
             * @param {number} id
             */
    
        }, {
            key: 'updateDropZoneFiles',
            value: function updateDropZoneFiles(id) {
                var _this3 = this;
    
                var _instanceManager$getI2 = this.instanceManager.getInstance(id),
                    node = _instanceManager$getI2.node;
    
                var options = this.optionsManager.getInstanceOptions(id);
                var files = this.instanceManager.getFiles(id);
                var wrapper = node.querySelector('.' + options.nodeClasses.wrapper);
                var fileNodeString = '';
    
                // if we've got a drop we know we don't have any errors
                // clear any previous validation messages
                this.validationManager.clear(node, options.nodeClasses.validation);
    
                // if there are no files we'll remove the wrapper
                if (!files.length) {
                    if (wrapper) {
                        wrapper.parentNode.removeChild(wrapper);
                    }
    
                    return;
                }
    
                // if we do not already have a wrapper, create one
                if (!wrapper) {
                    wrapper = document.createElement('div');
                    wrapper.className = options.nodeClasses.wrapper;
                    node.appendChild(wrapper);
                }
    
                // create file html string
                files.forEach(function (file) {
                    fileNodeString += _this3.utils.createFileNode(file, options);
                });
    
                // update wrapper html
                wrapper.innerHTML = fileNodeString;
                [].slice.call(wrapper.querySelectorAll('.' + options.nodeClasses.close)).forEach(function (closeButton) {
                    closeButton.addEventListener('click', _this3.removeFile);
                });
            }
    
            /**
             * Throw a DropZone error, useful as a public method for manually triggering DropZone errors
             * example: throwing an error returned as a response from a server
             * @param {String} error
             * @param {number} id
             */
    
        }, {
            key: 'throwValidationError',
            value: function throwValidationError(error, id) {
                var _instanceManager$getI3 = this.instanceManager.getInstance(parseInt(id)),
                    node = _instanceManager$getI3.node,
                    info = _instanceManager$getI3.info;
    
                var options = this.optionsManager.getInstanceOptions(id);
    
                this.validationManager.update(error, node, info, options.nodeClasses.validation, options.nodeClasses.error, options.passive);
    
                this.updateInfoState(id, options.idleHtml);
            }
    
            /**
             * Remove files from DropZone instances
             * @param  {Event} event
             */
    
        }, {
            key: 'removeFile',
            value: function removeFile(event) {
                var file = null;
                var dropZone = null;
                var path = this.utils.getEventPath(event.target);
    
                event.preventDefault();
    
                // grab the file id and DropZone id, this is necessary in the
                // albeit unlikely event we have multiple DropZone instances
                path.forEach(function (node) {
                    if (file === null) {
                        var attr = node.getAttribute('data-dropzone-file');
    
                        file = attr ? parseInt(attr) : null;
                    }
    
                    if (dropZone === null) {
                        var _attr = node.getAttribute('data-dropzone-id');
    
                        dropZone = _attr ? parseInt(_attr) : null;
                    }
                });
    
                if (dropZone !== null && file !== null) {
                    this.instanceManager.removeFile(dropZone, file);
                    this.updateDropZoneFiles(dropZone);
                }
            }
    
            /**
             * Handle DropZone windowEnter callback
             * @param {Boolean} valid
             * @param {String} text
             * @param {DropZone} instance
             */
    
        }, {
            key: 'handleWindowEnter',
            value: function handleWindowEnter(_ref) {
                var valid = _ref.valid,
                    text = _ref.text,
                    instance = _ref.instance;
    
                var id = instance.getDropZoneId();
    
                if (valid) {
                    this.updateInfoState(id, instance.options.windowEnterHtml);
                    this.classManager.update(this.body, [instance.options.interactionClasses.windowEnter]);
                } else {
                    this.throwValidationError(text, id);
                    this.classManager.update(this.body, [instance.options.interactionClasses.windowEnter, instance.options.interactionClasses.dropZoneError]);
                }
    
                if (instance.options.customWindowEnter && typeof instance.options.customWindowEnter === 'function') {
                    instance.options.customWindowEnter.apply(this, [].slice.call(arguments));
                }
            }
    
            /**
             * Handle DropZone windowLeave callback
             * @param {DropZone} instance
             */
    
        }, {
            key: 'handleWindowLeave',
            value: function handleWindowLeave(_ref2) {
                var instance = _ref2.instance;
    
                var id = instance.getDropZoneId();
    
                // update helper text
                this.updateInfoState(id, instance.options.idleHtml);
    
                // reset body class
                this.classManager.update(this.body);
    
                // update validation if there was any
                this.validationManager.clear(instance.node, instance.options.nodeClasses.validation);
    
                // call any additional callbacks passed in via options
                if (instance.options.customWindowLeave && typeof instance.options.customWindowLeave === 'function') {
                    instance.options.customWindowLeave.apply(this, [].slice.call(arguments));
                }
            }
    
            /**
             * Handle DropZone dropZoneEnter callback
             * @param {Boolean} valid
             * @param {String} text
             * @param {DropZone} instance
             */
    
        }, {
            key: 'handleDropZoneEnter',
            value: function handleDropZoneEnter(_ref3) {
                var valid = _ref3.valid,
                    text = _ref3.text,
                    instance = _ref3.instance;
    
                var id = instance.getDropZoneId();
    
                // update helper text
                if (valid) {
                    this.updateInfoState(id, instance.options.dropZoneEnterHtml);
                    this.classManager.update(this.body, [instance.options.interactionClasses.windowEnter, instance.options.interactionClasses.dropZoneEnter]);
                } else {
                    this.throwValidationError(text, id);
                    this.classManager.update(this.body, [instance.options.interactionClasses.windowEnter, instance.options.interactionClasses.dropZoneEnter, instance.options.interactionClasses.dropZoneError]);
                }
    
                // call any additional callbacks passed in via options
                if (instance.options.customDropZoneEnter && typeof instance.options.customDropZoneEnter === 'function') {
                    instance.options.customDropZoneEnter.apply(this, [].slice.call(arguments));
                }
            }
    
            /**
             * Handle DropZone dropZoneLeave callback
             * @param {Boolean} valid
             * @param {String} text
             * @param {DropZone} instance
             */
    
        }, {
            key: 'handleDropzoneLeave',
            value: function handleDropzoneLeave(_ref4) {
                var valid = _ref4.valid,
                    text = _ref4.text,
                    instance = _ref4.instance;
    
                var id = instance.getDropZoneId();
    
                // update helper text
                if (valid) {
                    this.updateInfoState(id, instance.options.windowEnterHtml);
                    this.classManager.update(this.body, [instance.options.interactionClasses.windowEnter]);
                } else {
                    this.throwValidationError(text, id);
                    this.classManager.update(this.body, [instance.options.interactionClasses.windowEnter, instance.options.interactionClasses.dropZoneError]);
                }
    
                // call any additional callbacks passed in via options
                if (instance.options.customDropZoneLeave && typeof instance.options.customDropZoneLeave === 'function') {
                    instance.options.customDropZoneLeave.apply(this, [].slice.call(arguments));
                }
            }
    
            /**
             * Handle DropZone dropZoneEnter callback
             * @param {Array} files
             * @param {Boolean} valid
             * @param {String} text
             * @param {DropZone} instance
             */
    
        }, {
            key: 'handleDropZoneDrop',
            value: function handleDropZoneDrop(_ref5) {
                var files = _ref5.files,
                    valid = _ref5.valid,
                    text = _ref5.text,
                    instance = _ref5.instance;
    
                var id = instance.getDropZoneId();
    
                if (valid) {
                    this.updateDropZoneFiles(id);
                    this.classManager.update(this.body, [instance.options.interactionClasses.dropZoneSuccess]);
                } else {
                    // If a persist property has been set on the file, we will throw a
                    // validation error which will persist once the file is dropped, this
                    // helps us out when we need to throw an error when a user uses an associated
                    // native file input's "browse files"
                    var persist = _lodash2.default.find(files, function (file) {
                        return file.meta.persist;
                    });
    
                    if (!instance.getSupportsDataTransfer() || persist) {
                        this.throwValidationError(text, id);
                    } else {
                        // if we are not persisting validation messages, clear any that are present
                        this.validationManager.clear(instance.node, instance.options.nodeClasses.validation);
                    }
    
                    this.classManager.update(this.body);
                }
    
                // update helper text
                this.updateInfoState(id, instance.options.idleHtml);
    
                // call any additional callbacks passed in via options
                if (instance.options.customDropZoneDrop && typeof instance.options.customDropZoneDrop === 'function') {
                    instance.options.customDropZoneDrop.apply(this, [].slice.call(arguments));
                }
            }
    
            /**
             * Handle DropZone windowDrop callback
             * @param {Array} files
             * @param {DropZone} instance
             */
    
        }, {
            key: 'handleWindowDrop',
            value: function handleWindowDrop(_ref6) {
                var files = _ref6.files,
                    instance = _ref6.instance;
    
                var id = instance.getDropZoneId();
    
                // reset body class
                this.classManager.update(this.body);
    
                // handle dropped files
                this.updateDropZoneFiles(id);
    
                // update helper text
                this.updateInfoState(id, instance.options.idleHtml);
    
                if (instance.getSupportsDataTransfer()) {
                    // clear validation
                    this.validationManager.clear(instance.node, instance.options.nodeClasses.validation);
                }
    
                if (instance.options.customWindowDrop && typeof instance.options.customWindowDrop === 'function') {
                    instance.options.customWindowDrop.apply(this, [].slice.call(arguments));
                }
            }
    
            /**
             * Handle DropZone fileRemoved callback
             * @param {DropZone} instance
             */
    
        }, {
            key: 'handleFileRemoved',
            value: function handleFileRemoved(_ref7) {
                var instance = _ref7.instance;
    
                // reset body class
                this.classManager.update(this.body);
    
                // call any additional callbacks passed in via options
                if (instance.options.customFileRemoved && typeof instance.options.customFileRemoved === 'function') {
                    instance.options.customFileRemoved.apply(this, [].slice.call(arguments));
                }
            }
    
            /**
             * Validate files against a DropZone instance
             * @param {FileList} files
             * @param {number} id
             * @returns {Object} validation object
             */
    
        }, {
            key: 'validateFiles',
            value: function validateFiles(files, id) {
                return this.instanceManager.validateFiles(files, id);
            }
    
            /**
             * Reset all / selected DropZones
             * @param {number} id
             */
    
        }, {
            key: 'reset',
            value: function reset() {
                var _this4 = this;
    
                var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
    
                if (id < 0) {
                    this.instanceManager.getInstance().forEach(function (instance) {
                        _this4.instanceManager.resetInstance(instance.id);
                        _this4.updateDropZoneFiles(instance.id);
                        _this4.updateInfoState(instance.id, _this4.optionsManager.getInstanceOption(instance.id, 'idleHtml'));
                    });
                } else {
                    this.instanceManager.resetInstance(id);
                    this.updateDropZoneFiles(id);
                    this.updateInfoState(id, this.optionsManager.getInstanceOption(id, 'idleHtml'));
                }
    
                this.classManager.update(this.body);
            }
    
            /**
             * Add files to DropZone instance
             * @param {FileList|Array} files
             * @param {number} id
             * @param {Object} meta
             */
    
        }, {
            key: 'addFilesToDropZone',
            value: function addFilesToDropZone(files, id) {
                var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    
                this.instanceManager.addFiles(files, id, meta);
            }
    
            /**
             * Get all files from DropZone instances
             * @param {number} id
             * @returns {{valid: Boolean, text: String, files: Array}}
             */
    
        }, {
            key: 'getFilesFromDropZone',
            value: function getFilesFromDropZone(id) {
                var files = this.instanceManager.getFiles(id);
    
                var _instanceManager$vali = this.instanceManager.validateFiles(files.map(function (file) {
                    return file.raw;
                }), id, true),
                    valid = _instanceManager$vali.valid,
                    text = _instanceManager$vali.text;
    
                // throw an internal validation error
    
    
                if (!valid) {
                    this.throwValidationError(text, id);
                }
    
                // return a files collection object
                return { valid: valid, text: text, files: files };
            }
    
            /**
             * Get instance idleHtml
             * @param {number} id
             * @returns {string}
             */
    
        }, {
            key: 'getInstanceIdleHtml',
            value: function getInstanceIdleHtml(id) {
                return this.optionsManager.getInstanceOption(id, 'idleHtml');
            }
    
            /**
             * Get instance windowEnterHtml
             * @param {number} id
             * @returns {string}
             */
    
        }, {
            key: 'getInstanceWindowEnterHtml',
            value: function getInstanceWindowEnterHtml(id) {
                return this.optionsManager.getInstanceOption(id, 'windowEnterHtml');
            }
    
            /**
             * Get instance dropZoneEnterHtml
             * @param {number} id
             * @returns {string}
             */
    
        }, {
            key: 'getInstanceDropZoneEnterHtml',
            value: function getInstanceDropZoneEnterHtml(id) {
                return this.optionsManager.getInstanceOption(id, 'dropZoneEnterHtml');
            }
    
            /**
             * Get instance support
             * @param {number} id
             * @returns {boolean}
             */
    
        }, {
            key: 'getSupportsDataTransferItems',
            value: function getSupportsDataTransferItems(id) {
                return this.instanceManager.getSupportsDataTransfer(id);
            }
    
            /**
             * Enable DropZoneComponent
             * @param {Number} id
             */
    
        }, {
            key: 'enable',
            value: function enable(id) {
                this.instanceManager.enableInstance(id);
            }
    
            /**
             * Disable DropZoneComponent
             * @param {Number} id
             */
    
        }, {
            key: 'disable',
            value: function disable(id) {
                this.instanceManager.disableInstance(id);
            }
    
            /**
             * Get instance Browse Files node
             * @param {Number} id
             */
    
        }, {
            key: 'getBrowseNode',
            value: function getBrowseNode(id) {
                var _instanceManager$getI4 = this.instanceManager.getInstance(id),
                    browse = _instanceManager$getI4.browse;
    
                return browse.getNode();
            }
    
            /**
             * Disable browse node functionality
             * @param {Number} id
             */
    
        }, {
            key: 'disableBrowseNode',
            value: function disableBrowseNode(id) {
                this.instanceManager.disableBrowseNode(id);
            }
    
            /**
             * Enable browse node functionality
             * @param {Number} id
             */
    
        }, {
            key: 'enableBrowseNode',
            value: function enableBrowseNode(id) {
                this.instanceManager.enableBrowseNode(id);
            }
        }]);
    
        return DropZoneComponent;
    }();
    
    module.exports = DropZoneComponent;
    
    },{"lodash":418}],11:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _DropZoneComponent = require('./DropZoneComponent');
    
    var _DropZoneComponent2 = _interopRequireDefault(_DropZoneComponent);
    
    var _DropZoneInstanceManager = require('./DropZoneInstanceManager');
    
    var _DropZoneInstanceManager2 = _interopRequireDefault(_DropZoneInstanceManager);
    
    var _DropZoneFactory = require('./DropZoneFactory');
    
    var _DropZoneFactory2 = _interopRequireDefault(_DropZoneFactory);
    
    var _DropZoneOptionsManager = require('./DropZoneOptionsManager');
    
    var _DropZoneOptionsManager2 = _interopRequireDefault(_DropZoneOptionsManager);
    
    var _DropZoneComponentUtils = require('./DropZoneComponentUtils');
    
    var _DropZoneComponentUtils2 = _interopRequireDefault(_DropZoneComponentUtils);
    
    var _DropZoneComponentValidationManager = require('./DropZoneComponentValidationManager');
    
    var _DropZoneComponentValidationManager2 = _interopRequireDefault(_DropZoneComponentValidationManager);
    
    var _DropZoneBodyClassManager = require('./DropZoneBodyClassManager');
    
    var _DropZoneBodyClassManager2 = _interopRequireDefault(_DropZoneBodyClassManager);
    
    var _MimeTyper = require('../libs/MimeTyper');
    
    var _MimeTyper2 = _interopRequireDefault(_MimeTyper);
    
    var _DropZoneBrowseNodeFactory = require('./DropZoneBrowseNodeFactory');
    
    var _DropZoneBrowseNodeFactory2 = _interopRequireDefault(_DropZoneBrowseNodeFactory);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneComponentFactory = function () {
        function DropZoneComponentFactory() {
            _classCallCheck(this, DropZoneComponentFactory);
        }
    
        _createClass(DropZoneComponentFactory, null, [{
            key: 'create',
    
            /**
             * Create an instance of the DropZoneComponent with it's dependencies
             * @param {Element} html
             * @param {String} selector
             * @returns {DropZoneComponent}
             */
            value: function create(html, selector) {
                var mimeTyper = new _MimeTyper2.default(),
                    utilsManager = new _DropZoneComponentUtils2.default(mimeTyper);
    
                return new _DropZoneComponent2.default(html, selector, new _DropZoneInstanceManager2.default(html, _DropZoneFactory2.default, _DropZoneBrowseNodeFactory2.default), new _DropZoneOptionsManager2.default(utilsManager), utilsManager, new _DropZoneComponentValidationManager2.default(), new _DropZoneBodyClassManager2.default());
            }
        }]);
    
        return DropZoneComponentFactory;
    }();
    
    module.exports = DropZoneComponentFactory;
    
    },{"../libs/MimeTyper":58,"./DropZoneBodyClassManager":6,"./DropZoneBrowseNodeFactory":7,"./DropZoneComponent":10,"./DropZoneComponentUtils":12,"./DropZoneComponentValidationManager":13,"./DropZoneFactory":16,"./DropZoneInstanceManager":20,"./DropZoneOptionsManager":21}],12:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneComponentUtils = function () {
        function DropZoneComponentUtils(mimeTyper) {
            _classCallCheck(this, DropZoneComponentUtils);
    
            this.mimeTyper = mimeTyper;
        }
    
        /**
         * Build an options object from a node's attributes
         * @param {Element} node
         */
    
    
        _createClass(DropZoneComponentUtils, [{
            key: 'getOptionsFromAttrs',
            value: function getOptionsFromAttrs(node) {
                var _this = this;
    
                return [].slice.call(node.attributes).reduce(function (attrs, attr) {
                    var name = attr.name;
                    var value = attr.value;
                    // grab value from attributes matching data-dropzone-{option}={value}
    
                    if (name.match(/dropzone/)) {
                        // transform hyphen separated attr to DropZone camelCase option
                        var option = name.replace(/data-dropzone-/, '');
    
                        // split the space separated whitelist into an array
                        if (option === 'whitelist') {
                            value = value.split(' ');
                        }
    
                        // parse bools
                        if (value === 'false') {
                            value = false;
                        } else if (value === 'true') {
                            value = true;
                        }
    
                        // parse numbers
                        switch (option) {
                            case 'max-files':
                            case 'max-size':
                                value = parseInt(value);
                                break;
                        }
    
                        attrs[_this.camelCaseIfy(option)] = value;
                    }
    
                    return attrs;
                }, {});
            }
    
            /**
             * Transform a hyphen separated string to camel case
             * @param  {String} string
             * @return {String}
             */
    
        }, {
            key: 'camelCaseIfy',
            value: function camelCaseIfy(string) {
                return string.split('-').map(function (word, index) {
                    return index ? word[0].toUpperCase() + word.slice(1) : word;
                }).join('');
            }
    
            /**
             * Create DropZone file Html string
             * @param {Object} file
             * @param {Object} options
             * @return {String}
             */
    
        }, {
            key: 'createFileNode',
            value: function createFileNode(file, options) {
                var desc = file.meta.description ? '<p class="' + options.nodeClasses.description + '">' + file.meta.description + '</p>' : '',
                    name = file.name ? '<p class="' + options.nodeClasses.name + '">' + file.name + '</p>' : '',
                    size = file.size ? '<p class="' + options.nodeClasses.size + '">' + file.size + '</p>' : '',
                    type = file.type ? '<p class="' + options.nodeClasses.type + '">' + file.type + '</p>' : '';
    
                var thumb = '<div class="' + options.nodeClasses.thumbnail;
    
                if (file.thumbnail) {
                    // add a thumbnail if DropZone has returned one
                    thumb += ' ' + options.nodeClasses.thumbnail + '--image" style="background-image: url(' + file.thumbnail + ');"';
                } else {
                    // add icon class if we cannot get a file preview
                    thumb += '"><i class="dropzone__file-icon icon icon-' + this.mimeTyper.getIconClass(file.type) + '"></i';
                }
    
                thumb += '></div>';
    
                return ('\n            <div data-dropzone-file="' + file.id + '" class="' + options.nodeClasses.file + '">\n                <div class="' + options.nodeClasses.inner + '">\n                    <button class="btn btn--naked ' + options.nodeClasses.close + '" aria-label="' + options.fileRemoveLabel + ' ' + (file.name ? file.name : '') + '"><i class="icon icon-times-circle"></i></button>\n                    ' + thumb + '\n                    <div class="' + options.nodeClasses.meta + '">\n                        ' + (options.fileNodeName ? name : '') + '\n                        ' + (options.fileNodeDesc ? desc : '') + '\n                        ' + (options.fileNodeSize ? size : '') + '\n                        ' + (options.fileNodeType ? type : '') + '\n                    </div>\n                </div>\n            </div>').replace(/>\s+</g, '><');
            }
    
            /**
             * Polyfill the lack of an event.path for some browsers
             * @param  {Element} target
             * @return {Array}
             */
    
        }, {
            key: 'getEventPath',
            value: function getEventPath(target) {
                var eventPath = [target];
                var node = target;
                // ensure we have an element we can query an attribute on
                while (node.parentNode && node.parentNode.getAttribute) {
                    eventPath.push(node.parentNode);
                    node = node.parentNode;
                }
    
                return eventPath;
            }
        }]);
    
        return DropZoneComponentUtils;
    }();
    
    module.exports = DropZoneComponentUtils;
    
    },{}],13:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneComponentValidation = function () {
        function DropZoneComponentValidation() {
            _classCallCheck(this, DropZoneComponentValidation);
        }
    
        _createClass(DropZoneComponentValidation, [{
            key: 'clear',
    
            /**
             * Remove validation node
             * @param {Element} node
             * @param {String} selector
             */
            value: function clear(node, selector) {
                var validation = node.querySelector('.' + selector);
    
                if (validation) {
                    validation.parentNode.removeChild(validation);
                }
            }
    
            /**
             * Update validation node
             * @param {String} error
             * @param {Element} node
             * @param {Element} info
             * @param {String} validationClass
             * @param {String} errorClass
             * @param {boolean} passive
             */
    
        }, {
            key: 'update',
            value: function update(error, node, info, validationClass, errorClass, passive) {
                var validation = node.querySelector('.' + validationClass);
    
                // if we are in passive mode we're handing this over to the developer installing the plugin
                // they can access validation data by using the filesRejected callback
                if (passive) {
                    return;
                }
    
                var errorNode = '<p class="' + errorClass + '">' + error + '</p>';
    
                // if a validation element doesn't exist, create one
                if (!validation) {
                    validation = document.createElement('div');
                    validation.className = validationClass;
                    info.parentNode.insertBefore(validation, info);
                }
    
                // create error message and update validation
                validation.innerHTML = errorNode;
            }
        }]);
    
        return DropZoneComponentValidation;
    }();
    
    module.exports = DropZoneComponentValidation;
    
    },{}],14:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneErrors = function () {
        /**
         * DropZoneErrors
         * @param {String} whitelist
         * @param {String} maxFiles
         * @param {String} maxSize
         * @param {String} unknown
         * @param {String} empty
         */
        function DropZoneErrors() {
            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                _ref$whitelist = _ref.whitelist,
                whitelist = _ref$whitelist === undefined ? 'Unsupported file type' : _ref$whitelist,
                _ref$maxFiles = _ref.maxFiles,
                maxFiles = _ref$maxFiles === undefined ? 'Maximum number files exceeded' : _ref$maxFiles,
                _ref$maxSize = _ref.maxSize,
                maxSize = _ref$maxSize === undefined ? 'Maximum file size exceeded' : _ref$maxSize,
                _ref$unknown = _ref.unknown,
                unknown = _ref$unknown === undefined ? 'A file type is not recognized' : _ref$unknown,
                _ref$empty = _ref.empty,
                empty = _ref$empty === undefined ? 'A file attached has no size, this could mean it has been removed, please check the file still exists' : _ref$empty;
    
            _classCallCheck(this, DropZoneErrors);
    
            this.whitelistText = whitelist;
            this.maxFilesText = maxFiles;
            this.maxSizeText = maxSize;
            this.unknownText = unknown;
            this.emptyText = empty;
        }
    
        /**
         * Get a file validation error object
         * @param {String} error
         * @returns {Object} error
         */
    
    
        _createClass(DropZoneErrors, [{
            key: 'getFileValidationError',
            value: function getFileValidationError(error) {
                switch (error) {
                    case 'WHITELIST':
                        return {
                            valid: false,
                            code: 'WHITELIST',
                            text: this.whitelistText
                        };
                    case 'MAX_FILES':
                        return {
                            valid: false,
                            code: 'MAX_FILES',
                            text: this.maxFilesText
                        };
                    case 'MAX_SIZE':
                        return {
                            valid: false,
                            code: 'MAX_SIZE',
                            text: this.maxSizeText
                        };
                    case 'UNKNOWN':
                        return {
                            valid: false,
                            code: 'UNKNOWN',
                            text: this.unknownText
                        };
                    case 'EMPTY':
                        return {
                            valid: false,
                            code: 'EMPTY',
                            text: this.emptyText
                        };
                }
            }
        }]);
    
        return DropZoneErrors;
    }();
    
    module.exports = DropZoneErrors;
    
    },{}],15:[function(require,module,exports){
    "use strict";
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneEventManager = function () {
        function DropZoneEventManager() {
            _classCallCheck(this, DropZoneEventManager);
    
            this.pool = [];
        }
    
        /**
         * Attach an event listener to a node and store in eventPool
         * @param {Element} node
         * @param {String} event
         * @param {Function} handler
         */
    
    
        _createClass(DropZoneEventManager, [{
            key: "add",
            value: function add(node, event, handler) {
                this.pool.push({ node: node, event: event, handler: handler });
                node.addEventListener(event, handler);
            }
    
            /**
             * Remove all event listeners and return an empty pool
             */
    
        }, {
            key: "removeAll",
            value: function removeAll() {
                this.pool.forEach(function (item) {
                    var node = item.node,
                        event = item.event,
                        handler = item.handler;
    
    
                    node.removeEventListener(event, handler);
                });
    
                this.pool.length = 0;
            }
    
            /**
             * Prevent default event behaviour & propagation
             * @param  {Event} event
             */
    
        }, {
            key: "preventer",
            value: function preventer(event) {
                event.preventDefault();
            }
        }]);
    
        return DropZoneEventManager;
    }();
    
    module.exports = DropZoneEventManager;
    
    },{}],16:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _DropZoneValidationUtils = require('./DropZoneValidationUtils');
    
    var _DropZoneValidationUtils2 = _interopRequireDefault(_DropZoneValidationUtils);
    
    var _DropZoneErrors = require('./DropZoneErrors');
    
    var _DropZoneErrors2 = _interopRequireDefault(_DropZoneErrors);
    
    var _DropZoneValidatorDispatcher = require('./DropZoneValidatorDispatcher');
    
    var _DropZoneValidatorDispatcher2 = _interopRequireDefault(_DropZoneValidatorDispatcher);
    
    var _DropZoneEventManager = require('./DropZoneEventManager');
    
    var _DropZoneEventManager2 = _interopRequireDefault(_DropZoneEventManager);
    
    var _DropZoneIdleTimer = require('./DropZoneIdleTimer');
    
    var _DropZoneIdleTimer2 = _interopRequireDefault(_DropZoneIdleTimer);
    
    var _DropZoneFileManager = require('./DropZoneFileManager');
    
    var _DropZoneFileManager2 = _interopRequireDefault(_DropZoneFileManager);
    
    var _DropZoneFileUtils = require('./DropZoneFileUtils');
    
    var _DropZoneFileUtils2 = _interopRequireDefault(_DropZoneFileUtils);
    
    var _DropZoneCallbackManager = require('./DropZoneCallbackManager');
    
    var _DropZoneCallbackManager2 = _interopRequireDefault(_DropZoneCallbackManager);
    
    var _DropZone = require('./DropZone');
    
    var _DropZone2 = _interopRequireDefault(_DropZone);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneFactory = function () {
        function DropZoneFactory() {
            _classCallCheck(this, DropZoneFactory);
        }
    
        _createClass(DropZoneFactory, null, [{
            key: 'create',
    
            /**
             * Create an instance of a DropZone with it's options and dependencies
             * @param {Element} node
             * @param {Object} options
             * @param {Object} errorOptions
             * @returns {DropZone}
             */
            value: function create(node, options, errorOptions) {
                return new _DropZone2.default(node, options, new _DropZoneValidatorDispatcher2.default(new _DropZoneValidationUtils2.default(), new _DropZoneErrors2.default(errorOptions.validationText), errorOptions.whitelist, errorOptions.maxFiles, errorOptions.maxSize), new _DropZoneEventManager2.default(), new _DropZoneIdleTimer2.default(options.idleTimerDuration), new _DropZoneFileManager2.default(new _DropZoneFileUtils2.default()), new _DropZoneCallbackManager2.default());
            }
        }]);
    
        return DropZoneFactory;
    }();
    
    module.exports = DropZoneFactory;
    
    },{"./DropZone":5,"./DropZoneCallbackManager":9,"./DropZoneErrors":14,"./DropZoneEventManager":15,"./DropZoneFileManager":17,"./DropZoneFileUtils":18,"./DropZoneIdleTimer":19,"./DropZoneValidationUtils":22,"./DropZoneValidatorDispatcher":23}],17:[function(require,module,exports){
    "use strict";
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneFileManager = function () {
        /**
         * DropZoneFileManager
         * @param {DropZoneFileUtils} utils
         */
        function DropZoneFileManager(utils) {
            _classCallCheck(this, DropZoneFileManager);
    
            this.utils = utils;
        }
    
        /**
         * A place we can do something with a file before we add it to the store.
         * @param {Object} file
         * @param {number} id
         * @param {Object} meta
         * @return {Object} file object
         */
    
    
        _createClass(DropZoneFileManager, [{
            key: "createFileObject",
            value: function createFileObject(file, id) {
                var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    
                return {
                    raw: file,
                    id: id,
                    meta: meta,
                    thumbnail: !file.mock ? this.utils.getFileThumbnail(file) : null,
                    name: !file.mock ? this.utils.getFileName(file.name) : file.name,
                    type: !file.mock ? this.utils.getFileType(file.type) : null,
                    size: !file.mock ? this.utils.getFileSize(file.size) : null
                };
            }
        }]);
    
        return DropZoneFileManager;
    }();
    
    module.exports = DropZoneFileManager;
    
    },{}],18:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneFileUtils = function () {
        function DropZoneFileUtils() {
            _classCallCheck(this, DropZoneFileUtils);
        }
    
        _createClass(DropZoneFileUtils, [{
            key: 'getFileName',
    
            /**
             * Format filename for printing
             * @param  {String} filename
             * @return {String}
             */
            value: function getFileName(filename) {
                return filename.replace(/.*[\\\/]/, '');
            }
    
            /**
             * Format type for printing
             * @param  {String} type
             * @return {String}
             */
    
        }, {
            key: 'getFileType',
            value: function getFileType(type) {
                if (type.length) {
                    return type;
                } else {
                    return '';
                }
            }
    
            /**
             * Format size for printing
             * @param  {number} size
             * @param  {number} decimal
             * @return {String}
             */
    
        }, {
            key: 'getFileSize',
            value: function getFileSize(size) {
                var decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    
                var kb = 1000,
                    sizes = ['Bytes', 'KB', 'MB', 'GB'],
                    i = Math.floor(Math.log(size) / Math.log(kb));
    
                if (!size) {
                    return '0 Byte';
                } else {
                    return parseFloat((size / Math.pow(kb, i)).toFixed(decimal)) + ' ' + sizes[i];
                }
            }
    
            /**
             * Create url for image preview
             * @param {Object} file
             * @return {String|Boolean}
             */
    
        }, {
            key: 'getFileThumbnail',
            value: function getFileThumbnail(file) {
                if (file.type.match(/\/(gif|jpeg|png|svg+xml|svg)/) && window.URL.createObjectURL) {
                    return window.URL.createObjectURL(file);
                } else {
                    return false;
                }
            }
        }]);
    
        return DropZoneFileUtils;
    }();
    
    module.exports = DropZoneFileUtils;
    
    },{}],19:[function(require,module,exports){
    "use strict";
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneIdleTimer = function () {
        /**
         * DropZoneIdleTimer
         * @param {number} duration
         */
        function DropZoneIdleTimer(duration) {
            _classCallCheck(this, DropZoneIdleTimer);
    
            this.timer = null;
            this.duration = duration;
        }
    
        /**
         * Start timer
         * @param {Function} callback
         */
    
    
        _createClass(DropZoneIdleTimer, [{
            key: "start",
            value: function start(callback) {
                var _this = this;
    
                // remove callback from args
                var args = [].slice.call(arguments);
                this.timer = setTimeout(function () {
                    // clear reference to timeout
                    _this.timer = null;
                    // invoke callback
                    callback.apply(_this, args.slice(1));
                }, this.duration);
            }
    
            /**
             * Clear current timeout
             */
    
        }, {
            key: "clear",
            value: function clear() {
                if (this.timer !== null) {
                    clearTimeout(this.timer);
                }
            }
        }]);
    
        return DropZoneIdleTimer;
    }();
    
    module.exports = DropZoneIdleTimer;
    
    },{}],20:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _lodash = require('lodash');
    
    var _lodash2 = _interopRequireDefault(_lodash);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneInstanceManager = function () {
        function DropZoneInstanceManager(html, DropZoneFactory, BrowseNodeFactory) {
            _classCallCheck(this, DropZoneInstanceManager);
    
            this.html = html;
            this.instances = [];
            this.DropZoneFactory = DropZoneFactory;
            this.BrowseNodeFactory = BrowseNodeFactory;
        }
    
        /**
         * Add DropZone instance to the manager
         * @param {Element} node
         * @param {DropZoneOptionsManager} optionsManager
         */
    
    
        _createClass(DropZoneInstanceManager, [{
            key: 'addInstance',
            value: function addInstance(node, optionsManager) {
                var id = this.instances.length;
                var options = optionsManager.buildInstanceOptions(node, id);
                var errorOptions = optionsManager.buildValidatorOptions(options);
                var input = options.inputNodeId ? this.html.querySelector('#' + options.inputNodeId) : null;
                var browse = this.BrowseNodeFactory.create(node.querySelector('.' + options.nodeClasses.browse));
                var info = node.querySelector('.' + options.nodeClasses.info);
                var dropZone = this.DropZoneFactory.create(node, options, errorOptions);
    
                // initiate dropZone
                dropZone.init();
    
                // set DropZone ID on node
                node.setAttribute('data-dropzone-id', id);
    
                // store instance object
                this.instances.push({ options: options, node: node, dropZone: dropZone, input: input, browse: browse, info: info, id: id });
            }
    
            /**
             * Update ref to browse node and re-attach events
             * @param {Number} id
             * @param {Element} node
             */
    
        }, {
            key: 'updateBrowseNode',
            value: function updateBrowseNode(id, node) {
                var instance = _lodash2.default.find(this.instances, function (i) {
                    return i.id === id;
                });
    
                instance.browse.update(node);
                instance.browse.enableEvents();
            }
    
            /**
             * Enable browse node events
             * @param {Number} id
             */
    
        }, {
            key: 'enableBrowseNode',
            value: function enableBrowseNode(id) {
                var instance = _lodash2.default.find(this.instances, function (i) {
                    return i.id === id;
                });
    
                instance.browse.enableEvents();
            }
    
            /**
             * Disable browse node events
             * @param {Number} id
             */
    
        }, {
            key: 'disableBrowseNode',
            value: function disableBrowseNode(id) {
                var instance = _lodash2.default.find(this.instances, function (i) {
                    return i.id === id;
                });
    
                instance.browse.disableEvents();
            }
    
            /**
             * Get a DropZone instance object, will return all instances if no id arg supplied
             * @param {number} id
             * @returns {Object|Array}
             */
    
        }, {
            key: 'getInstance',
            value: function getInstance() {
                var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
    
                var result = void 0;
    
                if (id < 0) {
                    result = this.instances;
                } else {
                    result = _lodash2.default.find(this.instances, function (i) {
                        return i.id === id;
                    });
                }
    
                return result;
            }
    
            /**
             * Add files to an instance
             * @param {FileList} files
             * @param {number} id
             * @param {Object} meta
             */
    
        }, {
            key: 'addFiles',
            value: function addFiles(files, id) {
                var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    
                _lodash2.default.find(this.instances, function (i) {
                    return i.id === id;
                }).dropZone.addFiles(files, meta);
            }
    
            /**
             * Remove file from an instance
             * @param {number} id
             * @param {number} fileId
             */
    
        }, {
            key: 'removeFile',
            value: function removeFile(id, fileId) {
                _lodash2.default.find(this.instances, function (i) {
                    return i.id === id;
                }).dropZone.removeFile(fileId);
            }
    
            /**
             * Get all files from an instance
             * @param {number} id
             * @returns {Array} files
             */
    
        }, {
            key: 'getFiles',
            value: function getFiles(id) {
                return _lodash2.default.find(this.instances, function (i) {
                    return i.id === id;
                }).dropZone.getFiles();
            }
    
            /**
             * Get a specific file from an instance
             * @param {number} id
             * @param {number} index
             * @returns {Object} file
             */
    
        }, {
            key: 'getFile',
            value: function getFile(id, index) {
                return _lodash2.default.find(this.instances, function (i) {
                    return i.id === id;
                }).dropZone.getFile(index);
            }
    
            /**
             * Get data transfer support from an instance
             * @param {number} id
             * @returns {boolean}
             */
    
        }, {
            key: 'getSupportsDataTransfer',
            value: function getSupportsDataTransfer(id) {
                return _lodash2.default.find(this.instances, function (i) {
                    return i.id === id;
                }).dropZone.getSupportsDataTransfer();
            }
    
            /**
             * Get supported option
             * @param {number} id
             * @returns {boolean}
             */
    
        }, {
            key: 'getSupported',
            value: function getSupported(id) {
                return _lodash2.default.find(this.instances, function (i) {
                    return i.id === id;
                }).options.supported;
            }
    
            /**
             * Validate files against an instance
             * @param {FileList} files
             * @param {number} id
             * @param {Boolean} retry
             */
    
        }, {
            key: 'validateFiles',
            value: function validateFiles(files, id) {
                var retry = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    
                var instance = _lodash2.default.find(this.instances, function (i) {
                    return i.id === id;
                });
    
                return instance.dropZone.validator.validate(files, instance.dropZone.getFiles().length, instance.dropZone.getSize(), retry);
            }
    
            /**
             * Reset an instance
             * @param {number} id
             */
    
        }, {
            key: 'resetInstance',
            value: function resetInstance() {
                var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
    
                if (id < 0) {
                    this.instances.forEach(function (instance) {
                        return instance.dropZone.reset();
                    });
                } else {
                    _lodash2.default.find(this.instances, function (i) {
                        return i.id === id;
                    }).dropZone.reset();
                }
            }
    
            /**
             * Disable DropZone instance
             * @param {Number} id
             */
    
        }, {
            key: 'disableInstance',
            value: function disableInstance(id) {
                var instance = _lodash2.default.find(this.instances, function (i) {
                    return i.id === id;
                });
    
                instance.dropZone.disable();
            }
    
            /**
             * Enable DropZone instance
             * @param {Number} id
             */
    
        }, {
            key: 'enableInstance',
            value: function enableInstance(id) {
                var instance = _lodash2.default.find(this.instances, function (i) {
                    return i.id === id;
                });
    
                instance.dropZone.enable();
            }
        }]);
    
        return DropZoneInstanceManager;
    }();
    
    module.exports = DropZoneInstanceManager;
    
    },{"lodash":418}],21:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _lodash = require('lodash');
    
    var _lodash2 = _interopRequireDefault(_lodash);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneOptionsManager = function () {
        function DropZoneOptionsManager(utils) {
            _classCallCheck(this, DropZoneOptionsManager);
    
            this.componentOptions = {};
            this.instanceOptions = [];
            this.utils = utils;
        }
    
        /**
         * Build and store base component options
         * @param {Object} defaults
         * @param {Object} options
         * @param {Object} callbacks
         */
    
    
        _createClass(DropZoneOptionsManager, [{
            key: 'buildComponentOptions',
            value: function buildComponentOptions(defaults, options, callbacks) {
                this.componentOptions = _lodash2.default.extend({}, defaults, options, callbacks);
            }
    
            /**
             * Build Instance options
             * @param {Element} node
             * @param {number} id
             */
    
        }, {
            key: 'buildInstanceOptions',
            value: function buildInstanceOptions(node, id) {
                var attrOptions = this.utils.getOptionsFromAttrs(node);
                var options = _lodash2.default.extend({}, this.componentOptions, attrOptions);
    
                options.dropZoneId = id;
                this.instanceOptions[id] = options;
    
                return options;
            }
    
            /**
             * Get instance options
             * @param {number} id
             * @returns {Object}
             */
    
        }, {
            key: 'getInstanceOptions',
            value: function getInstanceOptions(id) {
                return this.instanceOptions[id];
            }
    
            /**
             * Get a property from an instance options
             * @param {number} id
             * @param {string} prop
             * @returns {*}
             */
    
        }, {
            key: 'getInstanceOption',
            value: function getInstanceOption(id, prop) {
                return this.instanceOptions[id][prop];
            }
    
            /**
             * Build options object for the DropZoneValidator
             * This allows us to define the validator options in the HTML
             * @param {Object} options
             * @returns {Object} validator options
             */
    
        }, {
            key: 'buildValidatorOptions',
            value: function buildValidatorOptions(options) {
                var validatorOptions = { validationText: {} };
    
                return Object.keys(options).reduce(function (validatorOptions, option) {
                    switch (option) {
                        case 'validationMaxFiles':
                        case 'validationWhitelist':
                        case 'validationMaxSize':
                        case 'validationUnknown':
                            // this is converting 'validationMaxFiles' -> 'maxFiles' so the validator options can be
                            // set in the html e.g. 'data-validation-max-files="Too many files"'
                            var newOption = option.replace('validation', '');
    
                            newOption = newOption[0].toLowerCase() + newOption.slice(1);
                            validatorOptions.validationText[newOption] = options[option];
                            break;
                        case 'maxFiles':
                        case 'maxSize':
                        case 'whitelist':
                            validatorOptions[option] = options[option];
                            break;
                    }
    
                    return validatorOptions;
                }, validatorOptions);
            }
        }]);
    
        return DropZoneOptionsManager;
    }();
    
    module.exports = DropZoneOptionsManager;
    
    },{"lodash":418}],22:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneValidationUtils = function () {
        function DropZoneValidationUtils() {
            _classCallCheck(this, DropZoneValidationUtils);
        }
    
        _createClass(DropZoneValidationUtils, [{
            key: 'validateType',
    
            /**
             * Validate a file type against a whitelist
             * @param {String} type
             * @param {Array} whitelist
             * @returns {boolean} valid
             */
            value: function validateType(type, whitelist) {
                var valid = void 0;
    
                // in the absence of a whitelist, everything is valid
                if (!whitelist.length) {
                    valid = true;
                }
    
                whitelist.forEach(function (mime) {
                    if (!valid) {
                        if (mime.search('/') >= 0) {
                            if (mime === type) {
                                // if the user has specified a full mime e.g. 'image/png'
                                // we will check that against the type
                                valid = true;
                            } else if (mime.indexOf('*') >= 0) {
                                // if the user has specified a wildcard mime e.g. 'image/*'
                                // we will create a wildcard expression and test against it
                                var re = new RegExp(mime.replace('/*/g', '[\\W\\w]*'));
    
                                valid = !!re.exec(type);
                            } else {
                                valid = false;
                            }
                        } else {
                            // if the user has specified a part mime e.g. 'png'
                            // we'll split the type and check against the right hand side
                            // the equivalent of '*/png'
                            valid = type.split('/')[1] === mime;
                        }
                    }
                });
    
                return valid;
            }
    
            /**
             * Validate against max file count
             * @param {number} count
             * @param {number} max
             * @returns {boolean} valid
             */
    
        }, {
            key: 'validateCount',
            value: function validateCount(count, max) {
                return count <= max;
            }
    
            /**
             * Validate against max file size
             * @param {number} count
             * @param {number} max
             * @returns {boolean} valid
             */
    
        }, {
            key: 'validateSize',
            value: function validateSize(count, max) {
                return count <= max;
            }
        }]);
    
        return DropZoneValidationUtils;
    }();
    
    module.exports = DropZoneValidationUtils;
    
    },{}],23:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DropZoneValidatorDispatcher = function () {
        /**
         * DropZoneValidator
         * @param {DropZoneValidationUtils} utils
         * @param {DropZoneErrors} errors
         * @param {Array} whitelist
         * @param {number} maxFiles
         * @param {number} maxSize
         */
        function DropZoneValidatorDispatcher(utils, errors, whitelist, maxFiles, maxSize) {
            _classCallCheck(this, DropZoneValidatorDispatcher);
    
            this.utils = utils;
            this.errors = errors;
            this.whitelist = whitelist;
            this.maxFiles = maxFiles;
            this.maxSize = maxSize;
        }
    
        /**
         * Dispatch validation methods
         * @param {Array} files
         * @param {Number} totalFiles
         * @param {Number} totalSize
         * @param {Boolean} retry
         * @returns {Object} error
         */
    
    
        _createClass(DropZoneValidatorDispatcher, [{
            key: 'validate',
            value: function validate(files, totalFiles, totalSize) {
                var retry = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    
                var result = { valid: true, text: '' };
                var fileCount = totalFiles;
                var sizeCount = totalSize;
    
                // if we have files but we do not have a length we're dealing
                // with a browser with limited support, so we'll return them as valid
                // now and let them be caught later
                if (!files.length) {
                    return result;
                }
    
                for (var i = 0; i < files.length; i++) {
                    var file = files[i];
                    var fileObject = file.getAsFile ? file.getAsFile() : file;
    
                    // if we are in retry mode we don't need to increment this count
                    // as the file will already be on the DropZone instance
                    if (!retry) {
                        fileCount++;
                    }
    
                    // reject items that do not hav a size
                    if (result.valid && file.size === 0) {
                        result = this.errors.getFileValidationError('EMPTY');
                    }
    
                    // whitelist
                    //   - check we have a whitelist
                    //   - ensure our file is on the whitelist
                    //   - skip files that have a mock property
                    if (result.valid && file.type && this.whitelist && this.whitelist.length && !file.mock && !this.utils.validateType(file.type, this.whitelist)) {
                        result = this.errors.getFileValidationError('WHITELIST');
                    }
    
                    // max files
                    //   - ensure we haven't exceeded our max files
                    if (result.valid && !this.utils.validateCount(fileCount, this.maxFiles)) {
                        result = this.errors.getFileValidationError('MAX_FILES');
                    }
    
                    // max size
                    //   - ensure we haven't exceeded our maximum size, if we can get size
                    //
                    // check to see if we can get a file, if we can't we know we cannot
                    // determine the size, so we'll pass this and handle it when we can get
                    // the size
                    if (result.valid && fileObject && !file.mock) {
                        // if we are in retry mode we don't want tp add the size of each file
                        // as they will already be on the DropZone instance
                        if (!retry) {
                            sizeCount += fileObject.size;
                        }
    
                        if (!this.utils.validateSize(sizeCount, this.maxSize)) {
                            result = this.errors.getFileValidationError('MAX_SIZE');
                        }
                    }
                }
    
                return result;
            }
        }]);
    
        return DropZoneValidatorDispatcher;
    }();
    
    module.exports = DropZoneValidatorDispatcher;
    
    },{}],24:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = require('jquery');
    var Selectors = {
        'DATA_TOGGLE': '[data-toggle=dropdown]',
        'DROP_MENU': '.dropdown__menu',
        'VISIBLE_ITEMS': '.dropdown__menu li a:not(.is-disabled):not(.disabled), .dropdown__menu li button:not(.is-disabled):not(.disabled):not(:disabled)',
        'DISABLED': '.disabled, .is-disabled, :disabled',
        'DROPDOWN': '.dropdown',
        'BTN_GROUP': '.btn__group',
        'BTN_GROUP_OPEN': '.btn__group.open',
        'BTN_GROUP_DROP': '.btn__group.dropdown, .btn__group.dropup',
        'DROPUP': 'dropup',
        'OPEN': 'open'
    };
    var Keycodes = {
        'ESC': 27,
        'UP': 38,
        'DOWN': 40
    };
    
    var DropdownButtonComponent = function () {
        /**
         * DropdownButton
         * @param {jQuery} $html - jQuery wrapper of the html node
         */
        function DropdownButtonComponent($html) {
            _classCallCheck(this, DropdownButtonComponent);
    
            this.$html = $html;
        }
    
        /**
         * Initialise component
         */
    
    
        _createClass(DropdownButtonComponent, [{
            key: 'init',
            value: function init() {
                var _this = this;
    
                if (typeof this.$html === 'undefined' || !this.$html.length) {
                    throw new Error('$html must be passed to DropdownButtonComponent');
                }
    
                this.$html.on('click', Selectors.DATA_TOGGLE, function (event) {
                    return _this.toggle(event);
                }).on('click', function (event) {
                    return _this.handleBodyClick(event);
                }).on('keydown', function (event) {
                    return _this.handleEscKeydown(event);
                }).on('focusout', Selectors.BTN_GROUP_OPEN, function (event) {
                    return _this.handleDropParentFocusout(event);
                });
    
                this.$html.find(Selectors.DATA_TOGGLE).on('keydown', function (event) {
                    return _this.handleDropButtonKeydown(event);
                });
                this.$html.find(Selectors.DROP_MENU).on('keydown', function (event) {
                    return _this.handleDropMenuKeydown(event);
                });
            }
    
            /**
             * Handle toggle
             * @param {Event} event
             */
    
        }, {
            key: 'toggle',
            value: function toggle(event) {
                var $button = $(event.target).closest(Selectors.DATA_TOGGLE),
                    $parent = $button.parent(),
                    dropdownOpen = $parent.hasClass(Selectors.OPEN);
    
                if ($button.is(Selectors.DISABLED)) {
                    return;
                }
    
                this.closeAllDropdowns();
    
                if (!dropdownOpen) {
                    if (event.isDefaultPrevented()) {
                        return;
                    }
    
                    $parent.toggleClass(Selectors.OPEN);
                    $button.attr('aria-expanded', 'true');
                }
            }
    
            /**
             * Close all dropdowns
             */
    
        }, {
            key: 'closeAllDropdowns',
            value: function closeAllDropdowns() {
                var dropdownButtons = this.$html.find(Selectors.DATA_TOGGLE);
    
                dropdownButtons.each(function (index, button) {
                    var $button = $(button),
                        $parent = $button.parent();
    
                    if (!$parent.hasClass(Selectors.OPEN)) {
                        return;
                    }
    
                    $parent.removeClass(Selectors.OPEN).trigger('hidden.bs.dropdown');
    
                    $button.attr('aria-expanded', 'false');
                });
            }
    
            /**
             * Close all dropdowns on body click
             * @param {Event} event
             */
    
        }, {
            key: 'handleBodyClick',
            value: function handleBodyClick(event) {
                var $clickedElement = $(event.target);
    
                if ($clickedElement.attr('data-toggle') === 'dropdown' || $clickedElement.closest(Selectors.BTN_GROUP).hasClass(Selectors.OPEN) || $clickedElement.closest(Selectors.DROPDOWN).hasClass(Selectors.OPEN)) {
                    return;
                }
                this.closeAllDropdowns();
            }
    
            /**
             * Close all dropdowns on body click
             * @param {Event} event
             */
    
        }, {
            key: 'handleEscKeydown',
            value: function handleEscKeydown(event) {
                var $elementWithFocus = $(':focus');
    
                if (event.keyCode === Keycodes.ESC) {
                    if ($elementWithFocus.closest(Selectors.BTN_GROUP_DROP)) {
                        $elementWithFocus.closest(Selectors.BTN_GROUP_DROP).find(Selectors.DATA_TOGGLE).trigger('focus');
                    }
    
                    this.closeAllDropdowns();
                }
            }
    
            /**
             * Open dropdown menu on arrow up or down, depending on dropdown or dropup
             * @param {Event} event
             */
    
        }, {
            key: 'handleDropButtonKeydown',
            value: function handleDropButtonKeydown(event) {
                var $keydownElement = $(event.target),
                    $parentButtonGroup = $keydownElement.closest(Selectors.BTN_GROUP),
                    direction = $parentButtonGroup.hasClass(Selectors.DROPUP) ? 'up' : 'down',
                    $dropdownItems = $parentButtonGroup.find(Selectors.VISIBLE_ITEMS);
    
                if ($keydownElement.is(Selectors.DISABLED)) {
                    return;
                }
    
                if (event.keyCode === Keycodes.DOWN && direction === 'down') {
                    event.preventDefault();
    
                    if (!$dropdownItems.length) {
                        return;
                    }
    
                    if (!$parentButtonGroup.hasClass(Selectors.OPEN)) {
                        $keydownElement.trigger('click');
                    }
    
                    $dropdownItems.first().trigger('focus');
                }
    
                if (event.keyCode === Keycodes.UP && direction === 'up') {
                    event.preventDefault();
    
                    if (!$dropdownItems.length) {
                        return;
                    }
    
                    if (!$parentButtonGroup.hasClass(Selectors.OPEN)) {
                        $keydownElement.trigger('click');
                    }
    
                    $dropdownItems.last().trigger('focus');
                }
            }
    
            /**
             * Allow arrow key menu navigation
             * @param {Event} event
             */
    
        }, {
            key: 'handleDropMenuKeydown',
            value: function handleDropMenuKeydown(event) {
                var codes = [Keycodes.ESC, Keycodes.UP, Keycodes.DOWN],
                    $keydownElement = $(event.target),
                    $dropdownItems = $keydownElement.closest(Selectors.BTN_GROUP).find(Selectors.VISIBLE_ITEMS);
                var isKey = function isKey(key, codes) {
                    return codes.filter(function (code) {
                        return code === key;
                    }).length;
                };
                var index = void 0;
    
                if (!isKey(event.keyCode, codes)) {
                    return;
                }
    
                if (!$dropdownItems.length) {
                    return;
                }
    
                event.preventDefault();
    
                index = $dropdownItems.index($dropdownItems.filter(':focus'));
    
                if (event.keyCode === Keycodes.UP && index > 0) {
                    index--;
                }
    
                if (event.keyCode === Keycodes.DOWN && index < $dropdownItems.length) {
                    index++;
                }
    
                if (index < 0) {
                    index = 0;
                }
    
                $dropdownItems.eq(index).trigger('focus');
            }
    
            /**
             * Close drop menu when focus leaves parent btn__group
             */
    
        }, {
            key: 'handleDropParentFocusout',
            value: function handleDropParentFocusout() {
                var _this2 = this;
    
                // Using timeout due to :focus return body when an element loses focus before new element gains focus
                setTimeout(function () {
                    var $elementWithFocus = $(':focus');
                    if (!$elementWithFocus.closest(Selectors.BTN_GROUP_OPEN).length) {
                        _this2.closeAllDropdowns();
                    }
                }, 1);
            }
        }]);
    
        return DropdownButtonComponent;
    }();
    
    module.exports = DropdownButtonComponent;
    
    },{"jquery":416}],25:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var ErrorSummaryComponent = function () {
        function ErrorSummaryComponent() {
            _classCallCheck(this, ErrorSummaryComponent);
        }
    
        _createClass(ErrorSummaryComponent, [{
            key: 'init',
    
    
            /**
             * Initialise
             * @param {jQuery} $html - jQuery wrapper of the html node
             */
            value: function init($html) {
                var $errorSummary = void 0;
    
                if (typeof $html === 'undefined' || !$html.length) {
                    throw new Error('$html must be passed to ErrorSummaryComponent init()');
                }
    
                $errorSummary = $html.find('[data-error-summary]');
    
                if (!$errorSummary.length) {
                    return;
                }
    
                if ($errorSummary.length > 1) {
                    throw new Error('Only one error summary may be present on a page');
                }
    
                $errorSummary.focus();
            }
        }]);
    
        return ErrorSummaryComponent;
    }();
    
    module.exports = ErrorSummaryComponent;
    
    },{}],26:[function(require,module,exports){
    'use strict';
    
    var $ = require('jquery'),
        _ = require('lodash');
    
    function FilterBarComponent(html) {
        this.$html = html;
    }
    
    FilterBarComponent.prototype.init = function () {
        var component = this;
    
        this.$container = this.$html.find('.filter-bar');
    
        this.$container.each(function () {
            var $filterbar = $(this);
    
            // Create the filter add button
            createFilterListButton($filterbar);
    
            // Hide the form elements
            hideFormControls($filterbar);
    
            // Move save button
            moveFormActions($filterbar);
    
            // Handlers
            showFilterBar(component, $filterbar);
            populateFilterList($filterbar);
            showAddFilterPopover($filterbar);
            addFilter($filterbar);
            removeFilter($filterbar);
            clearAllFilters($filterbar);
        });
    };
    
    function showFilterBar(component, $filterbar) {
    
        component.$html.on('click', '[data-ui="show-filter-bar"]', function (e) {
            var $addFilterButton = $filterbar.find('[data-ui="show-filter-list"]');
    
            e.preventDefault();
    
            // Show add button if hidden by clear
            $addFilterButton.removeClass('u-display-none');
    
            // Show filter bar
            $filterbar.removeClass('u-display-none');
    
            // Focus add button
            $addFilterButton.trigger('focus');
        });
    }
    
    function createFilterListButton($filterbar) {
        var $formGroups = $filterbar.find('.form__group'),
            $addFilterButton,
            $filterList = $('<ul class="filter-bar__list"></ul>'),
            $filterLabelsWrapper = $('<div class="filter-bar__labels"></div>');
    
        // Loop through form groups
        $formGroups.each(function () {
            $filterList.append('<li><a href="#" role="button" class="filter-bar__list-item" data-ui="filter-item" data-filter-id="' + $(this).find('.form__control').attr('id') + '" data-filter-title="' + _.escape($(this).find('.control__label').text()) + '">' + _.escape($(this).find('.control__label').text()) + '</a></li>');
        });
    
        // Build up list and mark up for Add filter button
        $addFilterButton = $('<button class="btn filter-bar__add btn--outline" type="button" aria-expanded="false" data-ui="show-filter-list" data-toggle="popover" data-trigger="click" title="Filter by" data-html="true" data-placement="bottom" data-content="" aria-haspopup="true"><i class="icon-plus"><span class="hide">Add filter</span></i></button>');
        $addFilterButton.attr('data-content', $filterList[0].outerHTML);
    
        // Append button and label wrapper
        $filterLabelsWrapper.appendTo($filterbar.find('fieldset'));
        $addFilterButton.appendTo($filterLabelsWrapper);
    
        // Initialize popover
        $addFilterButton.popover();
    
        $filterbar.on('click', '[data-ui="show-filter-list"]', function (e) {
            e.preventDefault();
    
            var $addFilterButton = $(this);
    
            if ($addFilterButton.attr('aria-expanded') == 'false') {
                $addFilterButton.attr('aria-expanded', 'true');
            } else {
                $addFilterButton.attr('aria-expanded', 'false');
            }
        });
    }
    
    function hideFormControls($filterbar) {
        $filterbar.find('.form__group').addClass('u-display-none');
        $filterbar.find('.form__actions').addClass('u-display-none');
    }
    
    function moveFormActions($filterbar) {
        var $formActions = $filterbar.find('.form__actions'),
            $fieldset = $filterbar.find('fieldset');
    
        $formActions.appendTo($fieldset);
        $formActions.addClass('u-display-none');
    }
    
    function showAddFilterPopover($filterbar) {
        var filterTitle,
            filterId,
            select2Placeholder,
            $formGroup,
            $filterLabel,
            $popoverControls,
            $popoverContent,
            $field,
            $select2,
            $addFilterButton = $filterbar.find('[data-ui="show-filter-list"]');
    
        $filterbar.on('click', '[data-ui="filter-item"]', function (e) {
            e.preventDefault();
    
            filterTitle = $(this).attr('data-filter-title');
            filterId = $(this).attr('data-filter-id');
            $field = $filterbar.find('#' + filterId);
    
            $addFilterButton.attr('aria-expanded', 'false');
    
            // Hide the filter item in the list
            updateFilterList($addFilterButton, filterId, 'hide');
    
            // Add new filter label
            $filterLabel = $('<span class="label label--primary label--large label--removable" data-filter-id="' + _.escape(filterId) + '"><span class="label__text">' + _.escape(filterTitle) + ' <span class="chosen-filter"></span></span></span>');
            $filterLabel.insertBefore($addFilterButton);
    
            // If checkbox, check it but no need to display it or move to popover
            if ($field[0].type === 'checkbox') {
    
                // Hide the filter list popover
                $addFilterButton.popover('hide');
    
                // Check the checkbox
                $field.prop('checked', true);
    
                // Add the remove button to the label
                filterId = $filterLabel.attr('data-filter-id');
                $filterLabel.append('<button type="button" data-ui="filter-cancel" class="btn remove-button" data-filter-id="' + _.escape(filterId) + '"><i class="icon-remove-sign"><span class="hide">Remove ' + _.escape(filterTitle) + ' filter</span></i></button>');
    
                // Add the label
                $filterLabel.removeClass('label--primary').addClass('label--inverse');
    
                // Hide the filter list button if no links remaining
                filterListButtonVisibility($filterbar);
    
                // Check if save button should be visible
                formActionsVisibility($filterbar);
    
                // Focus the add button or, if that's not visible, focus the save button
                if (!$addFilterButton.hasClass('u-display-none')) {
                    $addFilterButton.trigger('focus');
                } else {
                    $filterbar.find('.form__actions .btn--primary').trigger('focus');
                }
            } else {
    
                // Create content for the popover
                $popoverContent = $('<div class="added-popover-content"></div>');
    
                // Move the field into the popover content
                $formGroup = $filterbar.find('#' + filterId).closest('.form__group');
                $formGroup.appendTo($popoverContent);
                $formGroup.addClass('form__group--flush');
    
                // Hide the control label
                $formGroup.removeClass('u-display-none').find('.control__label').addClass('hide');
    
                // Add popover controls
                $popoverControls = $('<div class="form__actions form__actions--flush"><button type="submit" class="btn btn--primary is-disabled" data-ui="add-filter" disabled="disabled">Add</button><button type="button" data-ui="filter-cancel" data-filter-id="' + _.escape(filterId) + '" class="btn btn--naked">Cancel</button></div>');
                $popoverControls.insertAfter($formGroup);
    
                // Refresh the select2
                $select2 = $popoverContent.find('.js-select2:not([data-init="false"])');
                select2Placeholder = $select2.attr('data-placeholder');
                $select2.select2({ placeholder: select2Placeholder });
    
                // Trigger popover with form field on added label
                /* istanbul ignore next: difficult to test generated popover content */
                $filterLabel.popover({
                    html: true,
                    title: function title() {
                        return filterTitle;
                    },
                    content: function content() {
                        return $popoverContent;
                    },
                    placement: 'bottom',
                    trigger: 'manual'
                });
    
                // Hide the filter list popover
                $addFilterButton.popover('hide');
    
                // Show the popover
                $filterLabel.popover('show');
    
                // Disable the add filter button
                $addFilterButton.addClass('is-disabled').attr('disabled', true);
    
                // Hide the filter list button if no links remaining
                filterListButtonVisibility($filterbar);
    
                // Focus on field to avoid unnecessary extra click
                if ($field.hasClass('js-select2') && $field.data('init') !== false) {
                    $field.select2('focus');
                } else {
                    /* istanbul ignore next: difficult to test due to generated popover content */
                    $field.focus();
                }
    
                // Enable button when field has value
                /* istanbul ignore next: difficult to test due to field being inside generated popover content */
                $field.on('change keyup', function () {
                    if ($field.val()) {
                        $popoverControls.find('[data-ui="add-filter"]').removeClass('is-disabled').attr('disabled', false).attr('aria-disabled', false);
                    } else {
                        $popoverControls.find('[data-ui="add-filter"]').addClass('is-disabled').attr('disabled', true);
                    }
                });
            }
        });
    }
    
    /* istanbul ignore next: difficult to test due to field and form controls being inside generated popover content */
    function addFilter($filterbar) {
        $filterbar.on('click', '[data-ui="add-filter"]', function (e) {
            var $field = $(this).closest('.added-popover-content').find('.form__control'),
                $popover = $(this).closest('.popover'),
                $formGroup = $popover.find('.form__group'),
                $label = $popover.prev('.label'),
                $addFilterButton = $filterbar.find('[data-ui="show-filter-list"]'),
                $legend = $filterbar.find('form fieldset legend'),
                values,
                valueForLabel = null,
                filterId,
                initalLabelText = _.escape($label.text());
    
            e.preventDefault();
    
            // Check if field is a select2
            if ($field.hasClass('js-select2')) {
    
                values = $field.select2('data');
    
                $.each(values, function (index, value) {
                    if (valueForLabel === null) {
                        valueForLabel = value.text;
                    } else {
                        valueForLabel = valueForLabel + ', ' + value.text;
                    }
                });
            } else {
                valueForLabel = $field.val();
            }
    
            // Add it to the label
            $label.find('.chosen-filter').text(': ' + valueForLabel);
    
            // Add the remove button to the label
            filterId = $label.attr('data-filter-id');
            $label.append('<button type="button" data-ui="filter-cancel" class="btn remove-button" data-filter-id="' + _.escape(filterId) + '"><i class="icon-remove-sign"><span class="hide">Remove ' + _.escape(initalLabelText) + ' filter</span></i></button>');
    
            // Swap classes
            $label.removeClass('label--primary').addClass('label--inverse');
    
            // Hide the field
            $formGroup.addClass('u-display-none');
    
            // Move the form group out of the popover and back into the filterbar form
            $formGroup.insertAfter($legend);
    
            // Close popover and destroy to prevent an empty popover showing on label click
            $label.popover('destroy');
    
            // Enable add filter button
            $addFilterButton.removeClass('is-disabled').attr('disabled', false).attr('aria-disabled', false);
    
            // Check if save button should be visible
            formActionsVisibility($filterbar);
    
            // Focus the add button or, if that's not visible, focus the save button
            if (!$addFilterButton.hasClass('u-display-none')) {
                $addFilterButton.trigger('focus');
            } else {
                $filterbar.find('.form__actions .btn--primary').trigger('focus');
            }
        });
    }
    
    function removeFilter($filterbar) {
        var $addFilterButton = $filterbar.find('[data-ui="show-filter-list"]');
    
        $filterbar.on('click', '[data-ui="filter-cancel"]', function (e) {
            var filterId = $(this).attr('data-filter-id'),
                $legend = $filterbar.find('form fieldset legend'),
                $field = $filterbar.find('#' + filterId),
                $formGroup = $field.closest('.form__group'),
                $label;
    
            e.preventDefault();
    
            if ($(this).parents('.popover').length) {
                $label = $(this).closest('.popover').prev('.label');
            } else {
                $label = $(this).closest('.label');
            }
    
            // Add option back to list
            updateFilterList($addFilterButton, filterId, 'show');
    
            // Empty values from field
            if ($field[0].type === 'select-one' || $field[0].type === 'select-multiple') {
                $field.find('option:selected').prop('selected', false);
            } else if ($field[0].type === 'checkbox') {
                $field.prop('checked', false);
            } else {
                $field.val('');
            }
    
            // Destroy select2
            if ($field.hasClass('select2-hidden-accessible')) {
                $field.select2('destroy');
            }
    
            // Hide the field
            $formGroup.addClass('u-display-none');
    
            // Move the form group out of the popover and back into the form
            $formGroup.insertAfter($legend);
    
            // Remove the popover and label
            $label.popover('hide');
            $label.remove();
    
            // Enable add filter button
            $addFilterButton.removeClass('is-disabled').attr('disabled', false).attr('aria-disabled', false);
    
            // Find any open add filter button popover
            $addFilterButton.popover('hide');
    
            // Check if button should be visible
            filterListButtonVisibility($filterbar);
    
            // Check if save button should be visible
            formActionsVisibility($filterbar);
    
            // Shift focus to add button
            $addFilterButton.trigger('focus');
        });
    }
    
    function filterListButtonVisibility($filterbar) {
        var $addFilterButton = $filterbar.find('[data-ui="show-filter-list"]'),
            addFilterList,
            $addFilterList;
    
        addFilterList = $addFilterButton.attr('data-content');
        $addFilterList = $(_.unescape(addFilterList));
    
        if ($addFilterList.find('li:not(.u-display-none)').length) {
            $addFilterButton.removeClass('u-display-none');
        } else {
            $addFilterButton.addClass('u-display-none');
        }
    }
    
    function formActionsVisibility($filterbar) {
        var $formActions = $filterbar.find('.form__actions');
    
        // Ensure form actions are visible after all filters remove when filters present on load
        if ($filterbar.data('had-filters-on-load') === true) {
            $formActions.removeClass('u-display-none');
            $formActions.find('.btn--primary').removeClass('u-display-none');
    
            return;
        }
    
        if ($filterbar.find('.label').length) {
            $formActions.removeClass('u-display-none');
        } else {
            $formActions.addClass('u-display-none');
        }
    }
    
    function clearAllFilters($filterbar) {
        var $addFilterButton = $filterbar.find('[data-ui="show-filter-list"]');
    
        $filterbar.on('click', '[data-ui="clear-all-filters"]', function (e) {
    
            e.preventDefault();
    
            // Close filter bar
            $filterbar.addClass('u-display-none');
    
            // Remove all labels
            $filterbar.find('.label').remove();
    
            // Reset filter list
            updateFilterList($addFilterButton, null, 'reset');
    
            // Hide form actions
            formActionsVisibility($filterbar);
    
            // Reset form
            $filterbar.find('form').trigger('reset');
        });
    }
    
    function updateFilterList($addFilterButton, filterId, visibility) {
        var addFilterList = $addFilterButton.attr('data-content'),
            $addFilterList = $(_.unescape(addFilterList)),
            $filterItem,
            $filterItemParent;
    
        if (filterId !== null) {
            $filterItem = $addFilterList.find('[data-filter-id="' + filterId + '"]');
            $filterItemParent = $filterItem.parent();
        }
    
        if (visibility === 'show') {
            $filterItemParent.removeClass('u-display-none');
        } else if (visibility === 'hide') {
            $filterItemParent.addClass('u-display-none');
        } else if (visibility === 'reset') {
            $addFilterList.find('li.u-display-none').removeClass('u-display-none');
        }
    
        $addFilterButton.attr('data-content', $addFilterList[0].outerHTML);
    }
    
    /**
     *   Fired on load, this reads the values of the hidden filters form and
     *   populates the filterbar with the required labels.
    **/
    function populateFilterList($filterbar) {
    
        var $formGroups = $filterbar.find('.form__group'),
            $labelContainer = $filterbar.find('.filter-bar__labels'),
            $addFilterButton = $filterbar.find('[data-ui="show-filter-list"]'),
            hiddenFormGroups = 0;
    
        $formGroups.each(function () {
            var $this = $(this),
                $filterField = $this.find('.form__control'),
                filterId = $filterField.attr('id'),
                filterLabel = $this.find('.control__label').text().trim(),
                filterValue = $filterField.val(),
                initalLabelText = filterLabel;
    
            if ($filterField.hasClass('select')) {
                if ($filterField.prop('multiple')) {
                    filterValue = $filterField.find('option:selected').toArray().map(function (item) {
                        return item.text;
                    }).join(', ');
                } else if ($filterField.find('option:selected').val()) {
                    filterValue = $filterField.find('option:selected').text();
                }
            }
    
            if ($filterField[0].type === 'checkbox') {
                if ($filterField.prop('checked') === true) {
                    filterValue = ' ';
                } else {
                    filterValue = '';
                }
            } else {
                filterLabel = filterLabel + ': ';
            }
    
            if (filterValue !== '' && filterValue !== null && filterValue.length !== 0) {
                $labelContainer.prepend('<span class="label label--large label--inverse label--removable" data-filter-id="' + _.escape(filterId) + '"><span class="label__text">' + _.escape(filterLabel) + _.escape(filterValue) + '</span><button type="button" data-ui="filter-cancel" class="btn remove-button" data-filter-id="' + _.escape(filterId) + '"><i class="icon-remove-sign"><span class="hide">Remove ' + _.escape(initalLabelText) + ' filter</span></i></button></span>');
    
                // Keep track of how many filters have already been applied
                hiddenFormGroups++;
    
                // Hide the filter item in the list
                updateFilterList($addFilterButton, filterId, 'hide');
    
                // Show the filterbar
                $filterbar.removeClass('u-display-none');
    
                // Track if there were filters on load for form action visibility
                $filterbar.data('had-filters-on-load', true);
    
                // Show the clear button
                $filterbar.find('.form__actions').removeClass('u-display-none');
                $filterbar.find('.form__actions .btn--primary').addClass('u-display-none');
            }
    
            // Don't show add filter button if all filters have been loaded
            if ($formGroups.length === hiddenFormGroups) {
                $addFilterButton.addClass('u-display-none');
            }
        });
    }
    
    module.exports = FilterBarComponent;
    
    },{"jquery":416,"lodash":418}],27:[function(require,module,exports){
    'use strict';
    
    var $ = require('jquery');
    require('jquery-sticky');
    
    function FlashMessageComponent(html) {
    
        this.$html = html;
    };
    
    FlashMessageComponent.prototype.init = function () {
    
        var component = this,
            prototype = '<div class="flash flash--default"><button class="close" data-dismiss="flash"><i class="icon-remove"><span class="hide">Close</span></i></button></div>';
    
        component.$container = this.$html.find('.js-flash-container');
        component.$flashes = this.$html.find('.flash');
    
        if (!component.$container.length) {
            throw new Error('Missing container with class .js-flash-container');
        }
    
        component.$prototype = $(prototype);
    
        component.$flashes.on('click', '[data-dismiss=flash]', function (e) {
            component.dismiss($(this).closest('.flash'));
        });
    
        return true;
    };
    
    FlashMessageComponent.prototype.success = function (message) {
    
        var component = this,
            $flash;
    
        if (!message) {
            message = 'Success!';
        }
    
        $flash = component.render(message, 'success', 'icon-ok');
    
        return true;
    };
    
    FlashMessageComponent.prototype.error = function (message) {
    
        var component = this,
            $flash;
    
        if (!message) {
            message = 'There was an error, but no error message was supplied.';
        }
    
        $flash = component.render(message, 'error', 'icon-warning-sign');
    
        return true;
    };
    
    FlashMessageComponent.prototype.warning = function (message) {
    
        var component = this,
            $flash;
    
        if (!message) {
            message = 'Something kinda bad happened, but no warning message was supplied.';
        }
    
        $flash = component.render(message, 'warning', 'icon-warning-sign');
    
        return true;
    };
    
    FlashMessageComponent.prototype.info = function (message) {
    
        var component = this,
            $flash;
    
        if (!message) {
            message = 'Something happened that you should know about, but we forgot to say what it was...';
        }
    
        $flash = component.render(message, 'info', 'icon-info-sign');
    
        return true;
    };
    
    FlashMessageComponent.prototype.render = function (message, type, icon) {
    
        var component = this,
            $prototype = $(component.$prototype.clone());
    
        if (!type) {
            type = 'success';
        }
    
        if (!icon) {
            icon = 'icon-info-sign';
        }
    
        $prototype.append($('<i class="' + icon + '"></i> ' + message + '</span>')).removeClass('flash--default').addClass('flash--' + type);
    
        component.$container.append($prototype).on('click', '[data-dismiss=flash]', function (e) {
            component.dismiss($(this).closest('.flash'));
        });
    
        return true;
    };
    
    FlashMessageComponent.prototype.dismiss = function (target) {
        $(target).slideUp('100', function () {
            $(this).remove();
        });
    };
    
    module.exports = FlashMessageComponent;
    
    },{"jquery":416,"jquery-sticky":408}],28:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var FocusManagementService = function () {
        /**
         * Focus Management Service
         */
        function FocusManagementService() {
            _classCallCheck(this, FocusManagementService);
    
            this.$element = null;
            this.focusableElementList = 'a[href], input, select, textarea, button';
        }
    
        /**
         * Store element that focus will be returned to
         * @param {jQuery} $element - jQuery wrapper of the element
         */
    
    
        _createClass(FocusManagementService, [{
            key: 'storeElement',
            value: function storeElement($element) {
                this.$element = $element;
            }
    
            /**
             * Return focus to original element
             */
    
        }, {
            key: 'returnFocusToElement',
            value: function returnFocusToElement() {
                this.$element.focus();
            }
    
            /**
             * Check if an element is stored
             */
    
        }, {
            key: 'hasStoredElement',
            value: function hasStoredElement() {
                return this.$element !== null;
            }
    
            /**
             * Move focus to first focuable element in a collection
             * @param {jQuery} $collection - jQuery collection of elements
             */
    
        }, {
            key: 'focusFirstFocusableElement',
            value: function focusFirstFocusableElement($collection) {
                var $focusableElements = $collection.find(this.focusableElementList).not('[tabindex=-1], [disabled], :hidden, [aria-hidden]');
    
                if ($focusableElements.length) {
                    $focusableElements.first().focus();
                }
            }
    
            /**
             * Trap focus within a container
             * @param {jQuery} $container
             */
    
        }, {
            key: 'trapFocus',
            value: function trapFocus($container) {
                var $focusableElements = $container.find(this.focusableElementList).not('[tabindex=-1], [disabled], :hidden, [aria-hidden]');
    
                $container.on('keydown', this.trapFocusKeydownListener.bind(this, $focusableElements));
            }
    
            /**
             * Manage focus on keydown
             * @param {jQuery} $container
             * @param {Event} event
             */
    
        }, {
            key: 'trapFocusKeydownListener',
            value: function trapFocusKeydownListener($focusableElements, event) {
                var keyCode = event.keyCode || event.which;
    
                // If tab key is pressed
                if (keyCode === 9) {
                    // Check for shift tab
                    if (event.shiftKey) {
                        // Focus previous, check if first element is is currently in focus, if so focus last element
                        if ($focusableElements.first().is(':focus')) {
                            event.preventDefault();
                            $focusableElements.last().trigger('focus');
                        }
                    } else {
                        // Focus next, check if last element is is currently in focus, if so focus first element
                        if ($focusableElements.last().is(':focus')) {
                            event.preventDefault();
                            $focusableElements.first().trigger('focus');
                        }
                    }
                }
            }
        }]);
    
        return FocusManagementService;
    }();
    
    module.exports = FocusManagementService;
    
    },{}],29:[function(require,module,exports){
    'use strict';
    
    var $ = require('jquery');
    
    function HelpTextComponent(html, window, document) {
        this.$html = html;
        this.window = window;
        this.$document = $(document);
    }
    
    HelpTextComponent.prototype.init = function () {
        var component = this,
            $tabHelpContainer = component.$html.find('.tab-help-container');
    
        // Visually hide sidebar so you can't tab to it with keyboard/screenreaders
        $tabHelpContainer.addClass('hide').attr('aria-hidden', 'true');
    
        // Help toggle click bind
        component.$html.on('click', '.js-show-page-help', function (e) {
            e.preventDefault();
            e.stopPropagation();
            component.toggleHelpSidebar();
        }).on('focusout', '.tab-help-container', function (event) {
            return component.handleFocusOut(event);
        });
    
        // Close help button
        $tabHelpContainer.on('click', '.js-close-page-help', function (e) {
            e.preventDefault();
            e.stopPropagation();
            component.toggleHelpSidebar();
        });
    
        // Make mobile help container child element non-interactive
        component.toggleChildElementInteractivity($tabHelpContainer, false);
    
        // Bind to tab.js event to update help text in sidebar on tab change
        component.$html.find('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            component.updateHelpSidebar();
        });
    };
    
    HelpTextComponent.prototype.toggleHelpSidebar = function () {
        var component = this,
            $mobileToggleHelpButton = component.$html.find('.js-show-page-help'),
            $tabHelpContainer = component.$html.find('.tab-help-container');
    
        if ($mobileToggleHelpButton.hasClass('is-open')) {
            $mobileToggleHelpButton.removeClass('is-open');
            component.toggleChildElementInteractivity($tabHelpContainer, false);
        } else {
            $mobileToggleHelpButton.addClass('is-open');
            component.toggleChildElementInteractivity($tabHelpContainer, true);
        }
    
        if (component.$html.hasClass('open-help')) {
            component.$html.removeClass('open-help');
            if (component.$html.hasClass('lt-ie10')) {
                $tabHelpContainer.addClass('hide').attr('aria-hidden', 'true');
            } else {
                $tabHelpContainer.one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function (e) {
                    component.$html.find('.js-show-page-help').trigger('focus');
    
                    $tabHelpContainer.addClass('hide').attr('aria-hidden', 'true');
                });
            }
        } else {
            $tabHelpContainer.removeClass('hide').removeAttr('aria-hidden');
            component.$html.addClass('open-help');
    
            // Jump focus to the help container
            $tabHelpContainer.one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function (e) {
                $tabHelpContainer.find('.js-close-page-help').trigger('focus');
            });
        }
    };
    
    HelpTextComponent.prototype.updateHelpSidebar = function () {
        var component = this,
            $activeTabContainer = component.$html.find('.tab__pane.is-active .tab__container'),
            activeTabSideBarContentHtml = component.$html.find('.tab__pane.is-active .tab__sidebar').html(),
            $mobileToggleHelpButton = $('<button type="button" class="btn show-page-help js-show-page-help">Show Page Help</button>'),
            $mobileToggleContainer = component.$html.find('.tab__pane.is-active .tab__content'),
            $tabHelp = component.$html.find('.tab-help'),
            isMobile,
            mobileCloseHelpButton = '<button type="button" class="close-page-help js-close-page-help"><i class="icon-remove-sign" aria-hidden="true"></i><span class="hide">Close on-page help</span></button>';
    
        // Check if active tab has help text
        if (activeTabSideBarContentHtml && activeTabSideBarContentHtml.length > 0) {
    
            // If clicked outside of sidebar, close sidebar
            this.$document.on('click', function (e) {
    
                // side bar help is open
                if (component.$html.hasClass('open-help')) {
    
                    // check if inside of sidebar
                    if (!$(e.target).closest('.tab-help-container').length) {
                        component.toggleHelpSidebar();
                    }
                }
            });
    
            // If mobile help button doesn't already exist add it if help text exists
            if (!$mobileToggleContainer.find('.js-show-page-help').length) {
                $mobileToggleHelpButton.prependTo($mobileToggleContainer);
            }
    
            // Add class used for setting desktop column widths
            $activeTabContainer.addClass('has-sidebar');
    
            // Check if mobile
            isMobile = !component.window.matchMedia('(min-width: 992px)').matches;
    
            // Populate mobile sidebar help content
            if (isMobile) {
                $tabHelp.html(activeTabSideBarContentHtml);
    
                // Add mobile help close button
                $(mobileCloseHelpButton).prependTo($tabHelp);
    
                // Hide mobile sidebar interactive elements from a11y tree while closed
                component.toggleChildElementInteractivity($tabHelp, false);
            }
    
            // Watch for window resizes
            $(component.window).on('resize', function () {
                isMobile = !component.window.matchMedia('(min-width: 992px)').matches;
                if (isMobile) {
                    $tabHelp.html(activeTabSideBarContentHtml);
    
                    // Add mobile help close button
                    $(mobileCloseHelpButton).prependTo($tabHelp);
    
                    // Hide mobile sidebar interactive elements from a11y tree while closed
                    component.toggleChildElementInteractivity($tabHelp, false);
                }
            });
        } else {
            $activeTabContainer.removeClass('has-sidebar');
        }
    };
    
    /**
     * Return focus to the open help control when focus leaves the help container
     */
    HelpTextComponent.prototype.handleFocusOut = function (e) {
        var component = this;
    
        if (component.$html.hasClass('open-help')) {
            // Using timeout due to :focus return body when an element loses focus before new element gains focus
            setTimeout(function () {
                var $elementWithFocus = $(':focus');
                if (!$elementWithFocus.closest('.tab-help').length) {
                    component.toggleHelpSidebar();
                }
            }, 1);
        }
    };
    
    /**
     * Toggle focusability of elements
     */
    HelpTextComponent.prototype.toggleChildElementInteractivity = function ($container, interactive) {
        var focusableElements = 'a[href], button';
    
        if (interactive === true) {
            $container.find(focusableElements).removeAttr('tabindex');
        } else {
            $container.find(focusableElements).attr('tabindex', '-1');
        }
    };
    
    module.exports = HelpTextComponent;
    
    },{"jquery":416}],30:[function(require,module,exports){
    'use strict';
    
    var $ = require('jquery');
    
    function MasterSwitchComponent(html, disableUi) {
        this.$html = html;
        this.disableUi = disableUi;
    }
    
    MasterSwitchComponent.prototype.init = function () {
        var component = this;
    
        component.$container = this.$html.find('.masterswitch');
    
        component.$container.each(function () {
            var $this = $(this);
    
            this.$control = $this.find('.masterswitch-control input');
            this.$content = $this.find('.masterswitch-content');
    
            if (!this.$control.prop('checked')) {
                component.switchOff(this.$control);
            } else {
                component.switchOn(this.$control);
            }
    
            this.$control.on('change', function (e) {
                if ($(this).prop('checked')) {
                    component.switchOn(e.target);
                } else {
                    component.switchOff(e.target);
                }
            });
        });
    };
    
    MasterSwitchComponent.prototype.switchOn = function (target) {
        var component = this;
    
        component.$target = $(target).closest('.masterswitch').find('.masterswitch-content');
    
        component.$target.removeClass('is-disabled');
        component.disableUi.enable(component.$target);
    };
    
    MasterSwitchComponent.prototype.switchOff = function (target) {
        var component = this;
    
        component.$target = $(target).closest('.masterswitch').find('.masterswitch-content');
    
        component.$target.addClass('is-disabled');
        component.disableUi.disable(component.$target);
    };
    
    module.exports = MasterSwitchComponent;
    
    },{"jquery":416}],31:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var ModalFocusService = function () {
        function ModalFocusService() {
            _classCallCheck(this, ModalFocusService);
        }
    
        _createClass(ModalFocusService, [{
            key: 'trapFocus',
    
            /**
             * Trap focus within modals
             * @param {jQuery} $modal - jquery wrapper of the modal markup
             * @param {jQuery} $container - jquery wrapper of the container, typically body
             */
            value: function trapFocus($modal, $container) {
                var $modalFocusableElements = $modal.find('.modal__content').find('a[href], area[href], input, select, textarea, button, iframe, object, embed, [tabindex], *[contenteditable]').not('[tabindex=-1], [disabled], :hidden, [aria-hidden]');
                var $modalBodyFocusableElements = $modal.find('.modal__body').find('a[href], area[href], input, select, textarea, button, iframe, object, embed, [tabindex], *[contenteditable]').not('[tabindex=-1], [disabled], :hidden, [aria-hidden]');
                var $modalCloseButton = $modal.find('.close[data-dismiss="modal"]').first();
                var $modalFooterCancelButton = $modal.find('.modal__footer [data-dismiss="modal"]').first();
    
                /**
                 * Manage focus
                 * If modal has focusable elements in body, focus the first
                 * If not, focus the X close button
                 * If for some reason it doesn't have that, focus the cancel button in footer
                 * As a last resort, search for anything to focus
                 */
                if ($modalBodyFocusableElements.length) {
                    $modalBodyFocusableElements.first().trigger('focus');
                } else if ($modalCloseButton.length) {
                    $modalCloseButton.trigger('focus');
                } else if ($modalFooterCancelButton.length) {
                    $modalFooterCancelButton.trigger('focus');
                } else {
                    $modalFocusableElements.first().trigger('focus');
                }
    
                /**
                 * Trap focus within modal
                 */
                $container.on('keydown', this.keydownListener.bind(this, $modalFocusableElements));
            }
    
            /**
             * Manage focus when tab / shift + tab are pressed
             * @param {jQuery} $modalFocusableelements - jquery wrapper of elements that can gain focus
             * @param {event} event
             */
    
        }, {
            key: 'keydownListener',
            value: function keydownListener($modalFocusableelements, event) {
                var keyCode = event.keyCode || event.which;
    
                // If tab key is pressed
                if (keyCode === 9) {
                    // Check for shift tab
                    if (event.shiftKey) {
                        // Focus previous, check if first element is is currently in focus, if so focus last element
                        if ($modalFocusableelements.first().is(':focus')) {
                            event.preventDefault();
                            $modalFocusableelements.last().trigger('focus');
                        }
                    } else {
                        // Focus next, check if last element is is currently in focus, if so focus first element
                        if ($modalFocusableelements.last().is(':focus')) {
                            event.preventDefault();
                            $modalFocusableelements.first().trigger('focus');
                        }
                    }
                }
            }
    
            /**
             * Release focus back to original triggering element
             * @param {$triggeringElement} $triggeringElement - jquery wrapper of the element that triggered the modal
             */
    
        }, {
            key: 'releaseFocus',
            value: function releaseFocus($triggeringElement) {
                if ($triggeringElement.closest('.dropdown__menu').length) {
                    // If triggering link is in a button group / dropdown, return focus to the surrounding button
                    $triggeringElement.closest('.btn__group').find('.btn.dropdown__toggle').trigger('focus');
                } else {
                    // Else return it to the triggering link
                    $triggeringElement.trigger('focus');
                }
            }
        }]);
    
        return ModalFocusService;
    }();
    
    module.exports = ModalFocusService;
    
    },{}],32:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = require('jquery');
    
    var ModalListener = function () {
    
        /**
         * ModalListener
         * @constructor
         * @param {jQuery} $html - jQuery wrapper of the html node
         */
        function ModalListener(modalFocusService) {
            _classCallCheck(this, ModalListener);
    
            this.modalFocusService = modalFocusService;
        }
    
        /**
         * Listen for modals being shown or hidden
         * @param {jQuery} $container
         */
    
    
        _createClass(ModalListener, [{
            key: 'listen',
            value: function listen($container) {
                var _this = this;
    
                var $triggeringElement = void 0;
    
                // Hook modal-triggering elements
                $container.find('[data-toggle="modal"]').on('click', function (event) {
                    var $modalTrigger = $(event.target);
    
                    if (!$modalTrigger.hasClass('disabled')) {
                        $triggeringElement = $modalTrigger;
                        event.preventDefault();
                    }
                });
    
                $container.on('shown.bs.modal', function (data) {
                    var $modal = $(data.target);
                    _this.modalFocusService.trapFocus($modal, $container);
                });
    
                $container.on('hidden.bs.modal', function () {
                    // Check if click came from a [data-modal] link
                    if (typeof $triggeringElement !== 'undefined') {
                        _this.modalFocusService.releaseFocus($triggeringElement);
                    }
                });
            }
        }]);
    
        return ModalListener;
    }();
    
    module.exports = ModalListener;
    
    },{"jquery":416}],33:[function(require,module,exports){
    'use strict';
    
    var $ = require('jquery');
    
    function ModulePermissionsComponent(html) {
        this.$html = html;
    };
    
    ModulePermissionsComponent.prototype.init = function () {
    
        var component = this;
    
        component.$html.on('click', '.js-module-toggle', component.toggleModuleVisibility);
        component.$html.on('click', '.js-refine-toggle', component.toggleModulePagesVisibility);
    
        // // Module-master
        component.$html.find('.module').on('click', '[data-toggle="module-master"]', function () {
            component.toggleModuleMasterState(this);
        });
    
        component.$html.find('.module').on('click', '[data-toggle="module-row"]', function () {
            component.toggleModuleRowState(this);
        });
    
        component.$html.find('.module').on('click', '[data-crud]', function () {
            component.toggleCrudState(this);
        });
    
        component.$html.find('.module').on('click', '[data-toggle="module-crud"]', function () {
            component.toggleModuleState(this);
        });
    
        component.$html.find('.module').on('click', '[data-toggle="page"]', function () {
            component.togglePageState(this);
        });
    
        // Set up indeterminate checkboxes on page load
        component.$html.find('.checkbox[indeterminate]').prop('indeterminate', true);
    };
    
    ModulePermissionsComponent.prototype.toggleModuleVisibility = function () {
    
        var $toggle = $(this),
            $target = $toggle.closest('.module');
    
        if ($target.hasClass('is-open')) {
            $target.removeClass('is-open');
            $toggle.html('<i class="icon-caret-down"></i>');
        } else {
            $target.addClass('is-open');
            $toggle.html('<i class="icon-caret-up"></i>');
        }
    };
    
    ModulePermissionsComponent.prototype.toggleModulePagesVisibility = function () {
    
        var $toggle = $(this),
            $target = $toggle.closest('.module-page');
    
        if ($target.hasClass('is-open')) {
            $target.removeClass('is-open');
            $toggle.text('refine');
        } else {
            $target.addClass('is-open');
            $toggle.text('close');
        }
    };
    
    ModulePermissionsComponent.prototype.toggleModuleMasterState = function (target) {
    
        var component = this,
            $this = $(target),
            $scope = $this.closest('.module'),
            $rowToggles = $('[data-toggle="module-row"]', $scope),
            $crud = $('[data-crud]', $scope),
            $r = $('[data-crud="view"]', $scope),
            $cud = $('[data-crud="create"], [data-crud="update"], [data-crud="delete"]', $scope);
    
        if ($this.is(':checked')) {
            component.setChecked($.merge($rowToggles, $crud));
        } else if ($this.is(':not(:checked)')) {
            component.setUnchecked($.merge($rowToggles, $r));
            component.setDisabled($cud);
        }
    };
    
    ModulePermissionsComponent.prototype.toggleModuleRowState = function (target) {
    
        var component = this,
            $this = $(target),
            $scope = $this.closest('.module-row'),
            $moduleScope = $this.closest('.module'),
            $rowToggles = $('[data-toggle="module-row"]', $scope),
            $crud = $('[data-crud]', $scope),
            $r = $('[data-crud="view"]', $scope),
            $cud = $('[data-crud="create"], [data-crud="update"], [data-crud="delete"]', $scope);
    
        if ($this.is(':checked')) {
            if ($scope.has('.module-subpage').length) {
                component.setChecked($.merge($rowToggles, $crud));
            } else {
                component.setChecked($crud);
            }
        } else if ($this.is(':not(:checked)')) {
            if ($scope.has('.module-subpage').length) {
                component.setUnchecked($.merge($rowToggles, $r));
            } else {
                component.setUnchecked($r);
            }
            component.setDisabled($cud);
        }
    
        component.toggleModuleCrud($('[data-toggle="module-crud"][data-crud="view"]', $this.closest('.module')));
        component.toggleModuleCrud($('[data-toggle="module-crud"][data-crud="create"]', $this.closest('.module')));
        component.toggleModuleCrud($('[data-toggle="module-crud"][data-crud="update"]', $this.closest('.module')));
        component.toggleModuleCrud($('[data-toggle="module-crud"][data-crud="delete"]', $this.closest('.module')));
    };
    
    ModulePermissionsComponent.prototype.toggleCrudState = function (target) {
    
        var component = this,
            $this = $(target),
            $scope = $this.closest('.module-row'),
            $pageScope = $this.closest('.module-page'),
            $moduleScope = $this.closest('.module'),
            $moduleCrudToggle = $('[data-toggle="module-crud"][data-crud="' + $this.data('crud') + '"]', $moduleScope),
            $cud = $('[data-crud]:not([data-crud="view"])', $scope);
    
        if ($this.data('crud') == 'view') {
            if ($this.prop('checked')) {
                component.setEnabled($cud);
            } else {
                component.setDisabled($cud);
            }
        }
    
        if ($this.prop('checked')) {
            component.setChecked($this);
        } else {
            component.setUnchecked($this);
        }
    
        if ($this.data('toggle') == 'subpage') {
    
            var subpageCrudSelector = '[data-toggle="subpage"][data-crud="' + $this.data('crud') + '"]',
                $pageCrudToggle = $('[data-toggle="page"][data-crud="' + $this.data('crud') + '"]', $pageScope);
    
            if ($(subpageCrudSelector + ':checked', $pageScope).length == 0) {
                component.setUnchecked($pageCrudToggle);
            } else if ($(subpageCrudSelector + ':checked', $pageScope).length == $(subpageCrudSelector, $pageScope).length) {
                component.setChecked($pageCrudToggle);
            } else {
                component.setIndeterminate($pageCrudToggle);
            }
    
            component.toggleModuleCrud($moduleCrudToggle);
        }
    
        setTimeout(function () {
            component.updateRowToggles($moduleScope);
        }, 0);
    };
    
    ModulePermissionsComponent.prototype.updateRowToggles = function (scope) {
    
        var component = this,
            $rows = $('.module-row', scope);
    
        $rows.each(function () {
            var $this = $(this),
                $rowToggle = $('> .control__label > .checkbox', $this),
                numCheckboxes = $('[data-crud]', $this).length,
                numChecked = $('[data-crud]:checked', $this).length;
    
            if (numChecked == 0) {
                component.setUnchecked($rowToggle);
            } else if (numChecked === numCheckboxes) {
                component.setChecked($rowToggle);
            } else {
                component.setIndeterminate($rowToggle);
            }
    
            if ($this.has('.module-subpage').length && !$this.hasClass('module-subpage')) {
                component.toggleModulePageCrud($('[data-toggle="page"][data-crud="view"]', $this.closest('.module-page')));
                component.toggleModulePageCrud($('[data-toggle="page"][data-crud="create"]', $this.closest('.module-page')));
                component.toggleModulePageCrud($('[data-toggle="page"][data-crud="update"]', $this.closest('.module-page')));
                component.toggleModulePageCrud($('[data-toggle="page"][data-crud="delete"]', $this.closest('.module-page')));
            }
    
            component.toggleModuleCrud($('[data-toggle="module-crud"][data-crud="view"]', $this.closest('.module')));
            component.toggleModuleCrud($('[data-toggle="module-crud"][data-crud="create"]', $this.closest('.module')));
            component.toggleModuleCrud($('[data-toggle="module-crud"][data-crud="update"]', $this.closest('.module')));
            component.toggleModuleCrud($('[data-toggle="module-crud"][data-crud="delete"]', $this.closest('.module')));
        });
    };
    
    ModulePermissionsComponent.prototype.toggleModuleCrud = function (target) {
    
        var component = this,
            $this = $(target),
            $scope = $this.closest('.module'),
            crudSelector = '[data-crud="' + $this.data('crud') + '"]:not([data-toggle="module-crud"])',
            $moduleMasterToggle = $('[data-toggle="module-master"]', $scope),
            moduleCrudSelector = '[data-toggle="module-crud"]',
            $moduleCrudToggle = $('[data-toggle="module-crud"][data-crud="' + $this.data('crud') + '"]', $scope);
    
        if ($(crudSelector + ':checked', $scope).length == 0) {
            component.setUnchecked($moduleCrudToggle);
        } else if ($(crudSelector, $scope).length == $(crudSelector + ':checked', $scope).length) {
            component.setChecked($moduleCrudToggle);
        } else {
            component.setIndeterminate($moduleCrudToggle);
        }
    
        if ($(moduleCrudSelector + ':checked', $scope).length === 0 && $(moduleCrudSelector + ':indeterminate', $scope).length === 0) {
            component.setUnchecked($moduleMasterToggle);
        } else if ($(moduleCrudSelector, $scope).length === $(moduleCrudSelector + ':checked', $scope).length) {
            component.setChecked($moduleMasterToggle);
        } else if ($(moduleCrudSelector, $scope).length > $(moduleCrudSelector + ':checked', $scope).length) {
            component.setIndeterminate($moduleMasterToggle);
        }
    };
    
    ModulePermissionsComponent.prototype.toggleModulePageCrud = function (target) {
    
        var component = this,
            $this = $(target),
            $scope = $this.closest('.module-page'),
            crudSelector = '[data-crud="' + $this.data('crud') + '"]:not([data-toggle="page"])',
            $modulePageCrudToggle = $('[data-toggle="page"][data-crud="' + $this.data('crud') + '"]', $scope);
    
        if ($(crudSelector + ':checked', $scope).length == 0) {
            if (!$modulePageCrudToggle.prop('disabled')) {
                component.setUnchecked($modulePageCrudToggle);
            }
        } else if ($(crudSelector, $scope).length == $(crudSelector + ':checked', $scope).length) {
            component.setChecked($modulePageCrudToggle);
        } else {
            component.setIndeterminate($modulePageCrudToggle);
        }
    };
    
    ModulePermissionsComponent.prototype.togglePageState = function (target) {
    
        var component = this,
            $this = $(target),
            $scope = $this.closest('.module-page'),
            $moduleScope = $this.closest('.module'),
            crudSelector = '[data-crud="' + $this.data('crud') + '"]:not([data-toggle="page"])',
            $crudEnabledToggles = $(crudSelector + ':not(:disabled)', $scope),
            $crudCheckedToggles = $(crudSelector + ':checked', $scope),
            $crudDisabledToggles = $(crudSelector + ':disabled', $scope),
            $moduleCrudToggle = $('[data-toggle="module-crud"][data-crud="' + $this.data('crud') + '"]', $moduleScope);
    
        if ($crudEnabledToggles.length) {
            if ($this.prop('checked')) {
                component.setChecked($crudEnabledToggles);
            } else {
                component.setUnchecked($crudEnabledToggles);
            }
        }
    
        // if ($($crudDisabledToggles.selector, $scope).length > 0) {
        //     console.log('1');
        //     component.setIndeterminate($this);
        // } else
        if ($($crudEnabledToggles.selector, $scope).length === $($crudCheckedToggles.selector, $scope).length) {
            //console.log('2');
            // if ($this.data('toggle') != 'page') {
            //     console.log('2a');
            //     component.setChecked($this);
            // }
        } else {
            //console.log('3');
            component.setUnchecked($this);
        }
    
        component.toggleModuleCrud($moduleCrudToggle);
    };
    
    ModulePermissionsComponent.prototype.toggleModuleState = function (target) {
    
        var component = this,
            $this = $(target),
            $scope = $this.closest('.module'),
            crudSelector = '[data-crud="' + $this.data('crud') + '"]:not([data-toggle="module-crud"])',
            $crudEnabledToggles = $(crudSelector + ':not(:disabled)', $scope),
            $crudCheckedToggles = $(crudSelector + ':checked', $scope),
            $crudDisabledToggles = $(crudSelector + ':disabled', $scope);
    
        if ($this.prop('checked')) {
            component.setChecked($crudEnabledToggles);
        } else {
            component.setUnchecked($crudEnabledToggles);
        }
    
        if ($($crudDisabledToggles.selector, $scope).length > 0) {
            component.setIndeterminate($this);
        } else if ($($crudEnabledToggles.selector, $scope).length === $($crudCheckedToggles.selector, $scope).length) {
            component.setChecked($this);
        } else {
            component.setUnchecked($this);
    
            component.toggleModuleCrud($('[data-toggle="module-crud"][data-crud="view"]', $this.closest('.module')));
            component.toggleModuleCrud($('[data-toggle="module-crud"][data-crud="create"]', $this.closest('.module')));
            component.toggleModuleCrud($('[data-toggle="module-crud"][data-crud="update"]', $this.closest('.module')));
            component.toggleModuleCrud($('[data-toggle="module-crud"][data-crud="delete"]', $this.closest('.module')));
        }
    };
    
    ModulePermissionsComponent.prototype.setChecked = function (target) {
        target.prop('indeterminate', false).prop('disabled', false).prop('checked', true).parent().removeClass('is-disabled is-indeterminate').addClass('is-checked');
    };
    
    ModulePermissionsComponent.prototype.setUnchecked = function (target) {
        target.prop('checked', false).prop('indeterminate', false).prop('disabled', false).parent().removeClass('is-checked is-disabled is-indeterminate');
    };
    
    ModulePermissionsComponent.prototype.setIndeterminate = function (target) {
        target.prop('checked', false).prop('disabled', false).prop('indeterminate', true).parent().removeClass('is-checked is-disabled').addClass('is-indeterminate');
    };
    
    ModulePermissionsComponent.prototype.setDisabled = function (target) {
        target.prop('checked', false).prop('indeterminate', false).prop('disabled', true).parent().removeClass('is-checked is-indeterminate').addClass('is-disabled');
    };
    
    ModulePermissionsComponent.prototype.setEnabled = function (target) {
        target.prop('disabled', false).parent().removeClass('is-disabled');
    };
    
    module.exports = ModulePermissionsComponent;
    
    },{"jquery":416}],34:[function(require,module,exports){
    'use strict';
    
    var $ = require('jquery');
    
    function NavMainComponent($html, rootWindow, focusManagementService) {
        this.$html = $html;
        this.window = rootWindow;
        this.$window = $(rootWindow);
        this.focusManagementService = focusManagementService;
    };
    
    NavMainComponent.MISSING_ATTR_ERROR = 'A nav link must have a href or data-target attribute';
    NavMainComponent.CLOSE_WITH_ESCAPE = "CLOSE_WITH_ESCAPE";
    NavMainComponent.CLOSE_WITH_CLICK = "CLOSE_WITH_CLICK";
    
    /**
     * Initialise
     */
    NavMainComponent.prototype.init = function () {
        var component = this;
    
        if (!component.$html.length) {
            throw new Error('html must be passed to NavMainComponent');
        }
    
        if (!component.$window.length) {
            throw new Error('window must be passed to NavMainComponent');
        }
    
        component.$body = this.$html.find('body');
        component.$navMain = this.$html.find('.nav-main');
        component.$brandingLink = this.$html.find('.jadu-branding');
        component.$navPrimary = this.$html.find('.nav-primary');
        component.$navSecondary = this.$html.find('.nav-secondary');
        component.$navTertiary = component.$navMain.find('.nav-tertiary');
        component.$navQuaternary = component.$navMain.find('.nav-quaternary');
        component.$primaryNavLinks = component.$navPrimary.find('.nav-link');
        component.$tertiaryNavLinks = component.$navTertiary.find('.nav-link');
        component.$closeLink = component.$navMain.find('[data-nav-action=close]');
        component.$mobileMenuButton = this.$html.find('.mobile-menu-button');
    
        // Calculate what primary nav items can be shown and which need to be hidden in more menu
        component.adjustNavItems();
    
        // Check which tabindexes should be applied to navigation links to ensure WCAG compliance
        component.manageTabIndexes();
    
        // Hide nav from SR on mobile
        var isMobile = !component.window.matchMedia('(min-width: 992px)').matches;
        if (isMobile) {
            component.$navMain.attr('aria-hidden', 'true');
        }
    
        // Open navigation on mobile
        component.$mobileMenuButton.on('click', function (event) {
            var $self = $(this);
            event.stopImmediatePropagation();
    
            if ($self.text() === 'Menu') {
                component.showMobileNav(true);
            } else {
                component.showMobileNav(false);
            }
        });
    
        // More button is shown when window is too short to display all primary nav items
        component.$navMain.on('click', '.more-icon > .nav-link', function (event) {
            var $self = $(this);
            event.preventDefault();
            component.moreIconClickHandler($self);
        });
    
        // Re-adjust nav items on window resize to calc if more button is needed
        component.$window.on('resize', function () {
            var isMobile = !component.window.matchMedia('(min-width: 992px)').matches;
    
            component.adjustNavItems();
            component.manageTabIndexes();
    
            if (!isMobile) {
                component.showMobileNav(false);
                component.$navMain.removeAttr('aria-hidden');
            }
        });
    
        // Close navs when element outside of nav is clicked
        component.$body.find('.toolbar, .content-main, .footer').on('click', function () {
            if (component.isNavOpen()) {
                component.closeNavs($(this));
            }
        });
    
        // Open secondary nav on primary nav item click
        component.$primaryNavLinks.on('click', function (event) {
            component.openSecondaryNav($(this), event);
        });
    
        // Open quaternary nav on tertiary nav item click
        component.$tertiaryNavLinks.on('click', function (event) {
            var $self = $(this),
                target;
    
            if ($self.attr('href')) {
                target = $self.attr('href');
            } else if ($self.attr('data-target')) {
                target = $self.attr('data-target');
            } else {
                throw new Error(NavMainComponent.MISSING_ATTR_ERROR);
            }
    
            if (target.indexOf('#') !== -1) {
                event.preventDefault();
    
                // Change aria expanded to true
                $self.attr('aria-expanded', 'true');
            }
    
            component.openQuaternaryNav(target, $self);
        });
    
        // Close respective navs on close link click
        component.$closeLink.on('click', function (event) {
            event.preventDefault();
            component.closeNavs($(this));
        });
    
        // Close respective navs on ESC
        this.$html.on('keydown', function (event) {
            if (event.keyCode === 27) {
                if (component.$navQuaternary.hasClass('is-open')) {
                    component.closeQuaternaryNav({ type: NavMainComponent.CLOSE_WITH_ESCAPE });
                } else if (component.$navTertiary.hasClass('is-open')) {
                    component.closeTertiaryNav();
                } else if (component.$navSecondary.hasClass('is-open')) {
                    component.closeSecondaryNav({ type: NavMainComponent.CLOSE_WITH_ESCAPE });
                } else if (isMobile && component.$body.hasClass('open-nav')) {
                    component.showMobileNav(false);
                }
            }
        });
    };
    
    /**
     * Check if any navs are open
     * @returns {boolean}
     */
    NavMainComponent.prototype.isNavOpen = function () {
        var component = this,
            isMobile = !component.window.matchMedia('(min-width: 992px)').matches;
    
        if (isMobile && component.$body.hasClass('open-nav')) {
            return true;
        } else if (component.$navSecondary.hasClass('is-open')) {
            return true;
        } else if (component.$navTertiary.hasClass('is-open')) {
            return true;
        } else if (component.$navQuaternary.hasClass('is-open')) {
            return true;
        } else {
            return false;
        }
    };
    
    /**
     * Unto the tabindex if the main nav is in responsive mode
     * This maintains the tab order to ensure WCAG compliance
     */
    NavMainComponent.prototype.manageTabIndexes = function () {
        var component = this,
            isMobile = !component.window.matchMedia('(min-width: 992px)').matches;
    
        if (isMobile) {
            component.$brandingLink.attr('tabindex', '-1');
            component.$primaryNavLinks.attr('tabindex', '-1');
        } else {
            component.$brandingLink.attr('tabindex', '1');
            component.$primaryNavLinks.attr('tabindex', '1');
        }
    };
    
    /**
     * Open secondary navigation, close all other navs and highlight primary nav item parent
     * @param {jQuery} $triggeringElement - the element clicked to open secondary nav
     * @param {Event} event - click event for the primary nav link
     */
    NavMainComponent.prototype.openSecondaryNav = function ($triggeringElement, event) {
        var component = this,
            target;
    
        if ($triggeringElement.attr('href')) {
            target = $triggeringElement.attr('href');
        } else if ($triggeringElement.attr('data-target')) {
            target = $triggeringElement.attr('data-target');
        } else {
            throw new Error(NavMainComponent.MISSING_ATTR_ERROR);
        }
    
        // Close any previously open navs
        component.closeSecondaryNav();
        component.closeTertiaryNav();
        component.closeQuaternaryNav();
    
        // Close any open popovers which would appear over the navigation
        component.$html.find('[data-toggle="popover"]').popover('hide');
    
        // If href is a fragment (therefore opens a sub nav), don't add it to the URL because it breaks the back button
        if (target.indexOf('#') !== -1) {
            event.preventDefault();
            $triggeringElement.attr('aria-expanded', 'true');
            component.$navSecondary.addClass('is-open');
            component.$navSecondary.find('.nav-list.is-active').removeClass('is-active');
            component.$navSecondary.find('[data-nav="' + target + '"]').addClass('is-active');
        }
    
        if (component.$html.find('[data-nav="' + target + '"]').length >= 1) {
            component.$navMain.addClass('is-open');
        } else {
            component.closeNavs($triggeringElement);
        }
    
        component.$navPrimary.find('.is-active').removeClass('is-active');
        component.$navPrimary.find('[href="' + target + '"], [data-target="' + target + '"]').addClass('is-active');
    
        // Manage focus
        component.focusManagementService.storeElement($triggeringElement);
        component.focusManagementService.focusFirstFocusableElement(component.$navSecondary);
        component.focusManagementService.trapFocus(component.$navSecondary);
    };
    
    /**
     * Open quaternary navigation
     * @param {string} target - href of target nav list
     */
    NavMainComponent.prototype.openQuaternaryNav = function (target, $trigger) {
        var component = this;
    
        // If menu item has child menu options and therefore is same-page link then open $navQuaternary
        if (target.indexOf('#') !== -1) {
            component.$navQuaternary.addClass('is-open');
        }
    
        // Show the target nav-list in the opened nav
        component.$navQuaternary.find('[data-nav="' + target + '"]').addClass('is-active');
    
        // Manage focus
        component.focusManagementService.storeElement($trigger);
        component.focusManagementService.focusFirstFocusableElement(component.$navQuaternary);
        component.focusManagementService.trapFocus(component.$navQuaternary);
    };
    
    /**
     * Close respective nav(s) depending on which close link was clicked
     * @param {jQuery} $linkClicked - jQuery object of the close link clicked
     */
    NavMainComponent.prototype.closeNavs = function ($linkClicked) {
        var component = this,
            $linkParent = $linkClicked.closest('.nav-flyout');
    
        if ($linkParent.hasClass('nav-secondary')) {
            component.closeSecondaryNav({ type: NavMainComponent.CLOSE_WITH_CLICK, trigger: $linkClicked });
        } else if ($linkParent.hasClass('nav-tertiary')) {
            component.closeTertiaryNav();
        } else if ($linkParent.hasClass('nav-quaternary')) {
            component.closeQuaternaryNav({ type: NavMainComponent.CLOSE_WITH_CLICK, trigger: $linkClicked });
        }
    
        // like a body click or something outside of navs
        else {
                component.closeSecondaryNav({ type: NavMainComponent.CLOSE_WITH_CLICK, trigger: $linkClicked });
                component.closeTertiaryNav();
                component.closeQuaternaryNav({ type: NavMainComponent.CLOSE_WITH_CLICK, trigger: $linkClicked });
            }
    };
    
    /**
     * Close secondary navigation
     * @param {Object} [action]
     */
    NavMainComponent.prototype.closeSecondaryNav = function (action) {
        var component = this;
    
        component.$navMain.removeClass('is-open');
        component.$navMain.find('[aria-expanded=true]').attr('aria-expanded', 'false');
        component.$navSecondary.removeClass('is-open');
        component.$primaryNavLinks.removeClass('is-active');
        component.$navMain.find('.nav-item.is-active').removeClass('is-active');
        component.$navSecondary.find('.nav-list').removeClass('is-active');
    
        if (action === undefined) {
            return;
        }
    
        switch (action.type) {
            case NavMainComponent.CLOSE_WITH_ESCAPE:
                if (component.focusManagementService.hasStoredElement()) {
                    component.focusManagementService.returnFocusToElement();
                }
                break;
            case NavMainComponent.CLOSE_WITH_CLICK:
                if (action.trigger.parents('.nav-secondary').length > 0) {
                    if (component.focusManagementService.hasStoredElement()) {
                        component.focusManagementService.returnFocusToElement();
                    }
                }
                break;
        }
    };
    
    /**
     * Close tertiary navigation
     */
    NavMainComponent.prototype.closeTertiaryNav = function () {
        var component = this;
    
        component.$navTertiary.removeClass('is-open');
        component.$navTertiary.find('.nav-list').removeClass('is-active');
    
        component.$navMain.find('[aria-expanded=true]').removeClass('is-active').attr('aria-expanded', 'false').trigger('focus');
    };
    
    /**
     * Close quaternary navigation
     * @param {Object} [action]
     */
    NavMainComponent.prototype.closeQuaternaryNav = function (action) {
        var component = this;
    
        component.$navQuaternary.removeClass('is-open');
        component.$navQuaternary.find('.nav-list.is-active').removeClass('is-active');
        component.$navTertiary.find('[aria-expanded=true]').attr('aria-expanded', 'false');
    
        if (action === undefined) {
            return;
        }
    
        switch (action.type) {
            case NavMainComponent.CLOSE_WITH_ESCAPE:
                if (component.focusManagementService.hasStoredElement()) {
                    component.focusManagementService.returnFocusToElement();
                }
                break;
            case NavMainComponent.CLOSE_WITH_CLICK:
                if (action.trigger.parents('.nav-quaternary').length > 0) {
                    if (component.focusManagementService.hasStoredElement()) {
                        component.focusManagementService.returnFocusToElement();
                    }
                }
                break;
        }
    };
    
    /**
     * Toggle mobile navigation
     */
    NavMainComponent.prototype.showMobileNav = function (show) {
        var component = this;
    
        if (show === false) {
            component.$body.removeClass('open-nav');
            component.$mobileMenuButton.removeClass('open').text('Menu').attr('aria-expanded', 'false');
            component.$brandingLink.attr('tabindex', '-1');
            component.$primaryNavLinks.attr('tabindex', '-1');
            component.$navMain.attr('aria-hidden', 'true');
            component.$body.find('.skip-link').removeAttr('aria-hidden');
            component.$body.find('.toolbar > :not(.mobile-menu-button)').removeAttr('aria-hidden');
            component.$body.find('.content-main').removeAttr('aria-hidden');
            component.$body.find('.footer').removeAttr('aria-hidden');
    
            return;
        }
    
        component.$body.addClass('open-nav');
        component.$mobileMenuButton.addClass('open').text('Close').attr('aria-expanded', 'true');
        component.$brandingLink.attr('tabindex', '3');
        component.$primaryNavLinks.attr('tabindex', '3');
        component.$navMain.attr('aria-hidden', 'false');
    
        // Hide rest of page from SR while nav open
        component.$body.find('.skip-link').attr('aria-hidden', 'true');
        component.$body.find('.toolbar > :not(.mobile-menu-button)').attr('aria-hidden', 'true');
        component.$body.find('.content-main').attr('aria-hidden', 'true');
        component.$body.find('.footer').attr('aria-hidden', 'true');
    };
    
    /**
     * Detect window height, adjust the number of items in the primary nav and check when to add "More" option
     */
    NavMainComponent.prototype.adjustNavItems = function () {
        var component = this,
            availableHeight = component.$window.height(),
            navItemsHeight = component.$html.find('.nav-primary .nav-items').outerHeight(true) + component.$html.find('.jadu-branding').outerHeight(true),
            moreIconHeight = 72,
            // Pre calculated height of the "More" nav item
        navItemsCountTotal = component.$html.find('.nav-primary .nav-items li').length,
            numberOfHiddenNavItems = component.$html.find('.nav-primary .nav-item:hidden').length;
    
        // When nav items + more icon height is greater than available window height
        if (navItemsHeight > availableHeight) {
            // Prevent infinite loop when all nav items are already hidden
            if (numberOfHiddenNavItems === navItemsCountTotal - 1) {
                return;
            }
    
            // If there is not enough space hide the last primary nav items
            component.hidePrimaryNavItems(navItemsHeight, moreIconHeight, availableHeight);
            // Get the number of hidden items to make only them visible in the tertiary menu
            numberOfHiddenNavItems = component.$html.find('.nav-primary .nav-item:hidden').length;
            // Add "More" nav item and check its visibility if already exists
            component.addMoreNavItem(numberOfHiddenNavItems);
            // Hide the primary nav items duplicate in tertiary menu
            component.hideMoreCategoriesTopItems(navItemsCountTotal, numberOfHiddenNavItems);
        } else if (navItemsHeight + moreIconHeight < availableHeight) {
            // Unhide items if they were hidden and there is space in the primary nav
            component.unhidePrimaryNavItems();
            numberOfHiddenNavItems = component.$html.find('.nav-primary .nav-item:hidden').length;
            component.lastItemSubstitution(numberOfHiddenNavItems);
        }
    };
    
    /**
     * Hide primary nav items that don't fit in window
     * @param {number} navItemsHeight - PX height of primary nav items
     * @param {number} moreIconHeight - PX height of more link
     * @param {number} availableHeight - PX height of window
     */
    NavMainComponent.prototype.hidePrimaryNavItems = function (navItemsHeight, moreIconHeight, availableHeight) {
        var component = this,
            navItems = component.$html.find('.nav-primary .nav-items'),
            lastPrimaryNavItem = navItems.find('li:last-child'),
            nthChild = 2; // This number represents the item before the last in the nth-last-child;
    
        while (navItemsHeight + moreIconHeight > availableHeight) {
            // If last nav item is visible hide it
            if (lastPrimaryNavItem.is(':visible')) {
                lastPrimaryNavItem.hide();
            } else {
                // If last nav item is hidden hide the next one up
                navItems.find('li:nth-last-child(' + nthChild + ')').hide();
                nthChild++;
            }
    
            // Recalculate nav items height based on items just hidden
            navItemsHeight = navItems.outerHeight(true) + component.$html.find('.jadu-branding').outerHeight(true);
        }
    };
    
    /**
     * Unhide primary nav items
     */
    NavMainComponent.prototype.unhidePrimaryNavItems = function () {
        var component = this,
            navItems = component.$html.find('.nav-primary .nav-items'),
            navItemMore = navItems.find('.more-icon'),
            firstHiddenPrimaryNavItem = navItems.find('li:hidden').first();
    
        if (firstHiddenPrimaryNavItem.length > 0 && navItemMore.is(':visible')) {
    
            // Reset display type to list-item rather than show() to make sure they don't get recreated as inline-block
            firstHiddenPrimaryNavItem.css({ display: 'list-item' });
        }
    };
    
    /**
     * Add the more link to the primary nav
     * @param {number} numberOfHiddenNavItems - Number of hidden nav items
     */
    NavMainComponent.prototype.addMoreNavItem = function (numberOfHiddenNavItems) {
        var component = this,
            navItems = component.$html.find('.nav-primary .nav-items'),
            navItemMore = navItems.find('.more-icon');
    
        // Add the "More" nav item
        if (numberOfHiddenNavItems > 0 && !component.$html.find('.more-icon').length) {
            navItems.append('<li class="nav-item t-nav-item more-icon"><button tabindex="3" class="nav-link t-nav-link" aria-haspopup="true" aria-expanded="false" aria-controls="aria-tertiary-nav"><i aria-hidden="true" class="icon-ellipsis-horizontal nav-link__icon t-nav-icon"></i><span class="nav-link__label">More</span></button></li>');
        }
    
        // Check if "More" nav item is visible
        if (navItemMore.is(':hidden') && numberOfHiddenNavItems > 0) {
            navItemMore.show();
        } else {
            component.$html.find('.nav-tertiary').removeClass('is-open');
            component.$html.find('.nav-quaternary').removeClass('is-open');
        }
    };
    
    /**
     * Hide the nav items in nav tertiary that are already displayed in the primary nav
     * @param {number} navItemsCountTotal - Total number of nav items
     * @param {number} numberOfHiddenNavItems - Number of hidden nav items
     */
    NavMainComponent.prototype.hideMoreCategoriesTopItems = function (navItemsCountTotal, numberOfHiddenNavItems) {
        var component = this,
            nthChild = 1,
            // Number used to iterate nth-child
        itemsToHideCount;
    
        // Reset hidden nav items
        component.$html.find('.nav-tertiary .nav-items li').show();
    
        // Calculate the number of visible nav items in primary nav
        itemsToHideCount = navItemsCountTotal - numberOfHiddenNavItems - 1; // 1 is for the "More" nav item
    
        // Hide top items in "More Categories" equal to the number of visible items of primary nav
        while (itemsToHideCount >= 0) {
            component.$html.find('.nav-tertiary .nav-items li:nth-child(' + nthChild + ')').hide();
            nthChild++;
            itemsToHideCount--;
        }
    };
    
    /**
     * Hide more link if there are no hidden nav items
     * @param {number} numberOfHiddenNavItems - Number of hidden nav items
     */
    NavMainComponent.prototype.lastItemSubstitution = function (numberOfHiddenNavItems) {
        var component = this,
            navItems = component.$html.find('.nav-primary .nav-items'),
            navItemMore = navItems.find('.more-icon');
    
        if (numberOfHiddenNavItems === 0) {
            navItemMore.hide();
            component.$html.find('.nav-tertiary').removeClass('is-open');
            component.$html.find('.nav-quaternary').removeClass('is-open');
        }
    };
    
    /**
     * Hide more link if there are no hidden nav items
     * @param {jQuery} $moreLink - jQuery object of the more link
     */
    NavMainComponent.prototype.moreIconClickHandler = function ($moreLink) {
        var component = this;
    
        $moreLink.addClass('is-active');
    
        // Close secondary nav if already open
        component.closeSecondaryNav();
    
        // If tertiary nav is already open
        if (component.$navTertiary.find('.nav-list').hasClass('is-active')) {
            $moreLink.attr('aria-expanded', 'false');
            component.$navTertiary.removeClass('is-open');
            component.$navQuaternary.removeClass('is-open');
            component.$navTertiary.find('.nav-list').removeClass('is-active');
            component.$navQuaternary.find('.nav-list').removeClass('is-active');
        } else {
            $moreLink.attr('aria-expanded', 'true');
    
            // Open $navTertiary
            component.$navTertiary.find('.nav-list').addClass('is-active');
            component.$navTertiary.addClass('is-open');
    
            // Manage focus
            component.focusManagementService.storeElement($moreLink);
            component.focusManagementService.focusFirstFocusableElement(component.$navTertiary);
            component.focusManagementService.trapFocus(component.$navTertiary);
        }
    };
    
    module.exports = NavMainComponent;
    
    },{"jquery":416}],35:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var _require = require('../utilities/fileUtilities'),
        filterFileExtension = _require.filterFileExtension,
        getFileExtension = _require.getFileExtension;
    
    var FaviconEditor = function () {
        /**
         * @param root {HTMLElement}
         */
        function FaviconEditor(root) {
            _classCallCheck(this, FaviconEditor);
    
            /**
             * <link/> references
             * @type {Array<{ node: HTMLLinkElement, cachedHref: string }>}
             */
            this.favicons = [];
    
            /**
             * Root element for favicon queries
             * @type {HTMLElement}
             */
            this.root = root;
    
            /**
             * A serializer function that can be overwritten using
             * the public API, this is for altering the return data type
             * from the update methods
             * @param canvas {HTMLCanvasElement}
             * @param ctx {CanvasRenderingContext2D}
             * @param originalImage {HTMLImageElement}
             */
            this.serializer = function (canvas, ctx, originalImage) {
                return canvas.toDataURL('image/' + getFileExtension(originalImage.src));
            };
        }
    
        /**
         * Override the canvas serializer function
         * @param serializer {function}
         */
    
    
        _createClass(FaviconEditor, [{
            key: 'setSerializer',
            value: function setSerializer(serializer) {
                this.serializer = serializer;
            }
    
            /**
             * Initiate service
             */
    
        }, {
            key: 'init',
            value: function init() {
                // Get favicon nodes from DOM
                this.favicons = [].slice.call(this.root.querySelectorAll('[rel*="icon"]')).map(function (node) {
                    return { node: node, cachedHref: node.href };
                });
            }
    
            /**
             * Update the favicon href, takes a custom graphics function
             * that exposes the canvas context for adding favicon details
             * @param customGraphics {function}
             */
    
        }, {
            key: 'update',
            value: function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(customGraphics) {
                    var _this = this;
    
                    var setupPromises, favicons, data, index, _favicons$index, node, canvas, image, uri;
    
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    setupPromises = [];
                                    favicons = void 0;
                                    data = void 0;
    
    
                                    this.favicons.forEach(function (_ref2) {
                                        var node = _ref2.node;
    
                                        if (filterFileExtension(node.href, 'ico png')) {
                                            setupPromises.push(_this.setup(node));
                                        }
                                    });
    
                                    _context.prev = 4;
                                    _context.next = 7;
                                    return Promise.all(setupPromises);
    
                                case 7:
                                    favicons = _context.sent;
                                    _context.next = 13;
                                    break;
    
                                case 10:
                                    _context.prev = 10;
                                    _context.t0 = _context['catch'](4);
    
                                    favicons = [];
    
                                case 13:
    
                                    for (index = 0; index < favicons.length; index++) {
                                        _favicons$index = favicons[index], node = _favicons$index.node, canvas = _favicons$index.canvas, image = _favicons$index.image;
                                        uri = this.draw(canvas, image, customGraphics);
    
                                        // assign the uri to data so we can return the new
                                        // favicon data uri
    
                                        if (!index) {
                                            data = uri;
                                        }
    
                                        node.href = uri;
                                    }
    
                                    return _context.abrupt('return', data);
    
                                case 15:
                                case 'end':
                                    return _context.stop();
                            }
                        }
                    }, _callee, this, [[4, 10]]);
                }));
    
                function update(_x) {
                    return _ref.apply(this, arguments);
                }
    
                return update;
            }()
    
            /**
             * Add a circle to the top right of the favicon
             * @param color {string}
             * @param size {number}
             * @returns {Promise<string>}
             */
    
        }, {
            key: 'addCircleNotification',
            value: function () {
                var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(color) {
                    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                            switch (_context2.prev = _context2.next) {
                                case 0:
                                    _context2.next = 2;
                                    return this.update(function (canvas, ctx) {
                                        ctx.fillStyle = color;
                                        ctx.beginPath();
                                        ctx.arc(canvas.width - size, size, size, 0, 2 * Math.PI);
                                        ctx.fill();
                                    });
    
                                case 2:
                                    return _context2.abrupt('return', _context2.sent);
    
                                case 3:
                                case 'end':
                                    return _context2.stop();
                            }
                        }
                    }, _callee2, this);
                }));
    
                function addCircleNotification(_x3) {
                    return _ref3.apply(this, arguments);
                }
    
                return addCircleNotification;
            }()
    
            /**
             * Add a notification with a custom graphics function,
             * the callback will receive the canvas and context as
             * arguments
             * @param customGraphics {function}
             * @returns {Promise<string>}
             */
    
        }, {
            key: 'addCustomNotification',
            value: function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(customGraphics) {
                    return regeneratorRuntime.wrap(function _callee3$(_context3) {
                        while (1) {
                            switch (_context3.prev = _context3.next) {
                                case 0:
                                    _context3.next = 2;
                                    return this.update(customGraphics);
    
                                case 2:
                                    return _context3.abrupt('return', _context3.sent);
    
                                case 3:
                                case 'end':
                                    return _context3.stop();
                            }
                        }
                    }, _callee3, this);
                }));
    
                function addCustomNotification(_x4) {
                    return _ref4.apply(this, arguments);
                }
    
                return addCustomNotification;
            }()
    
            /**
             * Setup an in-memory canvas
             * @param faviconNode {HTMLLinkElement}
             */
    
        }, {
            key: 'setup',
            value: function setup(faviconNode) {
                // Create an image from our favicon
                var favicon = document.createElement('img');
    
                // Create canvas
                var canvas = document.createElement('canvas');
    
                // Side step issues with CORs and "tainted" canvases
                favicon.crossOrigin = '';
    
                return new Promise(function (resolve, reject) {
                    favicon.src = faviconNode.href;
    
                    // Wait for our favicon to load
                    favicon.addEventListener('load', function (event) {
                        resolve({ canvas: canvas, image: event.target, node: faviconNode });
                    });
    
                    favicon.addEventListener('error', reject);
                });
            }
    
            /**
             * Draw favicon on a canvas
             * @param canvas {HTMLCanvasElement}
             * @param favicon {HTMLImageElement}
             * @param customGraphics {function}
             */
    
        }, {
            key: 'draw',
            value: function draw(canvas, favicon, customGraphics) {
                var ctx = canvas.getContext('2d');
    
                // Setup dimensions
                canvas.width = favicon.width;
                canvas.height = favicon.height;
    
                // Draw favicon
                ctx.drawImage(favicon, 0, 0);
    
                // Add graphics
                customGraphics(canvas, ctx);
    
                // pass canvas, ctx & favicon image node to our
                // serializer function
                return this.serializer(canvas, ctx, favicon);
            }
    
            /**
             * Restore favicons to cached state
             */
    
        }, {
            key: 'restore',
            value: function restore() {
                this.favicons.forEach(function (_ref5) {
                    var node = _ref5.node,
                        cachedHref = _ref5.cachedHref;
    
                    node.href = cachedHref;
                });
            }
        }]);
    
        return FaviconEditor;
    }();
    
    module.exports = FaviconEditor;
    
    },{"../utilities/fileUtilities":69}],36:[function(require,module,exports){
    'use strict';
    
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
    
    var $ = require('jquery'),
        TimePickerComponent = require('./TimePickerComponent'),
        InputLength = require('input-length');
    
    require('pikaday'), require('pikaday/plugins/pikaday.jquery');
    require('spectrum-colorpicker');
    require('select2')();
    
    function PulsarFormComponent(html) {
        this.$html = html;
        this.timePickerComponent = new TimePickerComponent();
        this.inputLength = new InputLength(this.$html);
    }
    
    PulsarFormComponent.prototype.init = function () {
        var component = this;
    
        // Colour picker
        component.initColourpickers();
    
        // Date picker
        component.initDatePickers();
    
        // Choice block
        component.initSelectionButtons();
    
        // Select2
        component.initSelect2(component.$html.find('.js-select2:not([data-init="false"])'));
    
        // Time picker
        component.initTimePickers();
    
        // Toggle switches
        component.initToggleSwitches();
    
        // Maxlength counters
        component.initMaxlengthCounters();
    };
    
    /**
     * Re-initialise the Form Component Services
     * I've intentionally left out Select2 here, as programmatic
     * control often requires more custom behaviour than simply re-init'ing
     */
    PulsarFormComponent.prototype.refresh = function () {
        // Colour picker
        this.initColourpickers();
    
        // Date picker
        this.initDatePickers();
    
        // Choice block
        this.initSelectionButtons();
    
        // Time picker
        this.initTimePickers();
    };
    
    /**
     * Initiate a visual counter on inputs with a maxlength
     */
    PulsarFormComponent.prototype.initMaxlengthCounters = function () {
        this.inputLength.init({
            targetSelector: '[data-maxlength]',
            baseClass: 'help-block'
        });
    };
    
    /**
     * Initiate a time picker on data-timepicker fields
     */
    PulsarFormComponent.prototype.initTimePickers = function () {
        this.timePickerComponent.init(this.$html.find('[data-timepicker=true]'));
    };
    
    /**
     * Initiate a date picker on data-datepicker fields using pickaday
     */
    PulsarFormComponent.prototype.initDatePickers = function () {
        var datepickers = this.$html.find('[data-datepicker="true"]');
        var defaultDateFormat = 'DD/MM/YYYY';
    
        datepickers.each(function (index, element) {
            var dateFormat = element.getAttribute('data-format');
    
            // Check if data-format attribute exists and lowercase it
            // to eliminate different styles of writing issues
            if (dateFormat !== null) {
                dateFormat = dateFormat.toLowerCase();
            }
    
            switch (dateFormat) {
                case 'us':
                    defaultDateFormat = 'MM/DD/YYYY';
                    break;
                case 'reverse':
                    defaultDateFormat = 'YYYY/MM/DD';
                    break;
                default:
                    defaultDateFormat = 'DD/MM/YYYY';
            }
    
            // Initialize pikaday with the correct date format
            $(element).pikaday({
                format: defaultDateFormat
            });
    
            // Initialize placeholder attribute based on the date format
            $(element).attr('placeholder', defaultDateFormat.toLowerCase());
    
            // Switch off autocomplete to avoid it overlapping the date picker
            $(element).attr('autocomplete', 'off');
        });
    };
    
    /**
     * Initiate colour pickers
     */
    PulsarFormComponent.prototype.initColourpickers = function () {
        var component = this,
            pickers = component.$html.find('.js-colorpicker');
    
        pickers.each(function () {
    
            var $this = $(this),
                $input = $this.find('.form__control'),
                $pickerInput = $('<input type="hidden" data-colour-picker-input>'),
                disabledAttr = $input.attr('disabled'),
                isDisabled = false,
                existingPicker = $input.next('[data-colour-picker-input]');
    
            if ((typeof disabledAttr === 'undefined' ? 'undefined' : _typeof(disabledAttr)) !== (typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined)) && disabledAttr !== false) {
                isDisabled = true;
            }
    
            if (existingPicker.length) {
                // Remove existing colour picker elements,
                // frustratingly invoking the spectrum 'destroy'
                // method does not remove the sp-replacer
                $pickerInput.spectrum('destroy');
                existingPicker.remove();
                $input.siblings('.sp-replacer').remove();
            }
    
            $pickerInput.insertAfter($input);
    
            // changing the picker should update the input
            /* istanbul ignore next: won't test spectrum internals */
            $pickerInput.spectrum({
                color: '#' + $input.val(),
                disabled: isDisabled,
                showInput: false,
                preferredFormat: 'hex',
                replacerClassName: 'btn',
                change: function change(color) {
                    if (!$input.attr('disabled')) {
                        $input.val(('' + color).substring(1));
                        $input.trigger('change');
                    }
                }
            });
    
            // Remove the text input inside the picker, which we don't use and 
            // causes a11y issues if left in the markup
            component.$html.find('.sp-input-container').remove();
    
            // changing the input should update the picker
            $input.on('change', function () {
                $pickerInput.spectrum('set', '#' + $input.val());
            });
        });
    };
    
    /**
     * Update colour pickers within a scope
     * @param $root
     */
    PulsarFormComponent.prototype.updateColourPicker = function ($root) {
        var $input = $root.find('.js-colorpicker .form__control');
    
        $input.each(function (index, element) {
            var $input = $(element);
            var $picker = $input.next();
    
            $picker.spectrum('set', '#' + $input.val());
        });
    };
    
    /**
     * Initiate Selection Buttons
     */
    PulsarFormComponent.prototype.initSelectionButtons = function () {
        var choiceblock = this.$html.find('.choice--block');
    
        choiceblock.find('input[type="checkbox"]:checked, input[type="radio"]:checked').closest('.control__label').addClass('is-selected');
    
        choiceblock.on('change', '.controls input[type="checkbox"], .controls input[type="radio"]', this.selectionButtons);
    };
    
    /**
     * Selection Button className logic
     */
    PulsarFormComponent.prototype.selectionButtons = function () {
        var $target = $(this),
            $controls = $target.closest('.controls');
    
        $controls.find('input[type="checkbox"]:not(:checked), input[type="radio"]:not(:checked)').closest('.control__label').removeClass('is-selected');
    
        if ($target.is(':checked')) {
            $target.closest('.control__label').addClass('is-selected');
        } else {
            $target.closest('.control__label').removeClass('is-selected');
        }
    };
    
    /**
     * Initiate Select2
     * @param target
     */
    PulsarFormComponent.prototype.initSelect2 = function (target) {
        var $target = target;
    
        $target.each(function () {
            var $this = $(this),
                config = {};
    
            function formatOption(data) {
                return $('<span>' + data.text + '</span>');
            }
    
            if ($this.data('html')) {
                config.templateResult = formatOption;
                config.templateSelection = formatOption;
            }
    
            $this.select2(config);
            $this.parent().find('.select2-container').removeAttr('style');
        });
    };
    
    /**
     * Initiate Toggle Switches
     * 
     * This only allows click events on the main label, or the actual toggle control
     */
    PulsarFormComponent.prototype.initToggleSwitches = function () {
        var component = this;
    
        component.$html.on('click', '.toggle-switch-wrapper-label', function (e) {
            var $target = $(e.target),
                $toggle = $(this).find('.toggle-switch');
    
            if ($target.hasClass('toggle-switch-label') || $target.hasClass('toggle-switch') || $target.hasClass('control__label')) {
                $toggle.trigger('focus');
            } else {
                e.preventDefault();
            }
        });
    };
    
    module.exports = PulsarFormComponent;
    
    },{"./TimePickerComponent":53,"input-length":405,"jquery":416,"pikaday":420,"pikaday/plugins/pikaday.jquery":421,"select2":431,"spectrum-colorpicker":432}],37:[function(require,module,exports){
    'use strict';
    
    /* jshint: global e, ui */
    
    var $ = require('jquery'),
        _ = require('lodash');
    
    $.ui = require('jquery-ui/ui/widget.js');
    
    require('jquery-ui/ui/data');
    require('jquery-ui/ui/disable-selection');
    require('jquery-ui/ui/scroll-parent');
    require('jquery-ui/ui/widgets/mouse');
    require('jquery-ui/ui/widgets/sortable');
    
    function PulsarSortableComponent(html, window) {
        this.$html = html;
        this.window = window;
    }
    
    PulsarSortableComponent.prototype.init = function () {
        var component = this;
    
        component.initTables();
    };
    
    PulsarSortableComponent.prototype.initTables = function () {
        /* istanbul ignore next: difficult to test jQueryUI sortable behaviour */
        var component = this,
            fakeUi = {},
            currentRow,
            linkContainer,
            moveLinks,
            update = function update(e, ui, $sortableElement) {
            var $item = $(ui.item);
    
            $item.removeClass('is-dragging').addClass('has-success fade', function () {
                setTimeout(function () {
                    $item.removeClass('has-success fade');
                }, 2500);
            });
    
            component.updateOrder();
        };
    
        /* istanbul ignore next: difficult to test jQueryUI sortable behaviour */
        this.$html.find('.table.is-sortable tbody').sortable({
            placeholder: 'is-sorting',
            helper: component.fixHelper,
            opacity: 0.9,
            create: function create(e, ui) {
                component.addOrder();
            },
            start: function start(e, ui) {
                $(ui.helper).addClass('is-dragging');
            }
        }).disableSelection();
    
        // Trigger update() on sortupdate event
        /* istanbul ignore next: difficult to test jQueryUI sortable behaviour */
        this.$html.find('.table.is-sortable tbody').on('sortupdate', function (e, ui) {
            var $sortableElement = $(this);
    
            update(e, ui, $sortableElement);
        });
    
        // Show arrows when row is tabbed to focus
        this.$html.find('[data-move]').on('focus', function () {
    
            // Using keydown instead of keyup as it means that the up/down controls
            // are displayed if the tab key is being held down until the right
            // element comes into focus
            $(component.window).keydown(function (e) {
                var code = e.keyCode ? e.keyCode : e.which,
                    $parentElement = $(e.target.parentElement);
    
                // If tab key has been pressed
                if (code === 9) {
                    if ($(e.target).hasClass('hide')) {
                        $parentElement.width($parentElement.width() + 40);
    
                        $parentElement.closest('.table.is-sortable').find('[data-move]').removeClass('hide');
                    }
                }
            });
        });
    
        // Reorder via arrows
        this.$html.find('[data-move]').on('click keypress', function () {
            var $this = $(this),
                currentRow = $this.closest('tr'),
                linkContainer = $this.closest('td'),
                moveLinks = linkContainer.find('a');
    
            moveLinks.addClass('hide');
            linkContainer.addClass('u-text-align-center').append('<span class="js-sortable-moved u-no-wrap"><i class="icon-ok-sign icon--success"></i></span>');
    
            if ($this.attr('data-move') === 'up') {
                currentRow.prev().before(currentRow);
            }
            if ($this.attr('data-move') === 'down') {
                currentRow.next().after(currentRow);
            }
    
            setTimeout(function () {
                linkContainer.removeClass('u-text-align-center').find('.js-sortable-moved').remove();
    
                moveLinks.removeClass('hide');
            }, 1500);
    
            // Fake the UI object created by sortable drag and drop
            fakeUi.item = currentRow;
    
            // Trigger sortupdate and pass the updated row
            component.$html.find('.table.is-sortable tbody').trigger('sortupdate', [fakeUi]);
        });
    
        // Update "Actions" badge when table row is clicked
        this.$html.find('.has-badges table tr').on('click', function (event) {
            var $this = $(this),
                $target = $(event.target),
                $checkbox = $this.find('.checkbox').first(),
                selected = $checkbox.prop('checked');
    
            // toggle checkbox state if the checkbox was not the target of the event
            if (!$target.is($checkbox)) {
                $checkbox.prop('checked', !selected);
            }
    
            // toggle row selected class
            $this.toggleClass('is-selected');
    
            component.actionsBadge();
        });
    };
    
    /* istanbul ignore next: difficult to test jQueryUI sortable behaviour */
    PulsarSortableComponent.prototype.fixHelper = function (e, ui) {
        ui.children().each(function () {
            $(this).width($(this).width());
        });
    
        return ui;
    };
    
    PulsarSortableComponent.prototype.addOrder = function () {
        var component = this;
    
        component.$html.find('.table.is-sortable tr > td:first-of-type').each(function (i) {
            var $this = $(this),
                label = _.escape($this.text()),
                count = i + 1;
    
            $this.html('<span class="sortable__count js-sortable-count">' + count + '</span> ' + label);
        });
    };
    
    PulsarSortableComponent.prototype.updateOrder = function () {
        var component = this;
    
        component.$html.find('.table.is-sortable .js-sortable-count').each(function (i) {
            $(this).text(i + 1);
        });
    };
    
    // Create or update "Actions" badge when a table row is selected
    PulsarSortableComponent.prototype.actionsBadge = function () {
        var component = this,
            checkedBoxesCount = component.$html.find('.has-badges table tr input.checkbox:checked').length,
            badge = component.$html.find('.has-badges .btn__group.dropdown span.badge'),
            itemWording = component.$html.find('.has-badges .btn__group.dropdown .item-wording'),
            deleteOption = component.$html.find('.has-badges .dropdown__menu li .delete');
    
        if (checkedBoxesCount > 0) {
            // Remove previous badge
            badge.remove();
            // Add badge next to "Actions" dropdown text
            $('<span class="badge">' + checkedBoxesCount + '</span>').insertBefore('.has-badges .btn__group.dropdown span.caret');
    
            if (deleteOption) {
                // Add badge to "Delete" option of the dropdown
                $('<span class="badge">' + checkedBoxesCount + '</span>').appendTo(deleteOption);
    
                // Add the words item/items depending on the number of items
                if (checkedBoxesCount === 1) {
                    itemWording.remove();
                    $('<span class="item-wording">item</span>').appendTo(deleteOption);
                } else {
                    itemWording.remove();
                    $('<span class="item-wording">items</span>').appendTo(deleteOption);
                }
            }
        } else if (checkedBoxesCount === 0) {
            // Remove previous badges if there are no selected items
            badge.remove();
            itemWording.remove();
        }
    };
    
    module.exports = PulsarSortableComponent;
    
    },{"jquery":416,"jquery-ui/ui/data":409,"jquery-ui/ui/disable-selection":410,"jquery-ui/ui/scroll-parent":411,"jquery-ui/ui/widget.js":412,"jquery-ui/ui/widgets/mouse":414,"jquery-ui/ui/widgets/sortable":415,"lodash":418}],38:[function(require,module,exports){
    'use strict';
    
    var $ = require('jquery'),
        StickyScrollBarComponent = require('./StickyScrollBarComponent');
    
    var _require = require('./DataTables/dataTablesInitComplete'),
        initComplete = _require.initComplete;
    
    var _require2 = require('./DataTables/dataTablesDrawCallback'),
        drawCallback = _require2.drawCallback;
    
    require('datatables.net')(window, $);
    require('datatables.net-buttons')(window, $);
    require('datatables.net-responsive')(window, $);
    require('datatables.net-select')(window, $);
    require('jquery-countdown');
    
    function PulsarUIComponent(html, history) {
        this.history = history;
        this.$html = html;
        this.$window = $(window);
        this.stickyScrollBarComponent = new StickyScrollBarComponent(this.$window, this.$html);
    }
    
    PulsarUIComponent.prototype.init = function () {
        var component = this;
    
        this.initDisabledLinks();
        this.initTables();
        this.initDataTables();
        this.initCountdown();
    };
    
    PulsarUIComponent.prototype.initDisabledLinks = function () {
        var $links = this.$html.find('a.is-disabled');
    
        $links.each(function () {
            var $this = $(this);
    
            $this.attr('aria-disabled', 'true').attr('role', 'button').attr('data-href', $this.attr('href')).removeAttr('href').on('click', function (e) {
                e.preventDefault();
            });
        });
    };
    
    PulsarUIComponent.getDatatableOptions = function ($table) {
        var dom = '<"dataTables_top"Birf><"dataTables_actions"T>t<"dataTables_bottom"pl>',
            langEmptyTable = 'There are currently no items to display',
            pageLength = 25,
            lengthChange = false,
            select = {
            className: 'dt-row-selected',
            style: 'multi',
            selector: 'td.table-selection'
        },
            columnDefs = [{
            searchable: false,
            orderable: false,
            targets: 0
        }];
    
        if ($table.length && $table.data('empty-table')) {
            langEmptyTable = $table.data('empty-table');
        }
    
        if ($table.length && $table.data('page-length')) {
            pageLength = $table.data('page-length');
        }
    
        if ($table.length && $table.data('length-change')) {
            lengthChange = $table.data('length-change');
        }
    
        if ($table.length && $table.data('select') === false) {
            select = false;
            columnDefs = [];
        }
    
        if ($table.length && $table.data('overflow') === 'collapse') {
            columnDefs = [{
                className: 'control',
                orderable: false,
                searchable: false,
                targets: 0
            }];
        }
    
        if ($table.length && $table.data('overflow') === 'collapse' && $table.data('select') === true) {
            columnDefs = [{
                className: 'control',
                targets: 0
            }, {
                orderable: false,
                searchable: false,
                targets: [0, 1]
            }];
        }
    
        var options = {
            aaSorting: [],
            autoWidth: false,
            buttons: [],
            className: 'dt-row-selected',
            columnDefs: columnDefs,
            initComplete: initComplete,
            drawCallback: drawCallback,
            dom: dom,
            language: {
                emptyTable: langEmptyTable,
                info: "Showing _START_ to _END_ of _TOTAL_ items",
                infoEmpty: 'No items',
                infoFiltered: " (filtered from _MAX_ items)",
                zeroRecords: "No items matched your filter, please clear it and try again",
                search: "Filter records",
                aria: {
                    paginate: {
                        first: 'First page',
                        previous: 'Previous page',
                        next: 'Next page',
                        last: 'Last page'
                    }
                }
            },
            lengthChange: lengthChange,
            pageLength: pageLength,
            pagingType: 'full_numbers',
            responsive: {
                details: {
                    type: 'column',
                    target: '.table-child-toggle'
                }
            },
            select: select,
            selector: 'td.table-selection',
            stateSave: false,
            style: 'multi'
        };
    
        return options;
    };
    
    PulsarUIComponent.prototype.initTables = function () {
    
        // Wrap non datatable tables in responsive container so they can scroll when required
        var $tables = this.$html.find('.table:not(.datatable), .table--datagrid:not(.datatable)');
    
        $tables.each(function (i, v) {
            var $table = $(v);
    
            if (!$table.parent().hasClass('table-container')) {
                $table.wrap('<div class="table-container"></div>');
            }
        });
    };
    
    PulsarUIComponent.prototype.initDataTables = function () {
        var component = this,
            datatables = component.$html.find('.datatable:not([data-init="false"]):not(.table--horizontal)'),
            datatablesHorizontal = component.$html.find('.datatable.table--horizontal:not([data-init="false"])');
    
        datatables.each(function () {
            var $this = $(this);
    
            var datatableOptions = PulsarUIComponent.getDatatableOptions($this);
    
            var table = $this.DataTable(datatableOptions);
    
            $this.on('click', '.js-select-all', function (e) {
                var $checkbox = $(e.target),
                    $allCheckboxes = $this.find('.js-select');
    
                if ($checkbox.hasClass('selected')) {
                    table.rows().deselect();
                    $checkbox.removeClass('selected');
                    $allCheckboxes.removeClass('selected').prop('checked', false);
                } else {
                    table.rows().select();
                    $checkbox.addClass('selected');
                    $allCheckboxes.addClass('selected').prop('checked', true);
                }
            });
        });
    
        datatablesHorizontal.each(function () {
            var $this = $(this),
                dom = '<"dataTables_top"Birf><"dataTables_actions"T><"table-container"t><"dataTables_bottom"lp>',
                select = {
                className: 'dt-row-selected',
                style: 'multi',
                selector: '.js-select',
                info: true
            };
    
            if ($this.data('select') === false) {
                dom = '<"dataTables_top"irf><"dataTables_actions"T><"dt-disable-selection"<"table-container"t>><"dataTables_bottom"lp>';
                select = false;
            }
    
            var datatableOptions = PulsarUIComponent.getDatatableOptions($this);
    
            var horizontalOptions = $.extend({}, datatableOptions, {
                dom: dom,
                responsive: null,
                select: select
            });
    
            var table = $this.DataTable(horizontalOptions);
    
            // Add sticky scroll bar
            component.stickyScrollBarComponent.init($this.parent());
    
            // Init bulk actions menu
            component.toggleBulkActions($this);
    
            // Rerun bulk actions on row select
            table.on('select deselect', function (e, dt, type, indexes) {
                if (type === 'row') {
                    component.toggleBulkActions($this);
                }
            });
    
            $this.on('click', '.js-select-all', function (e) {
                var $checkbox = $(e.target),
                    $allCheckboxes = $this.find('.js-select');
    
                if ($checkbox.hasClass('selected')) {
                    table.rows({ search: 'applied' }).deselect();
    
                    $checkbox.removeClass('selected');
                    $allCheckboxes.removeClass('selected').prop('checked', false);
                } else {
                    table.rows({ search: 'applied' }).select();
                    $checkbox.addClass('selected');
                    $allCheckboxes.addClass('selected').prop('checked', true);
                }
            });
        });
    
        // Refresh datatables when tabs are switched, this fixes some layout issues
        this.$html.find('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            $($.fn.dataTable.tables(true)).DataTable().columns.adjust().responsive.recalc();
        });
    
        this.$html.find('.table--horizontal').each(function () {
            var $table = $(this).parent();
    
            $table.on('scroll', function () {
                component.styleTableOverflows($table);
            });
    
            $(window).on('load resize', function () {
                component.styleTableOverflows($table);
    
                // reset column widths so headers match the body
                $($.fn.dataTable.tables(true)).DataTable().columns.adjust();
            });
    
            // Add sticky scroll bar
            component.stickyScrollBarComponent.init($table);
        });
    
        // Remove invalid attribute after tables are loaded
        // https://datatables.net/forums/discussion/comment/145251/#Comment_145251
        component.$html.find('.dataTables_empty').removeAttr('valign');
    };
    
    PulsarUIComponent.prototype.styleTableOverflows = function ($container) {
        var $table = $container.find('.table'),
            tableFullWidth = $table[0].scrollWidth,
            tableVisibleWidth = $container.width();
    
        // Toggle right hand shadow, if overflowing to the right
        if (Math.floor(tableFullWidth) === Math.floor(tableVisibleWidth)) {
            $container.removeClass('table--overflow-right');
        } else {
            $container.addClass('table--overflow-right');
        }
    
        // Toggle left hand shadow, if overflowing to the left
        if ($table.offsetParent().offset().left - $table.offset().left > 0) {
            $container.addClass('table--overflow-left');
        } else {
            $container.removeClass('table--overflow-left');
        }
    
        // Remove right hand shadow if table scrolled to right hand edge
        if (-Math.abs(tableFullWidth - tableVisibleWidth - $table.offsetParent().offset().left) >= $table.offset().left) {
            $container.removeClass('table--overflow-right');
        }
    };
    
    PulsarUIComponent.prototype.initCountdown = function () {
    
        // Initial basic implementation of https://github.com/hilios/jQuery.countdown
        this.$html.find('.js-countdown').each(function () {
    
            var $this = $(this),
                format = '%ww %dd %Hh %Mm %S';
    
            if (typeof $this.data('format') !== 'undefined') {
                format = $this.data('format');
            }
    
            $this.countdown($this.data('final-date'), function (event) {
                $this.html(event.strftime(format));
            });
        });
    };
    
    PulsarUIComponent.prototype.toggleBulkActions = function (table) {
        var table = table.DataTable(),
            count = table.rows({ selected: true }).count(),
            $bulkActionsButton = this.$html.find('.bulk-actions'),
            $bulkActionsBadge = $bulkActionsButton.find('.js-bulk-actions-badge'),
            $bulkActions = this.$html.find('[data-bulk-action]');
    
        if (count === 0) {
            $bulkActionsBadge.hide();
    
            $bulkActions.addClass('disabled').prop('aria-disabled', 'true').prop('aria-label', 'no rows selected').parent().attr({
                'data-toggle': 'tooltips',
                'data-placement': 'right',
                'data-container': 'body',
                'title': 'Select one or more items to perform this bulk action'
            }).tooltips();
        } else {
            $bulkActionsBadge.attr('aria-label', count + ' row' + (count > 1 ? 's' : '') + ' selected').text(count).show();
    
            $bulkActions.removeClass('disabled').prop('aria-disabled', 'false').parent().tooltips('destroy');
        }
    };
    
    module.exports = PulsarUIComponent;
    
    },{"./DataTables/dataTablesDrawCallback":2,"./DataTables/dataTablesInitComplete":3,"./StickyScrollBarComponent":49,"datatables.net":404,"datatables.net-buttons":401,"datatables.net-responsive":402,"datatables.net-select":403,"jquery":416,"jquery-countdown":406}],39:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = require("jquery");
    
    var InputCloneService = function () {
        function InputCloneService() {
            _classCallCheck(this, InputCloneService);
        }
    
        _createClass(InputCloneService, [{
            key: 'clone',
    
            /**
             * Dispatch input clone methods
             * returns a clone node (deep) by default
             * @param element
             * @returns {*|Node}
             */
            value: function clone(element) {
                var type = {
                    'select-one': this.cloneSelect.bind(this),
                    'select-multiple': this.cloneSelect.bind(this)
                };
    
                // If the input type is not defined in our type list we'll just return a deep clone
                return type[element.type] === undefined ? element.cloneNode(true) : type[element.type](element);
            }
    
            /**
             * Clone select element and maintain selected state
             * @param select
             */
    
        }, {
            key: 'cloneSelect',
            value: function cloneSelect(select) {
                var $select = $(select);
                var selectClone = select.cloneNode(true);
    
                if ($select.hasClass('js-select2') && $select.data('select2')) {
                    var select2Data = $select.select2('data');
                    var dataAttr = JSON.stringify(select2Data.map(function (state) {
                        return {
                            disabled: state.disabled,
                            id: state.id,
                            selected: state.selected,
                            text: state.text,
                            title: state.title
                        };
                    }));
    
                    select.setAttribute('data-repeater-select2-data', dataAttr);
                    $select.select2('destroy');
                }
    
                // Empty out options
                selectClone.innerHTML = '';
    
                // Re-create each option with the state from the cloned select
                [].slice.call(select.children).forEach(function (option) {
                    selectClone.appendChild(new Option(option.innerText, option.value, option.selected, option.selected));
                });
    
                return selectClone;
            }
        }]);
    
        return InputCloneService;
    }();
    
    module.exports = InputCloneService;
    
    },{"jquery":416}],40:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var _ = require('lodash');
    var $ = require('jquery');
    
    var InputReplacementService = function () {
        /**
         * Input replacement service
         * @param {PulsarFormComponent} pulsarFormComponent
         */
        function InputReplacementService(pulsarFormComponent) {
            _classCallCheck(this, InputReplacementService);
    
            this.pulsarFormComponent = pulsarFormComponent;
        }
    
        /**
         * Replace an input element with another of the same type (usually a clone)
         * @param elements
         * @param replacement
         * @returns {*|jQuery}
         */
    
    
        _createClass(InputReplacementService, [{
            key: 'replace',
            value: function replace(elements, replacement) {
                var type = {
                    'radio': this.replaceRadioInput.bind(this),
                    'select-one': this.replaceSelect.bind(this),
                    'select-multiple': this.replaceSelect.bind(this)
                };
    
                // If the type is not defined we will use jQuery's replaceWith(...) method
                // We are expecting an element list here, as with radio Inputs we'll have
                // a chance of receiving multiple inputs with the same name
                [].slice.call(elements).forEach(function (element) {
                    type[element.type] === undefined ? $(element).replaceWith(replacement) : type[element.type](element, replacement);
                });
            }
    
            /**
             * Replace radio inputs
             * @param radio
             * @param replacement
             */
    
        }, {
            key: 'replaceRadioInput',
            value: function replaceRadioInput(radio, replacement) {
                var originalId = radio.getAttribute('data-pseudo-radio-id');
                var replacementId = replacement.getAttribute('data-pseudo-radio-id');
    
                if (originalId === replacementId) {
                    $(radio).replaceWith(replacement);
                }
            }
    
            /**
             * We don't need to replace the select2s here, we can update the original clone
             * we'll replace regular selects with their state-full clones
             * @param select
             * @param replacement
             */
    
        }, {
            key: 'replaceSelect',
            value: function replaceSelect(select, replacement) {
                var $select = $(select);
    
                if ($select.hasClass('js-select2')) {
                    // Parse our dumped select2 data
                    var select2Data = JSON.parse(select.getAttribute('data-repeater-select2-data'));
    
                    if (select2Data) {
                        // Set each options's selected value based on the parsed select2 data
                        [].slice.call(select.children).forEach(function (option) {
                            var previousState = _.find(select2Data, function (s2) {
                                return s2.id === option.value;
                            });
    
                            option.selected = previousState ? previousState.selected : false;
                        });
                    }
    
                    this.pulsarFormComponent.initSelect2($select);
                } else {
                    $select.replaceWith(replacement);
                }
            }
        }]);
    
        return InputReplacementService;
    }();
    
    module.exports = InputReplacementService;
    
    },{"jquery":416,"lodash":418}],41:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var _ = require('lodash');
    
    var InputValueService = function () {
        function InputValueService() {
            _classCallCheck(this, InputValueService);
        }
    
        _createClass(InputValueService, [{
            key: 'getValue',
    
            /**
             * Dispatch input value get methods
             * returns the value prop by default
             * @param element
             * @returns {*}
             */
            value: function getValue(element) {
                var type = {
                    'checkbox': this.getCheckboxValue.bind(this),
                    'select-multiple': this.getMultiSelectValue.bind(this),
                    'radio': this.getRadioValue.bind(this)
                };
    
                return type[element.type] === undefined ? { value: element.value, selected: this.getSelected(element) } : type[element.type](element);
            }
    
            /**
             * Dispatch input value set methods
             * will set the value prop by default
             * accepts a "state" object for inputs we control the state of
             * @param element
             * @param value
             * @param state
             * @returns {*}
             */
    
        }, {
            key: 'setValue',
            value: function setValue(element, value, state) {
                var type = {
                    'checkbox': this.setCheckboxValue.bind(this),
                    'radio': this.setRadioValue.bind(this),
                    'select-multiple': this.setMultiSelectValue.bind(this)
                };
    
                return type[element.type] === undefined ? element.value = value : type[element.type](element, value, state);
            }
    
            /**
             * Dispatch print methods for values, by default
             * we will simply return the input's value
             * @param element
             * @param value
             * @param state
             * @returns {*}
             */
    
        }, {
            key: 'printValue',
            value: function printValue(element, value, state) {
                var type = {
                    'password': this.printPassword.bind(this),
                    'select-one': this.printSelect.bind(this),
                    'select-multiple': this.printSelect.bind(this)
                };
    
                return type[element.type] === undefined ? element.value : type[element.type](element, value, state);
            }
    
            /**
             * Print passwords in a hidden state
             * @param element
             */
    
        }, {
            key: 'printPassword',
            value: function printPassword(element) {
                return element.value.replace(new RegExp(/./g), '*');
            }
    
            /**
             * Get the text content of selected options when printing select values
             * @param element
             * @param value
             */
    
        }, {
            key: 'printSelect',
            value: function printSelect(element, value) {
                return _.find([].slice.call(element.children), function (option) {
                    return option.value === value;
                }).textContent;
            }
    
            /**
             * Get the selected attribute from a for input
             * if an input does not have a checked property we'll assume it is active
             * @param element
             * @returns {*}
             */
    
        }, {
            key: 'getSelected',
            value: function getSelected(element) {
                var type = {
                    'checkbox': this.isSelected.bind(this),
                    'radio': this.isSelected.bind(this)
                };
    
                return type[element.type] === undefined ? true : type[element.type](element);
            }
    
            /**
             * Check if an element is selected
             * @param element
             */
    
        }, {
            key: 'isSelected',
            value: function isSelected(element) {
                return element.checked;
            }
    
            /**
             * Get a checkbox value
             * @param checkbox
             * @returns {*}
             */
    
        }, {
            key: 'getCheckboxValue',
            value: function getCheckboxValue(checkbox) {
                return { value: checkbox.value, selected: checkbox.checked };
            }
    
            /**
             * Get a radio value
             * @param radio
             * @returns {{value: *, selected: boolean}}
             */
    
        }, {
            key: 'getRadioValue',
            value: function getRadioValue(radio) {
                return { value: radio.value, selected: radio.checked };
            }
    
            /**
             * Get multi select values
             * @param select
             */
    
        }, {
            key: 'getMultiSelectValue',
            value: function getMultiSelectValue(select) {
                return [].slice.call(select.children).map(function (option) {
                    return { value: option.value, selected: option.selected };
                });
            }
    
            /**
             * Set a checkbox checked state if we have a value
             * @param checkbox
             * @param value
             */
    
        }, {
            key: 'setCheckboxValue',
            value: function setCheckboxValue(checkbox, value) {
                checkbox.checked = !!value;
            }
    
            /**
             * Set radio input value based on internally managed state (PseudoRadioService)
             * @param radio
             * @param value
             * @param state
             */
    
        }, {
            key: 'setRadioValue',
            value: function setRadioValue(radio, value, state) {
                // We only need to make this fairly destructive change if the input has a name
                // attr. Once this value is set, the input values in a set of radios will be set
                // to the selected value – which will render them useless (apart from our use case)
                // which is to simply submit the correct value
                if (state.selected && radio.hasAttribute('name')) {
                    radio.value = value;
                    radio.checked = true;
                }
            }
    
            /**
             * Set the value of a multi select input
             * @param select
             * @param value
             * @param state
             */
    
        }, {
            key: 'setMultiSelectValue',
            value: function setMultiSelectValue(select, value, state) {
                _.find([].slice.call(select.children), function (option) {
                    return option.value === value;
                }).selected = state.selected;
            }
        }]);
    
        return InputValueService;
    }();
    
    module.exports = InputValueService;
    
    },{"lodash":418}],42:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var _ = require('lodash');
    
    var PseudoRadioInputService = function () {
        /**
         * Create pseudo radio input behaviour in the
         * absence of a name attribute
         * @param root {HTMLElement}
         * @param pseudoNameAttr
         */
        function PseudoRadioInputService(root, pseudoNameAttr) {
            _classCallCheck(this, PseudoRadioInputService);
    
            this.root = root;
            this.name = {
                init: 'name',
                pseudo: pseudoNameAttr
            };
        }
    
        /**
         * Create initial radio state for each matching input
         */
    
    
        _createClass(PseudoRadioInputService, [{
            key: 'init',
            value: function init() {
                var _this = this;
    
                var id = 1;
    
                this.state = [].slice.call(this.root.querySelectorAll('[type="radio"]')).reduce(function (state, input) {
                    var key = input.getAttribute(_this.name.init);
    
                    if (state[key] === undefined) {
                        id = 1;
                        state[key] = [];
                    }
    
                    input.setAttribute('data-pseudo-radio-id', id);
                    state[key].push({ value: input.value, checked: input.checked });
                    id++;
    
                    return state;
                }, {});
    
                this.root.addEventListener('change', this.handleChange.bind(this));
            }
    
            /**
             * Listen for input changes and update state
             */
    
        }, {
            key: 'handleChange',
            value: function handleChange(event) {
                var target = event.target;
    
    
                if (target.type === 'radio') {
                    this.updateState(target.getAttribute(this.name.pseudo), target.value);
                }
            }
    
            /**
             * Update state as a result of an input
             * @param name
             * @param value
             */
    
        }, {
            key: 'updateState',
            value: function updateState(name, value) {
                var _this2 = this;
    
                this.state[name] = this.state[name].map(function (radio) {
                    var checked = value === undefined ? radio.checked : radio.value === value;
                    var input = _this2.root.querySelectorAll('[' + _this2.name.pseudo + '="' + name + '"][value="' + radio.value + '"]');
    
                    // update state object
                    radio.checked = checked;
                    // update DOM
                    [].slice.call(input).forEach(function (i) {
                        return i.checked = checked;
                    });
    
                    return radio;
                });
            }
    
            /**
             * Set the state of the radio inputs based on an external state
             * @param state {Object.<string, { value: { value: {string}, selected: {boolean}, ref: {HTMLElement} }[] }>}
             */
    
        }, {
            key: 'setState',
            value: function setState(state) {
                var _this3 = this;
    
                Object.keys(state).forEach(function (input) {
                    if (_this3.state[input] !== undefined) {
                        var selected = _.find(state[input].value, function (i) {
                            return i.selected;
                        });
                        // Set state using the selected input in the state argument
                        if (selected) {
                            _this3.updateState(input, selected.value);
                        }
                    }
                });
            }
    
            /**
             * Refresh a radio group based on the internal state
             */
    
        }, {
            key: 'refresh',
            value: function refresh() {
                var _this4 = this;
    
                Object.keys(this.state).forEach(function (group) {
                    _this4.updateState(group);
                });
            }
        }]);
    
        return PseudoRadioInputService;
    }();
    
    module.exports = PseudoRadioInputService;
    
    },{"lodash":418}],43:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = require('jquery');
    
    var Repeater = function () {
        /**
         * Repeater
         * @param repeater {HTMLElement}
         * @param pulsarFormComponent {PulsarFormComponent}
         * @param activeFunctionService {ActiveFunctionService}
         * @param inputCloneService {InputCloneService}
         * @param inputValueService {InputValueService}
         * @param inputReplacementService {InputReplacementService}
         * @param uniqueIdService {UniqueIdService}
         * @param repeaterPreviewService {RepeaterPreviewService}
         * @param pseudoRadioInputService {PseudoRadioInputService}
         * @param repeaterDataService {RepeaterDataService}
         * @param repeaterPlaceholderService {RepeaterPlaceholderService}
         * @param formFieldResetService {FormFieldResetService}
         * @param focusManagementService {FocusManagementService}
         */
        function Repeater(repeater, pulsarFormComponent, activeFunctionService, inputCloneService, inputValueService, inputReplacementService, uniqueIdService, repeaterPreviewService, pseudoRadioInputService, repeaterDataService, repeaterPlaceholderService, formFieldResetService, focusManagementService) {
            _classCallCheck(this, Repeater);
    
            this.pulsarFormComponent = pulsarFormComponent;
            this.activeFunctionService = activeFunctionService;
            this.inputCloneService = inputCloneService;
            this.inputValueService = inputValueService;
            this.inputReplacementService = inputReplacementService;
            this.uniqueIdService = uniqueIdService;
            this.repeaterPreviewService = repeaterPreviewService;
            this.pseudoRadioInputService = pseudoRadioInputService;
            this.repeaterDataService = repeaterDataService;
            this.repeaterPlaceholderService = repeaterPlaceholderService;
            this.formFieldResetService = formFieldResetService;
            this.focusManagementService = focusManagementService;
    
            this.repeater = repeater;
            this.repeaterEntries = 0;
            this.savedEntries = 0;
            this.state = [];
        }
    
        /**
         * Initialise
         * @param {array} initialState
         */
    
    
        _createClass(Repeater, [{
            key: 'init',
            value: function init() {
                var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    
                // Preview UI HTML that is dynamically added to preview rows
                this.previewUiHTML = '\n            <button data-repeater-edit-group data-repeater-preview-ui class="btn btn--outline btn--inverse">\n                Edit\n            </button>\n            <button data-repeater-delete-group data-repeater-preview-ui class="btn btn--outline btn--inverse">\n                Delete\n            </button>\n        ';
    
                var maxItemsAttr = this.repeater.getAttribute('data-repeater-max-entries');
    
                // Store max repeater groups as an integer
                this.maxSavedGroups = maxItemsAttr === null ? Infinity : parseInt(maxItemsAttr, 10);
    
                // Initiate pseudo radio service to polyfill radio inputs without name attrs
                this.pseudoRadioInputService.init();
    
                var $repeater = $(this.repeater);
    
                // Remove repeater group input names to prevent their values being submitted
                this.removeGroupInputNames($repeater.find('[data-repeater-new-group]')[0]);
    
                // Attach the "add new group" handler
                var $addGroupButton = $repeater.find('[data-repeater-add-group]');
    
                $addGroupButton.on('click', this.activeFunctionService.wrap.bind(this.activeFunctionService, $addGroupButton[0], this.handleAddGroup.bind(this)));
    
                var $saveGroup = $repeater.find('[data-repeater-save-group]');
    
                // Attach the "save new group" handler
                $saveGroup.on('click', this.handleSaveGroup.bind(this));
    
                var $cancelGroup = $repeater.find('[data-repeater-cancel-save]');
    
                // Attach the "cancel new group" handler
                $cancelGroup.on('click', this.handleCancelGroup.bind(this));
    
                if (initialState.length > 0) {
                    this.parseInitialState(initialState);
                }
            }
    
            /**
             * @param initialState
             */
    
        }, {
            key: 'parseInitialState',
            value: function parseInitialState(initialState) {
                var _this = this;
    
                initialState.forEach(function (state, index) {
                    state.forEach(function (_ref) {
                        var name = _ref.name,
                            value = _ref.value;
    
                        // Grab the input from the "add new group" form
                        var $input = $(_this.repeater).find('[data-repeater-name="' + name + '"]');
    
                        // If we get multiple inputs we are parsing multiple state
                        // entries, therefore we need to ensure we're getting the
                        // input at the correct index as there will be multiple inputs
                        // with the same data-repeater-name at this point
                        if ($input.length > 1) {
                            $input = $input.eq(index);
                        }
    
                        $input.val(value);
                    });
    
                    _this.handleSaveGroup();
                });
            }
    
            /**
             * Handle the add group action
             * @param event
             */
    
        }, {
            key: 'handleAddGroup',
            value: function handleAddGroup(event) {
                var $repeater = $(this.repeater);
                var $addGroupForm = $repeater.find('[data-repeater-new-group]');
    
                event.preventDefault();
                $addGroupForm.show();
                $repeater.find('[data-repeater-add-group]').addClass('disabled').attr('disabled', true);
    
                // Shift focus to the first focusable element in the form
                this.focusManagementService.focusFirstFocusableElement($addGroupForm);
    
                // Capture triggering element so we can return focus when closed
                this.focusManagementService.storeElement($(event.target));
            }
    
            /**
             * Handle the save group action
             * @param event
             * @param state
             */
    
        }, {
            key: 'handleSaveGroup',
            value: function handleSaveGroup() {
                var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    
                var $repeater = $(this.repeater);
                var colspan = parseInt(this.repeater.getAttribute('data-repeater-preview-colspan'), 10);
                var previewUi = document.createElement('td');
    
                if (event !== null) {
                    event.preventDefault();
                }
    
                var $addGroupForm = $repeater.find('[data-repeater-new-group]');
    
                // Create state object from the current form
                this.state[this.repeaterEntries] = state !== null ? state : this.createState($addGroupForm[0]);
    
                // Create preview HTML
                var preview = this.repeaterPreviewService.create(this.state[this.repeaterEntries], $repeater.find('[data-repeater-for-name]').toArray(), this.repeaterEntries);
    
                // Set preview attributes and append to the DOM
                preview.setAttribute('colspan', colspan);
                preview.setAttribute('data-repeater-preview-id', this.repeaterEntries);
    
                // Attach preview element to the DOM
                $repeater.find('[data-repeater-preview-root]').append(preview);
    
                // Attach preview UI to preview row
                previewUi.innerHTML = this.previewUiHTML;
                preview.appendChild(previewUi);
    
                var editGroup = preview.querySelector('[data-repeater-edit-group]');
                // Attach preview "edit group" handler
                editGroup.addEventListener('click', this.activeFunctionService.wrap.bind(this.activeFunctionService, editGroup, this.handleEditGroup.bind(this, this.repeaterEntries)));
    
                var deleteGroup = preview.querySelector('[data-repeater-delete-group]');
                // Attach preview "edit group" handler
                deleteGroup.addEventListener('click', this.activeFunctionService.wrap.bind(this.activeFunctionService, deleteGroup, this.handleDeleteGroup.bind(this, this.repeaterEntries)));
    
                // Create saved data if this is not the initial parse
                if (state === null) {
                    this.saveData($addGroupForm[0]);
                }
    
                // Create the edit form
                this.addGroupToRepeater(this.createEditEntryGroup());
    
                // Remove "empty" placeholder
                this.repeaterPlaceholderService.remove();
    
                // Reset new repeater group form
                this.formFieldResetService.reset($addGroupForm[0]);
    
                // Reset Pulsar colour pickers
                this.pulsarFormComponent.updateColourPicker($addGroupForm);
    
                // Update internal state
                this.repeaterEntries++;
                this.savedEntries++;
    
                var $addGroupButton = $repeater.find('[data-repeater-add-group]');
    
                if (this.savedEntries < this.maxSavedGroups) {
                    $addGroupButton.removeClass('disabled').removeAttr('disabled');
    
                    // Update add new group text
                    $addGroupButton.text(this.repeater.getAttribute('data-repeater-add-another-group-text'));
    
                    // Return focus to triggering element, if one exists
                    if (this.focusManagementService.hasStoredElement()) {
                        this.focusManagementService.returnFocusToElement();
                    }
                } else {
                    $addGroupButton.addClass('disabled').attr('disabled', true);
    
                    // If at max entries, focus the edit button of the new row
                    $(preview).find('[data-repeater-edit-group]').focus();
                }
    
                // Re-initialise select2 instances in the "edit" and "new group" form
                this.pulsarFormComponent.initSelect2($addGroupForm.find('.js-select2'));
    
                // Hide new repeater group form
                $addGroupForm.hide();
            }
    
            /**
             * Save repeater state to the DOM
             * @param group
             */
    
        }, {
            key: 'saveData',
            value: function saveData(group) {
                this.repeaterDataService.create(group, this.repeaterEntries);
            }
    
            /**
             * Convert the "create new repeater group" to a state object
             * @param group {HTMLElement}
             * @returns {Object.<string, { value: { value: {string}, selected: {boolean}, ref: {HTMLElement} }[] }>}
             */
    
        }, {
            key: 'createState',
            value: function createState(group) {
                var _this2 = this;
    
                var name = 'data-repeater-name';
                var $inputs = $(group).find('[' + name + ']');
    
                return $inputs.toArray().reduce(function (state, input) {
                    var value = _this2.inputValueService.getValue(input);
                    var valueArray = Array.isArray(value) ? value : [value];
    
                    // Add a reference to the element
                    valueArray.forEach(function (value) {
                        return value.ref = input;
                    });
    
                    if (state[input.getAttribute(name)] === undefined) {
                        state[input.getAttribute(name)] = {};
                    }
    
                    if (!Array.isArray(state[input.getAttribute(name)].value)) {
                        state[input.getAttribute(name)].value = valueArray;
                    } else {
                        valueArray.forEach(function (value) {
                            return state[input.getAttribute(name)].value.push(value);
                        });
                    }
    
                    return state;
                }, {});
            }
    
            /**
             * Create an inline edit form beneath each preview row
             */
    
        }, {
            key: 'createEditEntryGroup',
            value: function createEditEntryGroup() {
                var clone = $(this.repeater).find('[data-repeater-new-group]')[0].cloneNode(true);
    
                // Add repeater ID to the group
                clone.setAttribute('data-repeater-edit-id', this.repeaterEntries);
    
                // Remove the new group attr
                clone.removeAttribute('data-repeater-new-group');
    
                // Remove group input name attrs
                this.removeGroupInputNames(clone);
    
                return clone;
            }
        }, {
            key: 'addGroupToRepeater',
            value: function addGroupToRepeater(group) {
                var _this3 = this;
    
                var clonedControls = group.querySelector('[data-repeater-new-group-controls]');
                var preview = this.repeater.querySelector('[data-repeater-preview-id="' + this.repeaterEntries + '"]');
                var inputsWithState = $(group).find('[data-repeater-name]').toArray().map(function (input) {
                    return _this3.inputCloneService.clone(input);
                });
    
                // Add cloned group after preview, this will act as the edit group
                $(preview).after(group);
    
                // Append our "deep" cloned inputs
                inputsWithState.forEach(function (input) {
                    var name = input.getAttribute('data-repeater-name');
                    // Replace inputs in clone with "deep" cloned inputs
                    _this3.inputReplacementService.replace([].slice.call(clonedControls.querySelectorAll('[data-repeater-name="' + name + '"]')), input);
                });
    
                // Create unique for/id
                this.uniqueIdService.uniquifyFors(preview.nextElementSibling);
    
                // Create unique IDs for selectWoo elements
                this.uniqueIdService.uniquifySelectWoo(group);
    
                // Refresh radio state
                this.pseudoRadioInputService.refresh();
    
                // Refresh the PulsarFormComponent services
                this.pulsarFormComponent.refresh();
    
                // Hide edit form
                $(group).hide();
    
                // Add events to the save / cancel UI within the group
                group.querySelector('[data-repeater-save-group]').addEventListener('click', this.handleUpdateGroup.bind(this, group, this.repeaterEntries));
                group.querySelector('[data-repeater-cancel-save]').addEventListener('click', this.handleCancelGroupUpdate.bind(this, group, this.repeaterEntries));
            }
    
            /**
             * Handle edit group action
             * @param repeaterId {number}
             * @param event
             */
    
        }, {
            key: 'handleEditGroup',
            value: function handleEditGroup(repeaterId, event) {
                var $repeater = $(this.repeater);
                var $edit = $repeater.find('[data-repeater-preview-root]').find('[data-repeater-edit-id=' + repeaterId + ']');
    
                event.preventDefault();
                this.repeaterPreviewService.toggleUi();
                $repeater.find('[data-repeater-add-group]').addClass('disabled').attr('disabled', true);
                $edit.show();
    
                // Shift focus to the first focusable element in the form
                this.focusManagementService.focusFirstFocusableElement($edit);
    
                // Capture triggering element so we can return focus when closed
                this.focusManagementService.storeElement($(event.target));
            }
    
            /**
             * Handle delete group action
             * @param repeaterId {number}
             * @param event
             */
    
        }, {
            key: 'handleDeleteGroup',
            value: function handleDeleteGroup(repeaterId, event) {
                var $repeater = $(this.repeater);
                var $previewRoot = $repeater.find('[data-repeater-preview-root]');
                var $preview = $previewRoot.find('[data-repeater-preview-id="' + repeaterId + '"]');
                var $edit = $repeater.find('[data-repeater-edit-id="' + repeaterId + '"]');
                var $saved = $repeater.find('[data-repeater-saved-data-id="' + repeaterId + '"]');
                var $previousRow = $previewRoot.find('[data-repeater-preview-id="' + (repeaterId - 1) + '"]');
    
                event.preventDefault();
    
                // Remove DOM
                $preview.remove();
                $edit.remove();
                $saved.remove();
    
                // Update state
                this.savedEntries--;
    
                var $addGroupButton = $repeater.find('[data-repeater-add-group]');
    
                // Enable "add group" button if we have not exceeded max saved entries
                if (this.savedEntries < this.maxSavedGroups) {
                    $addGroupButton.removeClass('disabled').removeAttr('disabled');
                }
    
                // Update "add group" button text and add placeholder if we have removed all entries
                if (this.savedEntries <= 0) {
                    $addGroupButton.text(this.repeater.getAttribute('data-repeater-add-new-group-text'));
    
                    // Add "empty" placeholder
                    this.repeaterPlaceholderService.add();
                }
    
                // Focus either previous row delete button of add button if no previous
                if ($previousRow.length) {
                    $previousRow.find('[data-repeater-delete-group]').focus();
                } else {
                    $addGroupButton.focus();
                }
            }
    
            /**
             * Handle the cancel interaction when adding a new group
             * @param event
             */
    
        }, {
            key: 'handleCancelGroup',
            value: function handleCancelGroup(event) {
                var $repeater = $(this.repeater);
    
                if (this.savedEntries < this.maxSavedGroups) {
                    $repeater.find('[data-repeater-add-group]').removeClass('disabled').removeAttr('disabled');
    
                    // Return focus to triggering element
                    this.focusManagementService.returnFocusToElement();
                }
    
                event.preventDefault();
    
                var $addGroupForm = $repeater.find('[data-repeater-new-group]');
    
                // Reset new repeater group form
                this.formFieldResetService.reset($addGroupForm[0]);
    
                // Reset Pulsar colour pickers
                this.pulsarFormComponent.updateColourPicker($addGroupForm);
    
                // Hide the "add group" form
                $addGroupForm.hide();
            }
    
            /**
             * Handle an edit / update save
             * @param group {HTMLElement}
             * @param repeaterId {number}
             * @param event
             */
    
        }, {
            key: 'handleUpdateGroup',
            value: function handleUpdateGroup(group, repeaterId, event) {
                event.preventDefault();
    
                var $repeater = $(this.repeater);
    
                // Update state
                this.state[repeaterId] = this.createState(group);
    
                // Update preview elements
                this.repeaterPreviewService.update(this.state[repeaterId], $repeater.find('[data-repeater-for-name]').toArray(), $repeater.find('[data-repeater-preview-root]')[0], repeaterId);
    
                // Update saved data
                this.repeaterDataService.update(this.state[repeaterId], repeaterId);
    
                // Enable preview UI
                this.repeaterPreviewService.toggleUi();
    
                // Enable "add group" button if we have not exceeded max saved entries
                if (this.savedEntries < this.maxSavedGroups) {
                    $repeater.find('[data-repeater-add-group]').removeClass('disabled').removeAttr('disabled');
                }
    
                // Return focus to triggering element
                this.focusManagementService.returnFocusToElement();
    
                // Hide edit group form
                $(group).hide();
            }
    
            /**
             * Handle an update cancel, inputs will be restored to their un-edited state
             * @param group {HTMLElement|Node}
             * @param repeaterId {number}
             * @param event
             */
    
        }, {
            key: 'handleCancelGroupUpdate',
            value: function handleCancelGroupUpdate(group, repeaterId, event) {
                var _this4 = this;
    
                event.preventDefault();
    
                var $group = $(group);
                var $repeater = $(this.repeater);
    
                // Reset input values to pre-edited state
                $group.find('[data-repeater-name]').each(function (index, element) {
                    _this4.state[repeaterId][element.getAttribute('data-repeater-name')].value.forEach(function (input) {
                        // Update the value for selected inputs
                        _this4.inputValueService.setValue(element, input.value, { selected: input.selected });
                    });
                });
    
                // Revert radio inputs to pre-edited values
                this.pseudoRadioInputService.setState(this.state[repeaterId]);
    
                // Enable preview UI
                this.repeaterPreviewService.toggleUi();
    
                // Enable "add group" button if we have not exceeded max saved entries
                if (this.savedEntries < this.maxSavedGroups) {
                    $repeater.find('[data-repeater-add-group]').removeClass('disabled').removeAttr('disabled');
                }
    
                // Update any colour pickers that might exist
                this.pulsarFormComponent.updateColourPicker($(group));
    
                // Hide edit group
                $group.hide();
    
                // Return focus to triggering element
                this.focusManagementService.returnFocusToElement();
            }
    
            /**
             * Remove name attribute and add custom name attribute, this will
             * omit the input's data from requests
             * @param group {HTMLElement|Node}
             */
    
        }, {
            key: 'removeGroupInputNames',
            value: function removeGroupInputNames(group) {
                var $inputs = $(group).find('[name]');
    
                $inputs.each(function (index, input) {
                    var name = input.getAttribute('name');
                    // set name attr on cloned group
                    input.setAttribute('data-repeater-name', name);
                    // remove custom name attr on group
                    input.removeAttribute('name');
                });
            }
        }]);
    
        return Repeater;
    }();
    
    module.exports = Repeater;
    
    },{"jquery":416}],44:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = require('jquery');
    
    var RepeaterDataService = function () {
        /**
         * @param {HTMLElement} root
         * @param {InputCloneService} inputCloneService
         * @param {InputValueService} inputValueService
         * @param {UniqueIdService} uniqueIdService
         */
        function RepeaterDataService(root, inputCloneService, inputValueService, uniqueIdService) {
            _classCallCheck(this, RepeaterDataService);
    
            this.root = root;
            this.inputCloneService = inputCloneService;
            this.inputValueService = inputValueService;
            this.uniqueIdService = uniqueIdService;
        }
    
        /**
         * Create repeater data group
         * @param group
         * @param savedEntryId
         */
    
    
        _createClass(RepeaterDataService, [{
            key: 'create',
            value: function create(group, savedEntryId) {
                var _this = this;
    
                var $formGroups = $(group).find('.form__group');
                var $dataRoot = $(this.root).find('[data-repeater-saved-entries-root]');
                var savedData = document.createElement('div');
    
                // Add an identifier to an entry in the saved data
                savedData.setAttribute('data-repeater-saved-data-id', savedEntryId);
    
                $formGroups.each(function (index, group) {
                    // Get the label
                    var labelText = $(group).find('.control__label:first-child').text();
    
                    // Clone the input
                    var $input = $(group).find('[data-repeater-name]');
                    var name = $input.attr('data-repeater-name');
                    var clone = _this.inputCloneService.clone($input[0]);
    
                    // Add name attr to clone
                    clone.setAttribute('name', name);
    
                    // Remove the new group attr
                    clone.removeAttribute('data-repeater-name');
    
                    // Hide clone from SRs
                    clone.classList.add('u-display-none');
    
                    // Add hidden label to cloned input to stop a11y tools complaining
                    clone.setAttribute('aria-label', labelText);
    
                    // Add cloned input to entry
                    savedData.appendChild(clone);
                });
    
                this.uniqueIdService.uniquifyIds(savedData);
    
                // Append saved entry to the DOM
                $dataRoot.append(savedData);
            }
    
            /**
             * Update repeater data group
             */
    
        }, {
            key: 'update',
            value: function update(state, savedEntryId) {
                var _this2 = this;
    
                var $dataRoot = $(this.root).find('[data-repeater-saved-entries-root]');
                var $savedData = $dataRoot.find('[data-repeater-saved-data-id="' + savedEntryId + '"]');
    
                // Iterate each input in the saved data
                $savedData.find('[name]').each(function (index, element) {
                    state[element.getAttribute('name')].value.forEach(function (input) {
                        // Update the value for selected inputs
                        _this2.inputValueService.setValue(element, input.value, { selected: input.selected });
                    });
                });
            }
        }]);
    
        return RepeaterDataService;
    }();
    
    module.exports = RepeaterDataService;
    
    },{"jquery":416}],45:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var RepeaterManagerComponent = function () {
        /**
         * Repeater Manager
         * @param pulsarFormComponent {PulsarFormComponent}
         * @param repeaterComponentFactory {repeaterComponentFactory}
         * @param $html {$}
         */
        function RepeaterManagerComponent(pulsarFormComponent, repeaterComponentFactory, $html) {
            _classCallCheck(this, RepeaterManagerComponent);
    
            this.pulsarFormComponent = pulsarFormComponent;
            this.repeaterComponentFactory = repeaterComponentFactory;
            this.$html = $html;
        }
    
        /**
         * Initiate repeaters on the page
         */
    
    
        _createClass(RepeaterManagerComponent, [{
            key: 'init',
            value: function init() {
                var _this = this;
    
                this.$html.find('[data-repeater]').each(function (index, element) {
                    var repeater = _this.repeaterComponentFactory(_this.pulsarFormComponent, element);
                    var initialData = element.getAttribute('data-repeater-initial-state');
    
                    repeater.init(JSON.parse(initialData));
                });
            }
        }]);
    
        return RepeaterManagerComponent;
    }();
    
    module.exports = RepeaterManagerComponent;
    
    },{}],46:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = require("jquery");
    
    var RepeaterPlaceholderService = function () {
        /**
         * Repeater placeholder service
         * @param {HTMLElement} root
         */
        function RepeaterPlaceholderService(root) {
            _classCallCheck(this, RepeaterPlaceholderService);
    
            this.$root = $(root);
            this.$placeholder = this.$root.find('[data-repeater-preview-placeholder]');
        }
    
        /**
         * Prepend the preview empty placeholder
         */
    
    
        _createClass(RepeaterPlaceholderService, [{
            key: 'add',
            value: function add() {
                this.$root.find('[data-repeater-preview-root]').prepend(this.$placeholder);
            }
    
            /**
             * Remove preview placeholder and update reference
             */
    
        }, {
            key: 'remove',
            value: function remove() {
                var $placeholder = this.$root.find('[data-repeater-preview-placeholder]');
    
                // If there is no placeholder, move along
                if ($placeholder.length === 0) {
                    return;
                }
    
                this.$placeholder = $placeholder.clone();
                $placeholder.remove();
            }
        }]);
    
        return RepeaterPlaceholderService;
    }();
    
    module.exports = RepeaterPlaceholderService;
    
    },{"jquery":416}],47:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = require("jquery");
    
    var RepeaterPreviewService = function () {
        /**
         * Create / Update Repeater preview elements
         * @param {HTMLElement} root
         * @param {InputValueService} inputValueService
         * @param options
         */
        function RepeaterPreviewService(root, inputValueService) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    
            _classCallCheck(this, RepeaterPreviewService);
    
            this.root = root;
            this.inputValueService = inputValueService;
            this.emptyHTML = options.empty || 'empty';
        }
    
        /**
         * Create a repeater preview
         * @param state
         * @param headings
         * @param id
         * @returns {HTMLElement}
         */
    
    
        _createClass(RepeaterPreviewService, [{
            key: 'create',
            value: function create(state, headings, id) {
                var _this = this;
    
                var previewRow = document.createElement('tr');
    
                // For each heading, create a repeater preview
                headings.forEach(function (heading) {
                    var name = heading.getAttribute('data-repeater-for-name');
                    var data = state[name];
                    var value = _this.emptyHTML;
    
                    if (data === undefined) {
                        throw new Error('The input "' + name + '" was not found in the Repeater.');
                    }
    
                    var preview = document.createElement('td');
    
                    preview.setAttribute('data-repeater-preview-update-id', name + '_' + id);
    
                    data.value.filter(function (input) {
                        return input.selected && input.value;
                    }).forEach(function (input) {
                        value = _this.print(input.ref, value, input.value);
                    });
    
                    preview.textContent = value;
                    previewRow.appendChild(preview);
                });
    
                return previewRow;
            }
    
            /**
             * Update a repeater preview
             * @param state
             * @param headings
             * @param root
             * @param id
             */
    
        }, {
            key: 'update',
            value: function update(state, headings, root, id) {
                var _this2 = this;
    
                headings.forEach(function (heading) {
                    var name = heading.getAttribute('data-repeater-for-name');
                    var data = state[name];
                    var value = _this2.emptyHTML;
    
                    // If our heading exists inside the state object
                    if (state[name]) {
                        var preview = root.querySelector('[data-repeater-preview-update-id="' + name + '_' + id + '"]');
    
                        // Set the value for each input in the state
                        data.value.filter(function (input) {
                            return input.selected && input.value;
                        }).forEach(function (input) {
                            value = _this2.print(input.ref, value, input.value);
                        });
    
                        preview.innerText = value;
                    }
                });
            }
    
            /**
             * Toggle the disabled state of preview UI buttons
             */
    
        }, {
            key: 'toggleUi',
            value: function toggleUi() {
                var $preview = $(this.root).find('[data-repeater-preview-id]');
    
                $preview.toArray().forEach(function (preview) {
                    var $previewUi = $(preview).find('[data-repeater-preview-ui]');
                    $previewUi.toggleClass('disabled');
    
                    if ($previewUi.prop('disabled') !== false) {
                        $previewUi.prop('disabled', false);
                    } else {
                        $previewUi.prop('disabled', true);
                    }
                });
            }
    
            /**
             * Print a preview value, this handles sanitizing values via
             * the InputValueService as well as concatenating multiple values
             * @param input
             * @param value
             * @param newValue
             * @returns {*}
             */
    
        }, {
            key: 'print',
            value: function print(input, value, newValue) {
                var printedValue = this.inputValueService.printValue(input, newValue);
    
                if (value === this.emptyHTML) {
                    return printedValue;
                } else {
                    return value + ', ' + printedValue;
                }
            }
        }]);
    
        return RepeaterPreviewService;
    }();
    
    module.exports = RepeaterPreviewService;
    
    },{"jquery":416}],48:[function(require,module,exports){
    'use strict';
    
    var InputCloneService = require('./InputCloneService');
    var InputValueService = require('./InputValueService');
    var PseudoRadioInputService = require('./PseudoRadioInputService');
    var InputReplacementService = require('./InputReplacementService');
    var RepeaterPreviewService = require('./RepeaterPreviewService');
    var ActiveFunctionService = require('../utilities/ActiveFunctionService');
    var RepeaterDataService = require('./RepeaterDataService');
    var UniqueIdService = require('../utilities/UniqueIdService');
    var HashService = require('../utilities/HashService');
    var Repeater = require('./RepeaterComponent');
    var RepeaterPlaceholderService = require('./RepeaterPlaceholderService');
    var FormFieldResetService = require('../utilities/FormFieldResetService');
    var FocusManagementService = require('../FocusManagementService');
    
    /**
     * Create a repeater component instance
     * @param pulsarFormComponent {PulsarFormComponent}
     * @param repeater {HTMLElement}
     * @returns {Repeater}
     */
    function repeaterComponentFactory(pulsarFormComponent, repeater) {
        var activeFunctionService = new ActiveFunctionService();
        var inputCloneService = new InputCloneService();
        var inputValueService = new InputValueService();
        var inputReplacementService = new InputReplacementService(pulsarFormComponent);
        var uniqueIdService = new UniqueIdService(new HashService(Date));
        var repeaterDataService = new RepeaterDataService(repeater, inputCloneService, inputValueService, uniqueIdService);
        var repeaterPreviewService = new RepeaterPreviewService(repeater, inputValueService);
        var pseudoRadioInputService = new PseudoRadioInputService(repeater, 'data-repeater-name');
        var repeaterPlaceholderService = new RepeaterPlaceholderService(repeater);
        var formFieldResetService = new FormFieldResetService();
        var focusManagementService = new FocusManagementService();
    
        return new Repeater(repeater, pulsarFormComponent, activeFunctionService, inputCloneService, inputValueService, inputReplacementService, uniqueIdService, repeaterPreviewService, pseudoRadioInputService, repeaterDataService, repeaterPlaceholderService, formFieldResetService, focusManagementService);
    }
    
    module.exports = repeaterComponentFactory;
    
    },{"../FocusManagementService":28,"../utilities/ActiveFunctionService":65,"../utilities/FormFieldResetService":66,"../utilities/HashService":67,"../utilities/UniqueIdService":68,"./InputCloneService":39,"./InputReplacementService":40,"./InputValueService":41,"./PseudoRadioInputService":42,"./RepeaterComponent":43,"./RepeaterDataService":44,"./RepeaterPlaceholderService":46,"./RepeaterPreviewService":47}],49:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = require('jquery');
    
    var StickyScrollBarComponent = function () {
    
        /**
         * StickyScrollBarComponent
         * @constructor
         * @param {jQuery} $rootWindow - jQuery wrapper of the window object
         * @param {jQuery} $html - jQuery wrapper of the html node
         */
        function StickyScrollBarComponent($rootWindow, $html) {
            _classCallCheck(this, StickyScrollBarComponent);
    
            this.$window = $rootWindow;
            this.$html = $html;
            this.$stickyScrollBar = $('<div class="sticky-scrollbar"><div class="sticky-scrollbar__inner"></div></div>');
            this.$stickyScrollBarInner = this.$stickyScrollBar.children();
            // cache methods with context
            this.scrollStickyScrollBarWithContext = this.scrollStickyScrollBar.bind(this);
            this.scrollElementWithStickyScrollBarByScrollBarWithContext = this.scrollElementWithStickyScrollBarByScrollBar.bind(this);
            this.updateStickyScrollBarWithContext = this.updateStickyScrollBar.bind(this);
        }
    
        /**
         * Initialise
         * @param {jQuery} $element - jQuery object of the element that requires a sticky scroll bar
         */
    
    
        _createClass(StickyScrollBarComponent, [{
            key: 'init',
            value: function init($element) {
                if (typeof $element === 'undefined' || !$element) {
                    throw new Error('an element to add the scroller to must be passed to StickyScrollBarComponent');
                }
    
                if (typeof this.$window === 'undefined' || !this.$window) {
                    throw new Error('window must be passed to StickyScrollBarComponent');
                }
    
                if (typeof this.$html === 'undefined' || !this.$html) {
                    throw new Error('$html must be passed to StickyScrollBarComponent');
                }
    
                // Set $elementWithStickyScrollBar
                this.$elementWithStickyScrollBar = $element;
    
                // Add the sticky scroll bar
                this.$stickyScrollBar.appendTo(this.$elementWithStickyScrollBar);
    
                // Init the sticky scroll bar
                this.$stickyScrollBar.addClass('u-display-none').on('scroll', this.scrollElementWithStickyScrollBarByScrollBarWithContext);
    
                // Call on load
                this.updateStickyScrollBar();
    
                // Call on scroll and window resize
                this.$window.on('scroll resize', this.updateStickyScrollBarWithContext);
            }
    
            /**
             * Set $elementWithStickyScrollBar scroll when scrolled by sticky scroll bar
             */
    
        }, {
            key: 'scrollElementWithStickyScrollBarByScrollBar',
            value: function scrollElementWithStickyScrollBarByScrollBar() {
                this.$elementWithStickyScrollBar.scrollLeft(this.$stickyScrollBar.scrollLeft());
            }
    
            /**
             * Set $stickyScrollBar scroll when $elementWithStickyScrollBar is scrolled
             */
    
        }, {
            key: 'scrollStickyScrollBar',
            value: function scrollStickyScrollBar() {
                this.$stickyScrollBar.scrollLeft(this.$elementWithStickyScrollBar.scrollLeft());
            }
    
            /**
             * Toggle visiblity of sticky scroll bar
             */
    
        }, {
            key: 'showStickyScrollBar',
            value: function showStickyScrollBar(option) {
                if (option) {
                    this.$stickyScrollBar.removeClass('u-display-none');
                } else {
                    this.$stickyScrollBar.addClass('u-display-none');
                }
            }
    
            /**
             * Update sticky scroll bar visibility, thumb position and width
             */
    
        }, {
            key: 'updateStickyScrollBar',
            value: function updateStickyScrollBar() {
                var _$elementWithStickySc = this.$elementWithStickyScrollBar.offset(),
                    top = _$elementWithStickySc.top;
    
                var bottom = top + this.$elementWithStickyScrollBar.height();
                var topOffset = 30;
                var viewportBottom = void 0;
    
                // Allow for footer
                if (this.$html.find('.footer').css('position') === 'fixed') {
                    viewportBottom = this.$window.scrollTop() + this.$window.height() - this.$html.find('.footer').outerHeight();
                } else {
                    viewportBottom = this.$window.scrollTop() + this.$window.height();
                }
    
                // Check if the $elementWithStickyScrollBar is visible but bottom is outside of viewport
                if (top + topOffset < viewportBottom && bottom > viewportBottom) {
    
                    // Check if the $elementWithStickyScrollBar has a scrollbar
                    var scroll = this.$elementWithStickyScrollBar.scrollLeft();
                    var scrollMax = this.$elementWithStickyScrollBar[0].scrollWidth - this.$elementWithStickyScrollBar[0].clientWidth;
                    var widthOuter = this.$elementWithStickyScrollBar.innerWidth();
                    var widthInner = widthOuter + scrollMax;
    
                    this.$elementWithStickyScrollBar.scrollLeft(scroll);
    
                    // Abort if the $elementWithStickyScrollBar doesn't have a scrollbar
                    if (widthInner <= widthOuter) {
                        return;
                    }
    
                    // Show sticky scroll bar
                    this.showStickyScrollBar(true);
    
                    // Sync sticky scroll bar if $elementWithStickyScrollBar content is scrolled
                    this.$elementWithStickyScrollBar.off('scroll', this.scrollStickyScrollBarWithContext);
                    this.$elementWithStickyScrollBar.on('scroll', this.scrollStickyScrollBarWithContext);
    
                    // Adjust the sticky scroll bar scrollbar
                    this.$stickyScrollBar.css({
                        left: this.$elementWithStickyScrollBar.offset().left - this.$window.scrollLeft(),
                        width: widthOuter
                    }).scrollLeft(scroll);
    
                    // Set sticky scroll bar width
                    this.$stickyScrollBarInner.width(widthInner);
                } else {
                    // Hide when not needed
                    this.showStickyScrollBar(false);
                }
            }
        }]);
    
        return StickyScrollBarComponent;
    }();
    
    module.exports = StickyScrollBarComponent;
    
    },{"jquery":416}],50:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = require('jquery');
    
    var StickySidebarComponent = function () {
    
        /**
         * StickySidebarComponent
         * @constructor
         * @param {object} window - window object
         * @param {jQuery} $html - jQuery wrapper of the html node
         */
        function StickySidebarComponent($html, window) {
            _classCallCheck(this, StickySidebarComponent);
    
            this.$html = $html;
            this.window = window;
        }
    
        /**
         * Initialise component
         *
         * Should be fired on page load, checks for required options, performs an
         * initial sticky calculation and binds to resize & scroll events
         */
    
    
        _createClass(StickySidebarComponent, [{
            key: 'init',
            value: function init() {
                var _this = this;
    
                if (typeof this.$html === 'undefined') {
                    throw new Error('$html must be passed to StickySidebarComponent');
                }
    
                if (typeof this.window === 'undefined') {
                    throw new Error('window must be passed to StickySidebarComponent');
                }
    
                this.sticky();
                $(this.window).on('scroll resize', function (event) {
                    return _this.sticky(event);
                });
            }
    
            /**
             * Sticky calculation
             *
             * Add the required sticky class to the container, and remove it if scrolled up
             */
    
        }, {
            key: 'sticky',
            value: function sticky() {
                var $container = this.$html.find('.tab__container.has-settings .tab__inner');
                var $header = $container.children('.tab__header');
                var $settings = $container.find('.tab__settings');
                var hasClass = $container.hasClass('is-sticky');
    
                if (!$settings.length) {
                    return;
                }
    
                var scrollTop = $(this.window).scrollTop();
                var sidebarOffset = Math.floor($container.offset().top + ($header.length > 0 ? $header.outerHeight() : 0));
    
                var hasScrolledPastContainer = scrollTop >= sidebarOffset;
    
                if (hasScrolledPastContainer) {
                    if (!hasClass) {
                        $container.addClass('is-sticky');
                    }
                } else {
                    if (hasClass) {
                        // Ensure when re-stickying that the content is scrolled to the top
                        $settings.scrollTop(0);
    
                        $container.removeClass('is-sticky');
                    }
                }
            }
        }]);
    
        return StickySidebarComponent;
    }();
    
    module.exports = StickySidebarComponent;
    
    },{"jquery":416}],51:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = require('jquery');
    
    /**
     * Enhance tab.js behaviour
    */
    
    var TabEnhancements = function () {
        function TabEnhancements() {
            _classCallCheck(this, TabEnhancements);
        }
    
        _createClass(TabEnhancements, [{
            key: 'init',
    
            /**
             * Initialise
             * @param {jQuery} $html - a jQuery wrapper of the html node
             */
            value: function init($html) {
                var _this = this;
    
                this.$html = $html;
    
                if (typeof $.fn.tab === 'undefined') {
                    console.warn('PULSAR: tab.js must be loaded in order to use TabEnhacements.js');
                }
    
                // Make sure tab panes are at least as high as the tab list (cms legacy tabs list)
                this.$html.find('.tabs > .tabs__content > .tab__pane').css('min-height', this.$html.find('.tabs__list').height());
    
                // Remove skip target IDs set in markup
                this.$html.find('div.tab__content').removeAttr('id');
    
                // Add the skip-target ID to the active main
                this.$html.find('.tab__pane.is-active div.tab__content').attr('id', 'skip-target');
    
                // On tab change
                this.$html.find('.nav-inline [data-toggle="tab"]').on('show.bs.tab', function (event) {
                    var $activeTab = _this.$html.find($(event.target).attr('href'));
    
                    // Remove previously set skip target IDs on other tabs
                    _this.$html.find('div.tab__content').removeAttr('id');
    
                    // Add skip target ID to new active tab main
                    $activeTab.find('div.tab__content').attr('id', 'skip-target');
                });
            }
        }]);
    
        return TabEnhancements;
    }();
    
    module.exports = TabEnhancements;
    
    },{"jquery":416}],52:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var TableDetailComponent = function () {
    
        /**
         * TableDetailComponent
         * @constructor
         * @param {jQuery} $html - jQuery wrapper of the html node
         */
        function TableDetailComponent($html) {
            _classCallCheck(this, TableDetailComponent);
    
            this.$html = $html;
            this.focusableElementList = 'a[href], area[href], input, select, textarea, button, iframe, object, embed, [tabindex], *[contenteditable]';
            this.panelIsOpen = false;
        }
    
        /**
         * Initialise
         */
    
    
        _createClass(TableDetailComponent, [{
            key: 'init',
            value: function init() {
                var _this = this;
    
                if (typeof this.$html === 'undefined' || !this.$html.length) {
                    throw new Error('$html must be passed to TableDetailComponent');
                }
    
                var $panelHtml = $('<div class="table-detail t-table-detail" data-table-detail-panel role="dialog" aria-modal="true" aria-hidden="true" aria-labelledby="table-detail-title">' + '   <div class="table-detail__header">' + '       <button type="button" class="close table-detail__header-close" data-table-detail-close-panel aria-label="Close" tabindex="-1"><span aria-hidden="true">&times;</span></button>' + '       <h1 id="table-detail-title" class="table-detail__title" data-table-detail-panel-title>Detail</h1>' + '   </div>' + '   <div class="table-detail__body" data-table-detail-panel-body></div>' + '</div>'),
                    $panelAlreadyExists = this.$html.find('[data-table-detail-panel]'),
                    $main = this.$html.find('main'),
                    $roleMain = this.$html.find('[role="main"]'),
                    $elementToAppendTo = void 0,
                    $triggeringElement = void 0;
    
                this.$table = this.$html.find('[data-table-detail-table]');
    
                if (!this.$table.length) {
                    return;
                }
    
                // Check panel hasn't already been added, in case of a datatable re-initting this component on paginated page draw
                if ($panelAlreadyExists.length === 0) {
                    // If main or role="main" is present append alerts to that (to satify WCAG 1.3.1 Info and Relationships)
                    if ($main.length > 0) {
                        $elementToAppendTo = $main;
                    } else if ($roleMain.length > 0) {
                        $elementToAppendTo = $roleMain;
                    } else {
                        $elementToAppendTo = this.$html.find('body');
                    }
    
                    // Add backdrop and detail panel if UI contains a table detail pattern
                    if (this.$table.length) {
                        $elementToAppendTo.append('<div class="table-detail-backdrop"></div>').append($panelHtml);
                    }
                }
    
                // Grab detail panel bits we need
                this.$detailPanel = this.$html.find('[data-table-detail-panel]');
                this.$detailPanelBody = this.$html.find('[data-table-detail-panel-body]');
                this.$detailPanelTitle = this.$html.find('[data-table-detail-panel-title]');
                this.$tableDetailBackdrop = this.$html.find('.table-detail-backdrop');
    
                // Open click listener
                this.$table.on('click', '[data-table-detail-view-detail]', function (event) {
                    event.preventDefault();
    
                    var $parentRow = $(event.currentTarget).closest('tr');
    
                    // If the table is in DT collapse mode, and the detail trigger is in the child row
                    // then fetch the detail content from the appropriate parent row
                    if ($parentRow.hasClass('child')) {
                        $parentRow = $parentRow.prev();
                    }
    
                    var detailContent = $parentRow.data('table-detail-content');
                    var customDetailPanelTitle = $parentRow.data('table-detail-panel-custom-title');
    
                    $triggeringElement = $(event.target);
    
                    _this.viewDetail(detailContent, customDetailPanelTitle);
                });
    
                // Close click listener
                this.$detailPanel.find('[data-table-detail-close-panel]').on('click', function (event) {
                    event.preventDefault();
                    _this.closeDetail();
                    $triggeringElement.trigger('focus');
                });
    
                // Close with backdrop click
                this.$tableDetailBackdrop.on('click', function (event) {
                    event.preventDefault();
                    if (_this.panelIsOpen) {
                        _this.closeDetail();
                        $triggeringElement.trigger('focus');
                    }
                });
    
                // Close ESC button
                this.$html.on('keydown', function (event) {
                    if (event.keyCode === 27 && _this.panelIsOpen) {
                        _this.closeDetail();
                        $triggeringElement.trigger('focus');
                    }
                });
            }
            /**
             * Show detail panel and populate with content and optional custom title
             * @param {String} content - string of html content to populate the detail panel body with
             * @param {String} customDetailPanelTitle - optinal custom detail panel title specific to the row clicked
             */
    
        }, {
            key: 'viewDetail',
            value: function viewDetail(content, customDetailPanelTitle) {
                // Set the title if present
                if (customDetailPanelTitle) {
                    this.$detailPanelTitle.html(customDetailPanelTitle);
                }
    
                // Remove aria-hidden so SR can read
                this.$detailPanel.removeAttr('aria-hidden');
    
                // Remove any previously added contents
                this.$detailPanelBody.empty();
    
                // Add attached data to detail panel body
                this.$detailPanelBody.html(content);
    
                // Apply backdrop
                this.$tableDetailBackdrop.addClass('in');
    
                // Mark panel as open
                this.panelIsOpen = true;
    
                // Open panel
                this.$detailPanel.addClass('table-detail--open');
    
                // Make elements focusable again
                this.$detailPanel.find(this.focusableElementList).not('[disabled], :hidden, [aria-hidden]').removeAttr('tabindex');
    
                // Trap focus within the panel
                this.trapFocus();
            }
    
            /**
             * Hide detail panel and remove backdrop
             */
    
        }, {
            key: 'closeDetail',
            value: function closeDetail() {
                // Remove backdrop
                this.$tableDetailBackdrop.removeClass('in');
    
                // Close panel
                this.$detailPanel.removeClass('table-detail--open');
    
                // Mark panel as closed
                this.panelIsOpen = false;
    
                // Hide panel contents from screen readers
                this.$detailPanel.attr('aria-hidden', 'true');
    
                // Make sure focusable elemnts cannot gain focus whilst panel is closed
                this.$detailPanel.find(this.focusableElementList).not('[tabindex=-1], [disabled], :hidden, [aria-hidden]').attr('tabindex', '-1');
    
                // Remove previously bound listener
                this.$html.off('keydown', this.boundKeydownListener);
            }
    
            /**
             * Listen for keyboard navigation, trap tabbing within the panels focusable elements
             * @param {jQuery} $focusableElements - Collection of focusable elements in the details panel
             */
    
        }, {
            key: 'keydownListener',
            value: function keydownListener($focusableElements, event) {
                var keyCode = event.keyCode || event.which;
    
                // If tab key is pressed
                if (keyCode === 9) {
                    // Check for shift tab
                    if (event.shiftKey) {
                        // Focus previous, check if first element is is currently in focus, if so focus last element
                        if ($focusableElements.first().is(':focus')) {
                            event.preventDefault();
                            $focusableElements.last().trigger('focus');
                        }
                    } else {
                        // Focus next, check if last element is is currently in focus, if so focus first element
                        if ($focusableElements.last().is(':focus')) {
                            event.preventDefault();
                            $focusableElements.first().trigger('focus');
                        }
                    }
                }
            }
    
            /**
             * Trap keyboard focus in the panel
             */
    
        }, {
            key: 'trapFocus',
            value: function trapFocus() {
                var $focusablePanelBodyElements = this.$detailPanelBody.find('a[href], area[href], input, select, textarea, button, iframe, object, embed, [tabindex], *[contenteditable]').not('[tabindex=-1], [disabled], :hidden, [aria-hidden]'),
                    $focusableElements = this.$detailPanel.find('a[href], area[href], input, select, textarea, button, iframe, object, embed, [tabindex], *[contenteditable]').not('[tabindex=-1], [disabled], :hidden, [aria-hidden]');
    
                // If the panel body contains a focusable element we should focus that rather than the close button
                if ($focusablePanelBodyElements.length > 0) {
                    $focusablePanelBodyElements.first().trigger('focus');
                } else {
                    this.$detailPanel.find('[data-table-detail-close-panel]').trigger('focus');
                }
    
                this.boundKeydownListener = this.keydownListener.bind(this, $focusableElements);
                this.$html.on('keydown', this.boundKeydownListener);
            }
        }]);
    
        return TableDetailComponent;
    }();
    
    module.exports = TableDetailComponent;
    
    },{}],53:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    require('timepicker');
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var TimePickerComponent = function () {
        function TimePickerComponent() {
            _classCallCheck(this, TimePickerComponent);
        }
    
        _createClass(TimePickerComponent, [{
            key: 'init',
    
    
            /**
             * Bind timepicker to element
             * @param {jQuery} $element - jQuery object of the element that requires a time picker
             * @param {Object?} options - Options for the date picker, see https://github.com/jonthornton/jquery-timepicker
             */
            value: function init($element, options) {
                if (typeof $element === 'undefined' || !$element) {
                    throw new Error('$element must be passed to TimePickerComponent');
                }
    
                if ($element.length) {
                    $element.timepicker(options);
                }
            }
        }]);
    
        return TimePickerComponent;
    }();
    
    module.exports = TimePickerComponent;
    
    },{"timepicker":433}],54:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = require('jquery');
    
    /**
     * Accessible tooltips using the tippyjs library with some custom behaviour to meet WCAG 2.1 1.4.13
     */
    
    var TooltipListener = function () {
    
        /**
         * Tooltip listener
         * @constructor
         * @param {jQuery} $html - jQuery wrapper of the container node
         * @param {tippy} TippyJS lib
         * @param {hideAll} Tippy hideAll method
         */
        function TooltipListener($html, tippy, hideAll) {
            _classCallCheck(this, TooltipListener);
    
            this.$html = $html;
            this.tippy = tippy;
            this.hideAll = hideAll;
            this.tippys = [];
            this.tippyConfig = {
                // Default to not allowing html inside of tooltip
                allowHTML: false,
    
                // Remove the default fade animation
                animation: 'none',
    
                // To prevent overflow issues, always append to body
                appendTo: this.$html.find('body')[0],
    
                // Remove the animation duration
                duration: 0,
    
                // Interactive allows us the hover over the tooltip contents, needed for WCAG 1.4.13: Content on Hover or Focus
                // unfortunately, adding aria: 'describedby' here doesn't work as the interactive option removes it and replaces
                // with aria-expanded see https://github.com/atomiks/tippyjs/issues/709
                // therefore we manually handle the tooltip aria-describedby attribute in the onMount and onHide lifecycle hooks
                interactive: true,
    
                // Custom methods, also required for WCAG compliance
                onCreate: this.onCreate,
                onMount: this.onMount,
                onHide: this.onHide,
                onHidden: this.onHidden
            };
        }
    
        /**
         * Initialise
         */
    
    
        _createClass(TooltipListener, [{
            key: 'init',
            value: function init() {
                var _this = this;
    
                this.tippys = this.tippy('[data-tippy-content]', this.tippyConfig);
    
                // Close ESC button
                this.$html.on('keydown', function (event) {
                    if (event.keyCode === 27) {
                        _this.hideAll();
                    }
                });
            }
    
            /**
             * Listen for new elements with tippys, ignore if already instantiated, create tooltip if not
             * @param {jQuery} $html - jQuery wrapper of the container node
             */
    
        }, {
            key: 'listen',
            value: function listen($html) {
                var _this2 = this;
    
                // Only create new tippys
                $html.find('[data-tippy-content]').each(function (index, element) {
                    if (_this2.isInstantiated(element)) {
                        return;
                    }
    
                    _this2.tippys.push(_this2.tippy(element, _this2.tippyConfig));
                });
            }
    
            /**
             * Check if element is instantiated
             * @param {Element} element - element to check for tippy instance
             */
    
        }, {
            key: 'isInstantiated',
            value: function isInstantiated(element) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;
    
                try {
                    for (var _iterator = this.tippys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var tippy = _step.value;
    
                        if (tippy.reference === element) {
                            return true;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
    
                return false;
            }
    
            /**
             * Get tippy instance of element
             * @returns {(object|null)} tippy object relating to an element or null
             */
    
        }, {
            key: 'getInstance',
            value: function getInstance(element) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;
    
                try {
                    for (var _iterator2 = this.tippys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var tippy = _step2.value;
    
                        if (tippy.reference === element) {
                            return tippy;
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
    
                return null;
            }
        }, {
            key: 'onCreate',
            value: function onCreate(instance) {
                // Remove unnecessary aria-expanded attribute (added by the interactive option - needed for content hover)
                $(instance.reference).removeAttr('aria-expanded');
            }
        }, {
            key: 'onMount',
            value: function onMount(instance) {
                var existingValue = void 0;
    
                // If the element already has aria-describedby text, keep it and add the tippy reference ID
                if ($(instance.reference).attr('aria-describedby')) {
                    existingValue = $(instance.reference).attr('aria-describedby');
                    $(instance.reference).attr('aria-describedby', 'tippy-' + instance.id + ' ' + existingValue);
                } else {
                    $(instance.reference).attr('aria-describedby', 'tippy-' + instance.id);
                }
    
                // Remove unnecessary re-added aria-expanded attribute
                $(instance.reference).removeAttr('aria-expanded');
            }
        }, {
            key: 'onHide',
            value: function onHide(instance) {
                var existingValue = $(instance.reference).attr('aria-describedby');
    
                // Remove tippy aria-describedby reference
                existingValue = existingValue.replace('tippy-' + instance.id, '').trim();
    
                // If no existing aria-describedby, remove the attribute
                if (existingValue.length < 1) {
                    $(instance.reference).removeAttr('aria-describedby');
                } else {
                    $(instance.reference).attr('aria-describedby', existingValue);
                }
            }
        }, {
            key: 'onHidden',
            value: function onHidden(instance) {
                // Remove unnecessary aria-expanded attribute
                $(instance.reference).removeAttr('aria-expanded');
            }
        }]);
    
        return TooltipListener;
    }();
    
    module.exports = TooltipListener;
    
    },{"jquery":416}],55:[function(require,module,exports){
    'use strict';
    
    var $ = require('jquery');
    
    var tippy = require('tippy.js').default;
    
    var _require = require('tippy.js'),
        hideAll = _require.hideAll;
    
    var TooltipListener = require('./TooltipListener');
    
    /**
     * Create a Tooltip listener instance
     * @param {jQuery} $html - jQuery wrapper of the html node
     */
    function tooltipFactory($html) {
      return new TooltipListener($html, tippy, hideAll);
    }
    
    module.exports = tooltipFactory;
    
    },{"./TooltipListener":54,"jquery":416,"tippy.js":435}],56:[function(require,module,exports){
    'use strict';
    
    var $ = require('jquery');
    
    require('jquery-placeholder');
    function SignInComponent(html) {
        this.$html = html;
    }
    
    SignInComponent.prototype.init = function () {
    
        var component = this;
    
        component.$container = this.$html.find('.signin'), component.$signinInner = this.$html.find('.signin__inner'), component.$errorPane = this.$html.find('.signin-error'), component.$signInPane = this.$html.find('.signin-form'), component.$resetPane = this.$html.find('.signin-reset'), component.$twoStepPane = this.$html.find('.signin-twostep'), component.$usernameField = this.$html.find('[name="username"]'), component.$passwordField = this.$html.find('[name="password"]'), component.$signInButton = this.$html.find('[name="signin-submit"]'), component.$signInTwoStep = this.$html.find('[name="signin-twostep"]'), component.$resetEmailField = this.$html.find('[name="reset-email"]'), component.$resetSubmit = this.$html.find('[name="reset-submit"]'), component.$twoStepOne = this.$html.find('[name="twoStepOne"]'), component.$twoStepTwo = this.$html.find('[name="twoStepTwo"]'), component.$info = this.$html.find('.signin-form .signin__info'), component.$twoStepInfo = this.$html.find('.signin-twostep .signin__info'), component.$alert = $('.alert');
        component.successMessage = 'Signed in successfully';
        component.signInFailMessage = '<i class="icon icon-exclamation-triangle"></i> Your username and/or password was incorrect';
    
        component.hint = '<i class="signin__hint"></i>', component.infoText = component.$info.text(), component.signInButtonValue = component.$signInButton.html(), component.animationEnd = 'webkitAnimationEnd oanimationend oAnimationEnd msAnimationEnd animationend';
        component.transitionEnd = 'webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', component.twoStepAttempt = 0;
    
        // Polyfill placeholder behaviour in oldIE
        this.$html.find('input').placeholder();
    
        // Forgotten password
        this.$html.find('[href="#forgot-password"]').on('click', function (e) {
            e.preventDefault();
    
            component.switchPanel('.signin-reset');
    
            component.$container.removeClass('signin--error');
    
            component.$container.addClass('active-reset').one(component.transitionEnd, function () {
                component.$resetEmailField.focus();
            });
    
            $('.signin__input, .signin__submit, .signin__link', $('.signin-reset')).prop('tabindex', '');
        });
    
        // Cancel forgotten password
        this.$html.find('[href="#signin"]').on('click', function (e) {
            e.preventDefault();
            e.stopPropagation();
            component.reset();
        });
    
        // Forgotten username
        this.$html.find('[href="#forgot-username"]').on('click', function (e) {
            e.preventDefault();
    
            component.switchPanel('.signin-forgot');
    
            component.$container.removeClass('signin--error');
    
            component.$container.addClass('active-forgot').one(component.transitionEnd, function () {
                component.$resetEmailField.focus();
            });
    
            $('.signin__input, .signin__submit, .signin__link', $('.signin-reset')).prop('tabindex', '');
        });
    
        // Escape key resets the UI back to the login pane
        $(document).on('keyup', function (e) {
            if (e.keyCode == 27) {
                component.reset();
            };
        });
    
        this.$html.find('[name="signin-submit"]').on('click', function (e) {
            e.preventDefault();
    
            var infoText = '<i class="icon icon-exclamation-triangle"></i> Enter your username and password';
    
            if (!component.$usernameField.val() || !component.$passwordField.val()) {
                component.$container.addClass('shake').one(component.animationEnd, function () {
                    $(this).removeClass('shake');
                });
    
                if (component.$usernameField.val() && !component.$passwordField.val()) {
                    infoText = '<i class="icon icon-exclamation-triangle"></i> Enter your password';
    
                    component.$passwordField.focus();
    
                    if (!component.$passwordField.prev('.signin__hint').length) {
    
                        component.$passwordField.before(component.hint).on('keyup', function () {
                            if ($(this).val().length > 0) {
                                $(this).prev('.signin__hint').fadeOut(150);
                            } else {
                                $(this).prev('.signin__hint').fadeIn(150);
                            }
                        });
                    };
                } else if (!component.$usernameField.val() && component.$passwordField.val()) {
                    infoText = '<i class="icon icon-exclamation-triangle"></i> Enter your username';
                    component.$usernameField.focus();
    
                    if (!component.$usernameField.prev('.signin__hint').length) {
                        component.$usernameField.before(component.hint).on('keyup', function () {
                            if ($(this).val().length > 0) {
                                $(this).prev('.signin__hint').fadeOut(150);
                            } else {
                                $(this).prev('.signin__hint').fadeIn(150);
                            }
                        });
                    };
                } else {
                    component.$usernameField.focus();
    
                    if (!component.$usernameField.prev('.signin__hint').length) {
                        component.$usernameField.before(component.hint).on('keyup', function () {
                            if ($(this).val().length > 0) {
                                $(this).prev('.signin__hint').fadeOut(150);
                            } else {
                                $(this).prev('.signin__hint').fadeIn(150);
                            }
                        });
                    };
                }
    
                component.$info.animate({
                    opacity: 0
                }, 150, function () {
                    $(this).html(infoText).animate({
                        opacity: 1
                    }, 150);
                });
            } else {
    
                // PRETEND WE'VE AUTHED AND GO TO 2FA SCREEN
                component.twoStep();
            }
        });
    
        this.$html.find('[name="reset-submit"]').on('click', function (e) {
            e.preventDefault();
    
            if (!component.$resetEmailField.val()) {
    
                component.$container.addClass('shake').one(component.animationEnd, function () {
                    $(this).removeClass('shake');
                });
    
                component.$resetEmailField.focus().before(component.hint).on('keyup', function () {
                    if ($(this).val().length > 0) {
                        $(this).prev('.signin__hint').fadeOut(150);
                    } else {
                        $(this).prev('.signin__hint').fadeIn(150);
                    }
                });
            }
        });
    };
    
    SignInComponent.prototype.reset = function () {
    
        var component = this;
    
        component.switchPanel('.signin-form');
    
        component.$container.removeClass('signin--error').find('.signin__hint').remove();
    
        if (this.$html.find('.signin-container input:not([name="username"])').length) {
            this.$html.find('.signin-container input:not([name="username"])').trigger('blur');
        }
    
        $('.signin__input, .signin__submit, .signin__link', $('.signin-reset')).prop('tabindex', '-1');
    
        if (component.$info.text() != component.infoText) {
            component.$info.animate({
                opacity: 0
            }, 150, function () {
                $(this).text(component.infoText).animate({
                    opacity: 1
                }, 150);
            });
        }
    
        if (component.$signInButton.html() != component.signInButtonValue) {
            component.$signInButton.animate({
                opacity: 0
            }, 150, function () {
                $(this).text(component.signInButtonValue).animate({
                    opacity: 1
                }, 150);
            });
        };
    
        component.$container.removeClass('active-reset active-forgot active-twostep').one(component.transitionEnd, function () {
            component.$usernameField.focus();
        });
    };
    
    SignInComponent.prototype.signinFail = function () {
    
        var component = this;
    
        component.$container.find('.signin__hint').remove();
    
        component.$info.animate({
            opacity: 0
        }, 150, function () {
            $(this).html('').append(component.signInFailMessage).animate({
                opacity: 1
            }, 150);
        });
    
        if (component.$container.hasClass('signin--error')) {
            return false;
        }
    
        component.$container.addClass('signin--error');
        component.$usernameField.focus();
    
        component.$signInButton.animate({
            opacity: 0
        }, 150, function () {
            $(this).html('Try Again').animate({
                opacity: 1
            }, 150);
        });
    
        // return false here so that focus() can be correctly assigned
        return false;
    };
    
    SignInComponent.prototype.switchPanel = function (panelClass) {
    
        var component = this,
            newPanel = component.$container.find(panelClass),
            oldPanel = component.$container.find('.signin__panel:not(' + panelClass + ')');
    
        component.$container.removeClass('signin--error');
    
        // This panel
        newPanel.attr('aria-hidden', 'false').find('[tabindex]').prop('disabled', false).each(function () {
            $(this).attr('tabindex', '0');
        });
    
        // Other panels
        oldPanel.attr('aria-hidden', 'true').find('[tabindex]').prop('disabled', true).each(function () {
            $(this).attr('tabindex', '-1');
        });
    };
    
    SignInComponent.prototype.twoStep = function () {
    
        var component = this;
    
        component.switchPanel('.signin-twostep');
    
        component.$container.addClass('active-twostep').one(component.transitionEnd, function () {
            component.$twoStepOne.focus();
        });
    
        component.$twoStepOne.on('keyup', function () {
            var $stepOneField = $(this);
    
            if ($stepOneField.val().length === parseInt($stepOneField.attr('maxlength'))) {
                component.$twoStepTwo.focus();
            }
        });
    
        component.$twoStepTwo.on('keyup', function () {
            if ($(this).val().length === 0) {
                component.$twoStepOne.focus();
            }
        });
    
        this.$html.find('[name="signin-twostep"]').on('click', function (e) {
            e.preventDefault();
    
            if (!component.$twoStepOne.val() || !component.$twoStepTwo.val()) {
    
                component.$container.addClass('shake').one(component.animationEnd, function () {
                    $(this).removeClass('shake');
                });
    
                // replace contents of info element so screenreader announces it
                var twoStepInfo = component.$twoStepPane.find('.signin__info').html();
                component.$twoStepInfo.html('').append(twoStepInfo);
            }
    
            if (component.$twoStepOne.val().length < 3) {
    
                component.$twoStepOne.focus();
    
                if (!component.$twoStepOne.prev('.signin__hint').length) {
                    component.$twoStepOne.before(component.hint).on('keyup', function () {
                        if ($(this).val().length > 0) {
                            $(this).prev('.signin__hint').fadeOut(150);
                        } else {
                            $(this).prev('.signin__hint').fadeIn(150);
                        }
                    });
                };
            } else if (component.$twoStepOne.val().length == 3 && component.$twoStepTwo.val().length < 3) {
    
                component.$twoStepTwo.focus();
    
                if (!component.$twoStepTwo.next('.signin__hint').length) {
    
                    component.$twoStepTwo.after(component.hint).on('keyup', function () {
                        if ($(this).val().length > 0) {
                            $(this).prev('.signin__hint').fadeOut(150);
                        } else {
                            $(this).prev('.signin__hint').fadeIn(150);
                        }
                    });
                };
            } else {
                component.success();
            }
        });
    };
    
    SignInComponent.prototype.twoStepFail = function () {
    
        var component = this;
    
        if (component.twoStepAttempt >= 1) {
            component.$twoStepInfo.animate({
                opacity: 0
            }, 150, function () {
                $(this).html('<i class="icon-question-sign"></i> Having trouble?<br />check our <a href="#">two-step help page</a>').animate({
                    opacity: 1
                }, 150);
            });
        };
    
        if (!component.$container.hasClass('signin--error')) {
            component.$container.addClass('signin--error');
            component.$twoStepOne.focus();
    
            component.$signInTwoStep.animate({
                opacity: 0
            }, 150, function () {
                $(this).html('Try Again').animate({
                    opacity: 1
                }, 150);
            });
        }
    
        component.twoStepAttempt++;
    };
    
    SignInComponent.prototype.success = function () {
    
        var component = this,
            successPanel = component.$container.find('.signin-success'),
            oldPanel = component.$container.find('.signin__panel:not(.signin-success)');
    
        component.$alert.append(document.createTextNode(component.successMessage));
        component.$container.addClass('active-success');
    
        successPanel.attr('aria-hidden', 'false');
        oldPanel.attr('aria-hidden', 'true');
    };
    
    module.exports = SignInComponent;
    
    },{"jquery":416,"jquery-placeholder":407}],57:[function(require,module,exports){
    'use strict';
    
    /**
     * Pulsar
     *
     * Core UI components that should always be present.
     *
     * Jadu Ltd.
     */
    
    // Fixes issue with dependencies that expect both $ and jQuery to be set
    window.jQuery = window.$ = require('jquery');
    
    require('babel-polyfill');
    
    // Global UI components
    var $ = require('jquery'),
        modal = require('./libs/modal'),
        tab = require('./libs/tab'),
        popover = require('./libs/popover'),
        tooltip = require('./libs/tooltip'),
        matchMedia = require('./polyfills/matchMedia'),
        matchMediaAddListener = require('./polyfills/matchMedia.addListener'),
        dt = require('datatables.net')(window, $),
        dt_buttons = require('datatables.net-buttons')(window, $),
        dt_responsive = require('datatables.net-responsive')(window, $),
        dt_select = require('datatables.net-select')(window, $),
        ButtonComponent = require('./ButtonComponent'),
        DropdownButtonComponent = require('./DropdownButtonComponent'),
        DisableUiComponent = require('./DisableUiComponent'),
        ErrorSummaryComponent = require('./ErrorSummaryComponent'),
        HelpTextComponent = require('./HelpTextComponent'),
        FilterBarComponent = require('./FilterBarComponent'),
        FlashMessageComponent = require('./FlashMessageComponent'),
        MasterSwitchComponent = require('./MasterSwitchComponent'),
        ModulePermissionsComponent = require('./ModulePermissionsComponent'),
        NavMainComponent = require('./NavMainComponent'),
        PulsarFormComponent = require('./PulsarFormComponent'),
        PulsarUIComponent = require('./PulsarUIComponent'),
        PulsarSortableComponent = require('./PulsarSortableComponent'),
        SignInComponent = require('./area/signin/signin'),
        StickySidebarComponent = require('./StickySidebarComponent'),
        TableDetailComponent = require('./TableDetailComponent'),
        DropZoneComponentFactory = require('./DropZone/DropZoneComponentFactory'),
        RepeaterManagerComponent = require('./Repeater/RepeaterManagerComponent'),
        repeaterComponentFactory = require('./Repeater/repeaterComponentFactory'),
        FaviconEditor = require('./Notifications/FaviconEditor'),
        tooltipFactory = require('./Tooltips/tooltipsFactory'),
        ModalFocusService = require('./Modals/ModalFocusService'),
        ModalListener = require('./Modals/ModalListener'),
        datePicker = require('pulsar-date-picker'),
        FocusManagementService = require('./FocusManagementService'),
        TabEnhancements = require('./TabEnhancements/TabEnhancements');
    
    require('jstree');
    
    module.exports = {
        ButtonComponent: ButtonComponent,
        DropdownButtonComponent: DropdownButtonComponent,
        DropZoneComponentFactory: DropZoneComponentFactory,
        DisableUiComponent: DisableUiComponent,
        ErrorSummaryComponent: ErrorSummaryComponent,
        HelpTextComponent: HelpTextComponent,
        FilterBarComponent: FilterBarComponent,
        FlashMessageComponent: FlashMessageComponent,
        MasterSwitchComponent: MasterSwitchComponent,
        ModulePermissionsComponent: ModulePermissionsComponent,
        NavMainComponent: NavMainComponent,
        PulsarFormComponent: PulsarFormComponent,
        PulsarUIComponent: PulsarUIComponent,
        PulsarSortableComponent: PulsarSortableComponent,
        SignInComponent: SignInComponent,
        StickySidebarComponent: StickySidebarComponent,
        TableDetailComponent: TableDetailComponent,
        RepeaterManagerComponent: RepeaterManagerComponent,
        repeaterComponentFactory: repeaterComponentFactory,
        FaviconEditor: FaviconEditor,
        tooltipFactory: tooltipFactory,
        ModalFocusService: ModalFocusService,
        ModalListener: ModalListener,
        datePicker: datePicker,
        FocusManagementService: FocusManagementService,
        TabEnhancements: TabEnhancements
    };
    
    },{"./ButtonComponent":1,"./DisableUiComponent":4,"./DropZone/DropZoneComponentFactory":11,"./DropdownButtonComponent":24,"./ErrorSummaryComponent":25,"./FilterBarComponent":26,"./FlashMessageComponent":27,"./FocusManagementService":28,"./HelpTextComponent":29,"./MasterSwitchComponent":30,"./Modals/ModalFocusService":31,"./Modals/ModalListener":32,"./ModulePermissionsComponent":33,"./NavMainComponent":34,"./Notifications/FaviconEditor":35,"./PulsarFormComponent":36,"./PulsarSortableComponent":37,"./PulsarUIComponent":38,"./Repeater/RepeaterManagerComponent":45,"./Repeater/repeaterComponentFactory":48,"./StickySidebarComponent":50,"./TabEnhancements/TabEnhancements":51,"./TableDetailComponent":52,"./Tooltips/tooltipsFactory":55,"./area/signin/signin":56,"./libs/modal":59,"./libs/popover":60,"./libs/tab":61,"./libs/tooltip":62,"./polyfills/matchMedia":64,"./polyfills/matchMedia.addListener":63,"babel-polyfill":70,"datatables.net":404,"datatables.net-buttons":401,"datatables.net-responsive":402,"datatables.net-select":403,"jquery":416,"jstree":417,"pulsar-date-picker":424}],58:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _lodash = require('lodash');
    
    var _lodash2 = _interopRequireDefault(_lodash);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var MimeTyper = function () {
        function MimeTyper() {
            _classCallCheck(this, MimeTyper);
    
            // this will be returned in the event we cannot match the MIME type
            this.default = 'file-o';
            this.classes = {
                code: 'file-code-o',
                text: 'file-text-o',
                doc: 'file-word-o',
                powerpoint: 'file-powerpoint-o',
                excel: 'file-excel-o',
                pdf: 'file-pdf-o',
                image: 'file-image-o',
                zip: 'file-zip-o',
                video: 'file-movie-o',
                audio: 'file-audio-os'
            };
            // MIME type map {MIME type}: {class name}
            this.mimes = {
                // code
                'text/css': this.classes.code,
                'text/html': this.classes.code,
                'application/javascript': this.classes.code,
                'text/javascript': this.classes.code,
                'application/ecmascript': this.classes.code,
                'text/xml': this.classes.code,
                // text
                'text/plain': this.classes.text,
                'application/plain': this.classes.text,
                'text/richtext': this.classes.text,
                'application/rtf': this.classes.text,
                // document
                'application/msword': this.classes.doc,
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document': this.classes.doc,
                // powerpoint
                'application/vnd.ms-powerpoint': this.classes.powerpoint,
                'application/mspowerpoint': this.classes.powerpoint,
                'application/powerpoint': this.classes.powerpoint,
                // spreadsheet
                'application/excel': this.classes.excel,
                'application/vnd.ms-excel': this.classes.excel,
                'application/x-excel': this.classes.excel,
                'application/x-msexcel': this.classes.excel,
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': this.classes.excel,
                // pdf
                'application/pdf': this.classes.pdf,
                // image
                'image/jpeg': this.classes.image,
                'image/png': this.classes.image,
                'image/svg': this.classes.image,
                'image/svg+xml': this.classes.image,
                'image/gif': this.classes.image,
                // zip
                'application/x-compressed': this.classes.zip,
                'application/x-gzip': this.classes.zip,
                'application/zip': this.classes.zip,
                'application/x-zip': this.classes.zip,
                // video
                'video/mpeg': this.classes.video,
                'video/quicktime': this.classes.video,
                'video/mp4': this.classes.video,
                // audio
                'audio/mpeg': this.classes.audio,
                'audio/midi': this.classes.audio,
                'audio/wav': this.classes.audio,
                'audio/x-wav': this.classes.audio
            };
        }
    
        /**
         * Search MIME keys and return corresponding class name.
         * If we can't find the type, return the default class name.
         * @param  {String} userMime
         * @return {String}
         */
    
    
        _createClass(MimeTyper, [{
            key: 'getIconClass',
            value: function getIconClass(userMime) {
                var match = _lodash2.default.find(Object.keys(this.mimes), function (mime) {
                    return mime === userMime;
                });
    
                return match ? this.mimes[match] : this.default;
            }
        }]);
    
        return MimeTyper;
    }();
    
    module.exports = MimeTyper;
    
    },{"lodash":418}],59:[function(require,module,exports){
    /* ========================================================================
     * Bootstrap: modal.js v3.0.3
     * http://twbs.github.com/bootstrap/javascript.html#modals
     * ========================================================================
     * Copyright 2012 Twitter, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * ======================================================================== */
    
    'use strict';
    
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
    
    var $ = require('jquery'),
        _ = require('lodash');
    
    // MODAL CLASS DEFINITION
    // ======================
    
    var Modal = function Modal(element, options) {
      this.options = options;
      this.$element = $(element);
      this.$backdrop = this.isShown = null;
    
      if (this.options.remote) this.$element.load(this.options.remote);
    };
    
    Modal.DEFAULTS = {
      backdrop: 'static',
      keyboard: true,
      show: true
    };
    
    Modal.prototype.toggle = function (_relatedTarget) {
      return this[!this.isShown ? 'show' : 'hide'](_relatedTarget);
    };
    
    Modal.prototype.show = function (_relatedTarget) {
      var that = this;
      var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget });
    
      this.$element.trigger(e);
    
      if (this.isShown || e.isDefaultPrevented()) return;
    
      this.isShown = true;
    
      this.escape();
    
      this.$element.on('click.dismiss.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this));
    
      this.backdrop(function () {
        var transition = $.support.transition && that.$element.hasClass('fade');
    
        if (!that.$element.parent().length) {
          that.$element.appendTo(document.body); // don't move modals dom position
        }
    
        that.$element.show();
    
        if (transition) {
          that.$element[0].offsetWidth; // force reflow
        }
    
        that.$element.addClass('in').attr('aria-hidden', false);
    
        that.enforceFocus();
    
        var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget });
    
        transition ? that.$element.find('.modal-dialog') // wait for modal to slide in
        .one($.support.transition.end, function () {
          that.$element.trigger('focus').trigger(e);
        }).emulateTransitionEnd(300) : that.$element.trigger('focus').trigger(e);
      });
    };
    
    Modal.prototype.hide = function (e) {
      if (e) e.preventDefault();
    
      e = $.Event('hide.bs.modal');
    
      this.$element.trigger(e);
    
      if (!this.isShown || e.isDefaultPrevented()) return;
    
      this.isShown = false;
    
      this.escape();
    
      $(document).off('focusin.bs.modal');
    
      this.$element.removeClass('in').attr('aria-hidden', true).off('click.dismiss.modal');
    
      var $modalContent = this.$element.find('.modal__content').detach();
      this.$element.find('.modal__dialog').append($modalContent);
    
      $.support.transition && this.$element.hasClass('fade') ? this.$element.one($.support.transition.end, $.proxy(this.hideModal, this)).emulateTransitionEnd(300) : this.hideModal();
    };
    
    Modal.prototype.enforceFocus = function () {
      $(document).off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.trigger('focus');
        }
      }, this));
    };
    
    Modal.prototype.escape = function () {
      if (this.isShown && this.options.keyboard) {
        this.$element.on('keyup.dismiss.bs.modal', $.proxy(function (e) {
          e.which == 27 && this.hide();
        }, this));
      } else if (!this.isShown) {
        this.$element.off('keyup.dismiss.bs.modal');
      }
    };
    
    Modal.prototype.hideModal = function () {
      var that = this;
      this.$element.hide();
      this.backdrop(function () {
        that.removeBackdrop();
        that.$element.trigger('hidden.bs.modal');
      });
    };
    
    Modal.prototype.removeBackdrop = function () {
      this.$backdrop && this.$backdrop.remove();
      this.$backdrop = null;
    };
    
    Modal.prototype.backdrop = function (callback) {
      var that = this;
      var animate = this.$element.hasClass('fade') ? 'fade' : '';
    
      if (this.isShown && this.options.backdrop) {
        var doAnimate = $.support.transition && animate;
    
        this.$backdrop = $('<div class="modal__backdrop ' + animate + '" />').appendTo(document.body);
    
        this.$element.on('click.dismiss.modal', $.proxy(function (e) {
          if (e.target !== e.currentTarget) return;
          this.options.backdrop == 'static' ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this);
        }, this));
    
        if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow
    
        this.$backdrop.addClass('in');
    
        if (!callback) return;
    
        doAnimate ? this.$backdrop.one($.support.transition.end, callback).emulateTransitionEnd(150) : callback();
      } else if (!this.isShown && this.$backdrop) {
        this.$backdrop.removeClass('in');
    
        $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one($.support.transition.end, callback).emulateTransitionEnd(150) : callback();
      } else if (callback) {
        callback();
      }
    };
    
    // MODAL PLUGIN DEFINITION
    // =======================
    
    var old = $.fn.modal;
    
    $.fn.modal = function (option, _relatedTarget) {
      return this.each(function () {
        var $this = $(this);
        var data = $this.data('bs.modal');
        var options = $.extend({}, Modal.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);
    
        if (!data) $this.data('bs.modal', data = new Modal(this, options));
        if (typeof option == 'string') data[option](_relatedTarget);else if (options.show) data.show(_relatedTarget);
      });
    };
    
    $.fn.modal.Constructor = Modal;
    
    // MODAL NO CONFLICT
    // =================
    
    $.fn.modal.noConflict = function () {
      $.fn.modal = old;
      return this;
    };
    
    // MODAL DATA-API
    // ==============
    
    $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
      var $this = $(this);
      var href = $this.attr('href');
      var $target = $(_.escape($this.attr('data-target') || href && href.replace(/.*(?=#[^\s]+$)/, ''))); //strip for ie7
      var option = $target.data('modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());
    
      e.preventDefault();
    
      $target.modal(option, this).one('hide', function () {
        $this.is(':visible') && $this.trigger('focus');
      });
    });
    
    $(document).on('show.bs.modal', '.modal', function () {
      $(document.body).addClass('modal-open');
    }).on('hidden.bs.modal', '.modal', function () {
      $(document.body).removeClass('modal-open');
    });
    
    module.exports = Modal;
    
    },{"jquery":416,"lodash":418}],60:[function(require,module,exports){
    /* ========================================================================
     * Bootstrap: popover.js v3.0.0
     * http://twbs.github.com/bootstrap/javascript.html#popovers
     * ========================================================================
     * Copyright 2012 Twitter, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * ======================================================================== */
    
    'use strict';
    
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
    
    var $ = require('jquery'),
        tooltips = require('./tooltip');
    
    // POPOVER PUBLIC CLASS DEFINITION
    // ===============================
    
    var Popover = function Popover(element, options) {
      this.init('popover', element, options);
    };
    
    if (!$.fn.tooltips) throw new Error('Popover requires tooltips.js');
    
    Popover.DEFAULTS = $.extend({}, $.fn.tooltips.Constructor.DEFAULTS, {
      placement: 'right',
      trigger: 'click',
      content: '',
      template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
    });
    
    // NOTE: POPOVER EXTENDS tooltip.js
    // ================================
    
    Popover.prototype = $.extend({}, $.fn.tooltips.Constructor.prototype);
    
    Popover.prototype.constructor = Popover;
    
    Popover.prototype.getDefaults = function () {
      return Popover.DEFAULTS;
    };
    
    Popover.prototype.setContent = function () {
      var $tip = this.tip();
      var title = this.getTitle();
      var content = this.getContent();
    
      $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);
      $tip.find('.popover-content')[this.options.html ? 'html' : 'text'](content);
    
      $tip.removeClass('fade top bottom left right in');
    
      $tip.find('.popover-title:empty').hide();
    };
    
    Popover.prototype.hasContent = function () {
      return this.getTitle() || this.getContent();
    };
    
    Popover.prototype.getContent = function () {
      var $e = this.$element;
      var o = this.options;
    
      return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);
    };
    
    Popover.prototype.arrow = function () {
      return this.$arrow = this.$arrow || this.tip().find('.arrow');
    };
    
    Popover.prototype.tip = function () {
      if (!this.$tip) this.$tip = $(this.options.template);
      return this.$tip;
    };
    
    // POPOVER PLUGIN DEFINITION
    // =========================
    
    var old = $.fn.popover;
    
    $.fn.popover = function (option) {
      return this.each(function () {
        var $this = $(this);
        var data = $this.data('bs.popover');
        var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;
    
        if (!data) $this.data('bs.popover', data = new Popover(this, options));
        if (typeof option == 'string') data[option]();
      });
    };
    
    $.fn.popover.Constructor = Popover;
    
    // POPOVER NO CONFLICT
    // ===================
    
    $.fn.popover.noConflict = function () {
      $.fn.popover = old;
      return this;
    };
    
    $(document).ready(function () {
      $('[data-toggle="popover"], [rel="clickover"]').on('click', function (e) {
        e.preventDefault();
      }).popover();
    });
    
    $(document).on('click', function (e) {
      var $target = $(e.target);
    
      // Ignore popover and clickover triggers and children
      if ($target.attr('data-toggle') === 'popover' || $target.parent().attr('data-toggle') === 'popover' || $target.attr('rel') === 'clickover') {
        return;
      }
    
      $('[data-toggle="popover"][data-autoclose="true"], [rel="clickover"]').each(function () {
        var $this = $(this),
            $bsPopover = $this.popover('hide').data('bs.popover');
    
        if ($bsPopover !== undefined && $bsPopover.inState) {
          $bsPopover.click = false;
        }
      });
    });
    
    module.exports = Popover;
    
    },{"./tooltip":62,"jquery":416}],61:[function(require,module,exports){
    /* ========================================================================
     * Bootstrap: tab.js v3.0.0
     * http://twbs.github.com/bootstrap/javascript.html#tabs
     * ========================================================================
     * Copyright 2012 Twitter, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     * ======================================================================== */
    
    "use strict";
    
    var $ = require('jquery'),
        _ = require('lodash');
    
    // TAB CLASS DEFINITION
    // ====================
    
    var Tab = function Tab(element) {
        this.element = $(element);
    };
    
    Tab.prototype.show = function () {
        var $this = this.element;
        var $ul = $this.closest('ul:not(.dropdown-menu)');
        var selector = $this.attr('data-target');
    
        if (!selector) {
            selector = $this.attr('href');
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); //strip for ie7
        }
    
        if ($this.parent('li').hasClass('is-active')) return;
    
        var previous = $ul.find('.is-active:last a')[0];
        var e = $.Event('show.bs.tab', {
            relatedTarget: previous
        });
    
        $this.trigger(e);
    
        if (e.isDefaultPrevented()) return;
    
        var $target = $(_.escape(selector));
    
        // If we have sub-tabs, selecting the parent should activate and highlight the first one
        if (!$target.length) {
            var firstTab = $('li > a', $this.parent());
            if ($(firstTab).attr('href').substring(0, 1) === "#") {
                firstTab.parent().removeClass('is-active').first().addClass('is-active');
                $target = $($(firstTab).attr('href'));
            }
        }
    
        this.activate($this.parent('li'), $ul);
        this.activate($target, $target.parent(), function () {
            $this.trigger({
                type: 'shown.bs.tab',
                relatedTarget: previous
            });
        });
    
        $('.tab__pane').css('min-height', $('.tabs__list').height());
    };
    
    Tab.prototype.activate = function (element, container, callback) {
        var $active = container.find('> .is-active');
        var transition = callback && $.support.transition && $active.hasClass('fade');
    
        function next() {
            $active.removeClass('is-active').find('> .dropdown-menu > .is-active').removeClass('is-active');
    
            element.addClass('is-active');
    
            if (transition) {
                element[0].offsetWidth; // reflow for transition
                element.addClass('in');
            } else {
                element.removeClass('fade');
            }
    
            if (element.parent('.dropdown-menu')) {
                element.closest('li.dropdown').addClass('is-active');
            }
    
            callback && callback();
        }
    
        transition ? $active.one($.support.transition.end, next).emulateTransitionEnd(150) : next();
    
        $active.removeClass('in');
    };
    
    // TAB PLUGIN DEFINITION
    // =====================
    
    var old = $.fn.tab;
    
    $.fn.tab = function (option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data('bs.tab');
    
            if (!data) $this.data('bs.tab', data = new Tab(this));
            if (typeof option == 'string') data[option]();
        });
    };
    
    $.fn.tab.Constructor = Tab;
    
    // TAB NO CONFLICT
    // ===============
    
    $.fn.tab.noConflict = function () {
        $.fn.tab = old;
        return this;
    };
    
    // TAB DATA-API
    // ============
    
    $(document).on('click.bs.tab.data-api', '[data-toggle="tab"]:not(.disabled), [data-toggle="pill"]', function (e) {
        e.preventDefault();
    
        var $this = $(this),
            target = $this.attr('href');
    
        $this.tab('show');
    
        $('.tabs__list a:not([href="' + target + '"])').parent().removeClass('is-active');
    
        if ($(this).closest('.tabs__list').length) {
            $this.parent().addClass('is-active');
        } else {
            $('.tabs__list a[href="' + target + '"]').parent().addClass('is-active');
        }
    });
    
    module.exports = Tab;
    
    },{"jquery":416,"lodash":418}],62:[function(require,module,exports){
    /* ========================================================================
     * Bootstrap: tooltip.js v3.1.1
     * http://getbootstrap.com/javascript/#tooltips
     * Inspired by the original jQuery.tipsy by Jason Frame
     * ========================================================================
     * Copyright 2011-2014 Twitter, Inc.
     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
     *
     * NOTE: tooltip namespace has been changed to 'tooltips' to resolve a conflict
     * with jQueryUI
     * ======================================================================== */
    
    "use strict";
    
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
    
    var $ = require('jquery'),
        _ = require('lodash');
    
    // TOOLTIPS PUBLIC CLASS DEFINITION
    // ===============================
    
    var Tooltips = function Tooltips(element, options) {
      this.type = this.options = this.enabled = this.timeout = this.hoverState = this.$element = null;
    
      this.init('tooltips', element, options);
    };
    
    Tooltips.DEFAULTS = {
      animation: true,
      placement: 'top',
      selector: false,
      template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
      trigger: 'hover focus',
      title: '',
      delay: 0,
      html: false,
      container: false,
      viewport: {
        selector: 'body',
        padding: 0
      }
    };
    
    Tooltips.prototype.init = function (type, element, options) {
      this.enabled = true;
      this.type = type;
      this.$element = $(element);
      this.options = this.getOptions(options);
      this.$viewport = this.options.viewport && $.find(this.options.viewport.selector || this.options.viewport);
    
      var triggers = this.options.trigger.split(' ');
    
      for (var i = triggers.length; i--;) {
        var trigger = triggers[i];
    
        if (trigger == 'click') {
          this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));
        } else if (trigger != 'manual') {
          var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';
          var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';
    
          this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));
          this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));
        }
      }
    
      this.options.selector ? this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' }) : this.fixTitle();
    };
    
    Tooltips.prototype.getDefaults = function () {
      return Tooltips.DEFAULTS;
    };
    
    Tooltips.prototype.getOptions = function (options) {
      options = $.extend({}, this.getDefaults(), this.$element.data(), options);
    
      if (options.delay && typeof options.delay == 'number') {
        options.delay = {
          show: options.delay,
          hide: options.delay
        };
      }
    
      return options;
    };
    
    Tooltips.prototype.getDelegateOptions = function () {
      var options = {};
      var defaults = this.getDefaults();
    
      this._options && $.each(this._options, function (key, value) {
        if (defaults[key] != value) options[key] = value;
      });
    
      return options;
    };
    
    Tooltips.prototype.enter = function (obj) {
      var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type);
    
      clearTimeout(self.timeout);
    
      self.hoverState = 'in';
    
      if (!self.options.delay || !self.options.delay.show) return self.show();
    
      self.timeout = setTimeout(function () {
        if (self.hoverState == 'in') self.show();
      }, self.options.delay.show);
    };
    
    Tooltips.prototype.leave = function (obj) {
      var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type);
    
      clearTimeout(self.timeout);
    
      self.hoverState = 'out';
    
      if (!self.options.delay || !self.options.delay.hide) return self.hide();
    
      self.timeout = setTimeout(function () {
        if (self.hoverState == 'out') self.hide();
      }, self.options.delay.hide);
    };
    
    Tooltips.prototype.show = function () {
      var e = $.Event('show.bs.' + this.type);
    
      if (this.hasContent() && this.enabled) {
        this.$element.trigger(e);
    
        if (e.isDefaultPrevented()) return;
        var that = this;
    
        var $tip = this.tip();
    
        this.setContent();
    
        if (this.options.animation) $tip.addClass('fade');
    
        var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
    
        var autoToken = /\s?auto?\s?/i;
        var autoPlace = autoToken.test(placement);
        if (autoPlace) placement = placement.replace(autoToken, '') || 'top';
    
        $tip.detach().css({ top: 0, left: 0, display: 'block' }).addClass(placement);
    
        this.options.container ? $tip.appendTo($.find(this.options.container)) : $tip.insertAfter(this.$element);
    
        var pos = this.getPosition();
        var actualWidth = $tip[0].offsetWidth;
        var actualHeight = $tip[0].offsetHeight;
    
        if (autoPlace) {
          var orgPlacement = placement;
          var $parent = this.$element.parent();
          var parentDim = this.getPosition($parent);
    
          placement = placement == 'bottom' && pos.top + pos.height + actualHeight - parentDim.scroll > parentDim.height ? 'top' : placement == 'top' && pos.top - parentDim.scroll - actualHeight < 0 ? 'bottom' : placement == 'right' && pos.right + actualWidth > parentDim.width ? 'left' : placement == 'left' && pos.left - actualWidth < parentDim.left ? 'right' : placement;
    
          $tip.removeClass(orgPlacement).addClass(placement);
        }
    
        var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
    
        this.applyPlacement(calculatedOffset, placement);
        this.hoverState = null;
    
        var complete = function complete() {
          that.$element.trigger('shown.bs.' + that.type);
        };
    
        $.support.transition && this.$tip.hasClass('fade') ? $tip.one($.support.transition.end, complete).emulateTransitionEnd(150) : complete();
      }
    };
    
    Tooltips.prototype.applyPlacement = function (offset, placement) {
      var $tip = this.tip();
      var width = $tip[0].offsetWidth;
      var height = $tip[0].offsetHeight;
    
      // manually read margins because getBoundingClientRect includes difference
      var marginTop = parseInt($tip.css('margin-top'), 10);
      var marginLeft = parseInt($tip.css('margin-left'), 10);
    
      // we must check for NaN for ie 8/9
      if (isNaN(marginTop)) marginTop = 0;
      if (isNaN(marginLeft)) marginLeft = 0;
    
      offset.top = offset.top + marginTop;
      offset.left = offset.left + marginLeft;
    
      // $.fn.offset doesn't round pixel values
      // so we use setOffset directly with our own function B-0
      $.offset.setOffset($tip[0], $.extend({
        using: function using(props) {
          $tip.css({
            top: Math.round(props.top),
            left: Math.round(props.left)
          });
        }
      }, offset), 0);
    
      $tip.addClass('in');
    
      // check to see if placing tip in new offset caused the tip to resize itself
      var actualWidth = $tip[0].offsetWidth;
      var actualHeight = $tip[0].offsetHeight;
    
      if (placement == 'top' && actualHeight != height) {
        offset.top = offset.top + height - actualHeight;
      }
    
      var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);
    
      if (delta.left) offset.left += delta.left;else offset.top += delta.top;
    
      var arrowDelta = delta.left ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;
      var arrowPosition = delta.left ? 'left' : 'top';
      var arrowOffsetPosition = delta.left ? 'offsetWidth' : 'offsetHeight';
    
      $tip.offset(offset);
      this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], arrowPosition);
    };
    
    Tooltips.prototype.replaceArrow = function (delta, dimension, position) {
      this.arrow().css(position, delta ? 50 * (1 - delta / dimension) + '%' : '');
    };
    
    Tooltips.prototype.setContent = function () {
      var $tip = this.tip();
      var title = this.getTitle();
    
      $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);
      $tip.removeClass('fade in top bottom left right');
    };
    
    Tooltips.prototype.hide = function () {
      var that = this;
      var $tip = this.tip();
      var e = $.Event('hide.bs.' + this.type);
    
      function complete() {
        if (that.hoverState != 'in') $tip.detach();
        that.$element.trigger('hidden.bs.' + that.type);
      }
    
      this.$element.trigger(e);
    
      if (e.isDefaultPrevented()) return;
    
      $tip.removeClass('in');
    
      $.support.transition && this.$tip.hasClass('fade') ? $tip.one($.support.transition.end, complete).emulateTransitionEnd(150) : complete();
    
      this.hoverState = null;
    
      return this;
    };
    
    Tooltips.prototype.fixTitle = function () {
      var $e = this.$element;
      if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
        $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');
      }
    };
    
    Tooltips.prototype.hasContent = function () {
      return this.getTitle();
    };
    
    Tooltips.prototype.getPosition = function ($element) {
      $element = $element || this.$element;
      var el = $element[0];
      var isBody = el.tagName == 'BODY';
      return $.extend({}, typeof el.getBoundingClientRect == 'function' ? el.getBoundingClientRect() : null, {
        scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop(),
        width: isBody ? $(window).width() : $element.outerWidth(),
        height: isBody ? $(window).height() : $element.outerHeight()
      }, isBody ? { top: 0, left: 0 } : $element.offset());
    };
    
    Tooltips.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
      return placement == 'bottom' ? { top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'top' ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'left' ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
      /* placement == 'right' */{ top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width };
    };
    
    Tooltips.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
      var delta = { top: 0, left: 0 };
      if (!this.$viewport) return delta;
    
      var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;
      var viewportDimensions = this.getPosition(this.$viewport);
    
      if (/right|left/.test(placement)) {
        var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
        var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
        if (topEdgeOffset < viewportDimensions.top) {
          // top overflow
          delta.top = viewportDimensions.top - topEdgeOffset;
        } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {
          // bottom overflow
          delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;
        }
      } else {
        var leftEdgeOffset = pos.left - viewportPadding;
        var rightEdgeOffset = pos.left + viewportPadding + actualWidth;
        if (leftEdgeOffset < viewportDimensions.left) {
          // left overflow
          delta.left = viewportDimensions.left - leftEdgeOffset;
        } else if (rightEdgeOffset > viewportDimensions.width) {
          // right overflow
          delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;
        }
      }
    
      return delta;
    };
    
    Tooltips.prototype.getTitle = function () {
      var title;
      var $e = this.$element;
      var o = this.options;
    
      title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);
    
      return title;
    };
    
    Tooltips.prototype.tip = function () {
      return this.$tip = this.$tip || $(this.options.template);
    };
    
    Tooltips.prototype.arrow = function () {
      return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow');
    };
    
    Tooltips.prototype.validate = function () {
      if (!this.$element[0].parentNode) {
        this.hide();
        this.$element = null;
        this.options = null;
      }
    };
    
    Tooltips.prototype.enable = function () {
      this.enabled = true;
    };
    
    Tooltips.prototype.disable = function () {
      this.enabled = false;
    };
    
    Tooltips.prototype.toggleEnabled = function () {
      this.enabled = !this.enabled;
    };
    
    Tooltips.prototype.toggle = function (e) {
      var self = e ? $(e.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type) : this;
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self);
    };
    
    Tooltips.prototype.destroy = function () {
      clearTimeout(this.timeout);
      this.hide().$element.off('.' + this.type).removeData('bs.' + this.type);
    };
    
    // TOOLTIPS PLUGIN DEFINITION
    // =========================
    
    var old = $.fn.tooltips;
    
    $.fn.tooltips = function (option) {
      return this.each(function () {
        var $this = $(this);
        var data = $this.data('bs.tooltips');
        var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;
    
        if ('ontouchstart' in window) {
          return;
        }
    
        if (!data && option == 'destroy') return;
        if (!data) $this.data('bs.tooltips', data = new Tooltips(this, options));
        if (typeof option == 'string') data[option]();
      });
    };
    
    $.fn.tooltips.Constructor = Tooltips;
    
    // TOOLTIPS NO CONFLICT
    // ===================
    
    $.fn.tooltips.noConflict = function () {
      $.fn.tooltips = old;
      return this;
    };
    
    $(document).ready(function () {
      $('[data-toggle="tooltips"]').tooltips();
    });
    
    module.exports = Tooltips;
    
    },{"jquery":416,"lodash":418}],63:[function(require,module,exports){
    'use strict';
    
    /*! matchMedia() polyfill addListener/removeListener extension. Author & copyright (c) 2012: Scott Jehl. Dual MIT/BSD license */
    (function () {
        // Bail out for browsers that have addListener support
        if (window.matchMedia && window.matchMedia('all').addListener) {
            return false;
        }
    
        var localMatchMedia = window.matchMedia,
            hasMediaQueries = localMatchMedia('only all').matches,
            isListening = false,
            timeoutID = 0,
            // setTimeout for debouncing 'handleChange'
        queries = [],
            // Contains each 'mql' and associated 'listeners' if 'addListener' is used
        handleChange = function handleChange(evt) {
            // Debounce
            clearTimeout(timeoutID);
    
            timeoutID = setTimeout(function () {
                for (var i = 0, il = queries.length; i < il; i++) {
                    var mql = queries[i].mql,
                        listeners = queries[i].listeners || [],
                        matches = localMatchMedia(mql.media).matches;
    
                    // Update mql.matches value and call listeners
                    // Fire listeners only if transitioning to or from matched state
                    if (matches !== mql.matches) {
                        mql.matches = matches;
    
                        for (var j = 0, jl = listeners.length; j < jl; j++) {
                            listeners[j].call(window, mql);
                        }
                    }
                }
            }, 30);
        };
    
        window.matchMedia = function (media) {
            var mql = localMatchMedia(media),
                listeners = [],
                index = 0;
    
            mql.addListener = function (listener) {
                // Changes would not occur to css media type so return now (Affects IE <= 8)
                if (!hasMediaQueries) {
                    return;
                }
    
                // Set up 'resize' listener for browsers that support CSS3 media queries (Not for IE <= 8)
                // There should only ever be 1 resize listener running for performance
                if (!isListening) {
                    isListening = true;
                    window.addEventListener('resize', handleChange, true);
                }
    
                // Push object only if it has not been pushed already
                if (index === 0) {
                    index = queries.push({
                        mql: mql,
                        listeners: listeners
                    });
                }
    
                listeners.push(listener);
            };
    
            mql.removeListener = function (listener) {
                for (var i = 0, il = listeners.length; i < il; i++) {
                    if (listeners[i] === listener) {
                        listeners.splice(i, 1);
                    }
                }
            };
    
            return mql;
        };
    })();
    
    },{}],64:[function(require,module,exports){
    'use strict';
    
    /*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license */
    
    window.matchMedia || (window.matchMedia = function () {
        "use strict";
    
        // For browsers that support matchMedium api such as IE 9 and webkit
    
        var styleMedia = window.styleMedia || window.media;
    
        // For those that don't support matchMedium
        if (!styleMedia) {
            var style = document.createElement('style'),
                script = document.getElementsByTagName('script')[0],
                info = null;
    
            style.type = 'text/css';
            style.id = 'matchmediajs-test';
    
            script.parentNode.insertBefore(style, script);
    
            // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
            info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;
    
            styleMedia = {
                matchMedium: function matchMedium(media) {
                    var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';
    
                    // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
                    if (style.styleSheet) {
                        style.styleSheet.cssText = text;
                    } else {
                        style.textContent = text;
                    }
    
                    // Test if media query is true or false
                    return info.width === '1px';
                }
            };
        }
    
        return function (media) {
            return {
                matches: styleMedia.matchMedium(media || 'all'),
                media: media || 'all'
            };
        };
    }());
    
    },{}],65:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = require('jquery');
    
    var ActiveFunctionService = function () {
        function ActiveFunctionService() {
            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                _ref$disabled = _ref.disabled,
                disabled = _ref$disabled === undefined ? 'disabled' : _ref$disabled;
    
            _classCallCheck(this, ActiveFunctionService);
    
            this.disabled = disabled;
        }
    
        /**
         * Conditionally invoke a function if an element is active
         * @param element
         * @param func
         * @param event
         */
    
    
        _createClass(ActiveFunctionService, [{
            key: 'wrap',
            value: function wrap(element, func, event) {
                if (!$(element).hasClass(this.disabled)) {
                    func(event);
                }
            }
        }]);
    
        return ActiveFunctionService;
    }();
    
    module.exports = ActiveFunctionService;
    
    },{"jquery":416}],66:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = require('jquery');
    
    var FormFieldResetService = function () {
        function FormFieldResetService() {
            _classCallCheck(this, FormFieldResetService);
        }
    
        _createClass(FormFieldResetService, [{
            key: 'reset',
    
            /**
             * A "catch-all" method for resetting form fields
             * wrap the root element in a form and trigger a reset event
             * this should catch a lot of inconsistency with IE & file inputs
             * @param root
             */
            value: function reset(root) {
                var $root = $(root);
                var $select2 = $root.find('.js-select2');
                var $tempFormWrapper = $root.wrap('<form></form>').closest('form');
    
                $tempFormWrapper.trigger('reset');
                $root.unwrap($tempFormWrapper);
    
                // Trigger a change for select2 enabled inputs
                if ($select2.length) {
                    $select2.each(function (index, element) {
                        $(element).change();
                    });
                }
            }
        }]);
    
        return FormFieldResetService;
    }();
    
    module.exports = FormFieldResetService;
    
    },{"jquery":416}],67:[function(require,module,exports){
    "use strict";
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var HashService = function () {
        /**
         * Hash Service
         * @param date {DateConstructor}
         */
        function HashService(date) {
            _classCallCheck(this, HashService);
    
            this.hashCache = [];
            this.date = date;
        }
    
        /**
         * The most basic pseudo random hash generator, by all means
         * make this more sophisticated, just ensure the final value is a string
         * @param {string} value
         * @returns {string}
         */
    
    
        _createClass(HashService, [{
            key: "generate",
            value: function generate(value) {
                var hash = this.date.now();
    
                // Increment our numeric hash if it exists in the hash cache
                while (this.hashCache.indexOf(value + "_" + hash) !== -1) {
                    hash++;
                }
    
                // Add our hash to the cache
                this.hashCache.push(value + "_" + hash);
    
                return value + "_" + hash;
            }
        }]);
    
        return HashService;
    }();
    
    module.exports = HashService;
    
    },{}],68:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var UniqueIdService = function () {
        /**
         * UniqueIDService
         * @param hashService {HashService}
         */
        function UniqueIdService(hashService) {
            _classCallCheck(this, UniqueIdService);
    
            this.hashService = hashService;
        }
    
        /**
         * Find elements within a scope that have a "for" attribute, then find corresponding
         * element with ID, then replace both attributes with a unique-ish ID
         * @param root {HTMLElement}
         */
    
    
        _createClass(UniqueIdService, [{
            key: 'uniquifyFors',
            value: function uniquifyFors(root) {
                var _this = this;
    
                [].slice.call(root.querySelectorAll('[for]')).forEach(function (forElement) {
                    var forAttribute = forElement.getAttribute('for');
                    var target = root.querySelector('#' + forAttribute);
                    var hash = _this.hashService.generate(forAttribute);
    
                    if (target) {
                        forElement.setAttribute('for', hash);
                        target.setAttribute('id', hash);
                    }
                });
            }
    
            /**
             * Find elements within a scope and replace their ID attribute
             * with a unique-ish representation
             * @param root {HTMLElement}
             */
    
        }, {
            key: 'uniquifyIds',
            value: function uniquifyIds(root) {
                var _this2 = this;
    
                [].slice.call(root.querySelectorAll('[id]')).forEach(function (element) {
                    var id = element.getAttribute('id');
                    var hash = _this2.hashService.generate(id);
    
                    element.setAttribute('id', hash);
                });
            }
    
            /**
             * Update selectWoo child elements with unique IDs
             * @param group {HTMLElement}
             */
    
        }, {
            key: 'uniquifySelectWoo',
            value: function uniquifySelectWoo(group) {
                var originalSelect = group.querySelector('select.js-select2');
    
                if (originalSelect === null) {
                    return;
                }
    
                var originalSelectId = originalSelect.getAttribute('id');
    
                [].slice.call(group.querySelectorAll('.select2-container')).forEach(function (select2Container) {
                    if (select2Container.querySelector('.select2-selection--multiple') !== null) {
                        var selectWooSummary = select2Container.querySelector('.select2-selections');
                        var selectWooSearch = select2Container.querySelector('.select2-search__field');
                        var newSelectWooSummaryId = 'select2-' + originalSelectId + '-summary';
    
                        selectWooSummary.setAttribute('id', newSelectWooSummaryId);
                        selectWooSearch.setAttribute('aria-describedby', newSelectWooSummaryId);
                    }
    
                    if (select2Container.querySelector('.select2-selection--single') !== null) {
                        var selectWooSingleSelection = select2Container.querySelector('.select2-selection--single');
                        var selectWooSingleSelectionRendered = select2Container.querySelector('.select2-selection__rendered');
                        var newSelectWooSingleSelectionRenderedId = 'select2-' + originalSelectId + '-container';
    
                        selectWooSingleSelectionRendered.setAttribute('id', newSelectWooSingleSelectionRenderedId);
                        selectWooSingleSelection.setAttribute('aria-controls', newSelectWooSingleSelectionRenderedId);
                        selectWooSingleSelection.setAttribute('aria-owns', newSelectWooSingleSelectionRenderedId);
                    }
                });
            }
        }]);
    
        return UniqueIdService;
    }();
    
    module.exports = UniqueIdService;
    
    },{}],69:[function(require,module,exports){
    'use strict';
    
    /**
     * Get a file extension from a string
     * @param file {string}
     * @returns {boolean}
     */
    function getFileExtension(file) {
        var ext = file.split('.');
    
        // extensions that are not files, you shall not pass. (unless you are a data encoded URL)
        if (ext.length < 2) {
            // extract mime from data encoded string
            var _re = new RegExp(/^data:image\/([a-z\-]+)/, 'i');
            var _test = _re.exec(file);
    
            return _test !== null && _test[1] !== undefined ? _test[1] : false;
        }
    
        // strip query strings from our extension
        var re = new RegExp(/^[a-z0-9\-]+/, 'i');
        var test = re.exec(ext.pop());
    
        // return false for anything we deem not to be a file
        return test !== null && test[0] !== undefined ? test[0] : false;
    }
    
    /**
     * A higher order function responsible for creating file extension
     * filter functions based on inclusion
     * @param inclusive {boolean}
     * @param getExt {function}
     * @returns {function}
     */
    function filterByFileExtensionFactory(inclusive, getExt) {
        return function (list, file) {
            var ext = getExt(file);
    
            // Return a falsy value if we do not have a file
            if (!ext) {
                return false;
            }
    
            // return a boolean based on presence in the list
            // and the inclusion/exclusion option
            return list.indexOf(getExt(file)) !== -1 === inclusive;
        };
    }
    
    /**
     * A higher order function to create a filter
     * to identify data encoded images
     * @param inclusive {boolean}
     * @returns {function}
     */
    function filterByDataEncodedURIFactory(inclusive) {
        return function (str) {
            // check for strings starting with 'data:'
            var re = new RegExp(/^data:/);
            var test = re.exec(str);
    
            // return a boolean based on inclusion
            return (test !== null && test[0] !== undefined) === inclusive;
        };
    }
    
    /**
     * Filter a file list by extensions
     * @param list {Array<string>}
     * @param extension {string} a space separated extension list
     * @param inclusive? {boolean}
     * @returns {Array<string>}
     */
    var filterFileExtensionList = function filterFileExtensionList(list, extension) {
        var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    
        // create filter function
        var fileFilter = filterByFileExtensionFactory(inclusive, getFileExtension);
        // split extension list argument and filter
        return list.filter(fileFilter.bind(null, extension.split(' ')));
    };
    
    /**
     * Filter a single file string by extensions
     * @param file {string}
     * @param extension {string} a space separated extension list
     * @param inclusive? {boolean}
     * @returns {boolean}
     */
    var filterFileExtension = function filterFileExtension(file, extension) {
        var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    
        return filterByFileExtensionFactory(inclusive, getFileExtension)(extension.split(' '), file);
    };
    
    /**
     * Filter a list of strings by data URI images
     * @param list {Array<string>}
     * @param inclusive {boolean}
     * @returns {Array<string>}
     */
    var filterDataEncodedURIList = function filterDataEncodedURIList(list) {
        var inclusive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    
        return list.filter(filterByDataEncodedURIFactory(inclusive));
    };
    
    /**
     * Filter a list of strings by data URI images
     * @param str {string}
     * @param inclusive {boolean}
     * @returns {boolean}
     */
    var filterDataEncodedURI = function filterDataEncodedURI(str) {
        var inclusive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    
        return filterByDataEncodedURIFactory(inclusive)(str);
    };
    
    module.exports = {
        filterFileExtensionList: filterFileExtensionList,
        filterFileExtension: filterFileExtension,
        filterDataEncodedURIList: filterDataEncodedURIList,
        filterDataEncodedURI: filterDataEncodedURI,
        getFileExtension: getFileExtension
    };
    
    },{}],70:[function(require,module,exports){
    (function (global){(function (){
    "use strict";
    
    require("core-js/shim");
    
    require("regenerator-runtime/runtime");
    
    require("core-js/fn/regexp/escape");
    
    if (global._babelPolyfill) {
      throw new Error("only one instance of babel-polyfill is allowed");
    }
    global._babelPolyfill = true;
    
    var DEFINE_PROPERTY = "defineProperty";
    function define(O, key, value) {
      O[key] || Object[DEFINE_PROPERTY](O, key, {
        writable: true,
        configurable: true,
        value: value
      });
    }
    
    define(String.prototype, "padLeft", "".padStart);
    define(String.prototype, "padRight", "".padEnd);
    
    "pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
      [][key] && define(Array, key, Function.call.bind([][key]));
    });
    }).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    
    },{"core-js/fn/regexp/escape":72,"core-js/shim":400,"regenerator-runtime/runtime":71}],71:[function(require,module,exports){
    (function (global){(function (){
    /**
     * Copyright (c) 2014, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
     * additional grant of patent rights can be found in the PATENTS file in
     * the same directory.
     */
    
    !(function(global) {
      "use strict";
    
      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined; // More compressible than void 0.
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    
      var inModule = typeof module === "object";
      var runtime = global.regeneratorRuntime;
      if (runtime) {
        if (inModule) {
          // If regeneratorRuntime is defined globally and we're in a module,
          // make the exports object identical to regeneratorRuntime.
          module.exports = runtime;
        }
        // Don't bother evaluating the rest of this file if the runtime was
        // already defined globally.
        return;
      }
    
      // Define the runtime globally (as expected by generated code) as either
      // module.exports (if we're in a module) or a new, empty object.
      runtime = global.regeneratorRuntime = inModule ? module.exports : {};
    
      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
    
        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);
    
        return generator;
      }
      runtime.wrap = wrap;
    
      // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.
      function tryCatch(fn, obj, arg) {
        try {
          return { type: "normal", arg: fn.call(obj, arg) };
        } catch (err) {
          return { type: "throw", arg: err };
        }
      }
    
      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";
    
      // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.
      var ContinueSentinel = {};
    
      // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}
    
      // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.
      var IteratorPrototype = {};
      IteratorPrototype[iteratorSymbol] = function () {
        return this;
      };
    
      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      if (NativeIteratorPrototype &&
          NativeIteratorPrototype !== Op &&
          hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }
    
      var Gp = GeneratorFunctionPrototype.prototype =
        Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunctionPrototype[toStringTagSymbol] =
        GeneratorFunction.displayName = "GeneratorFunction";
    
      // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          prototype[method] = function(arg) {
            return this._invoke(method, arg);
          };
        });
      }
    
      runtime.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor
          ? ctor === GeneratorFunction ||
            // For the native GeneratorFunction constructor, the best we can
            // do is to check its .name property.
            (ctor.displayName || ctor.name) === "GeneratorFunction"
          : false;
      };
    
      runtime.mark = function(genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          if (!(toStringTagSymbol in genFun)) {
            genFun[toStringTagSymbol] = "GeneratorFunction";
          }
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
      };
    
      // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.
      runtime.awrap = function(arg) {
        return { __await: arg };
      };
    
      function AsyncIterator(generator) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;
            if (value &&
                typeof value === "object" &&
                hasOwn.call(value, "__await")) {
              return Promise.resolve(value.__await).then(function(value) {
                invoke("next", value, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              });
            }
    
            return Promise.resolve(value).then(function(unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration. If the Promise is rejected, however, the
              // result for this iteration will be rejected with the same
              // reason. Note that rejections of yielded Promises are not
              // thrown back into the generator function, as is the case
              // when an awaited Promise is rejected. This difference in
              // behavior between yield and await is important, because it
              // allows the consumer to decide what to do with the yielded
              // rejection (swallow it and continue, manually .throw it back
              // into the generator, abandon iteration, whatever). With
              // await, by contrast, there is no opportunity to examine the
              // rejection reason outside the generator function, so the
              // only option is to throw it from the await expression, and
              // let the generator function handle the exception.
              result.value = unwrapped;
              resolve(result);
            }, reject);
          }
        }
    
        if (typeof global.process === "object" && global.process.domain) {
          invoke = global.process.domain.bind(invoke);
        }
    
        var previousPromise;
    
        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new Promise(function(resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
    
          return previousPromise =
            // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(
              callInvokeWithMethodAndArg,
              // Avoid propagating failures to Promises returned by later
              // invocations of the iterator.
              callInvokeWithMethodAndArg
            ) : callInvokeWithMethodAndArg();
        }
    
        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
      }
    
      defineIteratorMethods(AsyncIterator.prototype);
      AsyncIterator.prototype[asyncIteratorSymbol] = function () {
        return this;
      };
      runtime.AsyncIterator = AsyncIterator;
    
      // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.
      runtime.async = function(innerFn, outerFn, self, tryLocsList) {
        var iter = new AsyncIterator(
          wrap(innerFn, outerFn, self, tryLocsList)
        );
    
        return runtime.isGeneratorFunction(outerFn)
          ? iter // If outerFn is a generator, return the full iterator.
          : iter.next().then(function(result) {
              return result.done ? result.value : iter.next();
            });
      };
    
      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
    
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }
    
          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }
    
            // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
            return doneResult();
          }
    
          context.method = method;
          context.arg = arg;
    
          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }
    
            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
    
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }
    
              context.dispatchException(context.arg);
    
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }
    
            state = GenStateExecuting;
    
            var record = tryCatch(innerFn, self, context);
            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done
                ? GenStateCompleted
                : GenStateSuspendedYield;
    
              if (record.arg === ContinueSentinel) {
                continue;
              }
    
              return {
                value: record.arg,
                done: context.done
              };
    
            } else if (record.type === "throw") {
              state = GenStateCompleted;
              // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.
              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      }
    
      // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.
      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;
    
          if (context.method === "throw") {
            if (delegate.iterator.return) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined;
              maybeInvokeDelegate(delegate, context);
    
              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }
    
            context.method = "throw";
            context.arg = new TypeError(
              "The iterator does not provide a 'throw' method");
          }
    
          return ContinueSentinel;
        }
    
        var record = tryCatch(method, delegate.iterator, context.arg);
    
        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }
    
        var info = record.arg;
    
        if (! info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }
    
        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value;
    
          // Resume execution at the desired location (see delegateYield).
          context.next = delegate.nextLoc;
    
          // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.
          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined;
          }
    
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        }
    
        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
      }
    
      // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.
      defineIteratorMethods(Gp);
    
      Gp[toStringTagSymbol] = "Generator";
    
      // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.
      Gp[iteratorSymbol] = function() {
        return this;
      };
    
      Gp.toString = function() {
        return "[object Generator]";
      };
    
      function pushTryEntry(locs) {
        var entry = { tryLoc: locs[0] };
    
        if (1 in locs) {
          entry.catchLoc = locs[1];
        }
    
        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }
    
        this.tryEntries.push(entry);
      }
    
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }
    
      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{ tryLoc: "root" }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }
    
      runtime.keys = function(object) {
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();
    
        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
          while (keys.length) {
            var key = keys.pop();
            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          }
    
          // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.
          next.done = true;
          return next;
        };
      };
    
      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }
    
          if (typeof iterable.next === "function") {
            return iterable;
          }
    
          if (!isNaN(iterable.length)) {
            var i = -1, next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }
    
              next.value = undefined;
              next.done = true;
    
              return next;
            };
    
            return next.next = next;
          }
        }
    
        // Return an iterator with no values.
        return { next: doneResult };
      }
      runtime.values = values;
    
      function doneResult() {
        return { value: undefined, done: true };
      }
    
      Context.prototype = {
        constructor: Context,
    
        reset: function(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.
          this.sent = this._sent = undefined;
          this.done = false;
          this.delegate = null;
    
          this.method = "next";
          this.arg = undefined;
    
          this.tryEntries.forEach(resetTryEntry);
    
          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" &&
                  hasOwn.call(this, name) &&
                  !isNaN(+name.slice(1))) {
                this[name] = undefined;
              }
            }
          }
        },
    
        stop: function() {
          this.done = true;
    
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }
    
          return this.rval;
        },
    
        dispatchException: function(exception) {
          if (this.done) {
            throw exception;
          }
    
          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;
    
            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined;
            }
    
            return !! caught;
          }
    
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;
    
            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }
    
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");
    
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
    
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
    
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
    
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
    
        abrupt: function(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev &&
                hasOwn.call(entry, "finallyLoc") &&
                this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
    
          if (finallyEntry &&
              (type === "break" ||
               type === "continue") &&
              finallyEntry.tryLoc <= arg &&
              arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }
    
          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;
    
          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }
    
          return this.complete(record);
        },
    
        complete: function(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }
    
          if (record.type === "break" ||
              record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }
    
          return ContinueSentinel;
        },
    
        finish: function(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
    
        "catch": function(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
    
          // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.
          throw new Error("illegal catch attempt");
        },
    
        delegateYield: function(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };
    
          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined;
          }
    
          return ContinueSentinel;
        }
      };
    })(
      // Among the various tricks for obtaining a reference to the global
      // object, this seems to be the most reliable technique that does not
      // use indirect eval (which violates Content Security Policy).
      typeof global === "object" ? global :
      typeof window === "object" ? window :
      typeof self === "object" ? self : this
    );
    
    }).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    
    },{}],72:[function(require,module,exports){
    require('../../modules/core.regexp.escape');
    module.exports = require('../../modules/_core').RegExp.escape;
    
    },{"../../modules/_core":94,"../../modules/core.regexp.escape":202}],73:[function(require,module,exports){
    module.exports = function (it) {
      if (typeof it != 'function') throw TypeError(it + ' is not a function!');
      return it;
    };
    
    },{}],74:[function(require,module,exports){
    var cof = require('./_cof');
    module.exports = function (it, msg) {
      if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
      return +it;
    };
    
    },{"./_cof":89}],75:[function(require,module,exports){
    // 22.1.3.31 Array.prototype[@@unscopables]
    var UNSCOPABLES = require('./_wks')('unscopables');
    var ArrayProto = Array.prototype;
    if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
    module.exports = function (key) {
      ArrayProto[UNSCOPABLES][key] = true;
    };
    
    },{"./_hide":114,"./_wks":200}],76:[function(require,module,exports){
    'use strict';
    var at = require('./_string-at')(true);
    
     // `AdvanceStringIndex` abstract operation
    // https://tc39.github.io/ecma262/#sec-advancestringindex
    module.exports = function (S, index, unicode) {
      return index + (unicode ? at(S, index).length : 1);
    };
    
    },{"./_string-at":177}],77:[function(require,module,exports){
    module.exports = function (it, Constructor, name, forbiddenField) {
      if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
        throw TypeError(name + ': incorrect invocation!');
      } return it;
    };
    
    },{}],78:[function(require,module,exports){
    var isObject = require('./_is-object');
    module.exports = function (it) {
      if (!isObject(it)) throw TypeError(it + ' is not an object!');
      return it;
    };
    
    },{"./_is-object":123}],79:[function(require,module,exports){
    // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
    'use strict';
    var toObject = require('./_to-object');
    var toAbsoluteIndex = require('./_to-absolute-index');
    var toLength = require('./_to-length');
    
    module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
      var O = toObject(this);
      var len = toLength(O.length);
      var to = toAbsoluteIndex(target, len);
      var from = toAbsoluteIndex(start, len);
      var end = arguments.length > 2 ? arguments[2] : undefined;
      var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
      var inc = 1;
      if (from < to && to < from + count) {
        inc = -1;
        from += count - 1;
        to += count - 1;
      }
      while (count-- > 0) {
        if (from in O) O[to] = O[from];
        else delete O[to];
        to += inc;
        from += inc;
      } return O;
    };
    
    },{"./_to-absolute-index":185,"./_to-length":189,"./_to-object":190}],80:[function(require,module,exports){
    // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
    'use strict';
    var toObject = require('./_to-object');
    var toAbsoluteIndex = require('./_to-absolute-index');
    var toLength = require('./_to-length');
    module.exports = function fill(value /* , start = 0, end = @length */) {
      var O = toObject(this);
      var length = toLength(O.length);
      var aLen = arguments.length;
      var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
      var end = aLen > 2 ? arguments[2] : undefined;
      var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
      while (endPos > index) O[index++] = value;
      return O;
    };
    
    },{"./_to-absolute-index":185,"./_to-length":189,"./_to-object":190}],81:[function(require,module,exports){
    var forOf = require('./_for-of');
    
    module.exports = function (iter, ITERATOR) {
      var result = [];
      forOf(iter, false, result.push, result, ITERATOR);
      return result;
    };
    
    },{"./_for-of":110}],82:[function(require,module,exports){
    // false -> Array#indexOf
    // true  -> Array#includes
    var toIObject = require('./_to-iobject');
    var toLength = require('./_to-length');
    var toAbsoluteIndex = require('./_to-absolute-index');
    module.exports = function (IS_INCLUDES) {
      return function ($this, el, fromIndex) {
        var O = toIObject($this);
        var length = toLength(O.length);
        var index = toAbsoluteIndex(fromIndex, length);
        var value;
        // Array#includes uses SameValueZero equality algorithm
        // eslint-disable-next-line no-self-compare
        if (IS_INCLUDES && el != el) while (length > index) {
          value = O[index++];
          // eslint-disable-next-line no-self-compare
          if (value != value) return true;
        // Array#indexOf ignores holes, Array#includes - not
        } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
          if (O[index] === el) return IS_INCLUDES || index || 0;
        } return !IS_INCLUDES && -1;
      };
    };
    
    },{"./_to-absolute-index":185,"./_to-iobject":188,"./_to-length":189}],83:[function(require,module,exports){
    // 0 -> Array#forEach
    // 1 -> Array#map
    // 2 -> Array#filter
    // 3 -> Array#some
    // 4 -> Array#every
    // 5 -> Array#find
    // 6 -> Array#findIndex
    var ctx = require('./_ctx');
    var IObject = require('./_iobject');
    var toObject = require('./_to-object');
    var toLength = require('./_to-length');
    var asc = require('./_array-species-create');
    module.exports = function (TYPE, $create) {
      var IS_MAP = TYPE == 1;
      var IS_FILTER = TYPE == 2;
      var IS_SOME = TYPE == 3;
      var IS_EVERY = TYPE == 4;
      var IS_FIND_INDEX = TYPE == 6;
      var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
      var create = $create || asc;
      return function ($this, callbackfn, that) {
        var O = toObject($this);
        var self = IObject(O);
        var f = ctx(callbackfn, that, 3);
        var length = toLength(self.length);
        var index = 0;
        var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
        var val, res;
        for (;length > index; index++) if (NO_HOLES || index in self) {
          val = self[index];
          res = f(val, index, O);
          if (TYPE) {
            if (IS_MAP) result[index] = res;   // map
            else if (res) switch (TYPE) {
              case 3: return true;             // some
              case 5: return val;              // find
              case 6: return index;            // findIndex
              case 2: result.push(val);        // filter
            } else if (IS_EVERY) return false; // every
          }
        }
        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
      };
    };
    
    },{"./_array-species-create":86,"./_ctx":96,"./_iobject":119,"./_to-length":189,"./_to-object":190}],84:[function(require,module,exports){
    var aFunction = require('./_a-function');
    var toObject = require('./_to-object');
    var IObject = require('./_iobject');
    var toLength = require('./_to-length');
    
    module.exports = function (that, callbackfn, aLen, memo, isRight) {
      aFunction(callbackfn);
      var O = toObject(that);
      var self = IObject(O);
      var length = toLength(O.length);
      var index = isRight ? length - 1 : 0;
      var i = isRight ? -1 : 1;
      if (aLen < 2) for (;;) {
        if (index in self) {
          memo = self[index];
          index += i;
          break;
        }
        index += i;
        if (isRight ? index < 0 : length <= index) {
          throw TypeError('Reduce of empty array with no initial value');
        }
      }
      for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
        memo = callbackfn(memo, self[index], index, O);
      }
      return memo;
    };
    
    },{"./_a-function":73,"./_iobject":119,"./_to-length":189,"./_to-object":190}],85:[function(require,module,exports){
    var isObject = require('./_is-object');
    var isArray = require('./_is-array');
    var SPECIES = require('./_wks')('species');
    
    module.exports = function (original) {
      var C;
      if (isArray(original)) {
        C = original.constructor;
        // cross-realm fallback
        if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
        if (isObject(C)) {
          C = C[SPECIES];
          if (C === null) C = undefined;
        }
      } return C === undefined ? Array : C;
    };
    
    },{"./_is-array":121,"./_is-object":123,"./_wks":200}],86:[function(require,module,exports){
    // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
    var speciesConstructor = require('./_array-species-constructor');
    
    module.exports = function (original, length) {
      return new (speciesConstructor(original))(length);
    };
    
    },{"./_array-species-constructor":85}],87:[function(require,module,exports){
    'use strict';
    var aFunction = require('./_a-function');
    var isObject = require('./_is-object');
    var invoke = require('./_invoke');
    var arraySlice = [].slice;
    var factories = {};
    
    var construct = function (F, len, args) {
      if (!(len in factories)) {
        for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
        // eslint-disable-next-line no-new-func
        factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
      } return factories[len](F, args);
    };
    
    module.exports = Function.bind || function bind(that /* , ...args */) {
      var fn = aFunction(this);
      var partArgs = arraySlice.call(arguments, 1);
      var bound = function (/* args... */) {
        var args = partArgs.concat(arraySlice.call(arguments));
        return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
      };
      if (isObject(fn.prototype)) bound.prototype = fn.prototype;
      return bound;
    };
    
    },{"./_a-function":73,"./_invoke":118,"./_is-object":123}],88:[function(require,module,exports){
    // getting tag from 19.1.3.6 Object.prototype.toString()
    var cof = require('./_cof');
    var TAG = require('./_wks')('toStringTag');
    // ES3 wrong here
    var ARG = cof(function () { return arguments; }()) == 'Arguments';
    
    // fallback for IE11 Script Access Denied error
    var tryGet = function (it, key) {
      try {
        return it[key];
      } catch (e) { /* empty */ }
    };
    
    module.exports = function (it) {
      var O, T, B;
      return it === undefined ? 'Undefined' : it === null ? 'Null'
        // @@toStringTag case
        : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
        // builtinTag case
        : ARG ? cof(O)
        // ES3 arguments fallback
        : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
    };
    
    },{"./_cof":89,"./_wks":200}],89:[function(require,module,exports){
    var toString = {}.toString;
    
    module.exports = function (it) {
      return toString.call(it).slice(8, -1);
    };
    
    },{}],90:[function(require,module,exports){
    'use strict';
    var dP = require('./_object-dp').f;
    var create = require('./_object-create');
    var redefineAll = require('./_redefine-all');
    var ctx = require('./_ctx');
    var anInstance = require('./_an-instance');
    var forOf = require('./_for-of');
    var $iterDefine = require('./_iter-define');
    var step = require('./_iter-step');
    var setSpecies = require('./_set-species');
    var DESCRIPTORS = require('./_descriptors');
    var fastKey = require('./_meta').fastKey;
    var validate = require('./_validate-collection');
    var SIZE = DESCRIPTORS ? '_s' : 'size';
    
    var getEntry = function (that, key) {
      // fast case
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return that._i[index];
      // frozen object case
      for (entry = that._f; entry; entry = entry.n) {
        if (entry.k == key) return entry;
      }
    };
    
    module.exports = {
      getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
        var C = wrapper(function (that, iterable) {
          anInstance(that, C, NAME, '_i');
          that._t = NAME;         // collection type
          that._i = create(null); // index
          that._f = undefined;    // first entry
          that._l = undefined;    // last entry
          that[SIZE] = 0;         // size
          if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        });
        redefineAll(C.prototype, {
          // 23.1.3.1 Map.prototype.clear()
          // 23.2.3.2 Set.prototype.clear()
          clear: function clear() {
            for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
              entry.r = true;
              if (entry.p) entry.p = entry.p.n = undefined;
              delete data[entry.i];
            }
            that._f = that._l = undefined;
            that[SIZE] = 0;
          },
          // 23.1.3.3 Map.prototype.delete(key)
          // 23.2.3.4 Set.prototype.delete(value)
          'delete': function (key) {
            var that = validate(this, NAME);
            var entry = getEntry(that, key);
            if (entry) {
              var next = entry.n;
              var prev = entry.p;
              delete that._i[entry.i];
              entry.r = true;
              if (prev) prev.n = next;
              if (next) next.p = prev;
              if (that._f == entry) that._f = next;
              if (that._l == entry) that._l = prev;
              that[SIZE]--;
            } return !!entry;
          },
          // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
          // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
          forEach: function forEach(callbackfn /* , that = undefined */) {
            validate(this, NAME);
            var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
            var entry;
            while (entry = entry ? entry.n : this._f) {
              f(entry.v, entry.k, this);
              // revert to the last existing entry
              while (entry && entry.r) entry = entry.p;
            }
          },
          // 23.1.3.7 Map.prototype.has(key)
          // 23.2.3.7 Set.prototype.has(value)
          has: function has(key) {
            return !!getEntry(validate(this, NAME), key);
          }
        });
        if (DESCRIPTORS) dP(C.prototype, 'size', {
          get: function () {
            return validate(this, NAME)[SIZE];
          }
        });
        return C;
      },
      def: function (that, key, value) {
        var entry = getEntry(that, key);
        var prev, index;
        // change existing entry
        if (entry) {
          entry.v = value;
        // create new entry
        } else {
          that._l = entry = {
            i: index = fastKey(key, true), // <- index
            k: key,                        // <- key
            v: value,                      // <- value
            p: prev = that._l,             // <- previous entry
            n: undefined,                  // <- next entry
            r: false                       // <- removed
          };
          if (!that._f) that._f = entry;
          if (prev) prev.n = entry;
          that[SIZE]++;
          // add to index
          if (index !== 'F') that._i[index] = entry;
        } return that;
      },
      getEntry: getEntry,
      setStrong: function (C, NAME, IS_MAP) {
        // add .keys, .values, .entries, [@@iterator]
        // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
        $iterDefine(C, NAME, function (iterated, kind) {
          this._t = validate(iterated, NAME); // target
          this._k = kind;                     // kind
          this._l = undefined;                // previous
        }, function () {
          var that = this;
          var kind = that._k;
          var entry = that._l;
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
          // get next entry
          if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
            // or finish the iteration
            that._t = undefined;
            return step(1);
          }
          // return step by kind
          if (kind == 'keys') return step(0, entry.k);
          if (kind == 'values') return step(0, entry.v);
          return step(0, [entry.k, entry.v]);
        }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
    
        // add [@@species], 23.1.2.2, 23.2.2.2
        setSpecies(NAME);
      }
    };
    
    },{"./_an-instance":77,"./_ctx":96,"./_descriptors":100,"./_for-of":110,"./_iter-define":127,"./_iter-step":129,"./_meta":137,"./_object-create":142,"./_object-dp":143,"./_redefine-all":162,"./_set-species":171,"./_validate-collection":197}],91:[function(require,module,exports){
    // https://github.com/DavidBruant/Map-Set.prototype.toJSON
    var classof = require('./_classof');
    var from = require('./_array-from-iterable');
    module.exports = function (NAME) {
      return function toJSON() {
        if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
        return from(this);
      };
    };
    
    },{"./_array-from-iterable":81,"./_classof":88}],92:[function(require,module,exports){
    'use strict';
    var redefineAll = require('./_redefine-all');
    var getWeak = require('./_meta').getWeak;
    var anObject = require('./_an-object');
    var isObject = require('./_is-object');
    var anInstance = require('./_an-instance');
    var forOf = require('./_for-of');
    var createArrayMethod = require('./_array-methods');
    var $has = require('./_has');
    var validate = require('./_validate-collection');
    var arrayFind = createArrayMethod(5);
    var arrayFindIndex = createArrayMethod(6);
    var id = 0;
    
    // fallback for uncaught frozen keys
    var uncaughtFrozenStore = function (that) {
      return that._l || (that._l = new UncaughtFrozenStore());
    };
    var UncaughtFrozenStore = function () {
      this.a = [];
    };
    var findUncaughtFrozen = function (store, key) {
      return arrayFind(store.a, function (it) {
        return it[0] === key;
      });
    };
    UncaughtFrozenStore.prototype = {
      get: function (key) {
        var entry = findUncaughtFrozen(this, key);
        if (entry) return entry[1];
      },
      has: function (key) {
        return !!findUncaughtFrozen(this, key);
      },
      set: function (key, value) {
        var entry = findUncaughtFrozen(this, key);
        if (entry) entry[1] = value;
        else this.a.push([key, value]);
      },
      'delete': function (key) {
        var index = arrayFindIndex(this.a, function (it) {
          return it[0] === key;
        });
        if (~index) this.a.splice(index, 1);
        return !!~index;
      }
    };
    
    module.exports = {
      getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
        var C = wrapper(function (that, iterable) {
          anInstance(that, C, NAME, '_i');
          that._t = NAME;      // collection type
          that._i = id++;      // collection id
          that._l = undefined; // leak store for uncaught frozen objects
          if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        });
        redefineAll(C.prototype, {
          // 23.3.3.2 WeakMap.prototype.delete(key)
          // 23.4.3.3 WeakSet.prototype.delete(value)
          'delete': function (key) {
            if (!isObject(key)) return false;
            var data = getWeak(key);
            if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
            return data && $has(data, this._i) && delete data[this._i];
          },
          // 23.3.3.4 WeakMap.prototype.has(key)
          // 23.4.3.4 WeakSet.prototype.has(value)
          has: function has(key) {
            if (!isObject(key)) return false;
            var data = getWeak(key);
            if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
            return data && $has(data, this._i);
          }
        });
        return C;
      },
      def: function (that, key, value) {
        var data = getWeak(anObject(key), true);
        if (data === true) uncaughtFrozenStore(that).set(key, value);
        else data[that._i] = value;
        return that;
      },
      ufstore: uncaughtFrozenStore
    };
    
    },{"./_an-instance":77,"./_an-object":78,"./_array-methods":83,"./_for-of":110,"./_has":113,"./_is-object":123,"./_meta":137,"./_redefine-all":162,"./_validate-collection":197}],93:[function(require,module,exports){
    'use strict';
    var global = require('./_global');
    var $export = require('./_export');
    var redefine = require('./_redefine');
    var redefineAll = require('./_redefine-all');
    var meta = require('./_meta');
    var forOf = require('./_for-of');
    var anInstance = require('./_an-instance');
    var isObject = require('./_is-object');
    var fails = require('./_fails');
    var $iterDetect = require('./_iter-detect');
    var setToStringTag = require('./_set-to-string-tag');
    var inheritIfRequired = require('./_inherit-if-required');
    
    module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
      var Base = global[NAME];
      var C = Base;
      var ADDER = IS_MAP ? 'set' : 'add';
      var proto = C && C.prototype;
      var O = {};
      var fixMethod = function (KEY) {
        var fn = proto[KEY];
        redefine(proto, KEY,
          KEY == 'delete' ? function (a) {
            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'has' ? function has(a) {
            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'get' ? function get(a) {
            return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
            : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
        );
      };
      if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
        new C().entries().next();
      }))) {
        // create collection constructor
        C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
        redefineAll(C.prototype, methods);
        meta.NEED = true;
      } else {
        var instance = new C();
        // early implementations not supports chaining
        var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
        // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
        var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
        // most early implementations doesn't supports iterables, most modern - not close it correctly
        var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
        // for early implementations -0 and +0 not the same
        var BUGGY_ZERO = !IS_WEAK && fails(function () {
          // V8 ~ Chromium 42- fails only with 5+ elements
          var $instance = new C();
          var index = 5;
          while (index--) $instance[ADDER](index, index);
          return !$instance.has(-0);
        });
        if (!ACCEPT_ITERABLES) {
          C = wrapper(function (target, iterable) {
            anInstance(target, C, NAME);
            var that = inheritIfRequired(new Base(), target, C);
            if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
            return that;
          });
          C.prototype = proto;
          proto.constructor = C;
        }
        if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
          fixMethod('delete');
          fixMethod('has');
          IS_MAP && fixMethod('get');
        }
        if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
        // weak collections should not contains .clear method
        if (IS_WEAK && proto.clear) delete proto.clear;
      }
    
      setToStringTag(C, NAME);
    
      O[NAME] = C;
      $export($export.G + $export.W + $export.F * (C != Base), O);
    
      if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
    
      return C;
    };
    
    },{"./_an-instance":77,"./_export":104,"./_fails":106,"./_for-of":110,"./_global":112,"./_inherit-if-required":117,"./_is-object":123,"./_iter-detect":128,"./_meta":137,"./_redefine":163,"./_redefine-all":162,"./_set-to-string-tag":172}],94:[function(require,module,exports){
    var core = module.exports = { version: '2.6.12' };
    if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
    
    },{}],95:[function(require,module,exports){
    'use strict';
    var $defineProperty = require('./_object-dp');
    var createDesc = require('./_property-desc');
    
    module.exports = function (object, index, value) {
      if (index in object) $defineProperty.f(object, index, createDesc(0, value));
      else object[index] = value;
    };
    
    },{"./_object-dp":143,"./_property-desc":161}],96:[function(require,module,exports){
    // optional / simple context binding
    var aFunction = require('./_a-function');
    module.exports = function (fn, that, length) {
      aFunction(fn);
      if (that === undefined) return fn;
      switch (length) {
        case 1: return function (a) {
          return fn.call(that, a);
        };
        case 2: return function (a, b) {
          return fn.call(that, a, b);
        };
        case 3: return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
      }
      return function (/* ...args */) {
        return fn.apply(that, arguments);
      };
    };
    
    },{"./_a-function":73}],97:[function(require,module,exports){
    'use strict';
    // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
    var fails = require('./_fails');
    var getTime = Date.prototype.getTime;
    var $toISOString = Date.prototype.toISOString;
    
    var lz = function (num) {
      return num > 9 ? num : '0' + num;
    };
    
    // PhantomJS / old WebKit has a broken implementations
    module.exports = (fails(function () {
      return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
    }) || !fails(function () {
      $toISOString.call(new Date(NaN));
    })) ? function toISOString() {
      if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
      var d = this;
      var y = d.getUTCFullYear();
      var m = d.getUTCMilliseconds();
      var s = y < 0 ? '-' : y > 9999 ? '+' : '';
      return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
        '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
        'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
        ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
    } : $toISOString;
    
    },{"./_fails":106}],98:[function(require,module,exports){
    'use strict';
    var anObject = require('./_an-object');
    var toPrimitive = require('./_to-primitive');
    var NUMBER = 'number';
    
    module.exports = function (hint) {
      if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
      return toPrimitive(anObject(this), hint != NUMBER);
    };
    
    },{"./_an-object":78,"./_to-primitive":191}],99:[function(require,module,exports){
    // 7.2.1 RequireObjectCoercible(argument)
    module.exports = function (it) {
      if (it == undefined) throw TypeError("Can't call method on  " + it);
      return it;
    };
    
    },{}],100:[function(require,module,exports){
    // Thank's IE8 for his funny defineProperty
    module.exports = !require('./_fails')(function () {
      return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
    });
    
    },{"./_fails":106}],101:[function(require,module,exports){
    var isObject = require('./_is-object');
    var document = require('./_global').document;
    // typeof document.createElement is 'object' in old IE
    var is = isObject(document) && isObject(document.createElement);
    module.exports = function (it) {
      return is ? document.createElement(it) : {};
    };
    
    },{"./_global":112,"./_is-object":123}],102:[function(require,module,exports){
    // IE 8- don't enum bug keys
    module.exports = (
      'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
    ).split(',');
    
    },{}],103:[function(require,module,exports){
    // all enumerable object keys, includes symbols
    var getKeys = require('./_object-keys');
    var gOPS = require('./_object-gops');
    var pIE = require('./_object-pie');
    module.exports = function (it) {
      var result = getKeys(it);
      var getSymbols = gOPS.f;
      if (getSymbols) {
        var symbols = getSymbols(it);
        var isEnum = pIE.f;
        var i = 0;
        var key;
        while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
      } return result;
    };
    
    },{"./_object-gops":149,"./_object-keys":152,"./_object-pie":153}],104:[function(require,module,exports){
    var global = require('./_global');
    var core = require('./_core');
    var hide = require('./_hide');
    var redefine = require('./_redefine');
    var ctx = require('./_ctx');
    var PROTOTYPE = 'prototype';
    
    var $export = function (type, name, source) {
      var IS_FORCED = type & $export.F;
      var IS_GLOBAL = type & $export.G;
      var IS_STATIC = type & $export.S;
      var IS_PROTO = type & $export.P;
      var IS_BIND = type & $export.B;
      var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
      var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
      var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
      var key, own, out, exp;
      if (IS_GLOBAL) source = name;
      for (key in source) {
        // contains in native
        own = !IS_FORCED && target && target[key] !== undefined;
        // export native or passed
        out = (own ? target : source)[key];
        // bind timers to global for call from export context
        exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
        // extend global
        if (target) redefine(target, key, out, type & $export.U);
        // export
        if (exports[key] != out) hide(exports, key, exp);
        if (IS_PROTO && expProto[key] != out) expProto[key] = out;
      }
    };
    global.core = core;
    // type bitmap
    $export.F = 1;   // forced
    $export.G = 2;   // global
    $export.S = 4;   // static
    $export.P = 8;   // proto
    $export.B = 16;  // bind
    $export.W = 32;  // wrap
    $export.U = 64;  // safe
    $export.R = 128; // real proto method for `library`
    module.exports = $export;
    
    },{"./_core":94,"./_ctx":96,"./_global":112,"./_hide":114,"./_redefine":163}],105:[function(require,module,exports){
    var MATCH = require('./_wks')('match');
    module.exports = function (KEY) {
      var re = /./;
      try {
        '/./'[KEY](re);
      } catch (e) {
        try {
          re[MATCH] = false;
          return !'/./'[KEY](re);
        } catch (f) { /* empty */ }
      } return true;
    };
    
    },{"./_wks":200}],106:[function(require,module,exports){
    module.exports = function (exec) {
      try {
        return !!exec();
      } catch (e) {
        return true;
      }
    };
    
    },{}],107:[function(require,module,exports){
    'use strict';
    require('./es6.regexp.exec');
    var redefine = require('./_redefine');
    var hide = require('./_hide');
    var fails = require('./_fails');
    var defined = require('./_defined');
    var wks = require('./_wks');
    var regexpExec = require('./_regexp-exec');
    
    var SPECIES = wks('species');
    
    var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
      // #replace needs built-in support for named groups.
      // #match works fine because it just return the exec results, even if it has
      // a "grops" property.
      var re = /./;
      re.exec = function () {
        var result = [];
        result.groups = { a: '7' };
        return result;
      };
      return ''.replace(re, '$<a>') !== '7';
    });
    
    var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
      // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
      var re = /(?:)/;
      var originalExec = re.exec;
      re.exec = function () { return originalExec.apply(this, arguments); };
      var result = 'ab'.split(re);
      return result.length === 2 && result[0] === 'a' && result[1] === 'b';
    })();
    
    module.exports = function (KEY, length, exec) {
      var SYMBOL = wks(KEY);
    
      var DELEGATES_TO_SYMBOL = !fails(function () {
        // String methods call symbol-named RegEp methods
        var O = {};
        O[SYMBOL] = function () { return 7; };
        return ''[KEY](O) != 7;
      });
    
      var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
        // Symbol-named RegExp methods call .exec
        var execCalled = false;
        var re = /a/;
        re.exec = function () { execCalled = true; return null; };
        if (KEY === 'split') {
          // RegExp[@@split] doesn't call the regex's exec method, but first creates
          // a new one. We need to return the patched regex when creating the new one.
          re.constructor = {};
          re.constructor[SPECIES] = function () { return re; };
        }
        re[SYMBOL]('');
        return !execCalled;
      }) : undefined;
    
      if (
        !DELEGATES_TO_SYMBOL ||
        !DELEGATES_TO_EXEC ||
        (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
        (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
      ) {
        var nativeRegExpMethod = /./[SYMBOL];
        var fns = exec(
          defined,
          SYMBOL,
          ''[KEY],
          function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
            if (regexp.exec === regexpExec) {
              if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                // The native String method already delegates to @@method (this
                // polyfilled function), leasing to infinite recursion.
                // We avoid it by directly calling the native @@method method.
                return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
              }
              return { done: true, value: nativeMethod.call(str, regexp, arg2) };
            }
            return { done: false };
          }
        );
        var strfn = fns[0];
        var rxfn = fns[1];
    
        redefine(String.prototype, KEY, strfn);
        hide(RegExp.prototype, SYMBOL, length == 2
          // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
          // 21.2.5.11 RegExp.prototype[@@split](string, limit)
          ? function (string, arg) { return rxfn.call(string, this, arg); }
          // 21.2.5.6 RegExp.prototype[@@match](string)
          // 21.2.5.9 RegExp.prototype[@@search](string)
          : function (string) { return rxfn.call(string, this); }
        );
      }
    };
    
    },{"./_defined":99,"./_fails":106,"./_hide":114,"./_redefine":163,"./_regexp-exec":165,"./_wks":200,"./es6.regexp.exec":297}],108:[function(require,module,exports){
    'use strict';
    // 21.2.5.3 get RegExp.prototype.flags
    var anObject = require('./_an-object');
    module.exports = function () {
      var that = anObject(this);
      var result = '';
      if (that.global) result += 'g';
      if (that.ignoreCase) result += 'i';
      if (that.multiline) result += 'm';
      if (that.unicode) result += 'u';
      if (that.sticky) result += 'y';
      return result;
    };
    
    },{"./_an-object":78}],109:[function(require,module,exports){
    'use strict';
    // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
    var isArray = require('./_is-array');
    var isObject = require('./_is-object');
    var toLength = require('./_to-length');
    var ctx = require('./_ctx');
    var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');
    
    function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
      var targetIndex = start;
      var sourceIndex = 0;
      var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
      var element, spreadable;
    
      while (sourceIndex < sourceLen) {
        if (sourceIndex in source) {
          element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
    
          spreadable = false;
          if (isObject(element)) {
            spreadable = element[IS_CONCAT_SPREADABLE];
            spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
          }
    
          if (spreadable && depth > 0) {
            targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
          } else {
            if (targetIndex >= 0x1fffffffffffff) throw TypeError();
            target[targetIndex] = element;
          }
    
          targetIndex++;
        }
        sourceIndex++;
      }
      return targetIndex;
    }
    
    module.exports = flattenIntoArray;
    
    },{"./_ctx":96,"./_is-array":121,"./_is-object":123,"./_to-length":189,"./_wks":200}],110:[function(require,module,exports){
    var ctx = require('./_ctx');
    var call = require('./_iter-call');
    var isArrayIter = require('./_is-array-iter');
    var anObject = require('./_an-object');
    var toLength = require('./_to-length');
    var getIterFn = require('./core.get-iterator-method');
    var BREAK = {};
    var RETURN = {};
    var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
      var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
      var f = ctx(fn, that, entries ? 2 : 1);
      var index = 0;
      var length, step, iterator, result;
      if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
      // fast case for arrays with default iterator
      if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
        result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
        if (result === BREAK || result === RETURN) return result;
      } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
        result = call(iterator, f, step.value, entries);
        if (result === BREAK || result === RETURN) return result;
      }
    };
    exports.BREAK = BREAK;
    exports.RETURN = RETURN;
    
    },{"./_an-object":78,"./_ctx":96,"./_is-array-iter":120,"./_iter-call":125,"./_to-length":189,"./core.get-iterator-method":201}],111:[function(require,module,exports){
    module.exports = require('./_shared')('native-function-to-string', Function.toString);
    
    },{"./_shared":174}],112:[function(require,module,exports){
    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global = module.exports = typeof window != 'undefined' && window.Math == Math
      ? window : typeof self != 'undefined' && self.Math == Math ? self
      // eslint-disable-next-line no-new-func
      : Function('return this')();
    if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
    
    },{}],113:[function(require,module,exports){
    var hasOwnProperty = {}.hasOwnProperty;
    module.exports = function (it, key) {
      return hasOwnProperty.call(it, key);
    };
    
    },{}],114:[function(require,module,exports){
    var dP = require('./_object-dp');
    var createDesc = require('./_property-desc');
    module.exports = require('./_descriptors') ? function (object, key, value) {
      return dP.f(object, key, createDesc(1, value));
    } : function (object, key, value) {
      object[key] = value;
      return object;
    };
    
    },{"./_descriptors":100,"./_object-dp":143,"./_property-desc":161}],115:[function(require,module,exports){
    var document = require('./_global').document;
    module.exports = document && document.documentElement;
    
    },{"./_global":112}],116:[function(require,module,exports){
    module.exports = !require('./_descriptors') && !require('./_fails')(function () {
      return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
    });
    
    },{"./_descriptors":100,"./_dom-create":101,"./_fails":106}],117:[function(require,module,exports){
    var isObject = require('./_is-object');
    var setPrototypeOf = require('./_set-proto').set;
    module.exports = function (that, target, C) {
      var S = target.constructor;
      var P;
      if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
        setPrototypeOf(that, P);
      } return that;
    };
    
    },{"./_is-object":123,"./_set-proto":170}],118:[function(require,module,exports){
    // fast apply, http://jsperf.lnkit.com/fast-apply/5
    module.exports = function (fn, args, that) {
      var un = that === undefined;
      switch (args.length) {
        case 0: return un ? fn()
                          : fn.call(that);
        case 1: return un ? fn(args[0])
                          : fn.call(that, args[0]);
        case 2: return un ? fn(args[0], args[1])
                          : fn.call(that, args[0], args[1]);
        case 3: return un ? fn(args[0], args[1], args[2])
                          : fn.call(that, args[0], args[1], args[2]);
        case 4: return un ? fn(args[0], args[1], args[2], args[3])
                          : fn.call(that, args[0], args[1], args[2], args[3]);
      } return fn.apply(that, args);
    };
    
    },{}],119:[function(require,module,exports){
    // fallback for non-array-like ES3 and non-enumerable old V8 strings
    var cof = require('./_cof');
    // eslint-disable-next-line no-prototype-builtins
    module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
      return cof(it) == 'String' ? it.split('') : Object(it);
    };
    
    },{"./_cof":89}],120:[function(require,module,exports){
    // check on default Array iterator
    var Iterators = require('./_iterators');
    var ITERATOR = require('./_wks')('iterator');
    var ArrayProto = Array.prototype;
    
    module.exports = function (it) {
      return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
    };
    
    },{"./_iterators":130,"./_wks":200}],121:[function(require,module,exports){
    // 7.2.2 IsArray(argument)
    var cof = require('./_cof');
    module.exports = Array.isArray || function isArray(arg) {
      return cof(arg) == 'Array';
    };
    
    },{"./_cof":89}],122:[function(require,module,exports){
    // 20.1.2.3 Number.isInteger(number)
    var isObject = require('./_is-object');
    var floor = Math.floor;
    module.exports = function isInteger(it) {
      return !isObject(it) && isFinite(it) && floor(it) === it;
    };
    
    },{"./_is-object":123}],123:[function(require,module,exports){
    module.exports = function (it) {
      return typeof it === 'object' ? it !== null : typeof it === 'function';
    };
    
    },{}],124:[function(require,module,exports){
    // 7.2.8 IsRegExp(argument)
    var isObject = require('./_is-object');
    var cof = require('./_cof');
    var MATCH = require('./_wks')('match');
    module.exports = function (it) {
      var isRegExp;
      return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
    };
    
    },{"./_cof":89,"./_is-object":123,"./_wks":200}],125:[function(require,module,exports){
    // call something on iterator step with safe closing on error
    var anObject = require('./_an-object');
    module.exports = function (iterator, fn, value, entries) {
      try {
        return entries ? fn(anObject(value)[0], value[1]) : fn(value);
      // 7.4.6 IteratorClose(iterator, completion)
      } catch (e) {
        var ret = iterator['return'];
        if (ret !== undefined) anObject(ret.call(iterator));
        throw e;
      }
    };
    
    },{"./_an-object":78}],126:[function(require,module,exports){
    'use strict';
    var create = require('./_object-create');
    var descriptor = require('./_property-desc');
    var setToStringTag = require('./_set-to-string-tag');
    var IteratorPrototype = {};
    
    // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
    require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });
    
    module.exports = function (Constructor, NAME, next) {
      Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
      setToStringTag(Constructor, NAME + ' Iterator');
    };
    
    },{"./_hide":114,"./_object-create":142,"./_property-desc":161,"./_set-to-string-tag":172,"./_wks":200}],127:[function(require,module,exports){
    'use strict';
    var LIBRARY = require('./_library');
    var $export = require('./_export');
    var redefine = require('./_redefine');
    var hide = require('./_hide');
    var Iterators = require('./_iterators');
    var $iterCreate = require('./_iter-create');
    var setToStringTag = require('./_set-to-string-tag');
    var getPrototypeOf = require('./_object-gpo');
    var ITERATOR = require('./_wks')('iterator');
    var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
    var FF_ITERATOR = '@@iterator';
    var KEYS = 'keys';
    var VALUES = 'values';
    
    var returnThis = function () { return this; };
    
    module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
      $iterCreate(Constructor, NAME, next);
      var getMethod = function (kind) {
        if (!BUGGY && kind in proto) return proto[kind];
        switch (kind) {
          case KEYS: return function keys() { return new Constructor(this, kind); };
          case VALUES: return function values() { return new Constructor(this, kind); };
        } return function entries() { return new Constructor(this, kind); };
      };
      var TAG = NAME + ' Iterator';
      var DEF_VALUES = DEFAULT == VALUES;
      var VALUES_BUG = false;
      var proto = Base.prototype;
      var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
      var $default = $native || getMethod(DEFAULT);
      var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
      var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
      var methods, key, IteratorPrototype;
      // Fix native
      if ($anyNative) {
        IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
        if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
          // Set @@toStringTag to native iterators
          setToStringTag(IteratorPrototype, TAG, true);
          // fix for some old engines
          if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
        }
      }
      // fix Array#{values, @@iterator}.name in V8 / FF
      if (DEF_VALUES && $native && $native.name !== VALUES) {
        VALUES_BUG = true;
        $default = function values() { return $native.call(this); };
      }
      // Define iterator
      if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
        hide(proto, ITERATOR, $default);
      }
      // Plug for library
      Iterators[NAME] = $default;
      Iterators[TAG] = returnThis;
      if (DEFAULT) {
        methods = {
          values: DEF_VALUES ? $default : getMethod(VALUES),
          keys: IS_SET ? $default : getMethod(KEYS),
          entries: $entries
        };
        if (FORCED) for (key in methods) {
          if (!(key in proto)) redefine(proto, key, methods[key]);
        } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
      }
      return methods;
    };
    
    },{"./_export":104,"./_hide":114,"./_iter-create":126,"./_iterators":130,"./_library":131,"./_object-gpo":150,"./_redefine":163,"./_set-to-string-tag":172,"./_wks":200}],128:[function(require,module,exports){
    var ITERATOR = require('./_wks')('iterator');
    var SAFE_CLOSING = false;
    
    try {
      var riter = [7][ITERATOR]();
      riter['return'] = function () { SAFE_CLOSING = true; };
      // eslint-disable-next-line no-throw-literal
      Array.from(riter, function () { throw 2; });
    } catch (e) { /* empty */ }
    
    module.exports = function (exec, skipClosing) {
      if (!skipClosing && !SAFE_CLOSING) return false;
      var safe = false;
      try {
        var arr = [7];
        var iter = arr[ITERATOR]();
        iter.next = function () { return { done: safe = true }; };
        arr[ITERATOR] = function () { return iter; };
        exec(arr);
      } catch (e) { /* empty */ }
      return safe;
    };
    
    },{"./_wks":200}],129:[function(require,module,exports){
    module.exports = function (done, value) {
      return { value: value, done: !!done };
    };
    
    },{}],130:[function(require,module,exports){
    module.exports = {};
    
    },{}],131:[function(require,module,exports){
    module.exports = false;
    
    },{}],132:[function(require,module,exports){
    // 20.2.2.14 Math.expm1(x)
    var $expm1 = Math.expm1;
    module.exports = (!$expm1
      // Old FF bug
      || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
      // Tor Browser bug
      || $expm1(-2e-17) != -2e-17
    ) ? function expm1(x) {
      return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
    } : $expm1;
    
    },{}],133:[function(require,module,exports){
    // 20.2.2.16 Math.fround(x)
    var sign = require('./_math-sign');
    var pow = Math.pow;
    var EPSILON = pow(2, -52);
    var EPSILON32 = pow(2, -23);
    var MAX32 = pow(2, 127) * (2 - EPSILON32);
    var MIN32 = pow(2, -126);
    
    var roundTiesToEven = function (n) {
      return n + 1 / EPSILON - 1 / EPSILON;
    };
    
    module.exports = Math.fround || function fround(x) {
      var $abs = Math.abs(x);
      var $sign = sign(x);
      var a, result;
      if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
      a = (1 + EPSILON32 / EPSILON) * $abs;
      result = a - (a - $abs);
      // eslint-disable-next-line no-self-compare
      if (result > MAX32 || result != result) return $sign * Infinity;
      return $sign * result;
    };
    
    },{"./_math-sign":136}],134:[function(require,module,exports){
    // 20.2.2.20 Math.log1p(x)
    module.exports = Math.log1p || function log1p(x) {
      return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
    };
    
    },{}],135:[function(require,module,exports){
    // https://rwaldron.github.io/proposal-math-extensions/
    module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
      if (
        arguments.length === 0
          // eslint-disable-next-line no-self-compare
          || x != x
          // eslint-disable-next-line no-self-compare
          || inLow != inLow
          // eslint-disable-next-line no-self-compare
          || inHigh != inHigh
          // eslint-disable-next-line no-self-compare
          || outLow != outLow
          // eslint-disable-next-line no-self-compare
          || outHigh != outHigh
      ) return NaN;
      if (x === Infinity || x === -Infinity) return x;
      return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
    };
    
    },{}],136:[function(require,module,exports){
    // 20.2.2.28 Math.sign(x)
    module.exports = Math.sign || function sign(x) {
      // eslint-disable-next-line no-self-compare
      return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
    };
    
    },{}],137:[function(require,module,exports){
    var META = require('./_uid')('meta');
    var isObject = require('./_is-object');
    var has = require('./_has');
    var setDesc = require('./_object-dp').f;
    var id = 0;
    var isExtensible = Object.isExtensible || function () {
      return true;
    };
    var FREEZE = !require('./_fails')(function () {
      return isExtensible(Object.preventExtensions({}));
    });
    var setMeta = function (it) {
      setDesc(it, META, { value: {
        i: 'O' + ++id, // object ID
        w: {}          // weak collections IDs
      } });
    };
    var fastKey = function (it, create) {
      // return primitive with prefix
      if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
      if (!has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return 'F';
        // not necessary to add metadata
        if (!create) return 'E';
        // add missing metadata
        setMeta(it);
      // return object ID
      } return it[META].i;
    };
    var getWeak = function (it, create) {
      if (!has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return true;
        // not necessary to add metadata
        if (!create) return false;
        // add missing metadata
        setMeta(it);
      // return hash weak collections IDs
      } return it[META].w;
    };
    // add metadata on freeze-family methods calling
    var onFreeze = function (it) {
      if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
      return it;
    };
    var meta = module.exports = {
      KEY: META,
      NEED: false,
      fastKey: fastKey,
      getWeak: getWeak,
      onFreeze: onFreeze
    };
    
    },{"./_fails":106,"./_has":113,"./_is-object":123,"./_object-dp":143,"./_uid":195}],138:[function(require,module,exports){
    var Map = require('./es6.map');
    var $export = require('./_export');
    var shared = require('./_shared')('metadata');
    var store = shared.store || (shared.store = new (require('./es6.weak-map'))());
    
    var getOrCreateMetadataMap = function (target, targetKey, create) {
      var targetMetadata = store.get(target);
      if (!targetMetadata) {
        if (!create) return undefined;
        store.set(target, targetMetadata = new Map());
      }
      var keyMetadata = targetMetadata.get(targetKey);
      if (!keyMetadata) {
        if (!create) return undefined;
        targetMetadata.set(targetKey, keyMetadata = new Map());
      } return keyMetadata;
    };
    var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
      var metadataMap = getOrCreateMetadataMap(O, P, false);
      return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
    };
    var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
      var metadataMap = getOrCreateMetadataMap(O, P, false);
      return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
    };
    var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
      getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
    };
    var ordinaryOwnMetadataKeys = function (target, targetKey) {
      var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
      var keys = [];
      if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
      return keys;
    };
    var toMetaKey = function (it) {
      return it === undefined || typeof it == 'symbol' ? it : String(it);
    };
    var exp = function (O) {
      $export($export.S, 'Reflect', O);
    };
    
    module.exports = {
      store: store,
      map: getOrCreateMetadataMap,
      has: ordinaryHasOwnMetadata,
      get: ordinaryGetOwnMetadata,
      set: ordinaryDefineOwnMetadata,
      keys: ordinaryOwnMetadataKeys,
      key: toMetaKey,
      exp: exp
    };
    
    },{"./_export":104,"./_shared":174,"./es6.map":232,"./es6.weak-map":339}],139:[function(require,module,exports){
    var global = require('./_global');
    var macrotask = require('./_task').set;
    var Observer = global.MutationObserver || global.WebKitMutationObserver;
    var process = global.process;
    var Promise = global.Promise;
    var isNode = require('./_cof')(process) == 'process';
    
    module.exports = function () {
      var head, last, notify;
    
      var flush = function () {
        var parent, fn;
        if (isNode && (parent = process.domain)) parent.exit();
        while (head) {
          fn = head.fn;
          head = head.next;
          try {
            fn();
          } catch (e) {
            if (head) notify();
            else last = undefined;
            throw e;
          }
        } last = undefined;
        if (parent) parent.enter();
      };
    
      // Node.js
      if (isNode) {
        notify = function () {
          process.nextTick(flush);
        };
      // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
      } else if (Observer && !(global.navigator && global.navigator.standalone)) {
        var toggle = true;
        var node = document.createTextNode('');
        new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
        notify = function () {
          node.data = toggle = !toggle;
        };
      // environments with maybe non-completely correct, but existent Promise
      } else if (Promise && Promise.resolve) {
        // Promise.resolve without an argument throws an error in LG WebOS 2
        var promise = Promise.resolve(undefined);
        notify = function () {
          promise.then(flush);
        };
      // for other environments - macrotask based on:
      // - setImmediate
      // - MessageChannel
      // - window.postMessag
      // - onreadystatechange
      // - setTimeout
      } else {
        notify = function () {
          // strange IE + webpack dev server bug - use .call(global)
          macrotask.call(global, flush);
        };
      }
    
      return function (fn) {
        var task = { fn: fn, next: undefined };
        if (last) last.next = task;
        if (!head) {
          head = task;
          notify();
        } last = task;
      };
    };
    
    },{"./_cof":89,"./_global":112,"./_task":184}],140:[function(require,module,exports){
    'use strict';
    // 25.4.1.5 NewPromiseCapability(C)
    var aFunction = require('./_a-function');
    
    function PromiseCapability(C) {
      var resolve, reject;
      this.promise = new C(function ($$resolve, $$reject) {
        if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
        resolve = $$resolve;
        reject = $$reject;
      });
      this.resolve = aFunction(resolve);
      this.reject = aFunction(reject);
    }
    
    module.exports.f = function (C) {
      return new PromiseCapability(C);
    };
    
    },{"./_a-function":73}],141:[function(require,module,exports){
    'use strict';
    // 19.1.2.1 Object.assign(target, source, ...)
    var DESCRIPTORS = require('./_descriptors');
    var getKeys = require('./_object-keys');
    var gOPS = require('./_object-gops');
    var pIE = require('./_object-pie');
    var toObject = require('./_to-object');
    var IObject = require('./_iobject');
    var $assign = Object.assign;
    
    // should work with symbols and should have deterministic property order (V8 bug)
    module.exports = !$assign || require('./_fails')(function () {
      var A = {};
      var B = {};
      // eslint-disable-next-line no-undef
      var S = Symbol();
      var K = 'abcdefghijklmnopqrst';
      A[S] = 7;
      K.split('').forEach(function (k) { B[k] = k; });
      return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
    }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
      var T = toObject(target);
      var aLen = arguments.length;
      var index = 1;
      var getSymbols = gOPS.f;
      var isEnum = pIE.f;
      while (aLen > index) {
        var S = IObject(arguments[index++]);
        var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
        var length = keys.length;
        var j = 0;
        var key;
        while (length > j) {
          key = keys[j++];
          if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
        }
      } return T;
    } : $assign;
    
    },{"./_descriptors":100,"./_fails":106,"./_iobject":119,"./_object-gops":149,"./_object-keys":152,"./_object-pie":153,"./_to-object":190}],142:[function(require,module,exports){
    // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
    var anObject = require('./_an-object');
    var dPs = require('./_object-dps');
    var enumBugKeys = require('./_enum-bug-keys');
    var IE_PROTO = require('./_shared-key')('IE_PROTO');
    var Empty = function () { /* empty */ };
    var PROTOTYPE = 'prototype';
    
    // Create object with fake `null` prototype: use iframe Object with cleared prototype
    var createDict = function () {
      // Thrash, waste and sodomy: IE GC bug
      var iframe = require('./_dom-create')('iframe');
      var i = enumBugKeys.length;
      var lt = '<';
      var gt = '>';
      var iframeDocument;
      iframe.style.display = 'none';
      require('./_html').appendChild(iframe);
      iframe.src = 'javascript:'; // eslint-disable-line no-script-url
      // createDict = iframe.contentWindow.Object;
      // html.removeChild(iframe);
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
      iframeDocument.close();
      createDict = iframeDocument.F;
      while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
      return createDict();
    };
    
    module.exports = Object.create || function create(O, Properties) {
      var result;
      if (O !== null) {
        Empty[PROTOTYPE] = anObject(O);
        result = new Empty();
        Empty[PROTOTYPE] = null;
        // add "__proto__" for Object.getPrototypeOf polyfill
        result[IE_PROTO] = O;
      } else result = createDict();
      return Properties === undefined ? result : dPs(result, Properties);
    };
    
    },{"./_an-object":78,"./_dom-create":101,"./_enum-bug-keys":102,"./_html":115,"./_object-dps":144,"./_shared-key":173}],143:[function(require,module,exports){
    var anObject = require('./_an-object');
    var IE8_DOM_DEFINE = require('./_ie8-dom-define');
    var toPrimitive = require('./_to-primitive');
    var dP = Object.defineProperty;
    
    exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
      anObject(O);
      P = toPrimitive(P, true);
      anObject(Attributes);
      if (IE8_DOM_DEFINE) try {
        return dP(O, P, Attributes);
      } catch (e) { /* empty */ }
      if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
      if ('value' in Attributes) O[P] = Attributes.value;
      return O;
    };
    
    },{"./_an-object":78,"./_descriptors":100,"./_ie8-dom-define":116,"./_to-primitive":191}],144:[function(require,module,exports){
    var dP = require('./_object-dp');
    var anObject = require('./_an-object');
    var getKeys = require('./_object-keys');
    
    module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
      anObject(O);
      var keys = getKeys(Properties);
      var length = keys.length;
      var i = 0;
      var P;
      while (length > i) dP.f(O, P = keys[i++], Properties[P]);
      return O;
    };
    
    },{"./_an-object":78,"./_descriptors":100,"./_object-dp":143,"./_object-keys":152}],145:[function(require,module,exports){
    'use strict';
    // Forced replacement prototype accessors methods
    module.exports = require('./_library') || !require('./_fails')(function () {
      var K = Math.random();
      // In FF throws only define methods
      // eslint-disable-next-line no-undef, no-useless-call
      __defineSetter__.call(null, K, function () { /* empty */ });
      delete require('./_global')[K];
    });
    
    },{"./_fails":106,"./_global":112,"./_library":131}],146:[function(require,module,exports){
    var pIE = require('./_object-pie');
    var createDesc = require('./_property-desc');
    var toIObject = require('./_to-iobject');
    var toPrimitive = require('./_to-primitive');
    var has = require('./_has');
    var IE8_DOM_DEFINE = require('./_ie8-dom-define');
    var gOPD = Object.getOwnPropertyDescriptor;
    
    exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
      O = toIObject(O);
      P = toPrimitive(P, true);
      if (IE8_DOM_DEFINE) try {
        return gOPD(O, P);
      } catch (e) { /* empty */ }
      if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
    };
    
    },{"./_descriptors":100,"./_has":113,"./_ie8-dom-define":116,"./_object-pie":153,"./_property-desc":161,"./_to-iobject":188,"./_to-primitive":191}],147:[function(require,module,exports){
    // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
    var toIObject = require('./_to-iobject');
    var gOPN = require('./_object-gopn').f;
    var toString = {}.toString;
    
    var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
      ? Object.getOwnPropertyNames(window) : [];
    
    var getWindowNames = function (it) {
      try {
        return gOPN(it);
      } catch (e) {
        return windowNames.slice();
      }
    };
    
    module.exports.f = function getOwnPropertyNames(it) {
      return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
    };
    
    },{"./_object-gopn":148,"./_to-iobject":188}],148:[function(require,module,exports){
    // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
    var $keys = require('./_object-keys-internal');
    var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');
    
    exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
      return $keys(O, hiddenKeys);
    };
    
    },{"./_enum-bug-keys":102,"./_object-keys-internal":151}],149:[function(require,module,exports){
    exports.f = Object.getOwnPropertySymbols;
    
    },{}],150:[function(require,module,exports){
    // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
    var has = require('./_has');
    var toObject = require('./_to-object');
    var IE_PROTO = require('./_shared-key')('IE_PROTO');
    var ObjectProto = Object.prototype;
    
    module.exports = Object.getPrototypeOf || function (O) {
      O = toObject(O);
      if (has(O, IE_PROTO)) return O[IE_PROTO];
      if (typeof O.constructor == 'function' && O instanceof O.constructor) {
        return O.constructor.prototype;
      } return O instanceof Object ? ObjectProto : null;
    };
    
    },{"./_has":113,"./_shared-key":173,"./_to-object":190}],151:[function(require,module,exports){
    var has = require('./_has');
    var toIObject = require('./_to-iobject');
    var arrayIndexOf = require('./_array-includes')(false);
    var IE_PROTO = require('./_shared-key')('IE_PROTO');
    
    module.exports = function (object, names) {
      var O = toIObject(object);
      var i = 0;
      var result = [];
      var key;
      for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
      // Don't enum bug & hidden keys
      while (names.length > i) if (has(O, key = names[i++])) {
        ~arrayIndexOf(result, key) || result.push(key);
      }
      return result;
    };
    
    },{"./_array-includes":82,"./_has":113,"./_shared-key":173,"./_to-iobject":188}],152:[function(require,module,exports){
    // 19.1.2.14 / 15.2.3.14 Object.keys(O)
    var $keys = require('./_object-keys-internal');
    var enumBugKeys = require('./_enum-bug-keys');
    
    module.exports = Object.keys || function keys(O) {
      return $keys(O, enumBugKeys);
    };
    
    },{"./_enum-bug-keys":102,"./_object-keys-internal":151}],153:[function(require,module,exports){
    exports.f = {}.propertyIsEnumerable;
    
    },{}],154:[function(require,module,exports){
    // most Object methods by ES6 should accept primitives
    var $export = require('./_export');
    var core = require('./_core');
    var fails = require('./_fails');
    module.exports = function (KEY, exec) {
      var fn = (core.Object || {})[KEY] || Object[KEY];
      var exp = {};
      exp[KEY] = exec(fn);
      $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
    };
    
    },{"./_core":94,"./_export":104,"./_fails":106}],155:[function(require,module,exports){
    var DESCRIPTORS = require('./_descriptors');
    var getKeys = require('./_object-keys');
    var toIObject = require('./_to-iobject');
    var isEnum = require('./_object-pie').f;
    module.exports = function (isEntries) {
      return function (it) {
        var O = toIObject(it);
        var keys = getKeys(O);
        var length = keys.length;
        var i = 0;
        var result = [];
        var key;
        while (length > i) {
          key = keys[i++];
          if (!DESCRIPTORS || isEnum.call(O, key)) {
            result.push(isEntries ? [key, O[key]] : O[key]);
          }
        }
        return result;
      };
    };
    
    },{"./_descriptors":100,"./_object-keys":152,"./_object-pie":153,"./_to-iobject":188}],156:[function(require,module,exports){
    // all object keys, includes non-enumerable and symbols
    var gOPN = require('./_object-gopn');
    var gOPS = require('./_object-gops');
    var anObject = require('./_an-object');
    var Reflect = require('./_global').Reflect;
    module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
      var keys = gOPN.f(anObject(it));
      var getSymbols = gOPS.f;
      return getSymbols ? keys.concat(getSymbols(it)) : keys;
    };
    
    },{"./_an-object":78,"./_global":112,"./_object-gopn":148,"./_object-gops":149}],157:[function(require,module,exports){
    var $parseFloat = require('./_global').parseFloat;
    var $trim = require('./_string-trim').trim;
    
    module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
      var string = $trim(String(str), 3);
      var result = $parseFloat(string);
      return result === 0 && string.charAt(0) == '-' ? -0 : result;
    } : $parseFloat;
    
    },{"./_global":112,"./_string-trim":182,"./_string-ws":183}],158:[function(require,module,exports){
    var $parseInt = require('./_global').parseInt;
    var $trim = require('./_string-trim').trim;
    var ws = require('./_string-ws');
    var hex = /^[-+]?0[xX]/;
    
    module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
      var string = $trim(String(str), 3);
      return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
    } : $parseInt;
    
    },{"./_global":112,"./_string-trim":182,"./_string-ws":183}],159:[function(require,module,exports){
    module.exports = function (exec) {
      try {
        return { e: false, v: exec() };
      } catch (e) {
        return { e: true, v: e };
      }
    };
    
    },{}],160:[function(require,module,exports){
    var anObject = require('./_an-object');
    var isObject = require('./_is-object');
    var newPromiseCapability = require('./_new-promise-capability');
    
    module.exports = function (C, x) {
      anObject(C);
      if (isObject(x) && x.constructor === C) return x;
      var promiseCapability = newPromiseCapability.f(C);
      var resolve = promiseCapability.resolve;
      resolve(x);
      return promiseCapability.promise;
    };
    
    },{"./_an-object":78,"./_is-object":123,"./_new-promise-capability":140}],161:[function(require,module,exports){
    module.exports = function (bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
      };
    };
    
    },{}],162:[function(require,module,exports){
    var redefine = require('./_redefine');
    module.exports = function (target, src, safe) {
      for (var key in src) redefine(target, key, src[key], safe);
      return target;
    };
    
    },{"./_redefine":163}],163:[function(require,module,exports){
    var global = require('./_global');
    var hide = require('./_hide');
    var has = require('./_has');
    var SRC = require('./_uid')('src');
    var $toString = require('./_function-to-string');
    var TO_STRING = 'toString';
    var TPL = ('' + $toString).split(TO_STRING);
    
    require('./_core').inspectSource = function (it) {
      return $toString.call(it);
    };
    
    (module.exports = function (O, key, val, safe) {
      var isFunction = typeof val == 'function';
      if (isFunction) has(val, 'name') || hide(val, 'name', key);
      if (O[key] === val) return;
      if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
      if (O === global) {
        O[key] = val;
      } else if (!safe) {
        delete O[key];
        hide(O, key, val);
      } else if (O[key]) {
        O[key] = val;
      } else {
        hide(O, key, val);
      }
    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
    })(Function.prototype, TO_STRING, function toString() {
      return typeof this == 'function' && this[SRC] || $toString.call(this);
    });
    
    },{"./_core":94,"./_function-to-string":111,"./_global":112,"./_has":113,"./_hide":114,"./_uid":195}],164:[function(require,module,exports){
    'use strict';
    
    var classof = require('./_classof');
    var builtinExec = RegExp.prototype.exec;
    
     // `RegExpExec` abstract operation
    // https://tc39.github.io/ecma262/#sec-regexpexec
    module.exports = function (R, S) {
      var exec = R.exec;
      if (typeof exec === 'function') {
        var result = exec.call(R, S);
        if (typeof result !== 'object') {
          throw new TypeError('RegExp exec method returned something other than an Object or null');
        }
        return result;
      }
      if (classof(R) !== 'RegExp') {
        throw new TypeError('RegExp#exec called on incompatible receiver');
      }
      return builtinExec.call(R, S);
    };
    
    },{"./_classof":88}],165:[function(require,module,exports){
    'use strict';
    
    var regexpFlags = require('./_flags');
    
    var nativeExec = RegExp.prototype.exec;
    // This always refers to the native implementation, because the
    // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
    // which loads this file before patching the method.
    var nativeReplace = String.prototype.replace;
    
    var patchedExec = nativeExec;
    
    var LAST_INDEX = 'lastIndex';
    
    var UPDATES_LAST_INDEX_WRONG = (function () {
      var re1 = /a/,
          re2 = /b*/g;
      nativeExec.call(re1, 'a');
      nativeExec.call(re2, 'a');
      return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
    })();
    
    // nonparticipating capturing group, copied from es5-shim's String#split patch.
    var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
    
    var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;
    
    if (PATCH) {
      patchedExec = function exec(str) {
        var re = this;
        var lastIndex, reCopy, match, i;
    
        if (NPCG_INCLUDED) {
          reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
        }
        if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];
    
        match = nativeExec.call(re, str);
    
        if (UPDATES_LAST_INDEX_WRONG && match) {
          re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
        }
        if (NPCG_INCLUDED && match && match.length > 1) {
          // Fix browsers whose `exec` methods don't consistently return `undefined`
          // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
          // eslint-disable-next-line no-loop-func
          nativeReplace.call(match[0], reCopy, function () {
            for (i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undefined) match[i] = undefined;
            }
          });
        }
    
        return match;
      };
    }
    
    module.exports = patchedExec;
    
    },{"./_flags":108}],166:[function(require,module,exports){
    module.exports = function (regExp, replace) {
      var replacer = replace === Object(replace) ? function (part) {
        return replace[part];
      } : replace;
      return function (it) {
        return String(it).replace(regExp, replacer);
      };
    };
    
    },{}],167:[function(require,module,exports){
    // 7.2.9 SameValue(x, y)
    module.exports = Object.is || function is(x, y) {
      // eslint-disable-next-line no-self-compare
      return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
    };
    
    },{}],168:[function(require,module,exports){
    'use strict';
    // https://tc39.github.io/proposal-setmap-offrom/
    var $export = require('./_export');
    var aFunction = require('./_a-function');
    var ctx = require('./_ctx');
    var forOf = require('./_for-of');
    
    module.exports = function (COLLECTION) {
      $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
        var mapFn = arguments[1];
        var mapping, A, n, cb;
        aFunction(this);
        mapping = mapFn !== undefined;
        if (mapping) aFunction(mapFn);
        if (source == undefined) return new this();
        A = [];
        if (mapping) {
          n = 0;
          cb = ctx(mapFn, arguments[2], 2);
          forOf(source, false, function (nextItem) {
            A.push(cb(nextItem, n++));
          });
        } else {
          forOf(source, false, A.push, A);
        }
        return new this(A);
      } });
    };
    
    },{"./_a-function":73,"./_ctx":96,"./_export":104,"./_for-of":110}],169:[function(require,module,exports){
    'use strict';
    // https://tc39.github.io/proposal-setmap-offrom/
    var $export = require('./_export');
    
    module.exports = function (COLLECTION) {
      $export($export.S, COLLECTION, { of: function of() {
        var length = arguments.length;
        var A = new Array(length);
        while (length--) A[length] = arguments[length];
        return new this(A);
      } });
    };
    
    },{"./_export":104}],170:[function(require,module,exports){
    // Works with __proto__ only. Old v8 can't work with null proto objects.
    /* eslint-disable no-proto */
    var isObject = require('./_is-object');
    var anObject = require('./_an-object');
    var check = function (O, proto) {
      anObject(O);
      if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
    };
    module.exports = {
      set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
        function (test, buggy, set) {
          try {
            set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
            set(test, []);
            buggy = !(test instanceof Array);
          } catch (e) { buggy = true; }
          return function setPrototypeOf(O, proto) {
            check(O, proto);
            if (buggy) O.__proto__ = proto;
            else set(O, proto);
            return O;
          };
        }({}, false) : undefined),
      check: check
    };
    
    },{"./_an-object":78,"./_ctx":96,"./_is-object":123,"./_object-gopd":146}],171:[function(require,module,exports){
    'use strict';
    var global = require('./_global');
    var dP = require('./_object-dp');
    var DESCRIPTORS = require('./_descriptors');
    var SPECIES = require('./_wks')('species');
    
    module.exports = function (KEY) {
      var C = global[KEY];
      if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
        configurable: true,
        get: function () { return this; }
      });
    };
    
    },{"./_descriptors":100,"./_global":112,"./_object-dp":143,"./_wks":200}],172:[function(require,module,exports){
    var def = require('./_object-dp').f;
    var has = require('./_has');
    var TAG = require('./_wks')('toStringTag');
    
    module.exports = function (it, tag, stat) {
      if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
    };
    
    },{"./_has":113,"./_object-dp":143,"./_wks":200}],173:[function(require,module,exports){
    var shared = require('./_shared')('keys');
    var uid = require('./_uid');
    module.exports = function (key) {
      return shared[key] || (shared[key] = uid(key));
    };
    
    },{"./_shared":174,"./_uid":195}],174:[function(require,module,exports){
    var core = require('./_core');
    var global = require('./_global');
    var SHARED = '__core-js_shared__';
    var store = global[SHARED] || (global[SHARED] = {});
    
    (module.exports = function (key, value) {
      return store[key] || (store[key] = value !== undefined ? value : {});
    })('versions', []).push({
      version: core.version,
      mode: require('./_library') ? 'pure' : 'global',
      copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
    });
    
    },{"./_core":94,"./_global":112,"./_library":131}],175:[function(require,module,exports){
    // 7.3.20 SpeciesConstructor(O, defaultConstructor)
    var anObject = require('./_an-object');
    var aFunction = require('./_a-function');
    var SPECIES = require('./_wks')('species');
    module.exports = function (O, D) {
      var C = anObject(O).constructor;
      var S;
      return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
    };
    
    },{"./_a-function":73,"./_an-object":78,"./_wks":200}],176:[function(require,module,exports){
    'use strict';
    var fails = require('./_fails');
    
    module.exports = function (method, arg) {
      return !!method && fails(function () {
        // eslint-disable-next-line no-useless-call
        arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
      });
    };
    
    },{"./_fails":106}],177:[function(require,module,exports){
    var toInteger = require('./_to-integer');
    var defined = require('./_defined');
    // true  -> String#at
    // false -> String#codePointAt
    module.exports = function (TO_STRING) {
      return function (that, pos) {
        var s = String(defined(that));
        var i = toInteger(pos);
        var l = s.length;
        var a, b;
        if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
        a = s.charCodeAt(i);
        return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
          ? TO_STRING ? s.charAt(i) : a
          : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
      };
    };
    
    },{"./_defined":99,"./_to-integer":187}],178:[function(require,module,exports){
    // helper for String#{startsWith, endsWith, includes}
    var isRegExp = require('./_is-regexp');
    var defined = require('./_defined');
    
    module.exports = function (that, searchString, NAME) {
      if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
      return String(defined(that));
    };
    
    },{"./_defined":99,"./_is-regexp":124}],179:[function(require,module,exports){
    var $export = require('./_export');
    var fails = require('./_fails');
    var defined = require('./_defined');
    var quot = /"/g;
    // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
    var createHTML = function (string, tag, attribute, value) {
      var S = String(defined(string));
      var p1 = '<' + tag;
      if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
      return p1 + '>' + S + '</' + tag + '>';
    };
    module.exports = function (NAME, exec) {
      var O = {};
      O[NAME] = exec(createHTML);
      $export($export.P + $export.F * fails(function () {
        var test = ''[NAME]('"');
        return test !== test.toLowerCase() || test.split('"').length > 3;
      }), 'String', O);
    };
    
    },{"./_defined":99,"./_export":104,"./_fails":106}],180:[function(require,module,exports){
    // https://github.com/tc39/proposal-string-pad-start-end
    var toLength = require('./_to-length');
    var repeat = require('./_string-repeat');
    var defined = require('./_defined');
    
    module.exports = function (that, maxLength, fillString, left) {
      var S = String(defined(that));
      var stringLength = S.length;
      var fillStr = fillString === undefined ? ' ' : String(fillString);
      var intMaxLength = toLength(maxLength);
      if (intMaxLength <= stringLength || fillStr == '') return S;
      var fillLen = intMaxLength - stringLength;
      var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
      if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
      return left ? stringFiller + S : S + stringFiller;
    };
    
    },{"./_defined":99,"./_string-repeat":181,"./_to-length":189}],181:[function(require,module,exports){
    'use strict';
    var toInteger = require('./_to-integer');
    var defined = require('./_defined');
    
    module.exports = function repeat(count) {
      var str = String(defined(this));
      var res = '';
      var n = toInteger(count);
      if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
      for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
      return res;
    };
    
    },{"./_defined":99,"./_to-integer":187}],182:[function(require,module,exports){
    var $export = require('./_export');
    var defined = require('./_defined');
    var fails = require('./_fails');
    var spaces = require('./_string-ws');
    var space = '[' + spaces + ']';
    var non = '\u200b\u0085';
    var ltrim = RegExp('^' + space + space + '*');
    var rtrim = RegExp(space + space + '*$');
    
    var exporter = function (KEY, exec, ALIAS) {
      var exp = {};
      var FORCE = fails(function () {
        return !!spaces[KEY]() || non[KEY]() != non;
      });
      var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
      if (ALIAS) exp[ALIAS] = fn;
      $export($export.P + $export.F * FORCE, 'String', exp);
    };
    
    // 1 -> String#trimLeft
    // 2 -> String#trimRight
    // 3 -> String#trim
    var trim = exporter.trim = function (string, TYPE) {
      string = String(defined(string));
      if (TYPE & 1) string = string.replace(ltrim, '');
      if (TYPE & 2) string = string.replace(rtrim, '');
      return string;
    };
    
    module.exports = exporter;
    
    },{"./_defined":99,"./_export":104,"./_fails":106,"./_string-ws":183}],183:[function(require,module,exports){
    module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
      '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
    
    },{}],184:[function(require,module,exports){
    var ctx = require('./_ctx');
    var invoke = require('./_invoke');
    var html = require('./_html');
    var cel = require('./_dom-create');
    var global = require('./_global');
    var process = global.process;
    var setTask = global.setImmediate;
    var clearTask = global.clearImmediate;
    var MessageChannel = global.MessageChannel;
    var Dispatch = global.Dispatch;
    var counter = 0;
    var queue = {};
    var ONREADYSTATECHANGE = 'onreadystatechange';
    var defer, channel, port;
    var run = function () {
      var id = +this;
      // eslint-disable-next-line no-prototype-builtins
      if (queue.hasOwnProperty(id)) {
        var fn = queue[id];
        delete queue[id];
        fn();
      }
    };
    var listener = function (event) {
      run.call(event.data);
    };
    // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
    if (!setTask || !clearTask) {
      setTask = function setImmediate(fn) {
        var args = [];
        var i = 1;
        while (arguments.length > i) args.push(arguments[i++]);
        queue[++counter] = function () {
          // eslint-disable-next-line no-new-func
          invoke(typeof fn == 'function' ? fn : Function(fn), args);
        };
        defer(counter);
        return counter;
      };
      clearTask = function clearImmediate(id) {
        delete queue[id];
      };
      // Node.js 0.8-
      if (require('./_cof')(process) == 'process') {
        defer = function (id) {
          process.nextTick(ctx(run, id, 1));
        };
      // Sphere (JS game engine) Dispatch API
      } else if (Dispatch && Dispatch.now) {
        defer = function (id) {
          Dispatch.now(ctx(run, id, 1));
        };
      // Browsers with MessageChannel, includes WebWorkers
      } else if (MessageChannel) {
        channel = new MessageChannel();
        port = channel.port2;
        channel.port1.onmessage = listener;
        defer = ctx(port.postMessage, port, 1);
      // Browsers with postMessage, skip WebWorkers
      // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
      } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
        defer = function (id) {
          global.postMessage(id + '', '*');
        };
        global.addEventListener('message', listener, false);
      // IE8-
      } else if (ONREADYSTATECHANGE in cel('script')) {
        defer = function (id) {
          html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
            html.removeChild(this);
            run.call(id);
          };
        };
      // Rest old browsers
      } else {
        defer = function (id) {
          setTimeout(ctx(run, id, 1), 0);
        };
      }
    }
    module.exports = {
      set: setTask,
      clear: clearTask
    };
    
    },{"./_cof":89,"./_ctx":96,"./_dom-create":101,"./_global":112,"./_html":115,"./_invoke":118}],185:[function(require,module,exports){
    var toInteger = require('./_to-integer');
    var max = Math.max;
    var min = Math.min;
    module.exports = function (index, length) {
      index = toInteger(index);
      return index < 0 ? max(index + length, 0) : min(index, length);
    };
    
    },{"./_to-integer":187}],186:[function(require,module,exports){
    // https://tc39.github.io/ecma262/#sec-toindex
    var toInteger = require('./_to-integer');
    var toLength = require('./_to-length');
    module.exports = function (it) {
      if (it === undefined) return 0;
      var number = toInteger(it);
      var length = toLength(number);
      if (number !== length) throw RangeError('Wrong length!');
      return length;
    };
    
    },{"./_to-integer":187,"./_to-length":189}],187:[function(require,module,exports){
    // 7.1.4 ToInteger
    var ceil = Math.ceil;
    var floor = Math.floor;
    module.exports = function (it) {
      return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
    };
    
    },{}],188:[function(require,module,exports){
    // to indexed object, toObject with fallback for non-array-like ES3 strings
    var IObject = require('./_iobject');
    var defined = require('./_defined');
    module.exports = function (it) {
      return IObject(defined(it));
    };
    
    },{"./_defined":99,"./_iobject":119}],189:[function(require,module,exports){
    // 7.1.15 ToLength
    var toInteger = require('./_to-integer');
    var min = Math.min;
    module.exports = function (it) {
      return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
    };
    
    },{"./_to-integer":187}],190:[function(require,module,exports){
    // 7.1.13 ToObject(argument)
    var defined = require('./_defined');
    module.exports = function (it) {
      return Object(defined(it));
    };
    
    },{"./_defined":99}],191:[function(require,module,exports){
    // 7.1.1 ToPrimitive(input [, PreferredType])
    var isObject = require('./_is-object');
    // instead of the ES6 spec version, we didn't implement @@toPrimitive case
    // and the second argument - flag - preferred type is a string
    module.exports = function (it, S) {
      if (!isObject(it)) return it;
      var fn, val;
      if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
      if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
      if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
      throw TypeError("Can't convert object to primitive value");
    };
    
    },{"./_is-object":123}],192:[function(require,module,exports){
    'use strict';
    if (require('./_descriptors')) {
      var LIBRARY = require('./_library');
      var global = require('./_global');
      var fails = require('./_fails');
      var $export = require('./_export');
      var $typed = require('./_typed');
      var $buffer = require('./_typed-buffer');
      var ctx = require('./_ctx');
      var anInstance = require('./_an-instance');
      var propertyDesc = require('./_property-desc');
      var hide = require('./_hide');
      var redefineAll = require('./_redefine-all');
      var toInteger = require('./_to-integer');
      var toLength = require('./_to-length');
      var toIndex = require('./_to-index');
      var toAbsoluteIndex = require('./_to-absolute-index');
      var toPrimitive = require('./_to-primitive');
      var has = require('./_has');
      var classof = require('./_classof');
      var isObject = require('./_is-object');
      var toObject = require('./_to-object');
      var isArrayIter = require('./_is-array-iter');
      var create = require('./_object-create');
      var getPrototypeOf = require('./_object-gpo');
      var gOPN = require('./_object-gopn').f;
      var getIterFn = require('./core.get-iterator-method');
      var uid = require('./_uid');
      var wks = require('./_wks');
      var createArrayMethod = require('./_array-methods');
      var createArrayIncludes = require('./_array-includes');
      var speciesConstructor = require('./_species-constructor');
      var ArrayIterators = require('./es6.array.iterator');
      var Iterators = require('./_iterators');
      var $iterDetect = require('./_iter-detect');
      var setSpecies = require('./_set-species');
      var arrayFill = require('./_array-fill');
      var arrayCopyWithin = require('./_array-copy-within');
      var $DP = require('./_object-dp');
      var $GOPD = require('./_object-gopd');
      var dP = $DP.f;
      var gOPD = $GOPD.f;
      var RangeError = global.RangeError;
      var TypeError = global.TypeError;
      var Uint8Array = global.Uint8Array;
      var ARRAY_BUFFER = 'ArrayBuffer';
      var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
      var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
      var PROTOTYPE = 'prototype';
      var ArrayProto = Array[PROTOTYPE];
      var $ArrayBuffer = $buffer.ArrayBuffer;
      var $DataView = $buffer.DataView;
      var arrayForEach = createArrayMethod(0);
      var arrayFilter = createArrayMethod(2);
      var arraySome = createArrayMethod(3);
      var arrayEvery = createArrayMethod(4);
      var arrayFind = createArrayMethod(5);
      var arrayFindIndex = createArrayMethod(6);
      var arrayIncludes = createArrayIncludes(true);
      var arrayIndexOf = createArrayIncludes(false);
      var arrayValues = ArrayIterators.values;
      var arrayKeys = ArrayIterators.keys;
      var arrayEntries = ArrayIterators.entries;
      var arrayLastIndexOf = ArrayProto.lastIndexOf;
      var arrayReduce = ArrayProto.reduce;
      var arrayReduceRight = ArrayProto.reduceRight;
      var arrayJoin = ArrayProto.join;
      var arraySort = ArrayProto.sort;
      var arraySlice = ArrayProto.slice;
      var arrayToString = ArrayProto.toString;
      var arrayToLocaleString = ArrayProto.toLocaleString;
      var ITERATOR = wks('iterator');
      var TAG = wks('toStringTag');
      var TYPED_CONSTRUCTOR = uid('typed_constructor');
      var DEF_CONSTRUCTOR = uid('def_constructor');
      var ALL_CONSTRUCTORS = $typed.CONSTR;
      var TYPED_ARRAY = $typed.TYPED;
      var VIEW = $typed.VIEW;
      var WRONG_LENGTH = 'Wrong length!';
    
      var $map = createArrayMethod(1, function (O, length) {
        return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
      });
    
      var LITTLE_ENDIAN = fails(function () {
        // eslint-disable-next-line no-undef
        return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
      });
    
      var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
        new Uint8Array(1).set({});
      });
    
      var toOffset = function (it, BYTES) {
        var offset = toInteger(it);
        if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
        return offset;
      };
    
      var validate = function (it) {
        if (isObject(it) && TYPED_ARRAY in it) return it;
        throw TypeError(it + ' is not a typed array!');
      };
    
      var allocate = function (C, length) {
        if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
          throw TypeError('It is not a typed array constructor!');
        } return new C(length);
      };
    
      var speciesFromList = function (O, list) {
        return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
      };
    
      var fromList = function (C, list) {
        var index = 0;
        var length = list.length;
        var result = allocate(C, length);
        while (length > index) result[index] = list[index++];
        return result;
      };
    
      var addGetter = function (it, key, internal) {
        dP(it, key, { get: function () { return this._d[internal]; } });
      };
    
      var $from = function from(source /* , mapfn, thisArg */) {
        var O = toObject(source);
        var aLen = arguments.length;
        var mapfn = aLen > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var iterFn = getIterFn(O);
        var i, length, values, result, step, iterator;
        if (iterFn != undefined && !isArrayIter(iterFn)) {
          for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
            values.push(step.value);
          } O = values;
        }
        if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
        for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
          result[i] = mapping ? mapfn(O[i], i) : O[i];
        }
        return result;
      };
    
      var $of = function of(/* ...items */) {
        var index = 0;
        var length = arguments.length;
        var result = allocate(this, length);
        while (length > index) result[index] = arguments[index++];
        return result;
      };
    
      // iOS Safari 6.x fails here
      var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });
    
      var $toLocaleString = function toLocaleString() {
        return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
      };
    
      var proto = {
        copyWithin: function copyWithin(target, start /* , end */) {
          return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
        },
        every: function every(callbackfn /* , thisArg */) {
          return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
          return arrayFill.apply(validate(this), arguments);
        },
        filter: function filter(callbackfn /* , thisArg */) {
          return speciesFromList(this, arrayFilter(validate(this), callbackfn,
            arguments.length > 1 ? arguments[1] : undefined));
        },
        find: function find(predicate /* , thisArg */) {
          return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
        },
        findIndex: function findIndex(predicate /* , thisArg */) {
          return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
        },
        forEach: function forEach(callbackfn /* , thisArg */) {
          arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        indexOf: function indexOf(searchElement /* , fromIndex */) {
          return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
        },
        includes: function includes(searchElement /* , fromIndex */) {
          return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
        },
        join: function join(separator) { // eslint-disable-line no-unused-vars
          return arrayJoin.apply(validate(this), arguments);
        },
        lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
          return arrayLastIndexOf.apply(validate(this), arguments);
        },
        map: function map(mapfn /* , thisArg */) {
          return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
          return arrayReduce.apply(validate(this), arguments);
        },
        reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
          return arrayReduceRight.apply(validate(this), arguments);
        },
        reverse: function reverse() {
          var that = this;
          var length = validate(that).length;
          var middle = Math.floor(length / 2);
          var index = 0;
          var value;
          while (index < middle) {
            value = that[index];
            that[index++] = that[--length];
            that[length] = value;
          } return that;
        },
        some: function some(callbackfn /* , thisArg */) {
          return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        sort: function sort(comparefn) {
          return arraySort.call(validate(this), comparefn);
        },
        subarray: function subarray(begin, end) {
          var O = validate(this);
          var length = O.length;
          var $begin = toAbsoluteIndex(begin, length);
          return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
            O.buffer,
            O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
            toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
          );
        }
      };
    
      var $slice = function slice(start, end) {
        return speciesFromList(this, arraySlice.call(validate(this), start, end));
      };
    
      var $set = function set(arrayLike /* , offset */) {
        validate(this);
        var offset = toOffset(arguments[1], 1);
        var length = this.length;
        var src = toObject(arrayLike);
        var len = toLength(src.length);
        var index = 0;
        if (len + offset > length) throw RangeError(WRONG_LENGTH);
        while (index < len) this[offset + index] = src[index++];
      };
    
      var $iterators = {
        entries: function entries() {
          return arrayEntries.call(validate(this));
        },
        keys: function keys() {
          return arrayKeys.call(validate(this));
        },
        values: function values() {
          return arrayValues.call(validate(this));
        }
      };
    
      var isTAIndex = function (target, key) {
        return isObject(target)
          && target[TYPED_ARRAY]
          && typeof key != 'symbol'
          && key in target
          && String(+key) == String(key);
      };
      var $getDesc = function getOwnPropertyDescriptor(target, key) {
        return isTAIndex(target, key = toPrimitive(key, true))
          ? propertyDesc(2, target[key])
          : gOPD(target, key);
      };
      var $setDesc = function defineProperty(target, key, desc) {
        if (isTAIndex(target, key = toPrimitive(key, true))
          && isObject(desc)
          && has(desc, 'value')
          && !has(desc, 'get')
          && !has(desc, 'set')
          // TODO: add validation descriptor w/o calling accessors
          && !desc.configurable
          && (!has(desc, 'writable') || desc.writable)
          && (!has(desc, 'enumerable') || desc.enumerable)
        ) {
          target[key] = desc.value;
          return target;
        } return dP(target, key, desc);
      };
    
      if (!ALL_CONSTRUCTORS) {
        $GOPD.f = $getDesc;
        $DP.f = $setDesc;
      }
    
      $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
        getOwnPropertyDescriptor: $getDesc,
        defineProperty: $setDesc
      });
    
      if (fails(function () { arrayToString.call({}); })) {
        arrayToString = arrayToLocaleString = function toString() {
          return arrayJoin.call(this);
        };
      }
    
      var $TypedArrayPrototype$ = redefineAll({}, proto);
      redefineAll($TypedArrayPrototype$, $iterators);
      hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
      redefineAll($TypedArrayPrototype$, {
        slice: $slice,
        set: $set,
        constructor: function () { /* noop */ },
        toString: arrayToString,
        toLocaleString: $toLocaleString
      });
      addGetter($TypedArrayPrototype$, 'buffer', 'b');
      addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
      addGetter($TypedArrayPrototype$, 'byteLength', 'l');
      addGetter($TypedArrayPrototype$, 'length', 'e');
      dP($TypedArrayPrototype$, TAG, {
        get: function () { return this[TYPED_ARRAY]; }
      });
    
      // eslint-disable-next-line max-statements
      module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
        CLAMPED = !!CLAMPED;
        var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
        var GETTER = 'get' + KEY;
        var SETTER = 'set' + KEY;
        var TypedArray = global[NAME];
        var Base = TypedArray || {};
        var TAC = TypedArray && getPrototypeOf(TypedArray);
        var FORCED = !TypedArray || !$typed.ABV;
        var O = {};
        var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
        var getter = function (that, index) {
          var data = that._d;
          return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
        };
        var setter = function (that, index, value) {
          var data = that._d;
          if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
          data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
        };
        var addElement = function (that, index) {
          dP(that, index, {
            get: function () {
              return getter(this, index);
            },
            set: function (value) {
              return setter(this, index, value);
            },
            enumerable: true
          });
        };
        if (FORCED) {
          TypedArray = wrapper(function (that, data, $offset, $length) {
            anInstance(that, TypedArray, NAME, '_d');
            var index = 0;
            var offset = 0;
            var buffer, byteLength, length, klass;
            if (!isObject(data)) {
              length = toIndex(data);
              byteLength = length * BYTES;
              buffer = new $ArrayBuffer(byteLength);
            } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
              buffer = data;
              offset = toOffset($offset, BYTES);
              var $len = data.byteLength;
              if ($length === undefined) {
                if ($len % BYTES) throw RangeError(WRONG_LENGTH);
                byteLength = $len - offset;
                if (byteLength < 0) throw RangeError(WRONG_LENGTH);
              } else {
                byteLength = toLength($length) * BYTES;
                if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
              }
              length = byteLength / BYTES;
            } else if (TYPED_ARRAY in data) {
              return fromList(TypedArray, data);
            } else {
              return $from.call(TypedArray, data);
            }
            hide(that, '_d', {
              b: buffer,
              o: offset,
              l: byteLength,
              e: length,
              v: new $DataView(buffer)
            });
            while (index < length) addElement(that, index++);
          });
          TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
          hide(TypedArrayPrototype, 'constructor', TypedArray);
        } else if (!fails(function () {
          TypedArray(1);
        }) || !fails(function () {
          new TypedArray(-1); // eslint-disable-line no-new
        }) || !$iterDetect(function (iter) {
          new TypedArray(); // eslint-disable-line no-new
          new TypedArray(null); // eslint-disable-line no-new
          new TypedArray(1.5); // eslint-disable-line no-new
          new TypedArray(iter); // eslint-disable-line no-new
        }, true)) {
          TypedArray = wrapper(function (that, data, $offset, $length) {
            anInstance(that, TypedArray, NAME);
            var klass;
            // `ws` module bug, temporarily remove validation length for Uint8Array
            // https://github.com/websockets/ws/pull/645
            if (!isObject(data)) return new Base(toIndex(data));
            if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
              return $length !== undefined
                ? new Base(data, toOffset($offset, BYTES), $length)
                : $offset !== undefined
                  ? new Base(data, toOffset($offset, BYTES))
                  : new Base(data);
            }
            if (TYPED_ARRAY in data) return fromList(TypedArray, data);
            return $from.call(TypedArray, data);
          });
          arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
            if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
          });
          TypedArray[PROTOTYPE] = TypedArrayPrototype;
          if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
        }
        var $nativeIterator = TypedArrayPrototype[ITERATOR];
        var CORRECT_ITER_NAME = !!$nativeIterator
          && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
        var $iterator = $iterators.values;
        hide(TypedArray, TYPED_CONSTRUCTOR, true);
        hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
        hide(TypedArrayPrototype, VIEW, true);
        hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
    
        if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
          dP(TypedArrayPrototype, TAG, {
            get: function () { return NAME; }
          });
        }
    
        O[NAME] = TypedArray;
    
        $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
    
        $export($export.S, NAME, {
          BYTES_PER_ELEMENT: BYTES
        });
    
        $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
          from: $from,
          of: $of
        });
    
        if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
    
        $export($export.P, NAME, proto);
    
        setSpecies(NAME);
    
        $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });
    
        $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
    
        if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;
    
        $export($export.P + $export.F * fails(function () {
          new TypedArray(1).slice();
        }), NAME, { slice: $slice });
    
        $export($export.P + $export.F * (fails(function () {
          return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
        }) || !fails(function () {
          TypedArrayPrototype.toLocaleString.call([1, 2]);
        })), NAME, { toLocaleString: $toLocaleString });
    
        Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
        if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
      };
    } else module.exports = function () { /* empty */ };
    
    },{"./_an-instance":77,"./_array-copy-within":79,"./_array-fill":80,"./_array-includes":82,"./_array-methods":83,"./_classof":88,"./_ctx":96,"./_descriptors":100,"./_export":104,"./_fails":106,"./_global":112,"./_has":113,"./_hide":114,"./_is-array-iter":120,"./_is-object":123,"./_iter-detect":128,"./_iterators":130,"./_library":131,"./_object-create":142,"./_object-dp":143,"./_object-gopd":146,"./_object-gopn":148,"./_object-gpo":150,"./_property-desc":161,"./_redefine-all":162,"./_set-species":171,"./_species-constructor":175,"./_to-absolute-index":185,"./_to-index":186,"./_to-integer":187,"./_to-length":189,"./_to-object":190,"./_to-primitive":191,"./_typed":194,"./_typed-buffer":193,"./_uid":195,"./_wks":200,"./core.get-iterator-method":201,"./es6.array.iterator":213}],193:[function(require,module,exports){
    'use strict';
    var global = require('./_global');
    var DESCRIPTORS = require('./_descriptors');
    var LIBRARY = require('./_library');
    var $typed = require('./_typed');
    var hide = require('./_hide');
    var redefineAll = require('./_redefine-all');
    var fails = require('./_fails');
    var anInstance = require('./_an-instance');
    var toInteger = require('./_to-integer');
    var toLength = require('./_to-length');
    var toIndex = require('./_to-index');
    var gOPN = require('./_object-gopn').f;
    var dP = require('./_object-dp').f;
    var arrayFill = require('./_array-fill');
    var setToStringTag = require('./_set-to-string-tag');
    var ARRAY_BUFFER = 'ArrayBuffer';
    var DATA_VIEW = 'DataView';
    var PROTOTYPE = 'prototype';
    var WRONG_LENGTH = 'Wrong length!';
    var WRONG_INDEX = 'Wrong index!';
    var $ArrayBuffer = global[ARRAY_BUFFER];
    var $DataView = global[DATA_VIEW];
    var Math = global.Math;
    var RangeError = global.RangeError;
    // eslint-disable-next-line no-shadow-restricted-names
    var Infinity = global.Infinity;
    var BaseBuffer = $ArrayBuffer;
    var abs = Math.abs;
    var pow = Math.pow;
    var floor = Math.floor;
    var log = Math.log;
    var LN2 = Math.LN2;
    var BUFFER = 'buffer';
    var BYTE_LENGTH = 'byteLength';
    var BYTE_OFFSET = 'byteOffset';
    var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
    var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
    var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;
    
    // IEEE754 conversions based on https://github.com/feross/ieee754
    function packIEEE754(value, mLen, nBytes) {
      var buffer = new Array(nBytes);
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
      var i = 0;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      var e, m, c;
      value = abs(value);
      // eslint-disable-next-line no-self-compare
      if (value != value || value === Infinity) {
        // eslint-disable-next-line no-self-compare
        m = value != value ? 1 : 0;
        e = eMax;
      } else {
        e = floor(log(value) / LN2);
        if (value * (c = pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * pow(2, eBias - 1) * pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
      buffer[--i] |= s * 128;
      return buffer;
    }
    function unpackIEEE754(buffer, mLen, nBytes) {
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = eLen - 7;
      var i = nBytes - 1;
      var s = buffer[i--];
      var e = s & 127;
      var m;
      s >>= 7;
      for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : s ? -Infinity : Infinity;
      } else {
        m = m + pow(2, mLen);
        e = e - eBias;
      } return (s ? -1 : 1) * m * pow(2, e - mLen);
    }
    
    function unpackI32(bytes) {
      return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
    }
    function packI8(it) {
      return [it & 0xff];
    }
    function packI16(it) {
      return [it & 0xff, it >> 8 & 0xff];
    }
    function packI32(it) {
      return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
    }
    function packF64(it) {
      return packIEEE754(it, 52, 8);
    }
    function packF32(it) {
      return packIEEE754(it, 23, 4);
    }
    
    function addGetter(C, key, internal) {
      dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
    }
    
    function get(view, bytes, index, isLittleEndian) {
      var numIndex = +index;
      var intIndex = toIndex(numIndex);
      if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
      var store = view[$BUFFER]._b;
      var start = intIndex + view[$OFFSET];
      var pack = store.slice(start, start + bytes);
      return isLittleEndian ? pack : pack.reverse();
    }
    function set(view, bytes, index, conversion, value, isLittleEndian) {
      var numIndex = +index;
      var intIndex = toIndex(numIndex);
      if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
      var store = view[$BUFFER]._b;
      var start = intIndex + view[$OFFSET];
      var pack = conversion(+value);
      for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
    }
    
    if (!$typed.ABV) {
      $ArrayBuffer = function ArrayBuffer(length) {
        anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
        var byteLength = toIndex(length);
        this._b = arrayFill.call(new Array(byteLength), 0);
        this[$LENGTH] = byteLength;
      };
    
      $DataView = function DataView(buffer, byteOffset, byteLength) {
        anInstance(this, $DataView, DATA_VIEW);
        anInstance(buffer, $ArrayBuffer, DATA_VIEW);
        var bufferLength = buffer[$LENGTH];
        var offset = toInteger(byteOffset);
        if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
        byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
        if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
        this[$BUFFER] = buffer;
        this[$OFFSET] = offset;
        this[$LENGTH] = byteLength;
      };
    
      if (DESCRIPTORS) {
        addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
        addGetter($DataView, BUFFER, '_b');
        addGetter($DataView, BYTE_LENGTH, '_l');
        addGetter($DataView, BYTE_OFFSET, '_o');
      }
    
      redefineAll($DataView[PROTOTYPE], {
        getInt8: function getInt8(byteOffset) {
          return get(this, 1, byteOffset)[0] << 24 >> 24;
        },
        getUint8: function getUint8(byteOffset) {
          return get(this, 1, byteOffset)[0];
        },
        getInt16: function getInt16(byteOffset /* , littleEndian */) {
          var bytes = get(this, 2, byteOffset, arguments[1]);
          return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
        },
        getUint16: function getUint16(byteOffset /* , littleEndian */) {
          var bytes = get(this, 2, byteOffset, arguments[1]);
          return bytes[1] << 8 | bytes[0];
        },
        getInt32: function getInt32(byteOffset /* , littleEndian */) {
          return unpackI32(get(this, 4, byteOffset, arguments[1]));
        },
        getUint32: function getUint32(byteOffset /* , littleEndian */) {
          return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
        },
        getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
          return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
        },
        getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
          return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
        },
        setInt8: function setInt8(byteOffset, value) {
          set(this, 1, byteOffset, packI8, value);
        },
        setUint8: function setUint8(byteOffset, value) {
          set(this, 1, byteOffset, packI8, value);
        },
        setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
          set(this, 2, byteOffset, packI16, value, arguments[2]);
        },
        setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
          set(this, 2, byteOffset, packI16, value, arguments[2]);
        },
        setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
          set(this, 4, byteOffset, packI32, value, arguments[2]);
        },
        setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
          set(this, 4, byteOffset, packI32, value, arguments[2]);
        },
        setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
          set(this, 4, byteOffset, packF32, value, arguments[2]);
        },
        setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
          set(this, 8, byteOffset, packF64, value, arguments[2]);
        }
      });
    } else {
      if (!fails(function () {
        $ArrayBuffer(1);
      }) || !fails(function () {
        new $ArrayBuffer(-1); // eslint-disable-line no-new
      }) || fails(function () {
        new $ArrayBuffer(); // eslint-disable-line no-new
        new $ArrayBuffer(1.5); // eslint-disable-line no-new
        new $ArrayBuffer(NaN); // eslint-disable-line no-new
        return $ArrayBuffer.name != ARRAY_BUFFER;
      })) {
        $ArrayBuffer = function ArrayBuffer(length) {
          anInstance(this, $ArrayBuffer);
          return new BaseBuffer(toIndex(length));
        };
        var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
        for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
          if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
        }
        if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
      }
      // iOS Safari 7.x bug
      var view = new $DataView(new $ArrayBuffer(2));
      var $setInt8 = $DataView[PROTOTYPE].setInt8;
      view.setInt8(0, 2147483648);
      view.setInt8(1, 2147483649);
      if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
        setInt8: function setInt8(byteOffset, value) {
          $setInt8.call(this, byteOffset, value << 24 >> 24);
        },
        setUint8: function setUint8(byteOffset, value) {
          $setInt8.call(this, byteOffset, value << 24 >> 24);
        }
      }, true);
    }
    setToStringTag($ArrayBuffer, ARRAY_BUFFER);
    setToStringTag($DataView, DATA_VIEW);
    hide($DataView[PROTOTYPE], $typed.VIEW, true);
    exports[ARRAY_BUFFER] = $ArrayBuffer;
    exports[DATA_VIEW] = $DataView;
    
    },{"./_an-instance":77,"./_array-fill":80,"./_descriptors":100,"./_fails":106,"./_global":112,"./_hide":114,"./_library":131,"./_object-dp":143,"./_object-gopn":148,"./_redefine-all":162,"./_set-to-string-tag":172,"./_to-index":186,"./_to-integer":187,"./_to-length":189,"./_typed":194}],194:[function(require,module,exports){
    var global = require('./_global');
    var hide = require('./_hide');
    var uid = require('./_uid');
    var TYPED = uid('typed_array');
    var VIEW = uid('view');
    var ABV = !!(global.ArrayBuffer && global.DataView);
    var CONSTR = ABV;
    var i = 0;
    var l = 9;
    var Typed;
    
    var TypedArrayConstructors = (
      'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
    ).split(',');
    
    while (i < l) {
      if (Typed = global[TypedArrayConstructors[i++]]) {
        hide(Typed.prototype, TYPED, true);
        hide(Typed.prototype, VIEW, true);
      } else CONSTR = false;
    }
    
    module.exports = {
      ABV: ABV,
      CONSTR: CONSTR,
      TYPED: TYPED,
      VIEW: VIEW
    };
    
    },{"./_global":112,"./_hide":114,"./_uid":195}],195:[function(require,module,exports){
    var id = 0;
    var px = Math.random();
    module.exports = function (key) {
      return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
    };
    
    },{}],196:[function(require,module,exports){
    var global = require('./_global');
    var navigator = global.navigator;
    
    module.exports = navigator && navigator.userAgent || '';
    
    },{"./_global":112}],197:[function(require,module,exports){
    var isObject = require('./_is-object');
    module.exports = function (it, TYPE) {
      if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
      return it;
    };
    
    },{"./_is-object":123}],198:[function(require,module,exports){
    var global = require('./_global');
    var core = require('./_core');
    var LIBRARY = require('./_library');
    var wksExt = require('./_wks-ext');
    var defineProperty = require('./_object-dp').f;
    module.exports = function (name) {
      var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
      if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
    };
    
    },{"./_core":94,"./_global":112,"./_library":131,"./_object-dp":143,"./_wks-ext":199}],199:[function(require,module,exports){
    exports.f = require('./_wks');
    
    },{"./_wks":200}],200:[function(require,module,exports){
    var store = require('./_shared')('wks');
    var uid = require('./_uid');
    var Symbol = require('./_global').Symbol;
    var USE_SYMBOL = typeof Symbol == 'function';
    
    var $exports = module.exports = function (name) {
      return store[name] || (store[name] =
        USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
    };
    
    $exports.store = store;
    
    },{"./_global":112,"./_shared":174,"./_uid":195}],201:[function(require,module,exports){
    var classof = require('./_classof');
    var ITERATOR = require('./_wks')('iterator');
    var Iterators = require('./_iterators');
    module.exports = require('./_core').getIteratorMethod = function (it) {
      if (it != undefined) return it[ITERATOR]
        || it['@@iterator']
        || Iterators[classof(it)];
    };
    
    },{"./_classof":88,"./_core":94,"./_iterators":130,"./_wks":200}],202:[function(require,module,exports){
    // https://github.com/benjamingr/RexExp.escape
    var $export = require('./_export');
    var $re = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');
    
    $export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });
    
    },{"./_export":104,"./_replacer":166}],203:[function(require,module,exports){
    // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
    var $export = require('./_export');
    
    $export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });
    
    require('./_add-to-unscopables')('copyWithin');
    
    },{"./_add-to-unscopables":75,"./_array-copy-within":79,"./_export":104}],204:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var $every = require('./_array-methods')(4);
    
    $export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
      // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
      every: function every(callbackfn /* , thisArg */) {
        return $every(this, callbackfn, arguments[1]);
      }
    });
    
    },{"./_array-methods":83,"./_export":104,"./_strict-method":176}],205:[function(require,module,exports){
    // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
    var $export = require('./_export');
    
    $export($export.P, 'Array', { fill: require('./_array-fill') });
    
    require('./_add-to-unscopables')('fill');
    
    },{"./_add-to-unscopables":75,"./_array-fill":80,"./_export":104}],206:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var $filter = require('./_array-methods')(2);
    
    $export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
      // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
      filter: function filter(callbackfn /* , thisArg */) {
        return $filter(this, callbackfn, arguments[1]);
      }
    });
    
    },{"./_array-methods":83,"./_export":104,"./_strict-method":176}],207:[function(require,module,exports){
    'use strict';
    // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
    var $export = require('./_export');
    var $find = require('./_array-methods')(6);
    var KEY = 'findIndex';
    var forced = true;
    // Shouldn't skip holes
    if (KEY in []) Array(1)[KEY](function () { forced = false; });
    $export($export.P + $export.F * forced, 'Array', {
      findIndex: function findIndex(callbackfn /* , that = undefined */) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    require('./_add-to-unscopables')(KEY);
    
    },{"./_add-to-unscopables":75,"./_array-methods":83,"./_export":104}],208:[function(require,module,exports){
    'use strict';
    // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
    var $export = require('./_export');
    var $find = require('./_array-methods')(5);
    var KEY = 'find';
    var forced = true;
    // Shouldn't skip holes
    if (KEY in []) Array(1)[KEY](function () { forced = false; });
    $export($export.P + $export.F * forced, 'Array', {
      find: function find(callbackfn /* , that = undefined */) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    require('./_add-to-unscopables')(KEY);
    
    },{"./_add-to-unscopables":75,"./_array-methods":83,"./_export":104}],209:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var $forEach = require('./_array-methods')(0);
    var STRICT = require('./_strict-method')([].forEach, true);
    
    $export($export.P + $export.F * !STRICT, 'Array', {
      // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
      forEach: function forEach(callbackfn /* , thisArg */) {
        return $forEach(this, callbackfn, arguments[1]);
      }
    });
    
    },{"./_array-methods":83,"./_export":104,"./_strict-method":176}],210:[function(require,module,exports){
    'use strict';
    var ctx = require('./_ctx');
    var $export = require('./_export');
    var toObject = require('./_to-object');
    var call = require('./_iter-call');
    var isArrayIter = require('./_is-array-iter');
    var toLength = require('./_to-length');
    var createProperty = require('./_create-property');
    var getIterFn = require('./core.get-iterator-method');
    
    $export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
      // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
      from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
        var O = toObject(arrayLike);
        var C = typeof this == 'function' ? this : Array;
        var aLen = arguments.length;
        var mapfn = aLen > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var index = 0;
        var iterFn = getIterFn(O);
        var length, result, step, iterator;
        if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
        // if object isn't iterable or it's array with default iterator - use simple case
        if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
          for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
            createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
          }
        } else {
          length = toLength(O.length);
          for (result = new C(length); length > index; index++) {
            createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
          }
        }
        result.length = index;
        return result;
      }
    });
    
    },{"./_create-property":95,"./_ctx":96,"./_export":104,"./_is-array-iter":120,"./_iter-call":125,"./_iter-detect":128,"./_to-length":189,"./_to-object":190,"./core.get-iterator-method":201}],211:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var $indexOf = require('./_array-includes')(false);
    var $native = [].indexOf;
    var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
    
    $export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
      // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
      indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
        return NEGATIVE_ZERO
          // convert -0 to +0
          ? $native.apply(this, arguments) || 0
          : $indexOf(this, searchElement, arguments[1]);
      }
    });
    
    },{"./_array-includes":82,"./_export":104,"./_strict-method":176}],212:[function(require,module,exports){
    // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
    var $export = require('./_export');
    
    $export($export.S, 'Array', { isArray: require('./_is-array') });
    
    },{"./_export":104,"./_is-array":121}],213:[function(require,module,exports){
    'use strict';
    var addToUnscopables = require('./_add-to-unscopables');
    var step = require('./_iter-step');
    var Iterators = require('./_iterators');
    var toIObject = require('./_to-iobject');
    
    // 22.1.3.4 Array.prototype.entries()
    // 22.1.3.13 Array.prototype.keys()
    // 22.1.3.29 Array.prototype.values()
    // 22.1.3.30 Array.prototype[@@iterator]()
    module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
      this._t = toIObject(iterated); // target
      this._i = 0;                   // next index
      this._k = kind;                // kind
    // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
    }, function () {
      var O = this._t;
      var kind = this._k;
      var index = this._i++;
      if (!O || index >= O.length) {
        this._t = undefined;
        return step(1);
      }
      if (kind == 'keys') return step(0, index);
      if (kind == 'values') return step(0, O[index]);
      return step(0, [index, O[index]]);
    }, 'values');
    
    // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
    Iterators.Arguments = Iterators.Array;
    
    addToUnscopables('keys');
    addToUnscopables('values');
    addToUnscopables('entries');
    
    },{"./_add-to-unscopables":75,"./_iter-define":127,"./_iter-step":129,"./_iterators":130,"./_to-iobject":188}],214:[function(require,module,exports){
    'use strict';
    // 22.1.3.13 Array.prototype.join(separator)
    var $export = require('./_export');
    var toIObject = require('./_to-iobject');
    var arrayJoin = [].join;
    
    // fallback for not array-like strings
    $export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
      join: function join(separator) {
        return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
      }
    });
    
    },{"./_export":104,"./_iobject":119,"./_strict-method":176,"./_to-iobject":188}],215:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var toIObject = require('./_to-iobject');
    var toInteger = require('./_to-integer');
    var toLength = require('./_to-length');
    var $native = [].lastIndexOf;
    var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
    
    $export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
      // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
      lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
        // convert -0 to +0
        if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
        var O = toIObject(this);
        var length = toLength(O.length);
        var index = length - 1;
        if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
        if (index < 0) index = length + index;
        for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
        return -1;
      }
    });
    
    },{"./_export":104,"./_strict-method":176,"./_to-integer":187,"./_to-iobject":188,"./_to-length":189}],216:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var $map = require('./_array-methods')(1);
    
    $export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
      // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
      map: function map(callbackfn /* , thisArg */) {
        return $map(this, callbackfn, arguments[1]);
      }
    });
    
    },{"./_array-methods":83,"./_export":104,"./_strict-method":176}],217:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var createProperty = require('./_create-property');
    
    // WebKit Array.of isn't generic
    $export($export.S + $export.F * require('./_fails')(function () {
      function F() { /* empty */ }
      return !(Array.of.call(F) instanceof F);
    }), 'Array', {
      // 22.1.2.3 Array.of( ...items)
      of: function of(/* ...args */) {
        var index = 0;
        var aLen = arguments.length;
        var result = new (typeof this == 'function' ? this : Array)(aLen);
        while (aLen > index) createProperty(result, index, arguments[index++]);
        result.length = aLen;
        return result;
      }
    });
    
    },{"./_create-property":95,"./_export":104,"./_fails":106}],218:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var $reduce = require('./_array-reduce');
    
    $export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
      // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
      reduceRight: function reduceRight(callbackfn /* , initialValue */) {
        return $reduce(this, callbackfn, arguments.length, arguments[1], true);
      }
    });
    
    },{"./_array-reduce":84,"./_export":104,"./_strict-method":176}],219:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var $reduce = require('./_array-reduce');
    
    $export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
      // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
      reduce: function reduce(callbackfn /* , initialValue */) {
        return $reduce(this, callbackfn, arguments.length, arguments[1], false);
      }
    });
    
    },{"./_array-reduce":84,"./_export":104,"./_strict-method":176}],220:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var html = require('./_html');
    var cof = require('./_cof');
    var toAbsoluteIndex = require('./_to-absolute-index');
    var toLength = require('./_to-length');
    var arraySlice = [].slice;
    
    // fallback for not array-like ES3 strings and DOM objects
    $export($export.P + $export.F * require('./_fails')(function () {
      if (html) arraySlice.call(html);
    }), 'Array', {
      slice: function slice(begin, end) {
        var len = toLength(this.length);
        var klass = cof(this);
        end = end === undefined ? len : end;
        if (klass == 'Array') return arraySlice.call(this, begin, end);
        var start = toAbsoluteIndex(begin, len);
        var upTo = toAbsoluteIndex(end, len);
        var size = toLength(upTo - start);
        var cloned = new Array(size);
        var i = 0;
        for (; i < size; i++) cloned[i] = klass == 'String'
          ? this.charAt(start + i)
          : this[start + i];
        return cloned;
      }
    });
    
    },{"./_cof":89,"./_export":104,"./_fails":106,"./_html":115,"./_to-absolute-index":185,"./_to-length":189}],221:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var $some = require('./_array-methods')(3);
    
    $export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
      // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
      some: function some(callbackfn /* , thisArg */) {
        return $some(this, callbackfn, arguments[1]);
      }
    });
    
    },{"./_array-methods":83,"./_export":104,"./_strict-method":176}],222:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var aFunction = require('./_a-function');
    var toObject = require('./_to-object');
    var fails = require('./_fails');
    var $sort = [].sort;
    var test = [1, 2, 3];
    
    $export($export.P + $export.F * (fails(function () {
      // IE8-
      test.sort(undefined);
    }) || !fails(function () {
      // V8 bug
      test.sort(null);
      // Old WebKit
    }) || !require('./_strict-method')($sort)), 'Array', {
      // 22.1.3.25 Array.prototype.sort(comparefn)
      sort: function sort(comparefn) {
        return comparefn === undefined
          ? $sort.call(toObject(this))
          : $sort.call(toObject(this), aFunction(comparefn));
      }
    });
    
    },{"./_a-function":73,"./_export":104,"./_fails":106,"./_strict-method":176,"./_to-object":190}],223:[function(require,module,exports){
    require('./_set-species')('Array');
    
    },{"./_set-species":171}],224:[function(require,module,exports){
    // 20.3.3.1 / 15.9.4.4 Date.now()
    var $export = require('./_export');
    
    $export($export.S, 'Date', { now: function () { return new Date().getTime(); } });
    
    },{"./_export":104}],225:[function(require,module,exports){
    // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
    var $export = require('./_export');
    var toISOString = require('./_date-to-iso-string');
    
    // PhantomJS / old WebKit has a broken implementations
    $export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
      toISOString: toISOString
    });
    
    },{"./_date-to-iso-string":97,"./_export":104}],226:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var toObject = require('./_to-object');
    var toPrimitive = require('./_to-primitive');
    
    $export($export.P + $export.F * require('./_fails')(function () {
      return new Date(NaN).toJSON() !== null
        || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
    }), 'Date', {
      // eslint-disable-next-line no-unused-vars
      toJSON: function toJSON(key) {
        var O = toObject(this);
        var pv = toPrimitive(O);
        return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
      }
    });
    
    },{"./_export":104,"./_fails":106,"./_to-object":190,"./_to-primitive":191}],227:[function(require,module,exports){
    var TO_PRIMITIVE = require('./_wks')('toPrimitive');
    var proto = Date.prototype;
    
    if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));
    
    },{"./_date-to-primitive":98,"./_hide":114,"./_wks":200}],228:[function(require,module,exports){
    var DateProto = Date.prototype;
    var INVALID_DATE = 'Invalid Date';
    var TO_STRING = 'toString';
    var $toString = DateProto[TO_STRING];
    var getTime = DateProto.getTime;
    if (new Date(NaN) + '' != INVALID_DATE) {
      require('./_redefine')(DateProto, TO_STRING, function toString() {
        var value = getTime.call(this);
        // eslint-disable-next-line no-self-compare
        return value === value ? $toString.call(this) : INVALID_DATE;
      });
    }
    
    },{"./_redefine":163}],229:[function(require,module,exports){
    // 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
    var $export = require('./_export');
    
    $export($export.P, 'Function', { bind: require('./_bind') });
    
    },{"./_bind":87,"./_export":104}],230:[function(require,module,exports){
    'use strict';
    var isObject = require('./_is-object');
    var getPrototypeOf = require('./_object-gpo');
    var HAS_INSTANCE = require('./_wks')('hasInstance');
    var FunctionProto = Function.prototype;
    // 19.2.3.6 Function.prototype[@@hasInstance](V)
    if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
      if (typeof this != 'function' || !isObject(O)) return false;
      if (!isObject(this.prototype)) return O instanceof this;
      // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
      while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
      return false;
    } });
    
    },{"./_is-object":123,"./_object-dp":143,"./_object-gpo":150,"./_wks":200}],231:[function(require,module,exports){
    var dP = require('./_object-dp').f;
    var FProto = Function.prototype;
    var nameRE = /^\s*function ([^ (]*)/;
    var NAME = 'name';
    
    // 19.2.4.2 name
    NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
      configurable: true,
      get: function () {
        try {
          return ('' + this).match(nameRE)[1];
        } catch (e) {
          return '';
        }
      }
    });
    
    },{"./_descriptors":100,"./_object-dp":143}],232:[function(require,module,exports){
    'use strict';
    var strong = require('./_collection-strong');
    var validate = require('./_validate-collection');
    var MAP = 'Map';
    
    // 23.1 Map Objects
    module.exports = require('./_collection')(MAP, function (get) {
      return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
    }, {
      // 23.1.3.6 Map.prototype.get(key)
      get: function get(key) {
        var entry = strong.getEntry(validate(this, MAP), key);
        return entry && entry.v;
      },
      // 23.1.3.9 Map.prototype.set(key, value)
      set: function set(key, value) {
        return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
      }
    }, strong, true);
    
    },{"./_collection":93,"./_collection-strong":90,"./_validate-collection":197}],233:[function(require,module,exports){
    // 20.2.2.3 Math.acosh(x)
    var $export = require('./_export');
    var log1p = require('./_math-log1p');
    var sqrt = Math.sqrt;
    var $acosh = Math.acosh;
    
    $export($export.S + $export.F * !($acosh
      // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
      && Math.floor($acosh(Number.MAX_VALUE)) == 710
      // Tor Browser bug: Math.acosh(Infinity) -> NaN
      && $acosh(Infinity) == Infinity
    ), 'Math', {
      acosh: function acosh(x) {
        return (x = +x) < 1 ? NaN : x > 94906265.62425156
          ? Math.log(x) + Math.LN2
          : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
      }
    });
    
    },{"./_export":104,"./_math-log1p":134}],234:[function(require,module,exports){
    // 20.2.2.5 Math.asinh(x)
    var $export = require('./_export');
    var $asinh = Math.asinh;
    
    function asinh(x) {
      return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
    }
    
    // Tor Browser bug: Math.asinh(0) -> -0
    $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });
    
    },{"./_export":104}],235:[function(require,module,exports){
    // 20.2.2.7 Math.atanh(x)
    var $export = require('./_export');
    var $atanh = Math.atanh;
    
    // Tor Browser bug: Math.atanh(-0) -> 0
    $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
      atanh: function atanh(x) {
        return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
      }
    });
    
    },{"./_export":104}],236:[function(require,module,exports){
    // 20.2.2.9 Math.cbrt(x)
    var $export = require('./_export');
    var sign = require('./_math-sign');
    
    $export($export.S, 'Math', {
      cbrt: function cbrt(x) {
        return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
      }
    });
    
    },{"./_export":104,"./_math-sign":136}],237:[function(require,module,exports){
    // 20.2.2.11 Math.clz32(x)
    var $export = require('./_export');
    
    $export($export.S, 'Math', {
      clz32: function clz32(x) {
        return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
      }
    });
    
    },{"./_export":104}],238:[function(require,module,exports){
    // 20.2.2.12 Math.cosh(x)
    var $export = require('./_export');
    var exp = Math.exp;
    
    $export($export.S, 'Math', {
      cosh: function cosh(x) {
        return (exp(x = +x) + exp(-x)) / 2;
      }
    });
    
    },{"./_export":104}],239:[function(require,module,exports){
    // 20.2.2.14 Math.expm1(x)
    var $export = require('./_export');
    var $expm1 = require('./_math-expm1');
    
    $export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });
    
    },{"./_export":104,"./_math-expm1":132}],240:[function(require,module,exports){
    // 20.2.2.16 Math.fround(x)
    var $export = require('./_export');
    
    $export($export.S, 'Math', { fround: require('./_math-fround') });
    
    },{"./_export":104,"./_math-fround":133}],241:[function(require,module,exports){
    // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
    var $export = require('./_export');
    var abs = Math.abs;
    
    $export($export.S, 'Math', {
      hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
        var sum = 0;
        var i = 0;
        var aLen = arguments.length;
        var larg = 0;
        var arg, div;
        while (i < aLen) {
          arg = abs(arguments[i++]);
          if (larg < arg) {
            div = larg / arg;
            sum = sum * div * div + 1;
            larg = arg;
          } else if (arg > 0) {
            div = arg / larg;
            sum += div * div;
          } else sum += arg;
        }
        return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
      }
    });
    
    },{"./_export":104}],242:[function(require,module,exports){
    // 20.2.2.18 Math.imul(x, y)
    var $export = require('./_export');
    var $imul = Math.imul;
    
    // some WebKit versions fails with big numbers, some has wrong arity
    $export($export.S + $export.F * require('./_fails')(function () {
      return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
    }), 'Math', {
      imul: function imul(x, y) {
        var UINT16 = 0xffff;
        var xn = +x;
        var yn = +y;
        var xl = UINT16 & xn;
        var yl = UINT16 & yn;
        return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
      }
    });
    
    },{"./_export":104,"./_fails":106}],243:[function(require,module,exports){
    // 20.2.2.21 Math.log10(x)
    var $export = require('./_export');
    
    $export($export.S, 'Math', {
      log10: function log10(x) {
        return Math.log(x) * Math.LOG10E;
      }
    });
    
    },{"./_export":104}],244:[function(require,module,exports){
    // 20.2.2.20 Math.log1p(x)
    var $export = require('./_export');
    
    $export($export.S, 'Math', { log1p: require('./_math-log1p') });
    
    },{"./_export":104,"./_math-log1p":134}],245:[function(require,module,exports){
    // 20.2.2.22 Math.log2(x)
    var $export = require('./_export');
    
    $export($export.S, 'Math', {
      log2: function log2(x) {
        return Math.log(x) / Math.LN2;
      }
    });
    
    },{"./_export":104}],246:[function(require,module,exports){
    // 20.2.2.28 Math.sign(x)
    var $export = require('./_export');
    
    $export($export.S, 'Math', { sign: require('./_math-sign') });
    
    },{"./_export":104,"./_math-sign":136}],247:[function(require,module,exports){
    // 20.2.2.30 Math.sinh(x)
    var $export = require('./_export');
    var expm1 = require('./_math-expm1');
    var exp = Math.exp;
    
    // V8 near Chromium 38 has a problem with very small numbers
    $export($export.S + $export.F * require('./_fails')(function () {
      return !Math.sinh(-2e-17) != -2e-17;
    }), 'Math', {
      sinh: function sinh(x) {
        return Math.abs(x = +x) < 1
          ? (expm1(x) - expm1(-x)) / 2
          : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
      }
    });
    
    },{"./_export":104,"./_fails":106,"./_math-expm1":132}],248:[function(require,module,exports){
    // 20.2.2.33 Math.tanh(x)
    var $export = require('./_export');
    var expm1 = require('./_math-expm1');
    var exp = Math.exp;
    
    $export($export.S, 'Math', {
      tanh: function tanh(x) {
        var a = expm1(x = +x);
        var b = expm1(-x);
        return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
      }
    });
    
    },{"./_export":104,"./_math-expm1":132}],249:[function(require,module,exports){
    // 20.2.2.34 Math.trunc(x)
    var $export = require('./_export');
    
    $export($export.S, 'Math', {
      trunc: function trunc(it) {
        return (it > 0 ? Math.floor : Math.ceil)(it);
      }
    });
    
    },{"./_export":104}],250:[function(require,module,exports){
    'use strict';
    var global = require('./_global');
    var has = require('./_has');
    var cof = require('./_cof');
    var inheritIfRequired = require('./_inherit-if-required');
    var toPrimitive = require('./_to-primitive');
    var fails = require('./_fails');
    var gOPN = require('./_object-gopn').f;
    var gOPD = require('./_object-gopd').f;
    var dP = require('./_object-dp').f;
    var $trim = require('./_string-trim').trim;
    var NUMBER = 'Number';
    var $Number = global[NUMBER];
    var Base = $Number;
    var proto = $Number.prototype;
    // Opera ~12 has broken Object#toString
    var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
    var TRIM = 'trim' in String.prototype;
    
    // 7.1.3 ToNumber(argument)
    var toNumber = function (argument) {
      var it = toPrimitive(argument, false);
      if (typeof it == 'string' && it.length > 2) {
        it = TRIM ? it.trim() : $trim(it, 3);
        var first = it.charCodeAt(0);
        var third, radix, maxCode;
        if (first === 43 || first === 45) {
          third = it.charCodeAt(2);
          if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
        } else if (first === 48) {
          switch (it.charCodeAt(1)) {
            case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
            case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
            default: return +it;
          }
          for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
            code = digits.charCodeAt(i);
            // parseInt parses a string to a first unavailable symbol
            // but ToNumber should return NaN if a string contains unavailable symbols
            if (code < 48 || code > maxCode) return NaN;
          } return parseInt(digits, radix);
        }
      } return +it;
    };
    
    if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
      $Number = function Number(value) {
        var it = arguments.length < 1 ? 0 : value;
        var that = this;
        return that instanceof $Number
          // check on 1..constructor(foo) case
          && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
            ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
      };
      for (var keys = require('./_descriptors') ? gOPN(Base) : (
        // ES3:
        'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
        // ES6 (in case, if modules with ES6 Number statics required before):
        'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
        'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
      ).split(','), j = 0, key; keys.length > j; j++) {
        if (has(Base, key = keys[j]) && !has($Number, key)) {
          dP($Number, key, gOPD(Base, key));
        }
      }
      $Number.prototype = proto;
      proto.constructor = $Number;
      require('./_redefine')(global, NUMBER, $Number);
    }
    
    },{"./_cof":89,"./_descriptors":100,"./_fails":106,"./_global":112,"./_has":113,"./_inherit-if-required":117,"./_object-create":142,"./_object-dp":143,"./_object-gopd":146,"./_object-gopn":148,"./_redefine":163,"./_string-trim":182,"./_to-primitive":191}],251:[function(require,module,exports){
    // 20.1.2.1 Number.EPSILON
    var $export = require('./_export');
    
    $export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });
    
    },{"./_export":104}],252:[function(require,module,exports){
    // 20.1.2.2 Number.isFinite(number)
    var $export = require('./_export');
    var _isFinite = require('./_global').isFinite;
    
    $export($export.S, 'Number', {
      isFinite: function isFinite(it) {
        return typeof it == 'number' && _isFinite(it);
      }
    });
    
    },{"./_export":104,"./_global":112}],253:[function(require,module,exports){
    // 20.1.2.3 Number.isInteger(number)
    var $export = require('./_export');
    
    $export($export.S, 'Number', { isInteger: require('./_is-integer') });
    
    },{"./_export":104,"./_is-integer":122}],254:[function(require,module,exports){
    // 20.1.2.4 Number.isNaN(number)
    var $export = require('./_export');
    
    $export($export.S, 'Number', {
      isNaN: function isNaN(number) {
        // eslint-disable-next-line no-self-compare
        return number != number;
      }
    });
    
    },{"./_export":104}],255:[function(require,module,exports){
    // 20.1.2.5 Number.isSafeInteger(number)
    var $export = require('./_export');
    var isInteger = require('./_is-integer');
    var abs = Math.abs;
    
    $export($export.S, 'Number', {
      isSafeInteger: function isSafeInteger(number) {
        return isInteger(number) && abs(number) <= 0x1fffffffffffff;
      }
    });
    
    },{"./_export":104,"./_is-integer":122}],256:[function(require,module,exports){
    // 20.1.2.6 Number.MAX_SAFE_INTEGER
    var $export = require('./_export');
    
    $export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });
    
    },{"./_export":104}],257:[function(require,module,exports){
    // 20.1.2.10 Number.MIN_SAFE_INTEGER
    var $export = require('./_export');
    
    $export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });
    
    },{"./_export":104}],258:[function(require,module,exports){
    var $export = require('./_export');
    var $parseFloat = require('./_parse-float');
    // 20.1.2.12 Number.parseFloat(string)
    $export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });
    
    },{"./_export":104,"./_parse-float":157}],259:[function(require,module,exports){
    var $export = require('./_export');
    var $parseInt = require('./_parse-int');
    // 20.1.2.13 Number.parseInt(string, radix)
    $export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });
    
    },{"./_export":104,"./_parse-int":158}],260:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var toInteger = require('./_to-integer');
    var aNumberValue = require('./_a-number-value');
    var repeat = require('./_string-repeat');
    var $toFixed = 1.0.toFixed;
    var floor = Math.floor;
    var data = [0, 0, 0, 0, 0, 0];
    var ERROR = 'Number.toFixed: incorrect invocation!';
    var ZERO = '0';
    
    var multiply = function (n, c) {
      var i = -1;
      var c2 = c;
      while (++i < 6) {
        c2 += n * data[i];
        data[i] = c2 % 1e7;
        c2 = floor(c2 / 1e7);
      }
    };
    var divide = function (n) {
      var i = 6;
      var c = 0;
      while (--i >= 0) {
        c += data[i];
        data[i] = floor(c / n);
        c = (c % n) * 1e7;
      }
    };
    var numToString = function () {
      var i = 6;
      var s = '';
      while (--i >= 0) {
        if (s !== '' || i === 0 || data[i] !== 0) {
          var t = String(data[i]);
          s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
        }
      } return s;
    };
    var pow = function (x, n, acc) {
      return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
    };
    var log = function (x) {
      var n = 0;
      var x2 = x;
      while (x2 >= 4096) {
        n += 12;
        x2 /= 4096;
      }
      while (x2 >= 2) {
        n += 1;
        x2 /= 2;
      } return n;
    };
    
    $export($export.P + $export.F * (!!$toFixed && (
      0.00008.toFixed(3) !== '0.000' ||
      0.9.toFixed(0) !== '1' ||
      1.255.toFixed(2) !== '1.25' ||
      1000000000000000128.0.toFixed(0) !== '1000000000000000128'
    ) || !require('./_fails')(function () {
      // V8 ~ Android 4.3-
      $toFixed.call({});
    })), 'Number', {
      toFixed: function toFixed(fractionDigits) {
        var x = aNumberValue(this, ERROR);
        var f = toInteger(fractionDigits);
        var s = '';
        var m = ZERO;
        var e, z, j, k;
        if (f < 0 || f > 20) throw RangeError(ERROR);
        // eslint-disable-next-line no-self-compare
        if (x != x) return 'NaN';
        if (x <= -1e21 || x >= 1e21) return String(x);
        if (x < 0) {
          s = '-';
          x = -x;
        }
        if (x > 1e-21) {
          e = log(x * pow(2, 69, 1)) - 69;
          z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
          z *= 0x10000000000000;
          e = 52 - e;
          if (e > 0) {
            multiply(0, z);
            j = f;
            while (j >= 7) {
              multiply(1e7, 0);
              j -= 7;
            }
            multiply(pow(10, j, 1), 0);
            j = e - 1;
            while (j >= 23) {
              divide(1 << 23);
              j -= 23;
            }
            divide(1 << j);
            multiply(1, 1);
            divide(2);
            m = numToString();
          } else {
            multiply(0, z);
            multiply(1 << -e, 0);
            m = numToString() + repeat.call(ZERO, f);
          }
        }
        if (f > 0) {
          k = m.length;
          m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
        } else {
          m = s + m;
        } return m;
      }
    });
    
    },{"./_a-number-value":74,"./_export":104,"./_fails":106,"./_string-repeat":181,"./_to-integer":187}],261:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var $fails = require('./_fails');
    var aNumberValue = require('./_a-number-value');
    var $toPrecision = 1.0.toPrecision;
    
    $export($export.P + $export.F * ($fails(function () {
      // IE7-
      return $toPrecision.call(1, undefined) !== '1';
    }) || !$fails(function () {
      // V8 ~ Android 4.3-
      $toPrecision.call({});
    })), 'Number', {
      toPrecision: function toPrecision(precision) {
        var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
        return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
      }
    });
    
    },{"./_a-number-value":74,"./_export":104,"./_fails":106}],262:[function(require,module,exports){
    // 19.1.3.1 Object.assign(target, source)
    var $export = require('./_export');
    
    $export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });
    
    },{"./_export":104,"./_object-assign":141}],263:[function(require,module,exports){
    var $export = require('./_export');
    // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
    $export($export.S, 'Object', { create: require('./_object-create') });
    
    },{"./_export":104,"./_object-create":142}],264:[function(require,module,exports){
    var $export = require('./_export');
    // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
    $export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });
    
    },{"./_descriptors":100,"./_export":104,"./_object-dps":144}],265:[function(require,module,exports){
    var $export = require('./_export');
    // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
    $export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });
    
    },{"./_descriptors":100,"./_export":104,"./_object-dp":143}],266:[function(require,module,exports){
    // 19.1.2.5 Object.freeze(O)
    var isObject = require('./_is-object');
    var meta = require('./_meta').onFreeze;
    
    require('./_object-sap')('freeze', function ($freeze) {
      return function freeze(it) {
        return $freeze && isObject(it) ? $freeze(meta(it)) : it;
      };
    });
    
    },{"./_is-object":123,"./_meta":137,"./_object-sap":154}],267:[function(require,module,exports){
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    var toIObject = require('./_to-iobject');
    var $getOwnPropertyDescriptor = require('./_object-gopd').f;
    
    require('./_object-sap')('getOwnPropertyDescriptor', function () {
      return function getOwnPropertyDescriptor(it, key) {
        return $getOwnPropertyDescriptor(toIObject(it), key);
      };
    });
    
    },{"./_object-gopd":146,"./_object-sap":154,"./_to-iobject":188}],268:[function(require,module,exports){
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    require('./_object-sap')('getOwnPropertyNames', function () {
      return require('./_object-gopn-ext').f;
    });
    
    },{"./_object-gopn-ext":147,"./_object-sap":154}],269:[function(require,module,exports){
    // 19.1.2.9 Object.getPrototypeOf(O)
    var toObject = require('./_to-object');
    var $getPrototypeOf = require('./_object-gpo');
    
    require('./_object-sap')('getPrototypeOf', function () {
      return function getPrototypeOf(it) {
        return $getPrototypeOf(toObject(it));
      };
    });
    
    },{"./_object-gpo":150,"./_object-sap":154,"./_to-object":190}],270:[function(require,module,exports){
    // 19.1.2.11 Object.isExtensible(O)
    var isObject = require('./_is-object');
    
    require('./_object-sap')('isExtensible', function ($isExtensible) {
      return function isExtensible(it) {
        return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
      };
    });
    
    },{"./_is-object":123,"./_object-sap":154}],271:[function(require,module,exports){
    // 19.1.2.12 Object.isFrozen(O)
    var isObject = require('./_is-object');
    
    require('./_object-sap')('isFrozen', function ($isFrozen) {
      return function isFrozen(it) {
        return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
      };
    });
    
    },{"./_is-object":123,"./_object-sap":154}],272:[function(require,module,exports){
    // 19.1.2.13 Object.isSealed(O)
    var isObject = require('./_is-object');
    
    require('./_object-sap')('isSealed', function ($isSealed) {
      return function isSealed(it) {
        return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
      };
    });
    
    },{"./_is-object":123,"./_object-sap":154}],273:[function(require,module,exports){
    // 19.1.3.10 Object.is(value1, value2)
    var $export = require('./_export');
    $export($export.S, 'Object', { is: require('./_same-value') });
    
    },{"./_export":104,"./_same-value":167}],274:[function(require,module,exports){
    // 19.1.2.14 Object.keys(O)
    var toObject = require('./_to-object');
    var $keys = require('./_object-keys');
    
    require('./_object-sap')('keys', function () {
      return function keys(it) {
        return $keys(toObject(it));
      };
    });
    
    },{"./_object-keys":152,"./_object-sap":154,"./_to-object":190}],275:[function(require,module,exports){
    // 19.1.2.15 Object.preventExtensions(O)
    var isObject = require('./_is-object');
    var meta = require('./_meta').onFreeze;
    
    require('./_object-sap')('preventExtensions', function ($preventExtensions) {
      return function preventExtensions(it) {
        return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
      };
    });
    
    },{"./_is-object":123,"./_meta":137,"./_object-sap":154}],276:[function(require,module,exports){
    // 19.1.2.17 Object.seal(O)
    var isObject = require('./_is-object');
    var meta = require('./_meta').onFreeze;
    
    require('./_object-sap')('seal', function ($seal) {
      return function seal(it) {
        return $seal && isObject(it) ? $seal(meta(it)) : it;
      };
    });
    
    },{"./_is-object":123,"./_meta":137,"./_object-sap":154}],277:[function(require,module,exports){
    // 19.1.3.19 Object.setPrototypeOf(O, proto)
    var $export = require('./_export');
    $export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });
    
    },{"./_export":104,"./_set-proto":170}],278:[function(require,module,exports){
    'use strict';
    // 19.1.3.6 Object.prototype.toString()
    var classof = require('./_classof');
    var test = {};
    test[require('./_wks')('toStringTag')] = 'z';
    if (test + '' != '[object z]') {
      require('./_redefine')(Object.prototype, 'toString', function toString() {
        return '[object ' + classof(this) + ']';
      }, true);
    }
    
    },{"./_classof":88,"./_redefine":163,"./_wks":200}],279:[function(require,module,exports){
    var $export = require('./_export');
    var $parseFloat = require('./_parse-float');
    // 18.2.4 parseFloat(string)
    $export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });
    
    },{"./_export":104,"./_parse-float":157}],280:[function(require,module,exports){
    var $export = require('./_export');
    var $parseInt = require('./_parse-int');
    // 18.2.5 parseInt(string, radix)
    $export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });
    
    },{"./_export":104,"./_parse-int":158}],281:[function(require,module,exports){
    'use strict';
    var LIBRARY = require('./_library');
    var global = require('./_global');
    var ctx = require('./_ctx');
    var classof = require('./_classof');
    var $export = require('./_export');
    var isObject = require('./_is-object');
    var aFunction = require('./_a-function');
    var anInstance = require('./_an-instance');
    var forOf = require('./_for-of');
    var speciesConstructor = require('./_species-constructor');
    var task = require('./_task').set;
    var microtask = require('./_microtask')();
    var newPromiseCapabilityModule = require('./_new-promise-capability');
    var perform = require('./_perform');
    var userAgent = require('./_user-agent');
    var promiseResolve = require('./_promise-resolve');
    var PROMISE = 'Promise';
    var TypeError = global.TypeError;
    var process = global.process;
    var versions = process && process.versions;
    var v8 = versions && versions.v8 || '';
    var $Promise = global[PROMISE];
    var isNode = classof(process) == 'process';
    var empty = function () { /* empty */ };
    var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
    var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
    
    var USE_NATIVE = !!function () {
      try {
        // correct subclassing with @@species support
        var promise = $Promise.resolve(1);
        var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
          exec(empty, empty);
        };
        // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
        return (isNode || typeof PromiseRejectionEvent == 'function')
          && promise.then(empty) instanceof FakePromise
          // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
          // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
          // we can't detect it synchronously, so just check versions
          && v8.indexOf('6.6') !== 0
          && userAgent.indexOf('Chrome/66') === -1;
      } catch (e) { /* empty */ }
    }();
    
    // helpers
    var isThenable = function (it) {
      var then;
      return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
    };
    var notify = function (promise, isReject) {
      if (promise._n) return;
      promise._n = true;
      var chain = promise._c;
      microtask(function () {
        var value = promise._v;
        var ok = promise._s == 1;
        var i = 0;
        var run = function (reaction) {
          var handler = ok ? reaction.ok : reaction.fail;
          var resolve = reaction.resolve;
          var reject = reaction.reject;
          var domain = reaction.domain;
          var result, then, exited;
          try {
            if (handler) {
              if (!ok) {
                if (promise._h == 2) onHandleUnhandled(promise);
                promise._h = 1;
              }
              if (handler === true) result = value;
              else {
                if (domain) domain.enter();
                result = handler(value); // may throw
                if (domain) {
                  domain.exit();
                  exited = true;
                }
              }
              if (result === reaction.promise) {
                reject(TypeError('Promise-chain cycle'));
              } else if (then = isThenable(result)) {
                then.call(result, resolve, reject);
              } else resolve(result);
            } else reject(value);
          } catch (e) {
            if (domain && !exited) domain.exit();
            reject(e);
          }
        };
        while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
        promise._c = [];
        promise._n = false;
        if (isReject && !promise._h) onUnhandled(promise);
      });
    };
    var onUnhandled = function (promise) {
      task.call(global, function () {
        var value = promise._v;
        var unhandled = isUnhandled(promise);
        var result, handler, console;
        if (unhandled) {
          result = perform(function () {
            if (isNode) {
              process.emit('unhandledRejection', value, promise);
            } else if (handler = global.onunhandledrejection) {
              handler({ promise: promise, reason: value });
            } else if ((console = global.console) && console.error) {
              console.error('Unhandled promise rejection', value);
            }
          });
          // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
          promise._h = isNode || isUnhandled(promise) ? 2 : 1;
        } promise._a = undefined;
        if (unhandled && result.e) throw result.v;
      });
    };
    var isUnhandled = function (promise) {
      return promise._h !== 1 && (promise._a || promise._c).length === 0;
    };
    var onHandleUnhandled = function (promise) {
      task.call(global, function () {
        var handler;
        if (isNode) {
          process.emit('rejectionHandled', promise);
        } else if (handler = global.onrejectionhandled) {
          handler({ promise: promise, reason: promise._v });
        }
      });
    };
    var $reject = function (value) {
      var promise = this;
      if (promise._d) return;
      promise._d = true;
      promise = promise._w || promise; // unwrap
      promise._v = value;
      promise._s = 2;
      if (!promise._a) promise._a = promise._c.slice();
      notify(promise, true);
    };
    var $resolve = function (value) {
      var promise = this;
      var then;
      if (promise._d) return;
      promise._d = true;
      promise = promise._w || promise; // unwrap
      try {
        if (promise === value) throw TypeError("Promise can't be resolved itself");
        if (then = isThenable(value)) {
          microtask(function () {
            var wrapper = { _w: promise, _d: false }; // wrap
            try {
              then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
            } catch (e) {
              $reject.call(wrapper, e);
            }
          });
        } else {
          promise._v = value;
          promise._s = 1;
          notify(promise, false);
        }
      } catch (e) {
        $reject.call({ _w: promise, _d: false }, e); // wrap
      }
    };
    
    // constructor polyfill
    if (!USE_NATIVE) {
      // 25.4.3.1 Promise(executor)
      $Promise = function Promise(executor) {
        anInstance(this, $Promise, PROMISE, '_h');
        aFunction(executor);
        Internal.call(this);
        try {
          executor(ctx($resolve, this, 1), ctx($reject, this, 1));
        } catch (err) {
          $reject.call(this, err);
        }
      };
      // eslint-disable-next-line no-unused-vars
      Internal = function Promise(executor) {
        this._c = [];             // <- awaiting reactions
        this._a = undefined;      // <- checked in isUnhandled reactions
        this._s = 0;              // <- state
        this._d = false;          // <- done
        this._v = undefined;      // <- value
        this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
        this._n = false;          // <- notify
      };
      Internal.prototype = require('./_redefine-all')($Promise.prototype, {
        // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
        then: function then(onFulfilled, onRejected) {
          var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
          reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
          reaction.fail = typeof onRejected == 'function' && onRejected;
          reaction.domain = isNode ? process.domain : undefined;
          this._c.push(reaction);
          if (this._a) this._a.push(reaction);
          if (this._s) notify(this, false);
          return reaction.promise;
        },
        // 25.4.5.1 Promise.prototype.catch(onRejected)
        'catch': function (onRejected) {
          return this.then(undefined, onRejected);
        }
      });
      OwnPromiseCapability = function () {
        var promise = new Internal();
        this.promise = promise;
        this.resolve = ctx($resolve, promise, 1);
        this.reject = ctx($reject, promise, 1);
      };
      newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
        return C === $Promise || C === Wrapper
          ? new OwnPromiseCapability(C)
          : newGenericPromiseCapability(C);
      };
    }
    
    $export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
    require('./_set-to-string-tag')($Promise, PROMISE);
    require('./_set-species')(PROMISE);
    Wrapper = require('./_core')[PROMISE];
    
    // statics
    $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
      // 25.4.4.5 Promise.reject(r)
      reject: function reject(r) {
        var capability = newPromiseCapability(this);
        var $$reject = capability.reject;
        $$reject(r);
        return capability.promise;
      }
    });
    $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
      // 25.4.4.6 Promise.resolve(x)
      resolve: function resolve(x) {
        return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
      }
    });
    $export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
      $Promise.all(iter)['catch'](empty);
    })), PROMISE, {
      // 25.4.4.1 Promise.all(iterable)
      all: function all(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function () {
          var values = [];
          var index = 0;
          var remaining = 1;
          forOf(iterable, false, function (promise) {
            var $index = index++;
            var alreadyCalled = false;
            values.push(undefined);
            remaining++;
            C.resolve(promise).then(function (value) {
              if (alreadyCalled) return;
              alreadyCalled = true;
              values[$index] = value;
              --remaining || resolve(values);
            }, reject);
          });
          --remaining || resolve(values);
        });
        if (result.e) reject(result.v);
        return capability.promise;
      },
      // 25.4.4.4 Promise.race(iterable)
      race: function race(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var reject = capability.reject;
        var result = perform(function () {
          forOf(iterable, false, function (promise) {
            C.resolve(promise).then(capability.resolve, reject);
          });
        });
        if (result.e) reject(result.v);
        return capability.promise;
      }
    });
    
    },{"./_a-function":73,"./_an-instance":77,"./_classof":88,"./_core":94,"./_ctx":96,"./_export":104,"./_for-of":110,"./_global":112,"./_is-object":123,"./_iter-detect":128,"./_library":131,"./_microtask":139,"./_new-promise-capability":140,"./_perform":159,"./_promise-resolve":160,"./_redefine-all":162,"./_set-species":171,"./_set-to-string-tag":172,"./_species-constructor":175,"./_task":184,"./_user-agent":196,"./_wks":200}],282:[function(require,module,exports){
    // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
    var $export = require('./_export');
    var aFunction = require('./_a-function');
    var anObject = require('./_an-object');
    var rApply = (require('./_global').Reflect || {}).apply;
    var fApply = Function.apply;
    // MS Edge argumentsList argument is optional
    $export($export.S + $export.F * !require('./_fails')(function () {
      rApply(function () { /* empty */ });
    }), 'Reflect', {
      apply: function apply(target, thisArgument, argumentsList) {
        var T = aFunction(target);
        var L = anObject(argumentsList);
        return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
      }
    });
    
    },{"./_a-function":73,"./_an-object":78,"./_export":104,"./_fails":106,"./_global":112}],283:[function(require,module,exports){
    // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
    var $export = require('./_export');
    var create = require('./_object-create');
    var aFunction = require('./_a-function');
    var anObject = require('./_an-object');
    var isObject = require('./_is-object');
    var fails = require('./_fails');
    var bind = require('./_bind');
    var rConstruct = (require('./_global').Reflect || {}).construct;
    
    // MS Edge supports only 2 arguments and argumentsList argument is optional
    // FF Nightly sets third argument as `new.target`, but does not create `this` from it
    var NEW_TARGET_BUG = fails(function () {
      function F() { /* empty */ }
      return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
    });
    var ARGS_BUG = !fails(function () {
      rConstruct(function () { /* empty */ });
    });
    
    $export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
      construct: function construct(Target, args /* , newTarget */) {
        aFunction(Target);
        anObject(args);
        var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
        if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
        if (Target == newTarget) {
          // w/o altered newTarget, optimization for 0-4 arguments
          switch (args.length) {
            case 0: return new Target();
            case 1: return new Target(args[0]);
            case 2: return new Target(args[0], args[1]);
            case 3: return new Target(args[0], args[1], args[2]);
            case 4: return new Target(args[0], args[1], args[2], args[3]);
          }
          // w/o altered newTarget, lot of arguments case
          var $args = [null];
          $args.push.apply($args, args);
          return new (bind.apply(Target, $args))();
        }
        // with altered newTarget, not support built-in constructors
        var proto = newTarget.prototype;
        var instance = create(isObject(proto) ? proto : Object.prototype);
        var result = Function.apply.call(Target, instance, args);
        return isObject(result) ? result : instance;
      }
    });
    
    },{"./_a-function":73,"./_an-object":78,"./_bind":87,"./_export":104,"./_fails":106,"./_global":112,"./_is-object":123,"./_object-create":142}],284:[function(require,module,exports){
    // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
    var dP = require('./_object-dp');
    var $export = require('./_export');
    var anObject = require('./_an-object');
    var toPrimitive = require('./_to-primitive');
    
    // MS Edge has broken Reflect.defineProperty - throwing instead of returning false
    $export($export.S + $export.F * require('./_fails')(function () {
      // eslint-disable-next-line no-undef
      Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
    }), 'Reflect', {
      defineProperty: function defineProperty(target, propertyKey, attributes) {
        anObject(target);
        propertyKey = toPrimitive(propertyKey, true);
        anObject(attributes);
        try {
          dP.f(target, propertyKey, attributes);
          return true;
        } catch (e) {
          return false;
        }
      }
    });
    
    },{"./_an-object":78,"./_export":104,"./_fails":106,"./_object-dp":143,"./_to-primitive":191}],285:[function(require,module,exports){
    // 26.1.4 Reflect.deleteProperty(target, propertyKey)
    var $export = require('./_export');
    var gOPD = require('./_object-gopd').f;
    var anObject = require('./_an-object');
    
    $export($export.S, 'Reflect', {
      deleteProperty: function deleteProperty(target, propertyKey) {
        var desc = gOPD(anObject(target), propertyKey);
        return desc && !desc.configurable ? false : delete target[propertyKey];
      }
    });
    
    },{"./_an-object":78,"./_export":104,"./_object-gopd":146}],286:[function(require,module,exports){
    'use strict';
    // 26.1.5 Reflect.enumerate(target)
    var $export = require('./_export');
    var anObject = require('./_an-object');
    var Enumerate = function (iterated) {
      this._t = anObject(iterated); // target
      this._i = 0;                  // next index
      var keys = this._k = [];      // keys
      var key;
      for (key in iterated) keys.push(key);
    };
    require('./_iter-create')(Enumerate, 'Object', function () {
      var that = this;
      var keys = that._k;
      var key;
      do {
        if (that._i >= keys.length) return { value: undefined, done: true };
      } while (!((key = keys[that._i++]) in that._t));
      return { value: key, done: false };
    });
    
    $export($export.S, 'Reflect', {
      enumerate: function enumerate(target) {
        return new Enumerate(target);
      }
    });
    
    },{"./_an-object":78,"./_export":104,"./_iter-create":126}],287:[function(require,module,exports){
    // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
    var gOPD = require('./_object-gopd');
    var $export = require('./_export');
    var anObject = require('./_an-object');
    
    $export($export.S, 'Reflect', {
      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
        return gOPD.f(anObject(target), propertyKey);
      }
    });
    
    },{"./_an-object":78,"./_export":104,"./_object-gopd":146}],288:[function(require,module,exports){
    // 26.1.8 Reflect.getPrototypeOf(target)
    var $export = require('./_export');
    var getProto = require('./_object-gpo');
    var anObject = require('./_an-object');
    
    $export($export.S, 'Reflect', {
      getPrototypeOf: function getPrototypeOf(target) {
        return getProto(anObject(target));
      }
    });
    
    },{"./_an-object":78,"./_export":104,"./_object-gpo":150}],289:[function(require,module,exports){
    // 26.1.6 Reflect.get(target, propertyKey [, receiver])
    var gOPD = require('./_object-gopd');
    var getPrototypeOf = require('./_object-gpo');
    var has = require('./_has');
    var $export = require('./_export');
    var isObject = require('./_is-object');
    var anObject = require('./_an-object');
    
    function get(target, propertyKey /* , receiver */) {
      var receiver = arguments.length < 3 ? target : arguments[2];
      var desc, proto;
      if (anObject(target) === receiver) return target[propertyKey];
      if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
        ? desc.value
        : desc.get !== undefined
          ? desc.get.call(receiver)
          : undefined;
      if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
    }
    
    $export($export.S, 'Reflect', { get: get });
    
    },{"./_an-object":78,"./_export":104,"./_has":113,"./_is-object":123,"./_object-gopd":146,"./_object-gpo":150}],290:[function(require,module,exports){
    // 26.1.9 Reflect.has(target, propertyKey)
    var $export = require('./_export');
    
    $export($export.S, 'Reflect', {
      has: function has(target, propertyKey) {
        return propertyKey in target;
      }
    });
    
    },{"./_export":104}],291:[function(require,module,exports){
    // 26.1.10 Reflect.isExtensible(target)
    var $export = require('./_export');
    var anObject = require('./_an-object');
    var $isExtensible = Object.isExtensible;
    
    $export($export.S, 'Reflect', {
      isExtensible: function isExtensible(target) {
        anObject(target);
        return $isExtensible ? $isExtensible(target) : true;
      }
    });
    
    },{"./_an-object":78,"./_export":104}],292:[function(require,module,exports){
    // 26.1.11 Reflect.ownKeys(target)
    var $export = require('./_export');
    
    $export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });
    
    },{"./_export":104,"./_own-keys":156}],293:[function(require,module,exports){
    // 26.1.12 Reflect.preventExtensions(target)
    var $export = require('./_export');
    var anObject = require('./_an-object');
    var $preventExtensions = Object.preventExtensions;
    
    $export($export.S, 'Reflect', {
      preventExtensions: function preventExtensions(target) {
        anObject(target);
        try {
          if ($preventExtensions) $preventExtensions(target);
          return true;
        } catch (e) {
          return false;
        }
      }
    });
    
    },{"./_an-object":78,"./_export":104}],294:[function(require,module,exports){
    // 26.1.14 Reflect.setPrototypeOf(target, proto)
    var $export = require('./_export');
    var setProto = require('./_set-proto');
    
    if (setProto) $export($export.S, 'Reflect', {
      setPrototypeOf: function setPrototypeOf(target, proto) {
        setProto.check(target, proto);
        try {
          setProto.set(target, proto);
          return true;
        } catch (e) {
          return false;
        }
      }
    });
    
    },{"./_export":104,"./_set-proto":170}],295:[function(require,module,exports){
    // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
    var dP = require('./_object-dp');
    var gOPD = require('./_object-gopd');
    var getPrototypeOf = require('./_object-gpo');
    var has = require('./_has');
    var $export = require('./_export');
    var createDesc = require('./_property-desc');
    var anObject = require('./_an-object');
    var isObject = require('./_is-object');
    
    function set(target, propertyKey, V /* , receiver */) {
      var receiver = arguments.length < 4 ? target : arguments[3];
      var ownDesc = gOPD.f(anObject(target), propertyKey);
      var existingDescriptor, proto;
      if (!ownDesc) {
        if (isObject(proto = getPrototypeOf(target))) {
          return set(proto, propertyKey, V, receiver);
        }
        ownDesc = createDesc(0);
      }
      if (has(ownDesc, 'value')) {
        if (ownDesc.writable === false || !isObject(receiver)) return false;
        if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
          if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
          existingDescriptor.value = V;
          dP.f(receiver, propertyKey, existingDescriptor);
        } else dP.f(receiver, propertyKey, createDesc(0, V));
        return true;
      }
      return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
    }
    
    $export($export.S, 'Reflect', { set: set });
    
    },{"./_an-object":78,"./_export":104,"./_has":113,"./_is-object":123,"./_object-dp":143,"./_object-gopd":146,"./_object-gpo":150,"./_property-desc":161}],296:[function(require,module,exports){
    var global = require('./_global');
    var inheritIfRequired = require('./_inherit-if-required');
    var dP = require('./_object-dp').f;
    var gOPN = require('./_object-gopn').f;
    var isRegExp = require('./_is-regexp');
    var $flags = require('./_flags');
    var $RegExp = global.RegExp;
    var Base = $RegExp;
    var proto = $RegExp.prototype;
    var re1 = /a/g;
    var re2 = /a/g;
    // "new" creates a new object, old webkit buggy here
    var CORRECT_NEW = new $RegExp(re1) !== re1;
    
    if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
      re2[require('./_wks')('match')] = false;
      // RegExp constructor can alter flags and IsRegExp works correct with @@match
      return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
    }))) {
      $RegExp = function RegExp(p, f) {
        var tiRE = this instanceof $RegExp;
        var piRE = isRegExp(p);
        var fiU = f === undefined;
        return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
          : inheritIfRequired(CORRECT_NEW
            ? new Base(piRE && !fiU ? p.source : p, f)
            : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
          , tiRE ? this : proto, $RegExp);
      };
      var proxy = function (key) {
        key in $RegExp || dP($RegExp, key, {
          configurable: true,
          get: function () { return Base[key]; },
          set: function (it) { Base[key] = it; }
        });
      };
      for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
      proto.constructor = $RegExp;
      $RegExp.prototype = proto;
      require('./_redefine')(global, 'RegExp', $RegExp);
    }
    
    require('./_set-species')('RegExp');
    
    },{"./_descriptors":100,"./_fails":106,"./_flags":108,"./_global":112,"./_inherit-if-required":117,"./_is-regexp":124,"./_object-dp":143,"./_object-gopn":148,"./_redefine":163,"./_set-species":171,"./_wks":200}],297:[function(require,module,exports){
    'use strict';
    var regexpExec = require('./_regexp-exec');
    require('./_export')({
      target: 'RegExp',
      proto: true,
      forced: regexpExec !== /./.exec
    }, {
      exec: regexpExec
    });
    
    },{"./_export":104,"./_regexp-exec":165}],298:[function(require,module,exports){
    // 21.2.5.3 get RegExp.prototype.flags()
    if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
      configurable: true,
      get: require('./_flags')
    });
    
    },{"./_descriptors":100,"./_flags":108,"./_object-dp":143}],299:[function(require,module,exports){
    'use strict';
    
    var anObject = require('./_an-object');
    var toLength = require('./_to-length');
    var advanceStringIndex = require('./_advance-string-index');
    var regExpExec = require('./_regexp-exec-abstract');
    
    // @@match logic
    require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {
      return [
        // `String.prototype.match` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.match
        function match(regexp) {
          var O = defined(this);
          var fn = regexp == undefined ? undefined : regexp[MATCH];
          return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
        },
        // `RegExp.prototype[@@match]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
        function (regexp) {
          var res = maybeCallNative($match, regexp, this);
          if (res.done) return res.value;
          var rx = anObject(regexp);
          var S = String(this);
          if (!rx.global) return regExpExec(rx, S);
          var fullUnicode = rx.unicode;
          rx.lastIndex = 0;
          var A = [];
          var n = 0;
          var result;
          while ((result = regExpExec(rx, S)) !== null) {
            var matchStr = String(result[0]);
            A[n] = matchStr;
            if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            n++;
          }
          return n === 0 ? null : A;
        }
      ];
    });
    
    },{"./_advance-string-index":76,"./_an-object":78,"./_fix-re-wks":107,"./_regexp-exec-abstract":164,"./_to-length":189}],300:[function(require,module,exports){
    'use strict';
    
    var anObject = require('./_an-object');
    var toObject = require('./_to-object');
    var toLength = require('./_to-length');
    var toInteger = require('./_to-integer');
    var advanceStringIndex = require('./_advance-string-index');
    var regExpExec = require('./_regexp-exec-abstract');
    var max = Math.max;
    var min = Math.min;
    var floor = Math.floor;
    var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
    var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;
    
    var maybeToString = function (it) {
      return it === undefined ? it : String(it);
    };
    
    // @@replace logic
    require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
      return [
        // `String.prototype.replace` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.replace
        function replace(searchValue, replaceValue) {
          var O = defined(this);
          var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
          return fn !== undefined
            ? fn.call(searchValue, O, replaceValue)
            : $replace.call(String(O), searchValue, replaceValue);
        },
        // `RegExp.prototype[@@replace]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
        function (regexp, replaceValue) {
          var res = maybeCallNative($replace, regexp, this, replaceValue);
          if (res.done) return res.value;
    
          var rx = anObject(regexp);
          var S = String(this);
          var functionalReplace = typeof replaceValue === 'function';
          if (!functionalReplace) replaceValue = String(replaceValue);
          var global = rx.global;
          if (global) {
            var fullUnicode = rx.unicode;
            rx.lastIndex = 0;
          }
          var results = [];
          while (true) {
            var result = regExpExec(rx, S);
            if (result === null) break;
            results.push(result);
            if (!global) break;
            var matchStr = String(result[0]);
            if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
          }
          var accumulatedResult = '';
          var nextSourcePosition = 0;
          for (var i = 0; i < results.length; i++) {
            result = results[i];
            var matched = String(result[0]);
            var position = max(min(toInteger(result.index), S.length), 0);
            var captures = [];
            // NOTE: This is equivalent to
            //   captures = result.slice(1).map(maybeToString)
            // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
            // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
            // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
            for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
            var namedCaptures = result.groups;
            if (functionalReplace) {
              var replacerArgs = [matched].concat(captures, position, S);
              if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
              var replacement = String(replaceValue.apply(undefined, replacerArgs));
            } else {
              replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
            }
            if (position >= nextSourcePosition) {
              accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
              nextSourcePosition = position + matched.length;
            }
          }
          return accumulatedResult + S.slice(nextSourcePosition);
        }
      ];
    
        // https://tc39.github.io/ecma262/#sec-getsubstitution
      function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
        var tailPos = position + matched.length;
        var m = captures.length;
        var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
        if (namedCaptures !== undefined) {
          namedCaptures = toObject(namedCaptures);
          symbols = SUBSTITUTION_SYMBOLS;
        }
        return $replace.call(replacement, symbols, function (match, ch) {
          var capture;
          switch (ch.charAt(0)) {
            case '$': return '$';
            case '&': return matched;
            case '`': return str.slice(0, position);
            case "'": return str.slice(tailPos);
            case '<':
              capture = namedCaptures[ch.slice(1, -1)];
              break;
            default: // \d\d?
              var n = +ch;
              if (n === 0) return match;
              if (n > m) {
                var f = floor(n / 10);
                if (f === 0) return match;
                if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                return match;
              }
              capture = captures[n - 1];
          }
          return capture === undefined ? '' : capture;
        });
      }
    });
    
    },{"./_advance-string-index":76,"./_an-object":78,"./_fix-re-wks":107,"./_regexp-exec-abstract":164,"./_to-integer":187,"./_to-length":189,"./_to-object":190}],301:[function(require,module,exports){
    'use strict';
    
    var anObject = require('./_an-object');
    var sameValue = require('./_same-value');
    var regExpExec = require('./_regexp-exec-abstract');
    
    // @@search logic
    require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
      return [
        // `String.prototype.search` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.search
        function search(regexp) {
          var O = defined(this);
          var fn = regexp == undefined ? undefined : regexp[SEARCH];
          return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
        },
        // `RegExp.prototype[@@search]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
        function (regexp) {
          var res = maybeCallNative($search, regexp, this);
          if (res.done) return res.value;
          var rx = anObject(regexp);
          var S = String(this);
          var previousLastIndex = rx.lastIndex;
          if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
          var result = regExpExec(rx, S);
          if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
          return result === null ? -1 : result.index;
        }
      ];
    });
    
    },{"./_an-object":78,"./_fix-re-wks":107,"./_regexp-exec-abstract":164,"./_same-value":167}],302:[function(require,module,exports){
    'use strict';
    
    var isRegExp = require('./_is-regexp');
    var anObject = require('./_an-object');
    var speciesConstructor = require('./_species-constructor');
    var advanceStringIndex = require('./_advance-string-index');
    var toLength = require('./_to-length');
    var callRegExpExec = require('./_regexp-exec-abstract');
    var regexpExec = require('./_regexp-exec');
    var fails = require('./_fails');
    var $min = Math.min;
    var $push = [].push;
    var $SPLIT = 'split';
    var LENGTH = 'length';
    var LAST_INDEX = 'lastIndex';
    var MAX_UINT32 = 0xffffffff;
    
    // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
    var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });
    
    // @@split logic
    require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
      var internalSplit;
      if (
        'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
        'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
        'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
        '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
        '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
        ''[$SPLIT](/.?/)[LENGTH]
      ) {
        // based on es5-shim implementation, need to rework it
        internalSplit = function (separator, limit) {
          var string = String(this);
          if (separator === undefined && limit === 0) return [];
          // If `separator` is not a regex, use native split
          if (!isRegExp(separator)) return $split.call(string, separator, limit);
          var output = [];
          var flags = (separator.ignoreCase ? 'i' : '') +
                      (separator.multiline ? 'm' : '') +
                      (separator.unicode ? 'u' : '') +
                      (separator.sticky ? 'y' : '');
          var lastLastIndex = 0;
          var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
          // Make `global` and avoid `lastIndex` issues by working with a copy
          var separatorCopy = new RegExp(separator.source, flags + 'g');
          var match, lastIndex, lastLength;
          while (match = regexpExec.call(separatorCopy, string)) {
            lastIndex = separatorCopy[LAST_INDEX];
            if (lastIndex > lastLastIndex) {
              output.push(string.slice(lastLastIndex, match.index));
              if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
              lastLength = match[0][LENGTH];
              lastLastIndex = lastIndex;
              if (output[LENGTH] >= splitLimit) break;
            }
            if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
          }
          if (lastLastIndex === string[LENGTH]) {
            if (lastLength || !separatorCopy.test('')) output.push('');
          } else output.push(string.slice(lastLastIndex));
          return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
        };
      // Chakra, V8
      } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
        internalSplit = function (separator, limit) {
          return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
        };
      } else {
        internalSplit = $split;
      }
    
      return [
        // `String.prototype.split` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.split
        function split(separator, limit) {
          var O = defined(this);
          var splitter = separator == undefined ? undefined : separator[SPLIT];
          return splitter !== undefined
            ? splitter.call(separator, O, limit)
            : internalSplit.call(String(O), separator, limit);
        },
        // `RegExp.prototype[@@split]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
        //
        // NOTE: This cannot be properly polyfilled in engines that don't support
        // the 'y' flag.
        function (regexp, limit) {
          var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
          if (res.done) return res.value;
    
          var rx = anObject(regexp);
          var S = String(this);
          var C = speciesConstructor(rx, RegExp);
    
          var unicodeMatching = rx.unicode;
          var flags = (rx.ignoreCase ? 'i' : '') +
                      (rx.multiline ? 'm' : '') +
                      (rx.unicode ? 'u' : '') +
                      (SUPPORTS_Y ? 'y' : 'g');
    
          // ^(? + rx + ) is needed, in combination with some S slicing, to
          // simulate the 'y' flag.
          var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
          var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
          if (lim === 0) return [];
          if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
          var p = 0;
          var q = 0;
          var A = [];
          while (q < S.length) {
            splitter.lastIndex = SUPPORTS_Y ? q : 0;
            var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
            var e;
            if (
              z === null ||
              (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
            ) {
              q = advanceStringIndex(S, q, unicodeMatching);
            } else {
              A.push(S.slice(p, q));
              if (A.length === lim) return A;
              for (var i = 1; i <= z.length - 1; i++) {
                A.push(z[i]);
                if (A.length === lim) return A;
              }
              q = p = e;
            }
          }
          A.push(S.slice(p));
          return A;
        }
      ];
    });
    
    },{"./_advance-string-index":76,"./_an-object":78,"./_fails":106,"./_fix-re-wks":107,"./_is-regexp":124,"./_regexp-exec":165,"./_regexp-exec-abstract":164,"./_species-constructor":175,"./_to-length":189}],303:[function(require,module,exports){
    'use strict';
    require('./es6.regexp.flags');
    var anObject = require('./_an-object');
    var $flags = require('./_flags');
    var DESCRIPTORS = require('./_descriptors');
    var TO_STRING = 'toString';
    var $toString = /./[TO_STRING];
    
    var define = function (fn) {
      require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
    };
    
    // 21.2.5.14 RegExp.prototype.toString()
    if (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
      define(function toString() {
        var R = anObject(this);
        return '/'.concat(R.source, '/',
          'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
      });
    // FF44- RegExp#toString has a wrong name
    } else if ($toString.name != TO_STRING) {
      define(function toString() {
        return $toString.call(this);
      });
    }
    
    },{"./_an-object":78,"./_descriptors":100,"./_fails":106,"./_flags":108,"./_redefine":163,"./es6.regexp.flags":298}],304:[function(require,module,exports){
    'use strict';
    var strong = require('./_collection-strong');
    var validate = require('./_validate-collection');
    var SET = 'Set';
    
    // 23.2 Set Objects
    module.exports = require('./_collection')(SET, function (get) {
      return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
    }, {
      // 23.2.3.1 Set.prototype.add(value)
      add: function add(value) {
        return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
      }
    }, strong);
    
    },{"./_collection":93,"./_collection-strong":90,"./_validate-collection":197}],305:[function(require,module,exports){
    'use strict';
    // B.2.3.2 String.prototype.anchor(name)
    require('./_string-html')('anchor', function (createHTML) {
      return function anchor(name) {
        return createHTML(this, 'a', 'name', name);
      };
    });
    
    },{"./_string-html":179}],306:[function(require,module,exports){
    'use strict';
    // B.2.3.3 String.prototype.big()
    require('./_string-html')('big', function (createHTML) {
      return function big() {
        return createHTML(this, 'big', '', '');
      };
    });
    
    },{"./_string-html":179}],307:[function(require,module,exports){
    'use strict';
    // B.2.3.4 String.prototype.blink()
    require('./_string-html')('blink', function (createHTML) {
      return function blink() {
        return createHTML(this, 'blink', '', '');
      };
    });
    
    },{"./_string-html":179}],308:[function(require,module,exports){
    'use strict';
    // B.2.3.5 String.prototype.bold()
    require('./_string-html')('bold', function (createHTML) {
      return function bold() {
        return createHTML(this, 'b', '', '');
      };
    });
    
    },{"./_string-html":179}],309:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var $at = require('./_string-at')(false);
    $export($export.P, 'String', {
      // 21.1.3.3 String.prototype.codePointAt(pos)
      codePointAt: function codePointAt(pos) {
        return $at(this, pos);
      }
    });
    
    },{"./_export":104,"./_string-at":177}],310:[function(require,module,exports){
    // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
    'use strict';
    var $export = require('./_export');
    var toLength = require('./_to-length');
    var context = require('./_string-context');
    var ENDS_WITH = 'endsWith';
    var $endsWith = ''[ENDS_WITH];
    
    $export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
      endsWith: function endsWith(searchString /* , endPosition = @length */) {
        var that = context(this, searchString, ENDS_WITH);
        var endPosition = arguments.length > 1 ? arguments[1] : undefined;
        var len = toLength(that.length);
        var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
        var search = String(searchString);
        return $endsWith
          ? $endsWith.call(that, search, end)
          : that.slice(end - search.length, end) === search;
      }
    });
    
    },{"./_export":104,"./_fails-is-regexp":105,"./_string-context":178,"./_to-length":189}],311:[function(require,module,exports){
    'use strict';
    // B.2.3.6 String.prototype.fixed()
    require('./_string-html')('fixed', function (createHTML) {
      return function fixed() {
        return createHTML(this, 'tt', '', '');
      };
    });
    
    },{"./_string-html":179}],312:[function(require,module,exports){
    'use strict';
    // B.2.3.7 String.prototype.fontcolor(color)
    require('./_string-html')('fontcolor', function (createHTML) {
      return function fontcolor(color) {
        return createHTML(this, 'font', 'color', color);
      };
    });
    
    },{"./_string-html":179}],313:[function(require,module,exports){
    'use strict';
    // B.2.3.8 String.prototype.fontsize(size)
    require('./_string-html')('fontsize', function (createHTML) {
      return function fontsize(size) {
        return createHTML(this, 'font', 'size', size);
      };
    });
    
    },{"./_string-html":179}],314:[function(require,module,exports){
    var $export = require('./_export');
    var toAbsoluteIndex = require('./_to-absolute-index');
    var fromCharCode = String.fromCharCode;
    var $fromCodePoint = String.fromCodePoint;
    
    // length should be 1, old FF problem
    $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
      // 21.1.2.2 String.fromCodePoint(...codePoints)
      fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
        var res = [];
        var aLen = arguments.length;
        var i = 0;
        var code;
        while (aLen > i) {
          code = +arguments[i++];
          if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
          res.push(code < 0x10000
            ? fromCharCode(code)
            : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
          );
        } return res.join('');
      }
    });
    
    },{"./_export":104,"./_to-absolute-index":185}],315:[function(require,module,exports){
    // 21.1.3.7 String.prototype.includes(searchString, position = 0)
    'use strict';
    var $export = require('./_export');
    var context = require('./_string-context');
    var INCLUDES = 'includes';
    
    $export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
      includes: function includes(searchString /* , position = 0 */) {
        return !!~context(this, searchString, INCLUDES)
          .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    
    },{"./_export":104,"./_fails-is-regexp":105,"./_string-context":178}],316:[function(require,module,exports){
    'use strict';
    // B.2.3.9 String.prototype.italics()
    require('./_string-html')('italics', function (createHTML) {
      return function italics() {
        return createHTML(this, 'i', '', '');
      };
    });
    
    },{"./_string-html":179}],317:[function(require,module,exports){
    'use strict';
    var $at = require('./_string-at')(true);
    
    // 21.1.3.27 String.prototype[@@iterator]()
    require('./_iter-define')(String, 'String', function (iterated) {
      this._t = String(iterated); // target
      this._i = 0;                // next index
    // 21.1.5.2.1 %StringIteratorPrototype%.next()
    }, function () {
      var O = this._t;
      var index = this._i;
      var point;
      if (index >= O.length) return { value: undefined, done: true };
      point = $at(O, index);
      this._i += point.length;
      return { value: point, done: false };
    });
    
    },{"./_iter-define":127,"./_string-at":177}],318:[function(require,module,exports){
    'use strict';
    // B.2.3.10 String.prototype.link(url)
    require('./_string-html')('link', function (createHTML) {
      return function link(url) {
        return createHTML(this, 'a', 'href', url);
      };
    });
    
    },{"./_string-html":179}],319:[function(require,module,exports){
    var $export = require('./_export');
    var toIObject = require('./_to-iobject');
    var toLength = require('./_to-length');
    
    $export($export.S, 'String', {
      // 21.1.2.4 String.raw(callSite, ...substitutions)
      raw: function raw(callSite) {
        var tpl = toIObject(callSite.raw);
        var len = toLength(tpl.length);
        var aLen = arguments.length;
        var res = [];
        var i = 0;
        while (len > i) {
          res.push(String(tpl[i++]));
          if (i < aLen) res.push(String(arguments[i]));
        } return res.join('');
      }
    });
    
    },{"./_export":104,"./_to-iobject":188,"./_to-length":189}],320:[function(require,module,exports){
    var $export = require('./_export');
    
    $export($export.P, 'String', {
      // 21.1.3.13 String.prototype.repeat(count)
      repeat: require('./_string-repeat')
    });
    
    },{"./_export":104,"./_string-repeat":181}],321:[function(require,module,exports){
    'use strict';
    // B.2.3.11 String.prototype.small()
    require('./_string-html')('small', function (createHTML) {
      return function small() {
        return createHTML(this, 'small', '', '');
      };
    });
    
    },{"./_string-html":179}],322:[function(require,module,exports){
    // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
    'use strict';
    var $export = require('./_export');
    var toLength = require('./_to-length');
    var context = require('./_string-context');
    var STARTS_WITH = 'startsWith';
    var $startsWith = ''[STARTS_WITH];
    
    $export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
      startsWith: function startsWith(searchString /* , position = 0 */) {
        var that = context(this, searchString, STARTS_WITH);
        var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
        var search = String(searchString);
        return $startsWith
          ? $startsWith.call(that, search, index)
          : that.slice(index, index + search.length) === search;
      }
    });
    
    },{"./_export":104,"./_fails-is-regexp":105,"./_string-context":178,"./_to-length":189}],323:[function(require,module,exports){
    'use strict';
    // B.2.3.12 String.prototype.strike()
    require('./_string-html')('strike', function (createHTML) {
      return function strike() {
        return createHTML(this, 'strike', '', '');
      };
    });
    
    },{"./_string-html":179}],324:[function(require,module,exports){
    'use strict';
    // B.2.3.13 String.prototype.sub()
    require('./_string-html')('sub', function (createHTML) {
      return function sub() {
        return createHTML(this, 'sub', '', '');
      };
    });
    
    },{"./_string-html":179}],325:[function(require,module,exports){
    'use strict';
    // B.2.3.14 String.prototype.sup()
    require('./_string-html')('sup', function (createHTML) {
      return function sup() {
        return createHTML(this, 'sup', '', '');
      };
    });
    
    },{"./_string-html":179}],326:[function(require,module,exports){
    'use strict';
    // 21.1.3.25 String.prototype.trim()
    require('./_string-trim')('trim', function ($trim) {
      return function trim() {
        return $trim(this, 3);
      };
    });
    
    },{"./_string-trim":182}],327:[function(require,module,exports){
    'use strict';
    // ECMAScript 6 symbols shim
    var global = require('./_global');
    var has = require('./_has');
    var DESCRIPTORS = require('./_descriptors');
    var $export = require('./_export');
    var redefine = require('./_redefine');
    var META = require('./_meta').KEY;
    var $fails = require('./_fails');
    var shared = require('./_shared');
    var setToStringTag = require('./_set-to-string-tag');
    var uid = require('./_uid');
    var wks = require('./_wks');
    var wksExt = require('./_wks-ext');
    var wksDefine = require('./_wks-define');
    var enumKeys = require('./_enum-keys');
    var isArray = require('./_is-array');
    var anObject = require('./_an-object');
    var isObject = require('./_is-object');
    var toObject = require('./_to-object');
    var toIObject = require('./_to-iobject');
    var toPrimitive = require('./_to-primitive');
    var createDesc = require('./_property-desc');
    var _create = require('./_object-create');
    var gOPNExt = require('./_object-gopn-ext');
    var $GOPD = require('./_object-gopd');
    var $GOPS = require('./_object-gops');
    var $DP = require('./_object-dp');
    var $keys = require('./_object-keys');
    var gOPD = $GOPD.f;
    var dP = $DP.f;
    var gOPN = gOPNExt.f;
    var $Symbol = global.Symbol;
    var $JSON = global.JSON;
    var _stringify = $JSON && $JSON.stringify;
    var PROTOTYPE = 'prototype';
    var HIDDEN = wks('_hidden');
    var TO_PRIMITIVE = wks('toPrimitive');
    var isEnum = {}.propertyIsEnumerable;
    var SymbolRegistry = shared('symbol-registry');
    var AllSymbols = shared('symbols');
    var OPSymbols = shared('op-symbols');
    var ObjectProto = Object[PROTOTYPE];
    var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
    var QObject = global.QObject;
    // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
    var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
    
    // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
    var setSymbolDesc = DESCRIPTORS && $fails(function () {
      return _create(dP({}, 'a', {
        get: function () { return dP(this, 'a', { value: 7 }).a; }
      })).a != 7;
    }) ? function (it, key, D) {
      var protoDesc = gOPD(ObjectProto, key);
      if (protoDesc) delete ObjectProto[key];
      dP(it, key, D);
      if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
    } : dP;
    
    var wrap = function (tag) {
      var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
      sym._k = tag;
      return sym;
    };
    
    var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
      return typeof it == 'symbol';
    } : function (it) {
      return it instanceof $Symbol;
    };
    
    var $defineProperty = function defineProperty(it, key, D) {
      if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
      anObject(it);
      key = toPrimitive(key, true);
      anObject(D);
      if (has(AllSymbols, key)) {
        if (!D.enumerable) {
          if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
          it[HIDDEN][key] = true;
        } else {
          if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
          D = _create(D, { enumerable: createDesc(0, false) });
        } return setSymbolDesc(it, key, D);
      } return dP(it, key, D);
    };
    var $defineProperties = function defineProperties(it, P) {
      anObject(it);
      var keys = enumKeys(P = toIObject(P));
      var i = 0;
      var l = keys.length;
      var key;
      while (l > i) $defineProperty(it, key = keys[i++], P[key]);
      return it;
    };
    var $create = function create(it, P) {
      return P === undefined ? _create(it) : $defineProperties(_create(it), P);
    };
    var $propertyIsEnumerable = function propertyIsEnumerable(key) {
      var E = isEnum.call(this, key = toPrimitive(key, true));
      if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
      return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
    };
    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
      it = toIObject(it);
      key = toPrimitive(key, true);
      if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
      var D = gOPD(it, key);
      if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
      return D;
    };
    var $getOwnPropertyNames = function getOwnPropertyNames(it) {
      var names = gOPN(toIObject(it));
      var result = [];
      var i = 0;
      var key;
      while (names.length > i) {
        if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
      } return result;
    };
    var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
      var IS_OP = it === ObjectProto;
      var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
      var result = [];
      var i = 0;
      var key;
      while (names.length > i) {
        if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
      } return result;
    };
    
    // 19.4.1.1 Symbol([description])
    if (!USE_NATIVE) {
      $Symbol = function Symbol() {
        if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
        var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
        var $set = function (value) {
          if (this === ObjectProto) $set.call(OPSymbols, value);
          if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
          setSymbolDesc(this, tag, createDesc(1, value));
        };
        if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
        return wrap(tag);
      };
      redefine($Symbol[PROTOTYPE], 'toString', function toString() {
        return this._k;
      });
    
      $GOPD.f = $getOwnPropertyDescriptor;
      $DP.f = $defineProperty;
      require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
      require('./_object-pie').f = $propertyIsEnumerable;
      $GOPS.f = $getOwnPropertySymbols;
    
      if (DESCRIPTORS && !require('./_library')) {
        redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
      }
    
      wksExt.f = function (name) {
        return wrap(wks(name));
      };
    }
    
    $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
    
    for (var es6Symbols = (
      // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
      'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
    ).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);
    
    for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);
    
    $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
      // 19.4.2.1 Symbol.for(key)
      'for': function (key) {
        return has(SymbolRegistry, key += '')
          ? SymbolRegistry[key]
          : SymbolRegistry[key] = $Symbol(key);
      },
      // 19.4.2.5 Symbol.keyFor(sym)
      keyFor: function keyFor(sym) {
        if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
        for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
      },
      useSetter: function () { setter = true; },
      useSimple: function () { setter = false; }
    });
    
    $export($export.S + $export.F * !USE_NATIVE, 'Object', {
      // 19.1.2.2 Object.create(O [, Properties])
      create: $create,
      // 19.1.2.4 Object.defineProperty(O, P, Attributes)
      defineProperty: $defineProperty,
      // 19.1.2.3 Object.defineProperties(O, Properties)
      defineProperties: $defineProperties,
      // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
      getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
      // 19.1.2.7 Object.getOwnPropertyNames(O)
      getOwnPropertyNames: $getOwnPropertyNames,
      // 19.1.2.8 Object.getOwnPropertySymbols(O)
      getOwnPropertySymbols: $getOwnPropertySymbols
    });
    
    // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
    // https://bugs.chromium.org/p/v8/issues/detail?id=3443
    var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });
    
    $export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
      getOwnPropertySymbols: function getOwnPropertySymbols(it) {
        return $GOPS.f(toObject(it));
      }
    });
    
    // 24.3.2 JSON.stringify(value [, replacer [, space]])
    $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
      var S = $Symbol();
      // MS Edge converts symbol values to JSON as {}
      // WebKit converts symbol values to JSON as null
      // V8 throws on boxed symbols
      return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
    })), 'JSON', {
      stringify: function stringify(it) {
        var args = [it];
        var i = 1;
        var replacer, $replacer;
        while (arguments.length > i) args.push(arguments[i++]);
        $replacer = replacer = args[1];
        if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
        if (!isArray(replacer)) replacer = function (key, value) {
          if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
          if (!isSymbol(value)) return value;
        };
        args[1] = replacer;
        return _stringify.apply($JSON, args);
      }
    });
    
    // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
    $Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
    // 19.4.3.5 Symbol.prototype[@@toStringTag]
    setToStringTag($Symbol, 'Symbol');
    // 20.2.1.9 Math[@@toStringTag]
    setToStringTag(Math, 'Math', true);
    // 24.3.3 JSON[@@toStringTag]
    setToStringTag(global.JSON, 'JSON', true);
    
    },{"./_an-object":78,"./_descriptors":100,"./_enum-keys":103,"./_export":104,"./_fails":106,"./_global":112,"./_has":113,"./_hide":114,"./_is-array":121,"./_is-object":123,"./_library":131,"./_meta":137,"./_object-create":142,"./_object-dp":143,"./_object-gopd":146,"./_object-gopn":148,"./_object-gopn-ext":147,"./_object-gops":149,"./_object-keys":152,"./_object-pie":153,"./_property-desc":161,"./_redefine":163,"./_set-to-string-tag":172,"./_shared":174,"./_to-iobject":188,"./_to-object":190,"./_to-primitive":191,"./_uid":195,"./_wks":200,"./_wks-define":198,"./_wks-ext":199}],328:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var $typed = require('./_typed');
    var buffer = require('./_typed-buffer');
    var anObject = require('./_an-object');
    var toAbsoluteIndex = require('./_to-absolute-index');
    var toLength = require('./_to-length');
    var isObject = require('./_is-object');
    var ArrayBuffer = require('./_global').ArrayBuffer;
    var speciesConstructor = require('./_species-constructor');
    var $ArrayBuffer = buffer.ArrayBuffer;
    var $DataView = buffer.DataView;
    var $isView = $typed.ABV && ArrayBuffer.isView;
    var $slice = $ArrayBuffer.prototype.slice;
    var VIEW = $typed.VIEW;
    var ARRAY_BUFFER = 'ArrayBuffer';
    
    $export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });
    
    $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
      // 24.1.3.1 ArrayBuffer.isView(arg)
      isView: function isView(it) {
        return $isView && $isView(it) || isObject(it) && VIEW in it;
      }
    });
    
    $export($export.P + $export.U + $export.F * require('./_fails')(function () {
      return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
    }), ARRAY_BUFFER, {
      // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
      slice: function slice(start, end) {
        if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
        var len = anObject(this).byteLength;
        var first = toAbsoluteIndex(start, len);
        var fin = toAbsoluteIndex(end === undefined ? len : end, len);
        var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
        var viewS = new $DataView(this);
        var viewT = new $DataView(result);
        var index = 0;
        while (first < fin) {
          viewT.setUint8(index++, viewS.getUint8(first++));
        } return result;
      }
    });
    
    require('./_set-species')(ARRAY_BUFFER);
    
    },{"./_an-object":78,"./_export":104,"./_fails":106,"./_global":112,"./_is-object":123,"./_set-species":171,"./_species-constructor":175,"./_to-absolute-index":185,"./_to-length":189,"./_typed":194,"./_typed-buffer":193}],329:[function(require,module,exports){
    var $export = require('./_export');
    $export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
      DataView: require('./_typed-buffer').DataView
    });
    
    },{"./_export":104,"./_typed":194,"./_typed-buffer":193}],330:[function(require,module,exports){
    require('./_typed-array')('Float32', 4, function (init) {
      return function Float32Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    },{"./_typed-array":192}],331:[function(require,module,exports){
    require('./_typed-array')('Float64', 8, function (init) {
      return function Float64Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    },{"./_typed-array":192}],332:[function(require,module,exports){
    require('./_typed-array')('Int16', 2, function (init) {
      return function Int16Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    },{"./_typed-array":192}],333:[function(require,module,exports){
    require('./_typed-array')('Int32', 4, function (init) {
      return function Int32Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    },{"./_typed-array":192}],334:[function(require,module,exports){
    require('./_typed-array')('Int8', 1, function (init) {
      return function Int8Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    },{"./_typed-array":192}],335:[function(require,module,exports){
    require('./_typed-array')('Uint16', 2, function (init) {
      return function Uint16Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    },{"./_typed-array":192}],336:[function(require,module,exports){
    require('./_typed-array')('Uint32', 4, function (init) {
      return function Uint32Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    },{"./_typed-array":192}],337:[function(require,module,exports){
    require('./_typed-array')('Uint8', 1, function (init) {
      return function Uint8Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    },{"./_typed-array":192}],338:[function(require,module,exports){
    require('./_typed-array')('Uint8', 1, function (init) {
      return function Uint8ClampedArray(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    }, true);
    
    },{"./_typed-array":192}],339:[function(require,module,exports){
    'use strict';
    var global = require('./_global');
    var each = require('./_array-methods')(0);
    var redefine = require('./_redefine');
    var meta = require('./_meta');
    var assign = require('./_object-assign');
    var weak = require('./_collection-weak');
    var isObject = require('./_is-object');
    var validate = require('./_validate-collection');
    var NATIVE_WEAK_MAP = require('./_validate-collection');
    var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
    var WEAK_MAP = 'WeakMap';
    var getWeak = meta.getWeak;
    var isExtensible = Object.isExtensible;
    var uncaughtFrozenStore = weak.ufstore;
    var InternalMap;
    
    var wrapper = function (get) {
      return function WeakMap() {
        return get(this, arguments.length > 0 ? arguments[0] : undefined);
      };
    };
    
    var methods = {
      // 23.3.3.3 WeakMap.prototype.get(key)
      get: function get(key) {
        if (isObject(key)) {
          var data = getWeak(key);
          if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
          return data ? data[this._i] : undefined;
        }
      },
      // 23.3.3.5 WeakMap.prototype.set(key, value)
      set: function set(key, value) {
        return weak.def(validate(this, WEAK_MAP), key, value);
      }
    };
    
    // 23.3 WeakMap Objects
    var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);
    
    // IE11 WeakMap frozen keys fix
    if (NATIVE_WEAK_MAP && IS_IE11) {
      InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
      assign(InternalMap.prototype, methods);
      meta.NEED = true;
      each(['delete', 'has', 'get', 'set'], function (key) {
        var proto = $WeakMap.prototype;
        var method = proto[key];
        redefine(proto, key, function (a, b) {
          // store frozen objects on internal weakmap shim
          if (isObject(a) && !isExtensible(a)) {
            if (!this._f) this._f = new InternalMap();
            var result = this._f[key](a, b);
            return key == 'set' ? this : result;
          // store all the rest on native weakmap
          } return method.call(this, a, b);
        });
      });
    }
    
    },{"./_array-methods":83,"./_collection":93,"./_collection-weak":92,"./_global":112,"./_is-object":123,"./_meta":137,"./_object-assign":141,"./_redefine":163,"./_validate-collection":197}],340:[function(require,module,exports){
    'use strict';
    var weak = require('./_collection-weak');
    var validate = require('./_validate-collection');
    var WEAK_SET = 'WeakSet';
    
    // 23.4 WeakSet Objects
    require('./_collection')(WEAK_SET, function (get) {
      return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
    }, {
      // 23.4.3.1 WeakSet.prototype.add(value)
      add: function add(value) {
        return weak.def(validate(this, WEAK_SET), value, true);
      }
    }, weak, false, true);
    
    },{"./_collection":93,"./_collection-weak":92,"./_validate-collection":197}],341:[function(require,module,exports){
    'use strict';
    // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
    var $export = require('./_export');
    var flattenIntoArray = require('./_flatten-into-array');
    var toObject = require('./_to-object');
    var toLength = require('./_to-length');
    var aFunction = require('./_a-function');
    var arraySpeciesCreate = require('./_array-species-create');
    
    $export($export.P, 'Array', {
      flatMap: function flatMap(callbackfn /* , thisArg */) {
        var O = toObject(this);
        var sourceLen, A;
        aFunction(callbackfn);
        sourceLen = toLength(O.length);
        A = arraySpeciesCreate(O, 0);
        flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
        return A;
      }
    });
    
    require('./_add-to-unscopables')('flatMap');
    
    },{"./_a-function":73,"./_add-to-unscopables":75,"./_array-species-create":86,"./_export":104,"./_flatten-into-array":109,"./_to-length":189,"./_to-object":190}],342:[function(require,module,exports){
    'use strict';
    // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
    var $export = require('./_export');
    var flattenIntoArray = require('./_flatten-into-array');
    var toObject = require('./_to-object');
    var toLength = require('./_to-length');
    var toInteger = require('./_to-integer');
    var arraySpeciesCreate = require('./_array-species-create');
    
    $export($export.P, 'Array', {
      flatten: function flatten(/* depthArg = 1 */) {
        var depthArg = arguments[0];
        var O = toObject(this);
        var sourceLen = toLength(O.length);
        var A = arraySpeciesCreate(O, 0);
        flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
        return A;
      }
    });
    
    require('./_add-to-unscopables')('flatten');
    
    },{"./_add-to-unscopables":75,"./_array-species-create":86,"./_export":104,"./_flatten-into-array":109,"./_to-integer":187,"./_to-length":189,"./_to-object":190}],343:[function(require,module,exports){
    'use strict';
    // https://github.com/tc39/Array.prototype.includes
    var $export = require('./_export');
    var $includes = require('./_array-includes')(true);
    
    $export($export.P, 'Array', {
      includes: function includes(el /* , fromIndex = 0 */) {
        return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    
    require('./_add-to-unscopables')('includes');
    
    },{"./_add-to-unscopables":75,"./_array-includes":82,"./_export":104}],344:[function(require,module,exports){
    // https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
    var $export = require('./_export');
    var microtask = require('./_microtask')();
    var process = require('./_global').process;
    var isNode = require('./_cof')(process) == 'process';
    
    $export($export.G, {
      asap: function asap(fn) {
        var domain = isNode && process.domain;
        microtask(domain ? domain.bind(fn) : fn);
      }
    });
    
    },{"./_cof":89,"./_export":104,"./_global":112,"./_microtask":139}],345:[function(require,module,exports){
    // https://github.com/ljharb/proposal-is-error
    var $export = require('./_export');
    var cof = require('./_cof');
    
    $export($export.S, 'Error', {
      isError: function isError(it) {
        return cof(it) === 'Error';
      }
    });
    
    },{"./_cof":89,"./_export":104}],346:[function(require,module,exports){
    // https://github.com/tc39/proposal-global
    var $export = require('./_export');
    
    $export($export.G, { global: require('./_global') });
    
    },{"./_export":104,"./_global":112}],347:[function(require,module,exports){
    // https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
    require('./_set-collection-from')('Map');
    
    },{"./_set-collection-from":168}],348:[function(require,module,exports){
    // https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
    require('./_set-collection-of')('Map');
    
    },{"./_set-collection-of":169}],349:[function(require,module,exports){
    // https://github.com/DavidBruant/Map-Set.prototype.toJSON
    var $export = require('./_export');
    
    $export($export.P + $export.R, 'Map', { toJSON: require('./_collection-to-json')('Map') });
    
    },{"./_collection-to-json":91,"./_export":104}],350:[function(require,module,exports){
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = require('./_export');
    
    $export($export.S, 'Math', {
      clamp: function clamp(x, lower, upper) {
        return Math.min(upper, Math.max(lower, x));
      }
    });
    
    },{"./_export":104}],351:[function(require,module,exports){
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = require('./_export');
    
    $export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });
    
    },{"./_export":104}],352:[function(require,module,exports){
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = require('./_export');
    var RAD_PER_DEG = 180 / Math.PI;
    
    $export($export.S, 'Math', {
      degrees: function degrees(radians) {
        return radians * RAD_PER_DEG;
      }
    });
    
    },{"./_export":104}],353:[function(require,module,exports){
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = require('./_export');
    var scale = require('./_math-scale');
    var fround = require('./_math-fround');
    
    $export($export.S, 'Math', {
      fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
        return fround(scale(x, inLow, inHigh, outLow, outHigh));
      }
    });
    
    },{"./_export":104,"./_math-fround":133,"./_math-scale":135}],354:[function(require,module,exports){
    // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export = require('./_export');
    
    $export($export.S, 'Math', {
      iaddh: function iaddh(x0, x1, y0, y1) {
        var $x0 = x0 >>> 0;
        var $x1 = x1 >>> 0;
        var $y0 = y0 >>> 0;
        return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
      }
    });
    
    },{"./_export":104}],355:[function(require,module,exports){
    // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export = require('./_export');
    
    $export($export.S, 'Math', {
      imulh: function imulh(u, v) {
        var UINT16 = 0xffff;
        var $u = +u;
        var $v = +v;
        var u0 = $u & UINT16;
        var v0 = $v & UINT16;
        var u1 = $u >> 16;
        var v1 = $v >> 16;
        var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
        return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
      }
    });
    
    },{"./_export":104}],356:[function(require,module,exports){
    // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export = require('./_export');
    
    $export($export.S, 'Math', {
      isubh: function isubh(x0, x1, y0, y1) {
        var $x0 = x0 >>> 0;
        var $x1 = x1 >>> 0;
        var $y0 = y0 >>> 0;
        return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
      }
    });
    
    },{"./_export":104}],357:[function(require,module,exports){
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = require('./_export');
    
    $export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });
    
    },{"./_export":104}],358:[function(require,module,exports){
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = require('./_export');
    var DEG_PER_RAD = Math.PI / 180;
    
    $export($export.S, 'Math', {
      radians: function radians(degrees) {
        return degrees * DEG_PER_RAD;
      }
    });
    
    },{"./_export":104}],359:[function(require,module,exports){
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = require('./_export');
    
    $export($export.S, 'Math', { scale: require('./_math-scale') });
    
    },{"./_export":104,"./_math-scale":135}],360:[function(require,module,exports){
    // http://jfbastien.github.io/papers/Math.signbit.html
    var $export = require('./_export');
    
    $export($export.S, 'Math', { signbit: function signbit(x) {
      // eslint-disable-next-line no-self-compare
      return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
    } });
    
    },{"./_export":104}],361:[function(require,module,exports){
    // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export = require('./_export');
    
    $export($export.S, 'Math', {
      umulh: function umulh(u, v) {
        var UINT16 = 0xffff;
        var $u = +u;
        var $v = +v;
        var u0 = $u & UINT16;
        var v0 = $v & UINT16;
        var u1 = $u >>> 16;
        var v1 = $v >>> 16;
        var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
        return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
      }
    });
    
    },{"./_export":104}],362:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var toObject = require('./_to-object');
    var aFunction = require('./_a-function');
    var $defineProperty = require('./_object-dp');
    
    // B.2.2.2 Object.prototype.__defineGetter__(P, getter)
    require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
      __defineGetter__: function __defineGetter__(P, getter) {
        $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
      }
    });
    
    },{"./_a-function":73,"./_descriptors":100,"./_export":104,"./_object-dp":143,"./_object-forced-pam":145,"./_to-object":190}],363:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var toObject = require('./_to-object');
    var aFunction = require('./_a-function');
    var $defineProperty = require('./_object-dp');
    
    // B.2.2.3 Object.prototype.__defineSetter__(P, setter)
    require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
      __defineSetter__: function __defineSetter__(P, setter) {
        $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
      }
    });
    
    },{"./_a-function":73,"./_descriptors":100,"./_export":104,"./_object-dp":143,"./_object-forced-pam":145,"./_to-object":190}],364:[function(require,module,exports){
    // https://github.com/tc39/proposal-object-values-entries
    var $export = require('./_export');
    var $entries = require('./_object-to-array')(true);
    
    $export($export.S, 'Object', {
      entries: function entries(it) {
        return $entries(it);
      }
    });
    
    },{"./_export":104,"./_object-to-array":155}],365:[function(require,module,exports){
    // https://github.com/tc39/proposal-object-getownpropertydescriptors
    var $export = require('./_export');
    var ownKeys = require('./_own-keys');
    var toIObject = require('./_to-iobject');
    var gOPD = require('./_object-gopd');
    var createProperty = require('./_create-property');
    
    $export($export.S, 'Object', {
      getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
        var O = toIObject(object);
        var getDesc = gOPD.f;
        var keys = ownKeys(O);
        var result = {};
        var i = 0;
        var key, desc;
        while (keys.length > i) {
          desc = getDesc(O, key = keys[i++]);
          if (desc !== undefined) createProperty(result, key, desc);
        }
        return result;
      }
    });
    
    },{"./_create-property":95,"./_export":104,"./_object-gopd":146,"./_own-keys":156,"./_to-iobject":188}],366:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var toObject = require('./_to-object');
    var toPrimitive = require('./_to-primitive');
    var getPrototypeOf = require('./_object-gpo');
    var getOwnPropertyDescriptor = require('./_object-gopd').f;
    
    // B.2.2.4 Object.prototype.__lookupGetter__(P)
    require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
      __lookupGetter__: function __lookupGetter__(P) {
        var O = toObject(this);
        var K = toPrimitive(P, true);
        var D;
        do {
          if (D = getOwnPropertyDescriptor(O, K)) return D.get;
        } while (O = getPrototypeOf(O));
      }
    });
    
    },{"./_descriptors":100,"./_export":104,"./_object-forced-pam":145,"./_object-gopd":146,"./_object-gpo":150,"./_to-object":190,"./_to-primitive":191}],367:[function(require,module,exports){
    'use strict';
    var $export = require('./_export');
    var toObject = require('./_to-object');
    var toPrimitive = require('./_to-primitive');
    var getPrototypeOf = require('./_object-gpo');
    var getOwnPropertyDescriptor = require('./_object-gopd').f;
    
    // B.2.2.5 Object.prototype.__lookupSetter__(P)
    require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
      __lookupSetter__: function __lookupSetter__(P) {
        var O = toObject(this);
        var K = toPrimitive(P, true);
        var D;
        do {
          if (D = getOwnPropertyDescriptor(O, K)) return D.set;
        } while (O = getPrototypeOf(O));
      }
    });
    
    },{"./_descriptors":100,"./_export":104,"./_object-forced-pam":145,"./_object-gopd":146,"./_object-gpo":150,"./_to-object":190,"./_to-primitive":191}],368:[function(require,module,exports){
    // https://github.com/tc39/proposal-object-values-entries
    var $export = require('./_export');
    var $values = require('./_object-to-array')(false);
    
    $export($export.S, 'Object', {
      values: function values(it) {
        return $values(it);
      }
    });
    
    },{"./_export":104,"./_object-to-array":155}],369:[function(require,module,exports){
    'use strict';
    // https://github.com/zenparsing/es-observable
    var $export = require('./_export');
    var global = require('./_global');
    var core = require('./_core');
    var microtask = require('./_microtask')();
    var OBSERVABLE = require('./_wks')('observable');
    var aFunction = require('./_a-function');
    var anObject = require('./_an-object');
    var anInstance = require('./_an-instance');
    var redefineAll = require('./_redefine-all');
    var hide = require('./_hide');
    var forOf = require('./_for-of');
    var RETURN = forOf.RETURN;
    
    var getMethod = function (fn) {
      return fn == null ? undefined : aFunction(fn);
    };
    
    var cleanupSubscription = function (subscription) {
      var cleanup = subscription._c;
      if (cleanup) {
        subscription._c = undefined;
        cleanup();
      }
    };
    
    var subscriptionClosed = function (subscription) {
      return subscription._o === undefined;
    };
    
    var closeSubscription = function (subscription) {
      if (!subscriptionClosed(subscription)) {
        subscription._o = undefined;
        cleanupSubscription(subscription);
      }
    };
    
    var Subscription = function (observer, subscriber) {
      anObject(observer);
      this._c = undefined;
      this._o = observer;
      observer = new SubscriptionObserver(this);
      try {
        var cleanup = subscriber(observer);
        var subscription = cleanup;
        if (cleanup != null) {
          if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
          else aFunction(cleanup);
          this._c = cleanup;
        }
      } catch (e) {
        observer.error(e);
        return;
      } if (subscriptionClosed(this)) cleanupSubscription(this);
    };
    
    Subscription.prototype = redefineAll({}, {
      unsubscribe: function unsubscribe() { closeSubscription(this); }
    });
    
    var SubscriptionObserver = function (subscription) {
      this._s = subscription;
    };
    
    SubscriptionObserver.prototype = redefineAll({}, {
      next: function next(value) {
        var subscription = this._s;
        if (!subscriptionClosed(subscription)) {
          var observer = subscription._o;
          try {
            var m = getMethod(observer.next);
            if (m) return m.call(observer, value);
          } catch (e) {
            try {
              closeSubscription(subscription);
            } finally {
              throw e;
            }
          }
        }
      },
      error: function error(value) {
        var subscription = this._s;
        if (subscriptionClosed(subscription)) throw value;
        var observer = subscription._o;
        subscription._o = undefined;
        try {
          var m = getMethod(observer.error);
          if (!m) throw value;
          value = m.call(observer, value);
        } catch (e) {
          try {
            cleanupSubscription(subscription);
          } finally {
            throw e;
          }
        } cleanupSubscription(subscription);
        return value;
      },
      complete: function complete(value) {
        var subscription = this._s;
        if (!subscriptionClosed(subscription)) {
          var observer = subscription._o;
          subscription._o = undefined;
          try {
            var m = getMethod(observer.complete);
            value = m ? m.call(observer, value) : undefined;
          } catch (e) {
            try {
              cleanupSubscription(subscription);
            } finally {
              throw e;
            }
          } cleanupSubscription(subscription);
          return value;
        }
      }
    });
    
    var $Observable = function Observable(subscriber) {
      anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
    };
    
    redefineAll($Observable.prototype, {
      subscribe: function subscribe(observer) {
        return new Subscription(observer, this._f);
      },
      forEach: function forEach(fn) {
        var that = this;
        return new (core.Promise || global.Promise)(function (resolve, reject) {
          aFunction(fn);
          var subscription = that.subscribe({
            next: function (value) {
              try {
                return fn(value);
              } catch (e) {
                reject(e);
                subscription.unsubscribe();
              }
            },
            error: reject,
            complete: resolve
          });
        });
      }
    });
    
    redefineAll($Observable, {
      from: function from(x) {
        var C = typeof this === 'function' ? this : $Observable;
        var method = getMethod(anObject(x)[OBSERVABLE]);
        if (method) {
          var observable = anObject(method.call(x));
          return observable.constructor === C ? observable : new C(function (observer) {
            return observable.subscribe(observer);
          });
        }
        return new C(function (observer) {
          var done = false;
          microtask(function () {
            if (!done) {
              try {
                if (forOf(x, false, function (it) {
                  observer.next(it);
                  if (done) return RETURN;
                }) === RETURN) return;
              } catch (e) {
                if (done) throw e;
                observer.error(e);
                return;
              } observer.complete();
            }
          });
          return function () { done = true; };
        });
      },
      of: function of() {
        for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
        return new (typeof this === 'function' ? this : $Observable)(function (observer) {
          var done = false;
          microtask(function () {
            if (!done) {
              for (var j = 0; j < items.length; ++j) {
                observer.next(items[j]);
                if (done) return;
              } observer.complete();
            }
          });
          return function () { done = true; };
        });
      }
    });
    
    hide($Observable.prototype, OBSERVABLE, function () { return this; });
    
    $export($export.G, { Observable: $Observable });
    
    require('./_set-species')('Observable');
    
    },{"./_a-function":73,"./_an-instance":77,"./_an-object":78,"./_core":94,"./_export":104,"./_for-of":110,"./_global":112,"./_hide":114,"./_microtask":139,"./_redefine-all":162,"./_set-species":171,"./_wks":200}],370:[function(require,module,exports){
    // https://github.com/tc39/proposal-promise-finally
    'use strict';
    var $export = require('./_export');
    var core = require('./_core');
    var global = require('./_global');
    var speciesConstructor = require('./_species-constructor');
    var promiseResolve = require('./_promise-resolve');
    
    $export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
      var C = speciesConstructor(this, core.Promise || global.Promise);
      var isFunction = typeof onFinally == 'function';
      return this.then(
        isFunction ? function (x) {
          return promiseResolve(C, onFinally()).then(function () { return x; });
        } : onFinally,
        isFunction ? function (e) {
          return promiseResolve(C, onFinally()).then(function () { throw e; });
        } : onFinally
      );
    } });
    
    },{"./_core":94,"./_export":104,"./_global":112,"./_promise-resolve":160,"./_species-constructor":175}],371:[function(require,module,exports){
    'use strict';
    // https://github.com/tc39/proposal-promise-try
    var $export = require('./_export');
    var newPromiseCapability = require('./_new-promise-capability');
    var perform = require('./_perform');
    
    $export($export.S, 'Promise', { 'try': function (callbackfn) {
      var promiseCapability = newPromiseCapability.f(this);
      var result = perform(callbackfn);
      (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
      return promiseCapability.promise;
    } });
    
    },{"./_export":104,"./_new-promise-capability":140,"./_perform":159}],372:[function(require,module,exports){
    var metadata = require('./_metadata');
    var anObject = require('./_an-object');
    var toMetaKey = metadata.key;
    var ordinaryDefineOwnMetadata = metadata.set;
    
    metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
      ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
    } });
    
    },{"./_an-object":78,"./_metadata":138}],373:[function(require,module,exports){
    var metadata = require('./_metadata');
    var anObject = require('./_an-object');
    var toMetaKey = metadata.key;
    var getOrCreateMetadataMap = metadata.map;
    var store = metadata.store;
    
    metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
      var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
      var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
      if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
      if (metadataMap.size) return true;
      var targetMetadata = store.get(target);
      targetMetadata['delete'](targetKey);
      return !!targetMetadata.size || store['delete'](target);
    } });
    
    },{"./_an-object":78,"./_metadata":138}],374:[function(require,module,exports){
    var Set = require('./es6.set');
    var from = require('./_array-from-iterable');
    var metadata = require('./_metadata');
    var anObject = require('./_an-object');
    var getPrototypeOf = require('./_object-gpo');
    var ordinaryOwnMetadataKeys = metadata.keys;
    var toMetaKey = metadata.key;
    
    var ordinaryMetadataKeys = function (O, P) {
      var oKeys = ordinaryOwnMetadataKeys(O, P);
      var parent = getPrototypeOf(O);
      if (parent === null) return oKeys;
      var pKeys = ordinaryMetadataKeys(parent, P);
      return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
    };
    
    metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
      return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
    } });
    
    },{"./_an-object":78,"./_array-from-iterable":81,"./_metadata":138,"./_object-gpo":150,"./es6.set":304}],375:[function(require,module,exports){
    var metadata = require('./_metadata');
    var anObject = require('./_an-object');
    var getPrototypeOf = require('./_object-gpo');
    var ordinaryHasOwnMetadata = metadata.has;
    var ordinaryGetOwnMetadata = metadata.get;
    var toMetaKey = metadata.key;
    
    var ordinaryGetMetadata = function (MetadataKey, O, P) {
      var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
      if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
      var parent = getPrototypeOf(O);
      return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
    };
    
    metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
      return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
    
    },{"./_an-object":78,"./_metadata":138,"./_object-gpo":150}],376:[function(require,module,exports){
    var metadata = require('./_metadata');
    var anObject = require('./_an-object');
    var ordinaryOwnMetadataKeys = metadata.keys;
    var toMetaKey = metadata.key;
    
    metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
      return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
    } });
    
    },{"./_an-object":78,"./_metadata":138}],377:[function(require,module,exports){
    var metadata = require('./_metadata');
    var anObject = require('./_an-object');
    var ordinaryGetOwnMetadata = metadata.get;
    var toMetaKey = metadata.key;
    
    metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
      return ordinaryGetOwnMetadata(metadataKey, anObject(target)
        , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
    
    },{"./_an-object":78,"./_metadata":138}],378:[function(require,module,exports){
    var metadata = require('./_metadata');
    var anObject = require('./_an-object');
    var getPrototypeOf = require('./_object-gpo');
    var ordinaryHasOwnMetadata = metadata.has;
    var toMetaKey = metadata.key;
    
    var ordinaryHasMetadata = function (MetadataKey, O, P) {
      var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
      if (hasOwn) return true;
      var parent = getPrototypeOf(O);
      return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
    };
    
    metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
      return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
    
    },{"./_an-object":78,"./_metadata":138,"./_object-gpo":150}],379:[function(require,module,exports){
    var metadata = require('./_metadata');
    var anObject = require('./_an-object');
    var ordinaryHasOwnMetadata = metadata.has;
    var toMetaKey = metadata.key;
    
    metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
      return ordinaryHasOwnMetadata(metadataKey, anObject(target)
        , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
    
    },{"./_an-object":78,"./_metadata":138}],380:[function(require,module,exports){
    var $metadata = require('./_metadata');
    var anObject = require('./_an-object');
    var aFunction = require('./_a-function');
    var toMetaKey = $metadata.key;
    var ordinaryDefineOwnMetadata = $metadata.set;
    
    $metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
      return function decorator(target, targetKey) {
        ordinaryDefineOwnMetadata(
          metadataKey, metadataValue,
          (targetKey !== undefined ? anObject : aFunction)(target),
          toMetaKey(targetKey)
        );
      };
    } });
    
    },{"./_a-function":73,"./_an-object":78,"./_metadata":138}],381:[function(require,module,exports){
    // https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
    require('./_set-collection-from')('Set');
    
    },{"./_set-collection-from":168}],382:[function(require,module,exports){
    // https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
    require('./_set-collection-of')('Set');
    
    },{"./_set-collection-of":169}],383:[function(require,module,exports){
    // https://github.com/DavidBruant/Map-Set.prototype.toJSON
    var $export = require('./_export');
    
    $export($export.P + $export.R, 'Set', { toJSON: require('./_collection-to-json')('Set') });
    
    },{"./_collection-to-json":91,"./_export":104}],384:[function(require,module,exports){
    'use strict';
    // https://github.com/mathiasbynens/String.prototype.at
    var $export = require('./_export');
    var $at = require('./_string-at')(true);
    var $fails = require('./_fails');
    
    var FORCED = $fails(function () {
      return '𠮷'.at(0) !== '𠮷';
    });
    
    $export($export.P + $export.F * FORCED, 'String', {
      at: function at(pos) {
        return $at(this, pos);
      }
    });
    
    },{"./_export":104,"./_fails":106,"./_string-at":177}],385:[function(require,module,exports){
    'use strict';
    // https://tc39.github.io/String.prototype.matchAll/
    var $export = require('./_export');
    var defined = require('./_defined');
    var toLength = require('./_to-length');
    var isRegExp = require('./_is-regexp');
    var getFlags = require('./_flags');
    var RegExpProto = RegExp.prototype;
    
    var $RegExpStringIterator = function (regexp, string) {
      this._r = regexp;
      this._s = string;
    };
    
    require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next() {
      var match = this._r.exec(this._s);
      return { value: match, done: match === null };
    });
    
    $export($export.P, 'String', {
      matchAll: function matchAll(regexp) {
        defined(this);
        if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
        var S = String(this);
        var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
        var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
        rx.lastIndex = toLength(regexp.lastIndex);
        return new $RegExpStringIterator(rx, S);
      }
    });
    
    },{"./_defined":99,"./_export":104,"./_flags":108,"./_is-regexp":124,"./_iter-create":126,"./_to-length":189}],386:[function(require,module,exports){
    'use strict';
    // https://github.com/tc39/proposal-string-pad-start-end
    var $export = require('./_export');
    var $pad = require('./_string-pad');
    var userAgent = require('./_user-agent');
    
    // https://github.com/zloirock/core-js/issues/280
    var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);
    
    $export($export.P + $export.F * WEBKIT_BUG, 'String', {
      padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
        return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
      }
    });
    
    },{"./_export":104,"./_string-pad":180,"./_user-agent":196}],387:[function(require,module,exports){
    'use strict';
    // https://github.com/tc39/proposal-string-pad-start-end
    var $export = require('./_export');
    var $pad = require('./_string-pad');
    var userAgent = require('./_user-agent');
    
    // https://github.com/zloirock/core-js/issues/280
    var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);
    
    $export($export.P + $export.F * WEBKIT_BUG, 'String', {
      padStart: function padStart(maxLength /* , fillString = ' ' */) {
        return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
      }
    });
    
    },{"./_export":104,"./_string-pad":180,"./_user-agent":196}],388:[function(require,module,exports){
    'use strict';
    // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
    require('./_string-trim')('trimLeft', function ($trim) {
      return function trimLeft() {
        return $trim(this, 1);
      };
    }, 'trimStart');
    
    },{"./_string-trim":182}],389:[function(require,module,exports){
    'use strict';
    // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
    require('./_string-trim')('trimRight', function ($trim) {
      return function trimRight() {
        return $trim(this, 2);
      };
    }, 'trimEnd');
    
    },{"./_string-trim":182}],390:[function(require,module,exports){
    require('./_wks-define')('asyncIterator');
    
    },{"./_wks-define":198}],391:[function(require,module,exports){
    require('./_wks-define')('observable');
    
    },{"./_wks-define":198}],392:[function(require,module,exports){
    // https://github.com/tc39/proposal-global
    var $export = require('./_export');
    
    $export($export.S, 'System', { global: require('./_global') });
    
    },{"./_export":104,"./_global":112}],393:[function(require,module,exports){
    // https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
    require('./_set-collection-from')('WeakMap');
    
    },{"./_set-collection-from":168}],394:[function(require,module,exports){
    // https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
    require('./_set-collection-of')('WeakMap');
    
    },{"./_set-collection-of":169}],395:[function(require,module,exports){
    // https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
    require('./_set-collection-from')('WeakSet');
    
    },{"./_set-collection-from":168}],396:[function(require,module,exports){
    // https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
    require('./_set-collection-of')('WeakSet');
    
    },{"./_set-collection-of":169}],397:[function(require,module,exports){
    var $iterators = require('./es6.array.iterator');
    var getKeys = require('./_object-keys');
    var redefine = require('./_redefine');
    var global = require('./_global');
    var hide = require('./_hide');
    var Iterators = require('./_iterators');
    var wks = require('./_wks');
    var ITERATOR = wks('iterator');
    var TO_STRING_TAG = wks('toStringTag');
    var ArrayValues = Iterators.Array;
    
    var DOMIterables = {
      CSSRuleList: true, // TODO: Not spec compliant, should be false.
      CSSStyleDeclaration: false,
      CSSValueList: false,
      ClientRectList: false,
      DOMRectList: false,
      DOMStringList: false,
      DOMTokenList: true,
      DataTransferItemList: false,
      FileList: false,
      HTMLAllCollection: false,
      HTMLCollection: false,
      HTMLFormElement: false,
      HTMLSelectElement: false,
      MediaList: true, // TODO: Not spec compliant, should be false.
      MimeTypeArray: false,
      NamedNodeMap: false,
      NodeList: true,
      PaintRequestList: false,
      Plugin: false,
      PluginArray: false,
      SVGLengthList: false,
      SVGNumberList: false,
      SVGPathSegList: false,
      SVGPointList: false,
      SVGStringList: false,
      SVGTransformList: false,
      SourceBufferList: false,
      StyleSheetList: true, // TODO: Not spec compliant, should be false.
      TextTrackCueList: false,
      TextTrackList: false,
      TouchList: false
    };
    
    for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
      var NAME = collections[i];
      var explicit = DOMIterables[NAME];
      var Collection = global[NAME];
      var proto = Collection && Collection.prototype;
      var key;
      if (proto) {
        if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
        if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
        Iterators[NAME] = ArrayValues;
        if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
      }
    }
    
    },{"./_global":112,"./_hide":114,"./_iterators":130,"./_object-keys":152,"./_redefine":163,"./_wks":200,"./es6.array.iterator":213}],398:[function(require,module,exports){
    var $export = require('./_export');
    var $task = require('./_task');
    $export($export.G + $export.B, {
      setImmediate: $task.set,
      clearImmediate: $task.clear
    });
    
    },{"./_export":104,"./_task":184}],399:[function(require,module,exports){
    // ie9- setTimeout & setInterval additional parameters fix
    var global = require('./_global');
    var $export = require('./_export');
    var userAgent = require('./_user-agent');
    var slice = [].slice;
    var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
    var wrap = function (set) {
      return function (fn, time /* , ...args */) {
        var boundArgs = arguments.length > 2;
        var args = boundArgs ? slice.call(arguments, 2) : false;
        return set(boundArgs ? function () {
          // eslint-disable-next-line no-new-func
          (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
        } : fn, time);
      };
    };
    $export($export.G + $export.B + $export.F * MSIE, {
      setTimeout: wrap(global.setTimeout),
      setInterval: wrap(global.setInterval)
    });
    
    },{"./_export":104,"./_global":112,"./_user-agent":196}],400:[function(require,module,exports){
    require('./modules/es6.symbol');
    require('./modules/es6.object.create');
    require('./modules/es6.object.define-property');
    require('./modules/es6.object.define-properties');
    require('./modules/es6.object.get-own-property-descriptor');
    require('./modules/es6.object.get-prototype-of');
    require('./modules/es6.object.keys');
    require('./modules/es6.object.get-own-property-names');
    require('./modules/es6.object.freeze');
    require('./modules/es6.object.seal');
    require('./modules/es6.object.prevent-extensions');
    require('./modules/es6.object.is-frozen');
    require('./modules/es6.object.is-sealed');
    require('./modules/es6.object.is-extensible');
    require('./modules/es6.object.assign');
    require('./modules/es6.object.is');
    require('./modules/es6.object.set-prototype-of');
    require('./modules/es6.object.to-string');
    require('./modules/es6.function.bind');
    require('./modules/es6.function.name');
    require('./modules/es6.function.has-instance');
    require('./modules/es6.parse-int');
    require('./modules/es6.parse-float');
    require('./modules/es6.number.constructor');
    require('./modules/es6.number.to-fixed');
    require('./modules/es6.number.to-precision');
    require('./modules/es6.number.epsilon');
    require('./modules/es6.number.is-finite');
    require('./modules/es6.number.is-integer');
    require('./modules/es6.number.is-nan');
    require('./modules/es6.number.is-safe-integer');
    require('./modules/es6.number.max-safe-integer');
    require('./modules/es6.number.min-safe-integer');
    require('./modules/es6.number.parse-float');
    require('./modules/es6.number.parse-int');
    require('./modules/es6.math.acosh');
    require('./modules/es6.math.asinh');
    require('./modules/es6.math.atanh');
    require('./modules/es6.math.cbrt');
    require('./modules/es6.math.clz32');
    require('./modules/es6.math.cosh');
    require('./modules/es6.math.expm1');
    require('./modules/es6.math.fround');
    require('./modules/es6.math.hypot');
    require('./modules/es6.math.imul');
    require('./modules/es6.math.log10');
    require('./modules/es6.math.log1p');
    require('./modules/es6.math.log2');
    require('./modules/es6.math.sign');
    require('./modules/es6.math.sinh');
    require('./modules/es6.math.tanh');
    require('./modules/es6.math.trunc');
    require('./modules/es6.string.from-code-point');
    require('./modules/es6.string.raw');
    require('./modules/es6.string.trim');
    require('./modules/es6.string.iterator');
    require('./modules/es6.string.code-point-at');
    require('./modules/es6.string.ends-with');
    require('./modules/es6.string.includes');
    require('./modules/es6.string.repeat');
    require('./modules/es6.string.starts-with');
    require('./modules/es6.string.anchor');
    require('./modules/es6.string.big');
    require('./modules/es6.string.blink');
    require('./modules/es6.string.bold');
    require('./modules/es6.string.fixed');
    require('./modules/es6.string.fontcolor');
    require('./modules/es6.string.fontsize');
    require('./modules/es6.string.italics');
    require('./modules/es6.string.link');
    require('./modules/es6.string.small');
    require('./modules/es6.string.strike');
    require('./modules/es6.string.sub');
    require('./modules/es6.string.sup');
    require('./modules/es6.date.now');
    require('./modules/es6.date.to-json');
    require('./modules/es6.date.to-iso-string');
    require('./modules/es6.date.to-string');
    require('./modules/es6.date.to-primitive');
    require('./modules/es6.array.is-array');
    require('./modules/es6.array.from');
    require('./modules/es6.array.of');
    require('./modules/es6.array.join');
    require('./modules/es6.array.slice');
    require('./modules/es6.array.sort');
    require('./modules/es6.array.for-each');
    require('./modules/es6.array.map');
    require('./modules/es6.array.filter');
    require('./modules/es6.array.some');
    require('./modules/es6.array.every');
    require('./modules/es6.array.reduce');
    require('./modules/es6.array.reduce-right');
    require('./modules/es6.array.index-of');
    require('./modules/es6.array.last-index-of');
    require('./modules/es6.array.copy-within');
    require('./modules/es6.array.fill');
    require('./modules/es6.array.find');
    require('./modules/es6.array.find-index');
    require('./modules/es6.array.species');
    require('./modules/es6.array.iterator');
    require('./modules/es6.regexp.constructor');
    require('./modules/es6.regexp.exec');
    require('./modules/es6.regexp.to-string');
    require('./modules/es6.regexp.flags');
    require('./modules/es6.regexp.match');
    require('./modules/es6.regexp.replace');
    require('./modules/es6.regexp.search');
    require('./modules/es6.regexp.split');
    require('./modules/es6.promise');
    require('./modules/es6.map');
    require('./modules/es6.set');
    require('./modules/es6.weak-map');
    require('./modules/es6.weak-set');
    require('./modules/es6.typed.array-buffer');
    require('./modules/es6.typed.data-view');
    require('./modules/es6.typed.int8-array');
    require('./modules/es6.typed.uint8-array');
    require('./modules/es6.typed.uint8-clamped-array');
    require('./modules/es6.typed.int16-array');
    require('./modules/es6.typed.uint16-array');
    require('./modules/es6.typed.int32-array');
    require('./modules/es6.typed.uint32-array');
    require('./modules/es6.typed.float32-array');
    require('./modules/es6.typed.float64-array');
    require('./modules/es6.reflect.apply');
    require('./modules/es6.reflect.construct');
    require('./modules/es6.reflect.define-property');
    require('./modules/es6.reflect.delete-property');
    require('./modules/es6.reflect.enumerate');
    require('./modules/es6.reflect.get');
    require('./modules/es6.reflect.get-own-property-descriptor');
    require('./modules/es6.reflect.get-prototype-of');
    require('./modules/es6.reflect.has');
    require('./modules/es6.reflect.is-extensible');
    require('./modules/es6.reflect.own-keys');
    require('./modules/es6.reflect.prevent-extensions');
    require('./modules/es6.reflect.set');
    require('./modules/es6.reflect.set-prototype-of');
    require('./modules/es7.array.includes');
    require('./modules/es7.array.flat-map');
    require('./modules/es7.array.flatten');
    require('./modules/es7.string.at');
    require('./modules/es7.string.pad-start');
    require('./modules/es7.string.pad-end');
    require('./modules/es7.string.trim-left');
    require('./modules/es7.string.trim-right');
    require('./modules/es7.string.match-all');
    require('./modules/es7.symbol.async-iterator');
    require('./modules/es7.symbol.observable');
    require('./modules/es7.object.get-own-property-descriptors');
    require('./modules/es7.object.values');
    require('./modules/es7.object.entries');
    require('./modules/es7.object.define-getter');
    require('./modules/es7.object.define-setter');
    require('./modules/es7.object.lookup-getter');
    require('./modules/es7.object.lookup-setter');
    require('./modules/es7.map.to-json');
    require('./modules/es7.set.to-json');
    require('./modules/es7.map.of');
    require('./modules/es7.set.of');
    require('./modules/es7.weak-map.of');
    require('./modules/es7.weak-set.of');
    require('./modules/es7.map.from');
    require('./modules/es7.set.from');
    require('./modules/es7.weak-map.from');
    require('./modules/es7.weak-set.from');
    require('./modules/es7.global');
    require('./modules/es7.system.global');
    require('./modules/es7.error.is-error');
    require('./modules/es7.math.clamp');
    require('./modules/es7.math.deg-per-rad');
    require('./modules/es7.math.degrees');
    require('./modules/es7.math.fscale');
    require('./modules/es7.math.iaddh');
    require('./modules/es7.math.isubh');
    require('./modules/es7.math.imulh');
    require('./modules/es7.math.rad-per-deg');
    require('./modules/es7.math.radians');
    require('./modules/es7.math.scale');
    require('./modules/es7.math.umulh');
    require('./modules/es7.math.signbit');
    require('./modules/es7.promise.finally');
    require('./modules/es7.promise.try');
    require('./modules/es7.reflect.define-metadata');
    require('./modules/es7.reflect.delete-metadata');
    require('./modules/es7.reflect.get-metadata');
    require('./modules/es7.reflect.get-metadata-keys');
    require('./modules/es7.reflect.get-own-metadata');
    require('./modules/es7.reflect.get-own-metadata-keys');
    require('./modules/es7.reflect.has-metadata');
    require('./modules/es7.reflect.has-own-metadata');
    require('./modules/es7.reflect.metadata');
    require('./modules/es7.asap');
    require('./modules/es7.observable');
    require('./modules/web.timers');
    require('./modules/web.immediate');
    require('./modules/web.dom.iterable');
    module.exports = require('./modules/_core');
    
    },{"./modules/_core":94,"./modules/es6.array.copy-within":203,"./modules/es6.array.every":204,"./modules/es6.array.fill":205,"./modules/es6.array.filter":206,"./modules/es6.array.find":208,"./modules/es6.array.find-index":207,"./modules/es6.array.for-each":209,"./modules/es6.array.from":210,"./modules/es6.array.index-of":211,"./modules/es6.array.is-array":212,"./modules/es6.array.iterator":213,"./modules/es6.array.join":214,"./modules/es6.array.last-index-of":215,"./modules/es6.array.map":216,"./modules/es6.array.of":217,"./modules/es6.array.reduce":219,"./modules/es6.array.reduce-right":218,"./modules/es6.array.slice":220,"./modules/es6.array.some":221,"./modules/es6.array.sort":222,"./modules/es6.array.species":223,"./modules/es6.date.now":224,"./modules/es6.date.to-iso-string":225,"./modules/es6.date.to-json":226,"./modules/es6.date.to-primitive":227,"./modules/es6.date.to-string":228,"./modules/es6.function.bind":229,"./modules/es6.function.has-instance":230,"./modules/es6.function.name":231,"./modules/es6.map":232,"./modules/es6.math.acosh":233,"./modules/es6.math.asinh":234,"./modules/es6.math.atanh":235,"./modules/es6.math.cbrt":236,"./modules/es6.math.clz32":237,"./modules/es6.math.cosh":238,"./modules/es6.math.expm1":239,"./modules/es6.math.fround":240,"./modules/es6.math.hypot":241,"./modules/es6.math.imul":242,"./modules/es6.math.log10":243,"./modules/es6.math.log1p":244,"./modules/es6.math.log2":245,"./modules/es6.math.sign":246,"./modules/es6.math.sinh":247,"./modules/es6.math.tanh":248,"./modules/es6.math.trunc":249,"./modules/es6.number.constructor":250,"./modules/es6.number.epsilon":251,"./modules/es6.number.is-finite":252,"./modules/es6.number.is-integer":253,"./modules/es6.number.is-nan":254,"./modules/es6.number.is-safe-integer":255,"./modules/es6.number.max-safe-integer":256,"./modules/es6.number.min-safe-integer":257,"./modules/es6.number.parse-float":258,"./modules/es6.number.parse-int":259,"./modules/es6.number.to-fixed":260,"./modules/es6.number.to-precision":261,"./modules/es6.object.assign":262,"./modules/es6.object.create":263,"./modules/es6.object.define-properties":264,"./modules/es6.object.define-property":265,"./modules/es6.object.freeze":266,"./modules/es6.object.get-own-property-descriptor":267,"./modules/es6.object.get-own-property-names":268,"./modules/es6.object.get-prototype-of":269,"./modules/es6.object.is":273,"./modules/es6.object.is-extensible":270,"./modules/es6.object.is-frozen":271,"./modules/es6.object.is-sealed":272,"./modules/es6.object.keys":274,"./modules/es6.object.prevent-extensions":275,"./modules/es6.object.seal":276,"./modules/es6.object.set-prototype-of":277,"./modules/es6.object.to-string":278,"./modules/es6.parse-float":279,"./modules/es6.parse-int":280,"./modules/es6.promise":281,"./modules/es6.reflect.apply":282,"./modules/es6.reflect.construct":283,"./modules/es6.reflect.define-property":284,"./modules/es6.reflect.delete-property":285,"./modules/es6.reflect.enumerate":286,"./modules/es6.reflect.get":289,"./modules/es6.reflect.get-own-property-descriptor":287,"./modules/es6.reflect.get-prototype-of":288,"./modules/es6.reflect.has":290,"./modules/es6.reflect.is-extensible":291,"./modules/es6.reflect.own-keys":292,"./modules/es6.reflect.prevent-extensions":293,"./modules/es6.reflect.set":295,"./modules/es6.reflect.set-prototype-of":294,"./modules/es6.regexp.constructor":296,"./modules/es6.regexp.exec":297,"./modules/es6.regexp.flags":298,"./modules/es6.regexp.match":299,"./modules/es6.regexp.replace":300,"./modules/es6.regexp.search":301,"./modules/es6.regexp.split":302,"./modules/es6.regexp.to-string":303,"./modules/es6.set":304,"./modules/es6.string.anchor":305,"./modules/es6.string.big":306,"./modules/es6.string.blink":307,"./modules/es6.string.bold":308,"./modules/es6.string.code-point-at":309,"./modules/es6.string.ends-with":310,"./modules/es6.string.fixed":311,"./modules/es6.string.fontcolor":312,"./modules/es6.string.fontsize":313,"./modules/es6.string.from-code-point":314,"./modules/es6.string.includes":315,"./modules/es6.string.italics":316,"./modules/es6.string.iterator":317,"./modules/es6.string.link":318,"./modules/es6.string.raw":319,"./modules/es6.string.repeat":320,"./modules/es6.string.small":321,"./modules/es6.string.starts-with":322,"./modules/es6.string.strike":323,"./modules/es6.string.sub":324,"./modules/es6.string.sup":325,"./modules/es6.string.trim":326,"./modules/es6.symbol":327,"./modules/es6.typed.array-buffer":328,"./modules/es6.typed.data-view":329,"./modules/es6.typed.float32-array":330,"./modules/es6.typed.float64-array":331,"./modules/es6.typed.int16-array":332,"./modules/es6.typed.int32-array":333,"./modules/es6.typed.int8-array":334,"./modules/es6.typed.uint16-array":335,"./modules/es6.typed.uint32-array":336,"./modules/es6.typed.uint8-array":337,"./modules/es6.typed.uint8-clamped-array":338,"./modules/es6.weak-map":339,"./modules/es6.weak-set":340,"./modules/es7.array.flat-map":341,"./modules/es7.array.flatten":342,"./modules/es7.array.includes":343,"./modules/es7.asap":344,"./modules/es7.error.is-error":345,"./modules/es7.global":346,"./modules/es7.map.from":347,"./modules/es7.map.of":348,"./modules/es7.map.to-json":349,"./modules/es7.math.clamp":350,"./modules/es7.math.deg-per-rad":351,"./modules/es7.math.degrees":352,"./modules/es7.math.fscale":353,"./modules/es7.math.iaddh":354,"./modules/es7.math.imulh":355,"./modules/es7.math.isubh":356,"./modules/es7.math.rad-per-deg":357,"./modules/es7.math.radians":358,"./modules/es7.math.scale":359,"./modules/es7.math.signbit":360,"./modules/es7.math.umulh":361,"./modules/es7.object.define-getter":362,"./modules/es7.object.define-setter":363,"./modules/es7.object.entries":364,"./modules/es7.object.get-own-property-descriptors":365,"./modules/es7.object.lookup-getter":366,"./modules/es7.object.lookup-setter":367,"./modules/es7.object.values":368,"./modules/es7.observable":369,"./modules/es7.promise.finally":370,"./modules/es7.promise.try":371,"./modules/es7.reflect.define-metadata":372,"./modules/es7.reflect.delete-metadata":373,"./modules/es7.reflect.get-metadata":375,"./modules/es7.reflect.get-metadata-keys":374,"./modules/es7.reflect.get-own-metadata":377,"./modules/es7.reflect.get-own-metadata-keys":376,"./modules/es7.reflect.has-metadata":378,"./modules/es7.reflect.has-own-metadata":379,"./modules/es7.reflect.metadata":380,"./modules/es7.set.from":381,"./modules/es7.set.of":382,"./modules/es7.set.to-json":383,"./modules/es7.string.at":384,"./modules/es7.string.match-all":385,"./modules/es7.string.pad-end":386,"./modules/es7.string.pad-start":387,"./modules/es7.string.trim-left":388,"./modules/es7.string.trim-right":389,"./modules/es7.symbol.async-iterator":390,"./modules/es7.symbol.observable":391,"./modules/es7.system.global":392,"./modules/es7.weak-map.from":393,"./modules/es7.weak-map.of":394,"./modules/es7.weak-set.from":395,"./modules/es7.weak-set.of":396,"./modules/web.dom.iterable":397,"./modules/web.immediate":398,"./modules/web.timers":399}],401:[function(require,module,exports){
    /*! Buttons for DataTables 1.7.1
     * ©2016-2021 SpryMedia Ltd - datatables.net/license
     */
    
    (function( factory ){
        if ( typeof define === 'function' && define.amd ) {
            // AMD
            define( ['jquery', 'datatables.net'], function ( $ ) {
                return factory( $, window, document );
            } );
        }
        else if ( typeof exports === 'object' ) {
            // CommonJS
            module.exports = function (root, $) {
                if ( ! root ) {
                    root = window;
                }
    
                if ( ! $ || ! $.fn.dataTable ) {
                    $ = require('datatables.net')(root, $).$;
                }
    
                return factory( $, root, root.document );
            };
        }
        else {
            // Browser
            factory( jQuery, window, document );
        }
    }(function( $, window, document, undefined ) {
    'use strict';
    var DataTable = $.fn.dataTable;
    
    
    // Used for namespacing events added to the document by each instance, so they
    // can be removed on destroy
    var _instCounter = 0;
    
    // Button namespacing counter for namespacing events on individual buttons
    var _buttonCounter = 0;
    
    var _dtButtons = DataTable.ext.buttons;
    
    // Allow for jQuery slim
    function _fadeIn(el, duration, fn) {
        if ($.fn.animate) {
            el
                .stop()
                .fadeIn( duration, fn );
        }
        else {
            el.css('display', 'block');
    
            if (fn) {
                fn.call(el);
            }
        }
    }
    
    function _fadeOut(el, duration, fn) {
        if ($.fn.animate) {
            el
                .stop()
                .fadeOut( duration, fn );
        }
        else {
            el.css('display', 'none');
            
            if (fn) {
                fn.call(el);
            }
        }
    }
    
    /**
     * [Buttons description]
     * @param {[type]}
     * @param {[type]}
     */
    var Buttons = function( dt, config )
    {
        // If not created with a `new` keyword then we return a wrapper function that
        // will take the settings object for a DT. This allows easy use of new instances
        // with the `layout` option - e.g. `topLeft: $.fn.dataTable.Buttons( ... )`.
        if ( !(this instanceof Buttons) ) {
            return function (settings) {
                return new Buttons( settings, dt ).container();
            };
        }
    
        // If there is no config set it to an empty object
        if ( typeof( config ) === 'undefined' ) {
            config = {};	
        }
        
        // Allow a boolean true for defaults
        if ( config === true ) {
            config = {};
        }
    
        // For easy configuration of buttons an array can be given
        if ( Array.isArray( config ) ) {
            config = { buttons: config };
        }
    
        this.c = $.extend( true, {}, Buttons.defaults, config );
    
        // Don't want a deep copy for the buttons
        if ( config.buttons ) {
            this.c.buttons = config.buttons;
        }
    
        this.s = {
            dt: new DataTable.Api( dt ),
            buttons: [],
            listenKeys: '',
            namespace: 'dtb'+(_instCounter++)
        };
    
        this.dom = {
            container: $('<'+this.c.dom.container.tag+'/>')
                .addClass( this.c.dom.container.className )
        };
    
        this._constructor();
    };
    
    
    $.extend( Buttons.prototype, {
        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         * Public methods
         */
    
        /**
         * Get the action of a button
         * @param  {int|string} Button index
         * @return {function}
         *//**
         * Set the action of a button
         * @param  {node} node Button element
         * @param  {function} action Function to set
         * @return {Buttons} Self for chaining
         */
        action: function ( node, action )
        {
            var button = this._nodeToButton( node );
    
            if ( action === undefined ) {
                return button.conf.action;
            }
    
            button.conf.action = action;
    
            return this;
        },
    
        /**
         * Add an active class to the button to make to look active or get current
         * active state.
         * @param  {node} node Button element
         * @param  {boolean} [flag] Enable / disable flag
         * @return {Buttons} Self for chaining or boolean for getter
         */
        active: function ( node, flag ) {
            var button = this._nodeToButton( node );
            var klass = this.c.dom.button.active;
            var jqNode = $(button.node);
    
            if ( flag === undefined ) {
                return jqNode.hasClass( klass );
            }
    
            jqNode.toggleClass( klass, flag === undefined ? true : flag );
    
            return this;
        },
    
        /**
         * Add a new button
         * @param {object} config Button configuration object, base string name or function
         * @param {int|string} [idx] Button index for where to insert the button
         * @return {Buttons} Self for chaining
         */
        add: function ( config, idx )
        {
            var buttons = this.s.buttons;
    
            if ( typeof idx === 'string' ) {
                var split = idx.split('-');
                var base = this.s;
    
                for ( var i=0, ien=split.length-1 ; i<ien ; i++ ) {
                    base = base.buttons[ split[i]*1 ];
                }
    
                buttons = base.buttons;
                idx = split[ split.length-1 ]*1;
            }
    
            this._expandButton( buttons, config, base !== undefined, idx );
            this._draw();
    
            return this;
        },
    
        /**
         * Get the container node for the buttons
         * @return {jQuery} Buttons node
         */
        container: function ()
        {
            return this.dom.container;
        },
    
        /**
         * Disable a button
         * @param  {node} node Button node
         * @return {Buttons} Self for chaining
         */
        disable: function ( node ) {
            var button = this._nodeToButton( node );
    
            $(button.node)
                .addClass( this.c.dom.button.disabled )
                .attr('disabled', true);
    
            return this;
        },
    
        /**
         * Destroy the instance, cleaning up event handlers and removing DOM
         * elements
         * @return {Buttons} Self for chaining
         */
        destroy: function ()
        {
            // Key event listener
            $('body').off( 'keyup.'+this.s.namespace );
    
            // Individual button destroy (so they can remove their own events if
            // needed). Take a copy as the array is modified by `remove`
            var buttons = this.s.buttons.slice();
            var i, ien;
            
            for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
                this.remove( buttons[i].node );
            }
    
            // Container
            this.dom.container.remove();
    
            // Remove from the settings object collection
            var buttonInsts = this.s.dt.settings()[0];
    
            for ( i=0, ien=buttonInsts.length ; i<ien ; i++ ) {
                if ( buttonInsts.inst === this ) {
                    buttonInsts.splice( i, 1 );
                    break;
                }
            }
    
            return this;
        },
    
        /**
         * Enable / disable a button
         * @param  {node} node Button node
         * @param  {boolean} [flag=true] Enable / disable flag
         * @return {Buttons} Self for chaining
         */
        enable: function ( node, flag )
        {
            if ( flag === false ) {
                return this.disable( node );
            }
    
            var button = this._nodeToButton( node );
            $(button.node)
                .removeClass( this.c.dom.button.disabled )
                .removeAttr('disabled');
    
            return this;
        },
    
        /**
         * Get the instance name for the button set selector
         * @return {string} Instance name
         */
        name: function ()
        {
            return this.c.name;
        },
    
        /**
         * Get a button's node of the buttons container if no button is given
         * @param  {node} [node] Button node
         * @return {jQuery} Button element, or container
         */
        node: function ( node )
        {
            if ( ! node ) {
                return this.dom.container;
            }
    
            var button = this._nodeToButton( node );
            return $(button.node);
        },
    
        /**
         * Set / get a processing class on the selected button
         * @param {element} node Triggering button node
         * @param  {boolean} flag true to add, false to remove, undefined to get
         * @return {boolean|Buttons} Getter value or this if a setter.
         */
        processing: function ( node, flag )
        {
            var dt = this.s.dt;
            var button = this._nodeToButton( node );
    
            if ( flag === undefined ) {
                return $(button.node).hasClass( 'processing' );
            }
    
            $(button.node).toggleClass( 'processing', flag );
    
            $(dt.table().node()).triggerHandler( 'buttons-processing.dt', [
                flag, dt.button( node ), dt, $(node), button.conf
            ] );
    
            return this;
        },
    
        /**
         * Remove a button.
         * @param  {node} node Button node
         * @return {Buttons} Self for chaining
         */
        remove: function ( node )
        {
            var button = this._nodeToButton( node );
            var host = this._nodeToHost( node );
            var dt = this.s.dt;
    
            // Remove any child buttons first
            if ( button.buttons.length ) {
                for ( var i=button.buttons.length-1 ; i>=0 ; i-- ) {
                    this.remove( button.buttons[i].node );
                }
            }
    
            // Allow the button to remove event handlers, etc
            if ( button.conf.destroy ) {
                button.conf.destroy.call( dt.button(node), dt, $(node), button.conf );
            }
    
            this._removeKey( button.conf );
    
            $(button.node).remove();
    
            var idx = $.inArray( button, host );
            host.splice( idx, 1 );
    
            return this;
        },
    
        /**
         * Get the text for a button
         * @param  {int|string} node Button index
         * @return {string} Button text
         *//**
         * Set the text for a button
         * @param  {int|string|function} node Button index
         * @param  {string} label Text
         * @return {Buttons} Self for chaining
         */
        text: function ( node, label )
        {
            var button = this._nodeToButton( node );
            var buttonLiner = this.c.dom.collection.buttonLiner;
            var linerTag = button.inCollection && buttonLiner && buttonLiner.tag ?
                buttonLiner.tag :
                this.c.dom.buttonLiner.tag;
            var dt = this.s.dt;
            var jqNode = $(button.node);
            var text = function ( opt ) {
                return typeof opt === 'function' ?
                    opt( dt, jqNode, button.conf ) :
                    opt;
            };
    
            if ( label === undefined ) {
                return text( button.conf.text );
            }
    
            button.conf.text = label;
    
            if ( linerTag ) {
                jqNode.children( linerTag ).html( text(label) );
            }
            else {
                jqNode.html( text(label) );
            }
    
            return this;
        },
    
    
        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         * Constructor
         */
    
        /**
         * Buttons constructor
         * @private
         */
        _constructor: function ()
        {
            var that = this;
            var dt = this.s.dt;
            var dtSettings = dt.settings()[0];
            var buttons =  this.c.buttons;
    
            if ( ! dtSettings._buttons ) {
                dtSettings._buttons = [];
            }
    
            dtSettings._buttons.push( {
                inst: this,
                name: this.c.name
            } );
    
            for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
                this.add( buttons[i] );
            }
    
            dt.on( 'destroy', function ( e, settings ) {
                if ( settings === dtSettings ) {
                    that.destroy();
                }
            } );
    
            // Global key event binding to listen for button keys
            $('body').on( 'keyup.'+this.s.namespace, function ( e ) {
                if ( ! document.activeElement || document.activeElement === document.body ) {
                    // SUse a string of characters for fast lookup of if we need to
                    // handle this
                    var character = String.fromCharCode(e.keyCode).toLowerCase();
    
                    if ( that.s.listenKeys.toLowerCase().indexOf( character ) !== -1 ) {
                        that._keypress( character, e );
                    }
                }
            } );
        },
    
    
        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         * Private methods
         */
    
        /**
         * Add a new button to the key press listener
         * @param {object} conf Resolved button configuration object
         * @private
         */
        _addKey: function ( conf )
        {
            if ( conf.key ) {
                this.s.listenKeys += $.isPlainObject( conf.key ) ?
                    conf.key.key :
                    conf.key;
            }
        },
    
        /**
         * Insert the buttons into the container. Call without parameters!
         * @param  {node} [container] Recursive only - Insert point
         * @param  {array} [buttons] Recursive only - Buttons array
         * @private
         */
        _draw: function ( container, buttons )
        {
            if ( ! container ) {
                container = this.dom.container;
                buttons = this.s.buttons;
            }
    
            container.children().detach();
    
            for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
                container.append( buttons[i].inserter );
                container.append( ' ' );
    
                if ( buttons[i].buttons && buttons[i].buttons.length ) {
                    this._draw( buttons[i].collection, buttons[i].buttons );
                }
            }
        },
    
        /**
         * Create buttons from an array of buttons
         * @param  {array} attachTo Buttons array to attach to
         * @param  {object} button Button definition
         * @param  {boolean} inCollection true if the button is in a collection
         * @private
         */
        _expandButton: function ( attachTo, button, inCollection, attachPoint )
        {
            var dt = this.s.dt;
            var buttonCounter = 0;
            var buttons = ! Array.isArray( button ) ?
                [ button ] :
                button;
    
            for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
                var conf = this._resolveExtends( buttons[i] );
    
                if ( ! conf ) {
                    continue;
                }
    
                // If the configuration is an array, then expand the buttons at this
                // point
                if ( Array.isArray( conf ) ) {
                    this._expandButton( attachTo, conf, inCollection, attachPoint );
                    continue;
                }
    
                var built = this._buildButton( conf, inCollection );
                if ( ! built ) {
                    continue;
                }
    
                if ( attachPoint !== undefined && attachPoint !== null ) {
                    attachTo.splice( attachPoint, 0, built );
                    attachPoint++;
                }
                else {
                    attachTo.push( built );
                }
    
                if ( built.conf.buttons ) {
                    built.collection = $('<'+this.c.dom.collection.tag+'/>');
    
                    built.conf._collection = built.collection;
    
                    this._expandButton( built.buttons, built.conf.buttons, true, attachPoint );
                }
    
                // init call is made here, rather than buildButton as it needs to
                // be selectable, and for that it needs to be in the buttons array
                if ( conf.init ) {
                    conf.init.call( dt.button( built.node ), dt, $(built.node), conf );
                }
    
                buttonCounter++;
            }
        },
    
        /**
         * Create an individual button
         * @param  {object} config            Resolved button configuration
         * @param  {boolean} inCollection `true` if a collection button
         * @return {jQuery} Created button node (jQuery)
         * @private
         */
        _buildButton: function ( config, inCollection )
        {
            var buttonDom = this.c.dom.button;
            var linerDom = this.c.dom.buttonLiner;
            var collectionDom = this.c.dom.collection;
            var dt = this.s.dt;
            var text = function ( opt ) {
                return typeof opt === 'function' ?
                    opt( dt, button, config ) :
                    opt;
            };
    
            if ( inCollection && collectionDom.button ) {
                buttonDom = collectionDom.button;
            }
    
            if ( inCollection && collectionDom.buttonLiner ) {
                linerDom = collectionDom.buttonLiner;
            }
    
            // Make sure that the button is available based on whatever requirements
            // it has. For example, PDF button require pdfmake
            if ( config.available && ! config.available( dt, config ) ) {
                return false;
            }
    
            var action = function ( e, dt, button, config ) {
                config.action.call( dt.button( button ), e, dt, button, config );
    
                $(dt.table().node()).triggerHandler( 'buttons-action.dt', [
                    dt.button( button ), dt, button, config 
                ] );
            };
    
            var tag = config.tag || buttonDom.tag;
            var clickBlurs = config.clickBlurs === undefined ? true : config.clickBlurs
            var button = $('<'+tag+'/>')
                .addClass( buttonDom.className )
                .attr( 'tabindex', this.s.dt.settings()[0].iTabIndex )
                .attr( 'aria-controls', this.s.dt.table().node().id )
                .on( 'click.dtb', function (e) {
                    e.preventDefault();
    
                    if ( ! button.hasClass( buttonDom.disabled ) && config.action ) {
                        action( e, dt, button, config );
                    }
                    if( clickBlurs ) {
                        button.trigger('blur');
                    }
                } )
                .on( 'keyup.dtb', function (e) {
                    if ( e.keyCode === 13 ) {
                        if ( ! button.hasClass( buttonDom.disabled ) && config.action ) {
                            action( e, dt, button, config );
                        }
                    }
                } );
    
            // Make `a` tags act like a link
            if ( tag.toLowerCase() === 'a' ) {
                button.attr( 'href', '#' );
            }
    
            // Button tags should have `type=button` so they don't have any default behaviour
            if ( tag.toLowerCase() === 'button' ) {
                button.attr( 'type', 'button' );
            }
    
            if ( linerDom.tag ) {
                var liner = $('<'+linerDom.tag+'/>')
                    .html( text( config.text ) )
                    .addClass( linerDom.className );
    
                if ( linerDom.tag.toLowerCase() === 'a' ) {
                    liner.attr( 'href', '#' );
                }
    
                button.append( liner );
            }
            else {
                button.html( text( config.text ) );
            }
    
            if ( config.enabled === false ) {
                button.addClass( buttonDom.disabled );
            }
    
            if ( config.className ) {
                button.addClass( config.className );
            }
    
            if ( config.titleAttr ) {
                button.attr( 'title', text( config.titleAttr ) );
            }
    
            if ( config.attr ) {
                button.attr( config.attr );
            }
    
            if ( ! config.namespace ) {
                config.namespace = '.dt-button-'+(_buttonCounter++);
            }
    
            var buttonContainer = this.c.dom.buttonContainer;
            var inserter;
            if ( buttonContainer && buttonContainer.tag ) {
                inserter = $('<'+buttonContainer.tag+'/>')
                    .addClass( buttonContainer.className )
                    .append( button );
            }
            else {
                inserter = button;
            }
    
            this._addKey( config );
    
            // Style integration callback for DOM manipulation
            // Note that this is _not_ documented. It is currently
            // for style integration only
            if( this.c.buttonCreated ) {
                inserter = this.c.buttonCreated( config, inserter );
            }
    
            return {
                conf:         config,
                node:         button.get(0),
                inserter:     inserter,
                buttons:      [],
                inCollection: inCollection,
                collection:   null
            };
        },
    
        /**
         * Get the button object from a node (recursive)
         * @param  {node} node Button node
         * @param  {array} [buttons] Button array, uses base if not defined
         * @return {object} Button object
         * @private
         */
        _nodeToButton: function ( node, buttons )
        {
            if ( ! buttons ) {
                buttons = this.s.buttons;
            }
    
            for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
                if ( buttons[i].node === node ) {
                    return buttons[i];
                }
    
                if ( buttons[i].buttons.length ) {
                    var ret = this._nodeToButton( node, buttons[i].buttons );
    
                    if ( ret ) {
                        return ret;
                    }
                }
            }
        },
    
        /**
         * Get container array for a button from a button node (recursive)
         * @param  {node} node Button node
         * @param  {array} [buttons] Button array, uses base if not defined
         * @return {array} Button's host array
         * @private
         */
        _nodeToHost: function ( node, buttons )
        {
            if ( ! buttons ) {
                buttons = this.s.buttons;
            }
    
            for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
                if ( buttons[i].node === node ) {
                    return buttons;
                }
    
                if ( buttons[i].buttons.length ) {
                    var ret = this._nodeToHost( node, buttons[i].buttons );
    
                    if ( ret ) {
                        return ret;
                    }
                }
            }
        },
    
        /**
         * Handle a key press - determine if any button's key configured matches
         * what was typed and trigger the action if so.
         * @param  {string} character The character pressed
         * @param  {object} e Key event that triggered this call
         * @private
         */
        _keypress: function ( character, e )
        {
            // Check if this button press already activated on another instance of Buttons
            if ( e._buttonsHandled ) {
                return;
            }
    
            var run = function ( conf, node ) {
                if ( ! conf.key ) {
                    return;
                }
    
                if ( conf.key === character ) {
                    e._buttonsHandled = true;
                    $(node).click();
                }
                else if ( $.isPlainObject( conf.key ) ) {
                    if ( conf.key.key !== character ) {
                        return;
                    }
    
                    if ( conf.key.shiftKey && ! e.shiftKey ) {
                        return;
                    }
    
                    if ( conf.key.altKey && ! e.altKey ) {
                        return;
                    }
    
                    if ( conf.key.ctrlKey && ! e.ctrlKey ) {
                        return;
                    }
    
                    if ( conf.key.metaKey && ! e.metaKey ) {
                        return;
                    }
    
                    // Made it this far - it is good
                    e._buttonsHandled = true;
                    $(node).click();
                }
            };
    
            var recurse = function ( a ) {
                for ( var i=0, ien=a.length ; i<ien ; i++ ) {
                    run( a[i].conf, a[i].node );
    
                    if ( a[i].buttons.length ) {
                        recurse( a[i].buttons );
                    }
                }
            };
    
            recurse( this.s.buttons );
        },
    
        /**
         * Remove a key from the key listener for this instance (to be used when a
         * button is removed)
         * @param  {object} conf Button configuration
         * @private
         */
        _removeKey: function ( conf )
        {
            if ( conf.key ) {
                var character = $.isPlainObject( conf.key ) ?
                    conf.key.key :
                    conf.key;
    
                // Remove only one character, as multiple buttons could have the
                // same listening key
                var a = this.s.listenKeys.split('');
                var idx = $.inArray( character, a );
                a.splice( idx, 1 );
                this.s.listenKeys = a.join('');
            }
        },
    
        /**
         * Resolve a button configuration
         * @param  {string|function|object} conf Button config to resolve
         * @return {object} Button configuration
         * @private
         */
        _resolveExtends: function ( conf )
        {
            var dt = this.s.dt;
            var i, ien;
            var toConfObject = function ( base ) {
                var loop = 0;
    
                // Loop until we have resolved to a button configuration, or an
                // array of button configurations (which will be iterated
                // separately)
                while ( ! $.isPlainObject(base) && ! Array.isArray(base) ) {
                    if ( base === undefined ) {
                        return;
                    }
    
                    if ( typeof base === 'function' ) {
                        base = base( dt, conf );
    
                        if ( ! base ) {
                            return false;
                        }
                    }
                    else if ( typeof base === 'string' ) {
                        if ( ! _dtButtons[ base ] ) {
                            throw 'Unknown button type: '+base;
                        }
    
                        base = _dtButtons[ base ];
                    }
    
                    loop++;
                    if ( loop > 30 ) {
                        // Protect against misconfiguration killing the browser
                        throw 'Buttons: Too many iterations';
                    }
                }
    
                return Array.isArray( base ) ?
                    base :
                    $.extend( {}, base );
            };
    
            conf = toConfObject( conf );
    
            while ( conf && conf.extend ) {
                // Use `toConfObject` in case the button definition being extended
                // is itself a string or a function
                if ( ! _dtButtons[ conf.extend ] ) {
                    throw 'Cannot extend unknown button type: '+conf.extend;
                }
    
                var objArray = toConfObject( _dtButtons[ conf.extend ] );
                if ( Array.isArray( objArray ) ) {
                    return objArray;
                }
                else if ( ! objArray ) {
                    // This is a little brutal as it might be possible to have a
                    // valid button without the extend, but if there is no extend
                    // then the host button would be acting in an undefined state
                    return false;
                }
    
                // Stash the current class name
                var originalClassName = objArray.className;
    
                conf = $.extend( {}, objArray, conf );
    
                // The extend will have overwritten the original class name if the
                // `conf` object also assigned a class, but we want to concatenate
                // them so they are list that is combined from all extended buttons
                if ( originalClassName && conf.className !== originalClassName ) {
                    conf.className = originalClassName+' '+conf.className;
                }
    
                // Buttons to be added to a collection  -gives the ability to define
                // if buttons should be added to the start or end of a collection
                var postfixButtons = conf.postfixButtons;
                if ( postfixButtons ) {
                    if ( ! conf.buttons ) {
                        conf.buttons = [];
                    }
    
                    for ( i=0, ien=postfixButtons.length ; i<ien ; i++ ) {
                        conf.buttons.push( postfixButtons[i] );
                    }
    
                    conf.postfixButtons = null;
                }
    
                var prefixButtons = conf.prefixButtons;
                if ( prefixButtons ) {
                    if ( ! conf.buttons ) {
                        conf.buttons = [];
                    }
    
                    for ( i=0, ien=prefixButtons.length ; i<ien ; i++ ) {
                        conf.buttons.splice( i, 0, prefixButtons[i] );
                    }
    
                    conf.prefixButtons = null;
                }
    
                // Although we want the `conf` object to overwrite almost all of
                // the properties of the object being extended, the `extend`
                // property should come from the object being extended
                conf.extend = objArray.extend;
            }
    
            return conf;
        },
    
        /**
         * Display (and replace if there is an existing one) a popover attached to a button
         * @param {string|node} content Content to show
         * @param {DataTable.Api} hostButton DT API instance of the button
         * @param {object} inOpts Options (see object below for all options)
         */
        _popover: function ( content, hostButton, inOpts ) {
            var dt = hostButton;
            var buttonsSettings = this.c;
            var options = $.extend( {
                align: 'button-left', // button-right, dt-container
                autoClose: false,
                background: true,
                backgroundClassName: 'dt-button-background',
                contentClassName: buttonsSettings.dom.collection.className,
                collectionLayout: '',
                collectionTitle: '',
                dropup: false,
                fade: 400,
                rightAlignClassName: 'dt-button-right',
                tag: buttonsSettings.dom.collection.tag
            }, inOpts );
            var hostNode = hostButton.node();
    
            var close = function () {
                _fadeOut(
                    $('.dt-button-collection'),
                    options.fade,
                    function () {
                        $(this).detach();
                    }
                );
    
                $(dt.buttons( '[aria-haspopup="true"][aria-expanded="true"]' ).nodes())
                    .attr('aria-expanded', 'false');
    
                $('div.dt-button-background').off( 'click.dtb-collection' );
                Buttons.background( false, options.backgroundClassName, options.fade, hostNode );
    
                $('body').off( '.dtb-collection' );
                dt.off( 'buttons-action.b-internal' );
            };
    
            if (content === false) {
                close();
            }
    
            var existingExpanded = $(dt.buttons( '[aria-haspopup="true"][aria-expanded="true"]' ).nodes());
            if ( existingExpanded.length ) {
                hostNode = existingExpanded.eq(0);
    
                close();
            }
    
            var display = $('<div/>')
                .addClass('dt-button-collection')
                .addClass(options.collectionLayout)
                .css('display', 'none');
    
            content = $(content)
                .addClass(options.contentClassName)
                .attr('role', 'menu')
                .appendTo(display);
    
            hostNode.attr( 'aria-expanded', 'true' );
    
            if ( hostNode.parents('body')[0] !== document.body ) {
                hostNode = document.body.lastChild;
            }
    
            if ( options.collectionTitle ) {
                display.prepend('<div class="dt-button-collection-title">'+options.collectionTitle+'</div>');
            }
    
            _fadeIn( display.insertAfter( hostNode ), options.fade );
    
            var tableContainer = $( hostButton.table().container() );
            var position = display.css( 'position' );
    
            if ( options.align === 'dt-container' ) {
                hostNode = hostNode.parent();
                display.css('width', tableContainer.width());
            }
    
            // Align the popover relative to the DataTables container
            // Useful for wide popovers such as SearchPanes
            if (position === 'absolute') {
                // Align relative to the host button
                var hostPosition = hostNode.position();
                var buttonPosition = $(hostButton.node()).position();
    
                display.css( {
                    top: buttonPosition.top + hostNode.outerHeight(),
                    left: hostPosition.left
                } );
    
                // calculate overflow when positioned beneath
                var collectionHeight = display.outerHeight();
                var tableBottom = tableContainer.offset().top + tableContainer.height();
                var listBottom = buttonPosition.top + hostNode.outerHeight() + collectionHeight;
                var bottomOverflow = listBottom - tableBottom;
    
                // calculate overflow when positioned above
                var listTop = buttonPosition.top - collectionHeight;
                var tableTop = tableContainer.offset().top;
                var topOverflow = tableTop - listTop;
    
                // if bottom overflow is larger, move to the top because it fits better, or if dropup is requested
                var moveTop = buttonPosition.top - collectionHeight - 5;
                if ( (bottomOverflow > topOverflow || options.dropup) && -moveTop < tableTop ) {
                    display.css( 'top', moveTop);
                }
    
                // Get the size of the container (left and width - and thus also right)
                var tableLeft = tableContainer.offset().left;
                var tableWidth = tableContainer.width();
                var tableRight = tableLeft + tableWidth;
    
                // Get the size of the popover (left and width - and ...)
                var popoverLeft = display.offset().left;
                var popoverWidth = display.width();
                var popoverRight = popoverLeft + popoverWidth;
    
                // Get the size of the host buttons (left and width - and ...)
                var buttonsLeft = hostNode.offset().left;
                var buttonsWidth = hostNode.outerWidth()
                var buttonsRight = buttonsLeft + buttonsWidth;
    
                if (
                    display.hasClass( options.rightAlignClassName ) ||
                    display.hasClass( options.leftAlignClassName ) ||
                    options.align === 'dt-container'
                ){
                    // You've then got all the numbers you need to do some calculations and if statements,
                    //  so we can do some quick JS maths and apply it only once
                    // If it has the right align class OR the buttons are right aligned OR the button container is floated right,
                    //  then calculate left position for the popover to align the popover to the right hand
                    //  side of the button - check to see if the left of the popover is inside the table container.
                    // If not, move the popover so it is, but not more than it means that the popover is to the right of the table container
                    var popoverShuffle = 0;
                    if ( display.hasClass( options.rightAlignClassName )) {
                        popoverShuffle = buttonsRight - popoverRight;
                        if(tableLeft > (popoverLeft + popoverShuffle)){
                            var leftGap = tableLeft - (popoverLeft + popoverShuffle);
                            var rightGap = tableRight - (popoverRight + popoverShuffle);
            
                            if(leftGap > rightGap){
                                popoverShuffle += rightGap; 
                            }
                            else {
                                popoverShuffle += leftGap;
                            }
                        }
                    }
                    // else attempt to left align the popover to the button. Similar to above, if the popover's right goes past the table container's right,
                    //  then move it back, but not so much that it goes past the left of the table container
                    else {
                        popoverShuffle = tableLeft - popoverLeft;
        
                        if(tableRight < (popoverRight + popoverShuffle)){
                            var leftGap = tableLeft - (popoverLeft + popoverShuffle);
                            var rightGap = tableRight - (popoverRight + popoverShuffle);
        
                            if(leftGap > rightGap ){
                                popoverShuffle += rightGap;
                            }
                            else {
                                popoverShuffle += leftGap;
                            }
        
                        }
                    }
        
                    display.css('left', display.position().left + popoverShuffle);
                }
                else {
                    var top = hostNode.offset().top
                    var popoverShuffle = 0;
    
                    popoverShuffle = options.align === 'button-right'
                        ? buttonsRight - popoverRight
                        : buttonsLeft - popoverLeft;
    
                    display.css('left', display.position().left + popoverShuffle);
                }
                
                
            }
            else {
                // Fix position - centre on screen
                var top = display.height() / 2;
                if ( top > $(window).height() / 2 ) {
                    top = $(window).height() / 2;
                }
    
                display.css( 'marginTop', top*-1 );
            }
    
            if ( options.background ) {
                Buttons.background( true, options.backgroundClassName, options.fade, hostNode );
            }
    
            // This is bonkers, but if we don't have a click listener on the
            // background element, iOS Safari will ignore the body click
            // listener below. An empty function here is all that is
            // required to make it work...
            $('div.dt-button-background').on( 'click.dtb-collection', function () {} );
    
            $('body')
                .on( 'click.dtb-collection', function (e) {
                    // andSelf is deprecated in jQ1.8, but we want 1.7 compat
                    var back = $.fn.addBack ? 'addBack' : 'andSelf';
                    var parent = $(e.target).parent()[0];
    
                    if (( ! $(e.target).parents()[back]().filter( content ).length  && !$(parent).hasClass('dt-buttons')) || $(e.target).hasClass('dt-button-background')) {
                        close();
                    }
                } )
                .on( 'keyup.dtb-collection', function (e) {
                    if ( e.keyCode === 27 ) {
                        close();
                    }
                } );
    
            if ( options.autoClose ) {
                setTimeout( function () {
                    dt.on( 'buttons-action.b-internal', function (e, btn, dt, node) {
                        if ( node[0] === hostNode[0] ) {
                            return;
                        }
                        close();
                    } );
                }, 0);
            }
    
            $(display).trigger('buttons-popover.dt');
        }
    } );
    
    
    
    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Statics
     */
    
    /**
     * Show / hide a background layer behind a collection
     * @param  {boolean} Flag to indicate if the background should be shown or
     *   hidden 
     * @param  {string} Class to assign to the background
     * @static
     */
    Buttons.background = function ( show, className, fade, insertPoint ) {
        if ( fade === undefined ) {
            fade = 400;
        }
        if ( ! insertPoint ) {
            insertPoint = document.body;
        }
    
        if ( show ) {
            _fadeIn(
                $('<div/>')
                    .addClass( className )
                    .css( 'display', 'none' )
                    .insertAfter( insertPoint ),
                fade
            );
        }
        else {
            _fadeOut(
                $('div.'+className),
                fade,
                function () {
                    $(this)
                        .removeClass( className )
                        .remove();
                }
            );
        }
    };
    
    /**
     * Instance selector - select Buttons instances based on an instance selector
     * value from the buttons assigned to a DataTable. This is only useful if
     * multiple instances are attached to a DataTable.
     * @param  {string|int|array} Instance selector - see `instance-selector`
     *   documentation on the DataTables site
     * @param  {array} Button instance array that was attached to the DataTables
     *   settings object
     * @return {array} Buttons instances
     * @static
     */
    Buttons.instanceSelector = function ( group, buttons )
    {
        if ( group === undefined || group === null ) {
            return $.map( buttons, function ( v ) {
                return v.inst;
            } );
        }
    
        var ret = [];
        var names = $.map( buttons, function ( v ) {
            return v.name;
        } );
    
        // Flatten the group selector into an array of single options
        var process = function ( input ) {
            if ( Array.isArray( input ) ) {
                for ( var i=0, ien=input.length ; i<ien ; i++ ) {
                    process( input[i] );
                }
                return;
            }
    
            if ( typeof input === 'string' ) {
                if ( input.indexOf( ',' ) !== -1 ) {
                    // String selector, list of names
                    process( input.split(',') );
                }
                else {
                    // String selector individual name
                    var idx = $.inArray( input.trim(), names );
    
                    if ( idx !== -1 ) {
                        ret.push( buttons[ idx ].inst );
                    }
                }
            }
            else if ( typeof input === 'number' ) {
                // Index selector
                ret.push( buttons[ input ].inst );
            }
        };
        
        process( group );
    
        return ret;
    };
    
    /**
     * Button selector - select one or more buttons from a selector input so some
     * operation can be performed on them.
     * @param  {array} Button instances array that the selector should operate on
     * @param  {string|int|node|jQuery|array} Button selector - see
     *   `button-selector` documentation on the DataTables site
     * @return {array} Array of objects containing `inst` and `idx` properties of
     *   the selected buttons so you know which instance each button belongs to.
     * @static
     */
    Buttons.buttonSelector = function ( insts, selector )
    {
        var ret = [];
        var nodeBuilder = function ( a, buttons, baseIdx ) {
            var button;
            var idx;
    
            for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
                button = buttons[i];
    
                if ( button ) {
                    idx = baseIdx !== undefined ?
                        baseIdx+i :
                        i+'';
    
                    a.push( {
                        node: button.node,
                        name: button.conf.name,
                        idx:  idx
                    } );
    
                    if ( button.buttons ) {
                        nodeBuilder( a, button.buttons, idx+'-' );
                    }
                }
            }
        };
    
        var run = function ( selector, inst ) {
            var i, ien;
            var buttons = [];
            nodeBuilder( buttons, inst.s.buttons );
    
            var nodes = $.map( buttons, function (v) {
                return v.node;
            } );
    
            if ( Array.isArray( selector ) || selector instanceof $ ) {
                for ( i=0, ien=selector.length ; i<ien ; i++ ) {
                    run( selector[i], inst );
                }
                return;
            }
    
            if ( selector === null || selector === undefined || selector === '*' ) {
                // Select all
                for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
                    ret.push( {
                        inst: inst,
                        node: buttons[i].node
                    } );
                }
            }
            else if ( typeof selector === 'number' ) {
                // Main button index selector
                ret.push( {
                    inst: inst,
                    node: inst.s.buttons[ selector ].node
                } );
            }
            else if ( typeof selector === 'string' ) {
                if ( selector.indexOf( ',' ) !== -1 ) {
                    // Split
                    var a = selector.split(',');
    
                    for ( i=0, ien=a.length ; i<ien ; i++ ) {
                        run( a[i].trim(), inst );
                    }
                }
                else if ( selector.match( /^\d+(\-\d+)*$/ ) ) {
                    // Sub-button index selector
                    var indexes = $.map( buttons, function (v) {
                        return v.idx;
                    } );
    
                    ret.push( {
                        inst: inst,
                        node: buttons[ $.inArray( selector, indexes ) ].node
                    } );
                }
                else if ( selector.indexOf( ':name' ) !== -1 ) {
                    // Button name selector
                    var name = selector.replace( ':name', '' );
    
                    for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
                        if ( buttons[i].name === name ) {
                            ret.push( {
                                inst: inst,
                                node: buttons[i].node
                            } );
                        }
                    }
                }
                else {
                    // jQuery selector on the nodes
                    $( nodes ).filter( selector ).each( function () {
                        ret.push( {
                            inst: inst,
                            node: this
                        } );
                    } );
                }
            }
            else if ( typeof selector === 'object' && selector.nodeName ) {
                // Node selector
                var idx = $.inArray( selector, nodes );
    
                if ( idx !== -1 ) {
                    ret.push( {
                        inst: inst,
                        node: nodes[ idx ]
                    } );
                }
            }
        };
    
    
        for ( var i=0, ien=insts.length ; i<ien ; i++ ) {
            var inst = insts[i];
    
            run( selector, inst );
        }
    
        return ret;
    };
    
    /**
     * Default function used for formatting output data.
     * @param {*} str Data to strip
     */
    Buttons.stripData = function ( str, config ) {
        if ( typeof str !== 'string' ) {
            return str;
        }
    
        // Always remove script tags
        str = str.replace( /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '' );
    
        // Always remove comments
        str = str.replace( /<!\-\-.*?\-\->/g, '' );
    
        if ( ! config || config.stripHtml ) {
            str = str.replace( /<[^>]*>/g, '' );
        }
    
        if ( ! config || config.trim ) {
            str = str.replace( /^\s+|\s+$/g, '' );
        }
    
        if ( ! config || config.stripNewlines ) {
            str = str.replace( /\n/g, ' ' );
        }
    
        if ( ! config || config.decodeEntities ) {
            _exportTextarea.innerHTML = str;
            str = _exportTextarea.value;
        }
    
        return str;
    };
    
    
    /**
     * Buttons defaults. For full documentation, please refer to the docs/option
     * directory or the DataTables site.
     * @type {Object}
     * @static
     */
    Buttons.defaults = {
        buttons: [ 'copy', 'excel', 'csv', 'pdf', 'print' ],
        name: 'main',
        tabIndex: 0,
        dom: {
            container: {
                tag: 'div',
                className: 'dt-buttons'
            },
            collection: {
                tag: 'div',
                className: ''
            },
            button: {
                tag: 'button',
                className: 'dt-button',
                active: 'active',
                disabled: 'disabled'
            },
            buttonLiner: {
                tag: 'span',
                className: ''
            }
        }
    };
    
    /**
     * Version information
     * @type {string}
     * @static
     */
    Buttons.version = '1.7.1';
    
    
    $.extend( _dtButtons, {
        collection: {
            text: function ( dt ) {
                return dt.i18n( 'buttons.collection', 'Collection' );
            },
            className: 'buttons-collection',
            init: function ( dt, button, config ) {
                button.attr( 'aria-expanded', false );
            },
            action: function ( e, dt, button, config ) {
                e.stopPropagation();
    
                if ( config._collection.parents('body').length ) {
                    this.popover(false, config);
                }
                else {
                    this.popover(config._collection, config);
                }
            },
            attr: {
                'aria-haspopup': true
            }
            // Also the popover options, defined in Buttons.popover
        },
        copy: function ( dt, conf ) {
            if ( _dtButtons.copyHtml5 ) {
                return 'copyHtml5';
            }
        },
        csv: function ( dt, conf ) {
            if ( _dtButtons.csvHtml5 && _dtButtons.csvHtml5.available( dt, conf ) ) {
                return 'csvHtml5';
            }
        },
        excel: function ( dt, conf ) {
            if ( _dtButtons.excelHtml5 && _dtButtons.excelHtml5.available( dt, conf ) ) {
                return 'excelHtml5';
            }
        },
        pdf: function ( dt, conf ) {
            if ( _dtButtons.pdfHtml5 && _dtButtons.pdfHtml5.available( dt, conf ) ) {
                return 'pdfHtml5';
            }
        },
        pageLength: function ( dt ) {
            var lengthMenu = dt.settings()[0].aLengthMenu;
            var vals = [];
            var lang = [];
            var text = function ( dt ) {
                return dt.i18n( 'buttons.pageLength', {
                    "-1": 'Show all rows',
                    _:    'Show %d rows'
                }, dt.page.len() );
            };
    
            // Support for DataTables 1.x 2D array
            if (Array.isArray( lengthMenu[0] )) {
                vals = lengthMenu[0];
                lang = lengthMenu[1];
            }
            else {
                for (var i=0 ; i<lengthMenu.length ; i++) {
                    var option = lengthMenu[i];
    
                    // Support for DataTables 2 object in the array
                    if ($.isPlainObject(option)) {
                        vals.push(option.value);
                        lang.push(option.label);
                    }
                    else {
                        vals.push(option);
                        lang.push(option);
                    }
                }
            }
    
            return {
                extend: 'collection',
                text: text,
                className: 'buttons-page-length',
                autoClose: true,
                buttons: $.map( vals, function ( val, i ) {
                    return {
                        text: lang[i],
                        className: 'button-page-length',
                        action: function ( e, dt ) {
                            dt.page.len( val ).draw();
                        },
                        init: function ( dt, node, conf ) {
                            var that = this;
                            var fn = function () {
                                that.active( dt.page.len() === val );
                            };
    
                            dt.on( 'length.dt'+conf.namespace, fn );
                            fn();
                        },
                        destroy: function ( dt, node, conf ) {
                            dt.off( 'length.dt'+conf.namespace );
                        }
                    };
                } ),
                init: function ( dt, node, conf ) {
                    var that = this;
                    dt.on( 'length.dt'+conf.namespace, function () {
                        that.text( conf.text );
                    } );
                },
                destroy: function ( dt, node, conf ) {
                    dt.off( 'length.dt'+conf.namespace );
                }
            };
        }
    } );
    
    
    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * DataTables API
     *
     * For complete documentation, please refer to the docs/api directory or the
     * DataTables site
     */
    
    // Buttons group and individual button selector
    DataTable.Api.register( 'buttons()', function ( group, selector ) {
        // Argument shifting
        if ( selector === undefined ) {
            selector = group;
            group = undefined;
        }
    
        this.selector.buttonGroup = group;
    
        var res = this.iterator( true, 'table', function ( ctx ) {
            if ( ctx._buttons ) {
                return Buttons.buttonSelector(
                    Buttons.instanceSelector( group, ctx._buttons ),
                    selector
                );
            }
        }, true );
    
        res._groupSelector = group;
        return res;
    } );
    
    // Individual button selector
    DataTable.Api.register( 'button()', function ( group, selector ) {
        // just run buttons() and truncate
        var buttons = this.buttons( group, selector );
    
        if ( buttons.length > 1 ) {
            buttons.splice( 1, buttons.length );
        }
    
        return buttons;
    } );
    
    // Active buttons
    DataTable.Api.registerPlural( 'buttons().active()', 'button().active()', function ( flag ) {
        if ( flag === undefined ) {
            return this.map( function ( set ) {
                return set.inst.active( set.node );
            } );
        }
    
        return this.each( function ( set ) {
            set.inst.active( set.node, flag );
        } );
    } );
    
    // Get / set button action
    DataTable.Api.registerPlural( 'buttons().action()', 'button().action()', function ( action ) {
        if ( action === undefined ) {
            return this.map( function ( set ) {
                return set.inst.action( set.node );
            } );
        }
    
        return this.each( function ( set ) {
            set.inst.action( set.node, action );
        } );
    } );
    
    // Enable / disable buttons
    DataTable.Api.register( ['buttons().enable()', 'button().enable()'], function ( flag ) {
        return this.each( function ( set ) {
            set.inst.enable( set.node, flag );
        } );
    } );
    
    // Disable buttons
    DataTable.Api.register( ['buttons().disable()', 'button().disable()'], function () {
        return this.each( function ( set ) {
            set.inst.disable( set.node );
        } );
    } );
    
    // Get button nodes
    DataTable.Api.registerPlural( 'buttons().nodes()', 'button().node()', function () {
        var jq = $();
    
        // jQuery will automatically reduce duplicates to a single entry
        $( this.each( function ( set ) {
            jq = jq.add( set.inst.node( set.node ) );
        } ) );
    
        return jq;
    } );
    
    // Get / set button processing state
    DataTable.Api.registerPlural( 'buttons().processing()', 'button().processing()', function ( flag ) {
        if ( flag === undefined ) {
            return this.map( function ( set ) {
                return set.inst.processing( set.node );
            } );
        }
    
        return this.each( function ( set ) {
            set.inst.processing( set.node, flag );
        } );
    } );
    
    // Get / set button text (i.e. the button labels)
    DataTable.Api.registerPlural( 'buttons().text()', 'button().text()', function ( label ) {
        if ( label === undefined ) {
            return this.map( function ( set ) {
                return set.inst.text( set.node );
            } );
        }
    
        return this.each( function ( set ) {
            set.inst.text( set.node, label );
        } );
    } );
    
    // Trigger a button's action
    DataTable.Api.registerPlural( 'buttons().trigger()', 'button().trigger()', function () {
        return this.each( function ( set ) {
            set.inst.node( set.node ).trigger( 'click' );
        } );
    } );
    
    // Button resolver to the popover
    DataTable.Api.register( 'button().popover()', function (content, options) {
        return this.map( function ( set ) {
            return set.inst._popover( content, this.button(this[0].node), options );
        } );
    } );
    
    // Get the container elements
    DataTable.Api.register( 'buttons().containers()', function () {
        var jq = $();
        var groupSelector = this._groupSelector;
    
        // We need to use the group selector directly, since if there are no buttons
        // the result set will be empty
        this.iterator( true, 'table', function ( ctx ) {
            if ( ctx._buttons ) {
                var insts = Buttons.instanceSelector( groupSelector, ctx._buttons );
    
                for ( var i=0, ien=insts.length ; i<ien ; i++ ) {
                    jq = jq.add( insts[i].container() );
                }
            }
        } );
    
        return jq;
    } );
    
    DataTable.Api.register( 'buttons().container()', function () {
        // API level of nesting is `buttons()` so we can zip into the containers method
        return this.containers().eq(0);
    } );
    
    // Add a new button
    DataTable.Api.register( 'button().add()', function ( idx, conf ) {
        var ctx = this.context;
    
        // Don't use `this` as it could be empty - select the instances directly
        if ( ctx.length ) {
            var inst = Buttons.instanceSelector( this._groupSelector, ctx[0]._buttons );
    
            if ( inst.length ) {
                inst[0].add( conf, idx );
            }
        }
    
        return this.button( this._groupSelector, idx );
    } );
    
    // Destroy the button sets selected
    DataTable.Api.register( 'buttons().destroy()', function () {
        this.pluck( 'inst' ).unique().each( function ( inst ) {
            inst.destroy();
        } );
    
        return this;
    } );
    
    // Remove a button
    DataTable.Api.registerPlural( 'buttons().remove()', 'buttons().remove()', function () {
        this.each( function ( set ) {
            set.inst.remove( set.node );
        } );
    
        return this;
    } );
    
    // Information box that can be used by buttons
    var _infoTimer;
    DataTable.Api.register( 'buttons.info()', function ( title, message, time ) {
        var that = this;
    
        if ( title === false ) {
            this.off('destroy.btn-info');
            _fadeOut(
                $('#datatables_buttons_info'),
                400,
                function () {
                    $(this).remove();
                }
            );
            clearTimeout( _infoTimer );
            _infoTimer = null;
    
            return this;
        }
    
        if ( _infoTimer ) {
            clearTimeout( _infoTimer );
        }
    
        if ( $('#datatables_buttons_info').length ) {
            $('#datatables_buttons_info').remove();
        }
    
        title = title ? '<h2>'+title+'</h2>' : '';
    
        _fadeIn(
            $('<div id="datatables_buttons_info" class="dt-button-info"/>')
                .html( title )
                .append( $('<div/>')[ typeof message === 'string' ? 'html' : 'append' ]( message ) )
                .css( 'display', 'none' )
                .appendTo( 'body' )
        );
    
        if ( time !== undefined && time !== 0 ) {
            _infoTimer = setTimeout( function () {
                that.buttons.info( false );
            }, time );
        }
    
        this.on('destroy.btn-info', function () {
            that.buttons.info(false);
        });
    
        return this;
    } );
    
    // Get data from the table for export - this is common to a number of plug-in
    // buttons so it is included in the Buttons core library
    DataTable.Api.register( 'buttons.exportData()', function ( options ) {
        if ( this.context.length ) {
            return _exportData( new DataTable.Api( this.context[0] ), options );
        }
    } );
    
    // Get information about the export that is common to many of the export data
    // types (DRY)
    DataTable.Api.register( 'buttons.exportInfo()', function ( conf ) {
        if ( ! conf ) {
            conf = {};
        }
    
        return {
            filename: _filename( conf ),
            title: _title( conf ),
            messageTop: _message(this, conf.message || conf.messageTop, 'top'),
            messageBottom: _message(this, conf.messageBottom, 'bottom')
        };
    } );
    
    
    
    /**
     * Get the file name for an exported file.
     *
     * @param {object}	config Button configuration
     * @param {boolean} incExtension Include the file name extension
     */
    var _filename = function ( config )
    {
        // Backwards compatibility
        var filename = config.filename === '*' && config.title !== '*' && config.title !== undefined && config.title !== null && config.title !== '' ?
            config.title :
            config.filename;
    
        if ( typeof filename === 'function' ) {
            filename = filename();
        }
    
        if ( filename === undefined || filename === null ) {
            return null;
        }
    
        if ( filename.indexOf( '*' ) !== -1 ) {
            filename = filename.replace( '*', $('head > title').text() ).trim();
        }
    
        // Strip characters which the OS will object to
        filename = filename.replace(/[^a-zA-Z0-9_\u00A1-\uFFFF\.,\-_ !\(\)]/g, "");
    
        var extension = _stringOrFunction( config.extension );
        if ( ! extension ) {
            extension = '';
        }
    
        return filename + extension;
    };
    
    /**
     * Simply utility method to allow parameters to be given as a function
     *
     * @param {undefined|string|function} option Option
     * @return {null|string} Resolved value
     */
    var _stringOrFunction = function ( option )
    {
        if ( option === null || option === undefined ) {
            return null;
        }
        else if ( typeof option === 'function' ) {
            return option();
        }
        return option;
    };
    
    /**
     * Get the title for an exported file.
     *
     * @param {object} config	Button configuration
     */
    var _title = function ( config )
    {
        var title = _stringOrFunction( config.title );
    
        return title === null ?
            null : title.indexOf( '*' ) !== -1 ?
                title.replace( '*', $('head > title').text() || 'Exported data' ) :
                title;
    };
    
    var _message = function ( dt, option, position )
    {
        var message = _stringOrFunction( option );
        if ( message === null ) {
            return null;
        }
    
        var caption = $('caption', dt.table().container()).eq(0);
        if ( message === '*' ) {
            var side = caption.css( 'caption-side' );
            if ( side !== position ) {
                return null;
            }
    
            return caption.length ?
                caption.text() :
                '';
        }
    
        return message;
    };
    
    
    
    
    var _exportTextarea = $('<textarea/>')[0];
    var _exportData = function ( dt, inOpts )
    {
        var config = $.extend( true, {}, {
            rows:           null,
            columns:        '',
            modifier:       {
                search: 'applied',
                order:  'applied'
            },
            orthogonal:     'display',
            stripHtml:      true,
            stripNewlines:  true,
            decodeEntities: true,
            trim:           true,
            format:         {
                header: function ( d ) {
                    return Buttons.stripData( d, config );
                },
                footer: function ( d ) {
                    return Buttons.stripData( d, config );
                },
                body: function ( d ) {
                    return Buttons.stripData( d, config );
                }
            },
            customizeData: null
        }, inOpts );
    
        var header = dt.columns( config.columns ).indexes().map( function (idx) {
            var el = dt.column( idx ).header();
            return config.format.header( el.innerHTML, idx, el );
        } ).toArray();
    
        var footer = dt.table().footer() ?
            dt.columns( config.columns ).indexes().map( function (idx) {
                var el = dt.column( idx ).footer();
                return config.format.footer( el ? el.innerHTML : '', idx, el );
            } ).toArray() :
            null;
        
        // If Select is available on this table, and any rows are selected, limit the export
        // to the selected rows. If no rows are selected, all rows will be exported. Specify
        // a `selected` modifier to control directly.
        var modifier = $.extend( {}, config.modifier );
        if ( dt.select && typeof dt.select.info === 'function' && modifier.selected === undefined ) {
            if ( dt.rows( config.rows, $.extend( { selected: true }, modifier ) ).any() ) {
                $.extend( modifier, { selected: true } )
            }
        }
    
        var rowIndexes = dt.rows( config.rows, modifier ).indexes().toArray();
        var selectedCells = dt.cells( rowIndexes, config.columns );
        var cells = selectedCells
            .render( config.orthogonal )
            .toArray();
        var cellNodes = selectedCells
            .nodes()
            .toArray();
    
        var columns = header.length;
        var rows = columns > 0 ? cells.length / columns : 0;
        var body = [];
        var cellCounter = 0;
    
        for ( var i=0, ien=rows ; i<ien ; i++ ) {
            var row = [ columns ];
    
            for ( var j=0 ; j<columns ; j++ ) {
                row[j] = config.format.body( cells[ cellCounter ], i, j, cellNodes[ cellCounter ] );
                cellCounter++;
            }
    
            body[i] = row;
        }
    
        var data = {
            header: header,
            footer: footer,
            body:   body
        };
    
        if ( config.customizeData ) {
            config.customizeData( data );
        }
    
        return data;
    };
    
    
    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * DataTables interface
     */
    
    // Attach to DataTables objects for global access
    $.fn.dataTable.Buttons = Buttons;
    $.fn.DataTable.Buttons = Buttons;
    
    
    
    // DataTables creation - check if the buttons have been defined for this table,
    // they will have been if the `B` option was used in `dom`, otherwise we should
    // create the buttons instance here so they can be inserted into the document
    // using the API. Listen for `init` for compatibility with pre 1.10.10, but to
    // be removed in future.
    $(document).on( 'init.dt plugin-init.dt', function (e, settings) {
        if ( e.namespace !== 'dt' ) {
            return;
        }
    
        var opts = settings.oInit.buttons || DataTable.defaults.buttons;
    
        if ( opts && ! settings._buttons ) {
            new Buttons( settings, opts ).container();
        }
    } );
    
    function _init ( settings, options ) {
        var api = new DataTable.Api( settings );
        var opts = options
            ? options
            : api.init().buttons || DataTable.defaults.buttons;
    
        return new Buttons( api, opts ).container();
    }
    
    // DataTables `dom` feature option
    DataTable.ext.feature.push( {
        fnInit: _init,
        cFeature: "B"
    } );
    
    // DataTables 2 layout feature
    if ( DataTable.ext.features ) {
        DataTable.ext.features.register( 'buttons', _init );
    }
    
    
    return Buttons;
    }));
    
    },{"datatables.net":404}],402:[function(require,module,exports){
    /*! Responsive 2.5.0
     * © SpryMedia Ltd - datatables.net/license
     */
    
    (function( factory ){
        if ( typeof define === 'function' && define.amd ) {
            // AMD
            define( ['jquery', 'datatables.net'], function ( $ ) {
                return factory( $, window, document );
            } );
        }
        else if ( typeof exports === 'object' ) {
            // CommonJS
            var jq = require('jquery');
            var cjsRequires = function (root, $) {
                if ( ! $.fn.dataTable ) {
                    require('datatables.net')(root, $);
                }
            };
    
            if (typeof window === 'undefined') {
                module.exports = function (root, $) {
                    if ( ! root ) {
                        // CommonJS environments without a window global must pass a
                        // root. This will give an error otherwise
                        root = window;
                    }
    
                    if ( ! $ ) {
                        $ = jq( root );
                    }
    
                    cjsRequires( root, $ );
                    return factory( $, root, root.document );
                };
            }
            else {
                cjsRequires( window, jq );
                module.exports = factory( jq, window, window.document );
            }
        }
        else {
            // Browser
            factory( jQuery, window, document );
        }
    }(function( $, window, document, undefined ) {
    'use strict';
    var DataTable = $.fn.dataTable;
    
    
    
    /**
     * @summary     Responsive
     * @description Responsive tables plug-in for DataTables
     * @version     2.5.0
     * @author      SpryMedia Ltd
     * @copyright   SpryMedia Ltd.
     *
     * This source file is free software, available under the following license:
     *   MIT license - http://datatables.net/license/mit
     *
     * This source file is distributed in the hope that it will be useful, but
     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
     * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
     *
     * For details please refer to: http://www.datatables.net
     */
    
    /**
     * Responsive is a plug-in for the DataTables library that makes use of
     * DataTables' ability to change the visibility of columns, changing the
     * visibility of columns so the displayed columns fit into the table container.
     * The end result is that complex tables will be dynamically adjusted to fit
     * into the viewport, be it on a desktop, tablet or mobile browser.
     *
     * Responsive for DataTables has two modes of operation, which can used
     * individually or combined:
     *
     * * Class name based control - columns assigned class names that match the
     *   breakpoint logic can be shown / hidden as required for each breakpoint.
     * * Automatic control - columns are automatically hidden when there is no
     *   room left to display them. Columns removed from the right.
     *
     * In additional to column visibility control, Responsive also has built into
     * options to use DataTables' child row display to show / hide the information
     * from the table that has been hidden. There are also two modes of operation
     * for this child row display:
     *
     * * Inline - when the control element that the user can use to show / hide
     *   child rows is displayed inside the first column of the table.
     * * Column - where a whole column is dedicated to be the show / hide control.
     *
     * Initialisation of Responsive is performed by:
     *
     * * Adding the class `responsive` or `dt-responsive` to the table. In this case
     *   Responsive will automatically be initialised with the default configuration
     *   options when the DataTable is created.
     * * Using the `responsive` option in the DataTables configuration options. This
     *   can also be used to specify the configuration options, or simply set to
     *   `true` to use the defaults.
     *
     *  @class
     *  @param {object} settings DataTables settings object for the host table
     *  @param {object} [opts] Configuration options
     *  @requires jQuery 1.7+
     *  @requires DataTables 1.10.3+
     *
     *  @example
     *      $('#example').DataTable( {
     *        responsive: true
     *      } );
     *    } );
     */
    var Responsive = function (settings, opts) {
        // Sanity check that we are using DataTables 1.10 or newer
        if (!DataTable.versionCheck || !DataTable.versionCheck('1.10.10')) {
            throw 'DataTables Responsive requires DataTables 1.10.10 or newer';
        }
    
        this.s = {
            childNodeStore: {},
            columns: [],
            current: [],
            dt: new DataTable.Api(settings)
        };
    
        // Check if responsive has already been initialised on this table
        if (this.s.dt.settings()[0].responsive) {
            return;
        }
    
        // details is an object, but for simplicity the user can give it as a string
        // or a boolean
        if (opts && typeof opts.details === 'string') {
            opts.details = { type: opts.details };
        }
        else if (opts && opts.details === false) {
            opts.details = { type: false };
        }
        else if (opts && opts.details === true) {
            opts.details = { type: 'inline' };
        }
    
        this.c = $.extend(true, {}, Responsive.defaults, DataTable.defaults.responsive, opts);
        settings.responsive = this;
        this._constructor();
    };
    
    $.extend(Responsive.prototype, {
        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         * Constructor
         */
    
        /**
         * Initialise the Responsive instance
         *
         * @private
         */
        _constructor: function () {
            var that = this;
            var dt = this.s.dt;
            var dtPrivateSettings = dt.settings()[0];
            var oldWindowWidth = $(window).innerWidth();
    
            dt.settings()[0]._responsive = this;
    
            // Use DataTables' throttle function to avoid processor thrashing on
            // resize
            $(window).on(
                'resize.dtr orientationchange.dtr',
                DataTable.util.throttle(function () {
                    // iOS has a bug whereby resize can fire when only scrolling
                    // See: http://stackoverflow.com/questions/8898412
                    var width = $(window).innerWidth();
    
                    if (width !== oldWindowWidth) {
                        that._resize();
                        oldWindowWidth = width;
                    }
                })
            );
    
            // DataTables doesn't currently trigger an event when a row is added, so
            // we need to hook into its private API to enforce the hidden rows when
            // new data is added
            dtPrivateSettings.oApi._fnCallbackReg(
                dtPrivateSettings,
                'aoRowCreatedCallback',
                function (tr, data, idx) {
                    if ($.inArray(false, that.s.current) !== -1) {
                        $('>td, >th', tr).each(function (i) {
                            var idx = dt.column.index('toData', i);
    
                            if (that.s.current[idx] === false) {
                                $(this).css('display', 'none');
                            }
                        });
                    }
                }
            );
    
            // Destroy event handler
            dt.on('destroy.dtr', function () {
                dt.off('.dtr');
                $(dt.table().body()).off('.dtr');
                $(window).off('resize.dtr orientationchange.dtr');
                dt.cells('.dtr-control').nodes().to$().removeClass('dtr-control');
    
                // Restore the columns that we've hidden
                $.each(that.s.current, function (i, val) {
                    if (val === false) {
                        that._setColumnVis(i, true);
                    }
                });
            });
    
            // Reorder the breakpoints array here in case they have been added out
            // of order
            this.c.breakpoints.sort(function (a, b) {
                return a.width < b.width ? 1 : a.width > b.width ? -1 : 0;
            });
    
            this._classLogic();
            this._resizeAuto();
    
            // Details handler
            var details = this.c.details;
    
            if (details.type !== false) {
                that._detailsInit();
    
                // DataTables will trigger this event on every column it shows and
                // hides individually
                dt.on('column-visibility.dtr', function () {
                    // Use a small debounce to allow multiple columns to be set together
                    if (that._timer) {
                        clearTimeout(that._timer);
                    }
    
                    that._timer = setTimeout(function () {
                        that._timer = null;
    
                        that._classLogic();
                        that._resizeAuto();
                        that._resize(true);
    
                        that._redrawChildren();
                    }, 100);
                });
    
                // Redraw the details box on each draw which will happen if the data
                // has changed. This is used until DataTables implements a native
                // `updated` event for rows
                dt.on('draw.dtr', function () {
                    that._redrawChildren();
                });
    
                $(dt.table().node()).addClass('dtr-' + details.type);
            }
    
            dt.on('column-reorder.dtr', function (e, settings, details) {
                that._classLogic();
                that._resizeAuto();
                that._resize(true);
            });
    
            // Change in column sizes means we need to calc
            dt.on('column-sizing.dtr', function () {
                that._resizeAuto();
                that._resize();
            });
    
            // DT2 let's us tell it if we are hiding columns
            dt.on('column-calc.dt', function (e, d) {
                var curr = that.s.current;
    
                for (var i = 0; i < curr.length; i++) {
                    var idx = d.visible.indexOf(i);
    
                    if (curr[i] === false && idx >= 0) {
                        d.visible.splice(idx, 1);
                    }
                }
            });
    
            // On Ajax reload we want to reopen any child rows which are displayed
            // by responsive
            dt.on('preXhr.dtr', function () {
                var rowIds = [];
                dt.rows().every(function () {
                    if (this.child.isShown()) {
                        rowIds.push(this.id(true));
                    }
                });
    
                dt.one('draw.dtr', function () {
                    that._resizeAuto();
                    that._resize();
    
                    dt.rows(rowIds).every(function () {
                        that._detailsDisplay(this, false);
                    });
                });
            });
    
            dt.on('draw.dtr', function () {
                that._controlClass();
            }).on('init.dtr', function (e, settings, details) {
                if (e.namespace !== 'dt') {
                    return;
                }
    
                that._resizeAuto();
                that._resize();
    
                // If columns were hidden, then DataTables needs to adjust the
                // column sizing
                if ($.inArray(false, that.s.current)) {
                    dt.columns.adjust();
                }
            });
    
            // First pass - draw the table for the current viewport size
            this._resize();
        },
    
        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         * Private methods
         */
    
        /**
         * Get and store nodes from a cell - use for node moving renderers
         *
         * @param {*} dt DT instance
         * @param {*} row Row index
         * @param {*} col Column index
         */
        _childNodes: function (dt, row, col) {
            var name = row + '-' + col;
    
            if (this.s.childNodeStore[name]) {
                return this.s.childNodeStore[name];
            }
    
            // https://jsperf.com/childnodes-array-slice-vs-loop
            var nodes = [];
            var children = dt.cell(row, col).node().childNodes;
            for (var i = 0, ien = children.length; i < ien; i++) {
                nodes.push(children[i]);
            }
    
            this.s.childNodeStore[name] = nodes;
    
            return nodes;
        },
    
        /**
         * Restore nodes from the cache to a table cell
         *
         * @param {*} dt DT instance
         * @param {*} row Row index
         * @param {*} col Column index
         */
        _childNodesRestore: function (dt, row, col) {
            var name = row + '-' + col;
    
            if (!this.s.childNodeStore[name]) {
                return;
            }
    
            var node = dt.cell(row, col).node();
            var store = this.s.childNodeStore[name];
            var parent = store[0].parentNode;
            var parentChildren = parent.childNodes;
            var a = [];
    
            for (var i = 0, ien = parentChildren.length; i < ien; i++) {
                a.push(parentChildren[i]);
            }
    
            for (var j = 0, jen = a.length; j < jen; j++) {
                node.appendChild(a[j]);
            }
    
            this.s.childNodeStore[name] = undefined;
        },
    
        /**
         * Calculate the visibility for the columns in a table for a given
         * breakpoint. The result is pre-determined based on the class logic if
         * class names are used to control all columns, but the width of the table
         * is also used if there are columns which are to be automatically shown
         * and hidden.
         *
         * @param  {string} breakpoint Breakpoint name to use for the calculation
         * @return {array} Array of boolean values initiating the visibility of each
         *   column.
         *  @private
         */
        _columnsVisiblity: function (breakpoint) {
            var dt = this.s.dt;
            var columns = this.s.columns;
            var i, ien;
    
            // Create an array that defines the column ordering based first on the
            // column's priority, and secondly the column index. This allows the
            // columns to be removed from the right if the priority matches
            var order = columns
                .map(function (col, idx) {
                    return {
                        columnIdx: idx,
                        priority: col.priority
                    };
                })
                .sort(function (a, b) {
                    if (a.priority !== b.priority) {
                        return a.priority - b.priority;
                    }
                    return a.columnIdx - b.columnIdx;
                });
    
            // Class logic - determine which columns are in this breakpoint based
            // on the classes. If no class control (i.e. `auto`) then `-` is used
            // to indicate this to the rest of the function
            var display = $.map(columns, function (col, i) {
                if (dt.column(i).visible() === false) {
                    return 'not-visible';
                }
                return col.auto && col.minWidth === null
                    ? false
                    : col.auto === true
                    ? '-'
                    : $.inArray(breakpoint, col.includeIn) !== -1;
            });
    
            // Auto column control - first pass: how much width is taken by the
            // ones that must be included from the non-auto columns
            var requiredWidth = 0;
            for (i = 0, ien = display.length; i < ien; i++) {
                if (display[i] === true) {
                    requiredWidth += columns[i].minWidth;
                }
            }
    
            // Second pass, use up any remaining width for other columns. For
            // scrolling tables we need to subtract the width of the scrollbar. It
            // may not be requires which makes this sub-optimal, but it would
            // require another full redraw to make complete use of those extra few
            // pixels
            var scrolling = dt.settings()[0].oScroll;
            var bar = scrolling.sY || scrolling.sX ? scrolling.iBarWidth : 0;
            var widthAvailable = dt.table().container().offsetWidth - bar;
            var usedWidth = widthAvailable - requiredWidth;
    
            // Control column needs to always be included. This makes it sub-
            // optimal in terms of using the available with, but to stop layout
            // thrashing or overflow. Also we need to account for the control column
            // width first so we know how much width is available for the other
            // columns, since the control column might not be the first one shown
            for (i = 0, ien = display.length; i < ien; i++) {
                if (columns[i].control) {
                    usedWidth -= columns[i].minWidth;
                }
            }
    
            // Allow columns to be shown (counting by priority and then right to
            // left) until we run out of room
            var empty = false;
            for (i = 0, ien = order.length; i < ien; i++) {
                var colIdx = order[i].columnIdx;
    
                if (display[colIdx] === '-' && !columns[colIdx].control && columns[colIdx].minWidth) {
                    // Once we've found a column that won't fit we don't let any
                    // others display either, or columns might disappear in the
                    // middle of the table
                    if (empty || usedWidth - columns[colIdx].minWidth < 0) {
                        empty = true;
                        display[colIdx] = false;
                    }
                    else {
                        display[colIdx] = true;
                    }
    
                    usedWidth -= columns[colIdx].minWidth;
                }
            }
    
            // Determine if the 'control' column should be shown (if there is one).
            // This is the case when there is a hidden column (that is not the
            // control column). The two loops look inefficient here, but they are
            // trivial and will fly through. We need to know the outcome from the
            // first , before the action in the second can be taken
            var showControl = false;
    
            for (i = 0, ien = columns.length; i < ien; i++) {
                if (!columns[i].control && !columns[i].never && display[i] === false) {
                    showControl = true;
                    break;
                }
            }
    
            for (i = 0, ien = columns.length; i < ien; i++) {
                if (columns[i].control) {
                    display[i] = showControl;
                }
    
                // Replace not visible string with false from the control column detection above
                if (display[i] === 'not-visible') {
                    display[i] = false;
                }
            }
    
            // Finally we need to make sure that there is at least one column that
            // is visible
            if ($.inArray(true, display) === -1) {
                display[0] = true;
            }
    
            return display;
        },
    
        /**
         * Create the internal `columns` array with information about the columns
         * for the table. This includes determining which breakpoints the column
         * will appear in, based upon class names in the column, which makes up the
         * vast majority of this method.
         *
         * @private
         */
        _classLogic: function () {
            var that = this;
            var calc = {};
            var breakpoints = this.c.breakpoints;
            var dt = this.s.dt;
            var columns = dt
                .columns()
                .eq(0)
                .map(function (i) {
                    var column = this.column(i);
                    var className = column.header().className;
                    var priority = dt.settings()[0].aoColumns[i].responsivePriority;
                    var dataPriority = column.header().getAttribute('data-priority');
    
                    if (priority === undefined) {
                        priority =
                            dataPriority === undefined || dataPriority === null
                                ? 10000
                                : dataPriority * 1;
                    }
    
                    return {
                        className: className,
                        includeIn: [],
                        auto: false,
                        control: false,
                        never: className.match(/\b(dtr\-)?never\b/) ? true : false,
                        priority: priority
                    };
                });
    
            // Simply add a breakpoint to `includeIn` array, ensuring that there are
            // no duplicates
            var add = function (colIdx, name) {
                var includeIn = columns[colIdx].includeIn;
    
                if ($.inArray(name, includeIn) === -1) {
                    includeIn.push(name);
                }
            };
    
            var column = function (colIdx, name, operator, matched) {
                var size, i, ien;
    
                if (!operator) {
                    columns[colIdx].includeIn.push(name);
                }
                else if (operator === 'max-') {
                    // Add this breakpoint and all smaller
                    size = that._find(name).width;
    
                    for (i = 0, ien = breakpoints.length; i < ien; i++) {
                        if (breakpoints[i].width <= size) {
                            add(colIdx, breakpoints[i].name);
                        }
                    }
                }
                else if (operator === 'min-') {
                    // Add this breakpoint and all larger
                    size = that._find(name).width;
    
                    for (i = 0, ien = breakpoints.length; i < ien; i++) {
                        if (breakpoints[i].width >= size) {
                            add(colIdx, breakpoints[i].name);
                        }
                    }
                }
                else if (operator === 'not-') {
                    // Add all but this breakpoint
                    for (i = 0, ien = breakpoints.length; i < ien; i++) {
                        if (breakpoints[i].name.indexOf(matched) === -1) {
                            add(colIdx, breakpoints[i].name);
                        }
                    }
                }
            };
    
            // Loop over each column and determine if it has a responsive control
            // class
            columns.each(function (col, i) {
                var classNames = col.className.split(' ');
                var hasClass = false;
    
                // Split the class name up so multiple rules can be applied if needed
                for (var k = 0, ken = classNames.length; k < ken; k++) {
                    var className = classNames[k].trim();
    
                    if (className === 'all' || className === 'dtr-all') {
                        // Include in all
                        hasClass = true;
                        col.includeIn = $.map(breakpoints, function (a) {
                            return a.name;
                        });
                        return;
                    }
                    else if (className === 'none' || className === 'dtr-none' || col.never) {
                        // Include in none (default) and no auto
                        hasClass = true;
                        return;
                    }
                    else if (className === 'control' || className === 'dtr-control') {
                        // Special column that is only visible, when one of the other
                        // columns is hidden. This is used for the details control
                        hasClass = true;
                        col.control = true;
                        return;
                    }
    
                    $.each(breakpoints, function (j, breakpoint) {
                        // Does this column have a class that matches this breakpoint?
                        var brokenPoint = breakpoint.name.split('-');
                        var re = new RegExp(
                            '(min\\-|max\\-|not\\-)?(' + brokenPoint[0] + ')(\\-[_a-zA-Z0-9])?'
                        );
                        var match = className.match(re);
    
                        if (match) {
                            hasClass = true;
    
                            if (match[2] === brokenPoint[0] && match[3] === '-' + brokenPoint[1]) {
                                // Class name matches breakpoint name fully
                                column(i, breakpoint.name, match[1], match[2] + match[3]);
                            }
                            else if (match[2] === brokenPoint[0] && !match[3]) {
                                // Class name matched primary breakpoint name with no qualifier
                                column(i, breakpoint.name, match[1], match[2]);
                            }
                        }
                    });
                }
    
                // If there was no control class, then automatic sizing is used
                if (!hasClass) {
                    col.auto = true;
                }
            });
    
            this.s.columns = columns;
        },
    
        /**
         * Update the cells to show the correct control class / button
         * @private
         */
        _controlClass: function () {
            if (this.c.details.type === 'inline') {
                var dt = this.s.dt;
                var columnsVis = this.s.current;
                var firstVisible = $.inArray(true, columnsVis);
    
                // Remove from any cells which shouldn't have it
                dt.cells(
                    null,
                    function (idx) {
                        return idx !== firstVisible;
                    },
                    { page: 'current' }
                )
                    .nodes()
                    .to$()
                    .filter('.dtr-control')
                    .removeClass('dtr-control');
    
                dt.cells(null, firstVisible, { page: 'current' }).nodes().to$().addClass('dtr-control');
            }
        },
    
        /**
         * Show the details for the child row
         *
         * @param  {DataTables.Api} row    API instance for the row
         * @param  {boolean}        update Update flag
         * @private
         */
        _detailsDisplay: function (row, update) {
            var that = this;
            var dt = this.s.dt;
            var details = this.c.details;
            var event = function (res) {
                $(row.node()).toggleClass('parent', res !== false);
                $(dt.table().node()).triggerHandler('responsive-display.dt', [dt, row, res, update]);
            };
    
            if (details && details.type !== false) {
                var renderer =
                    typeof details.renderer === 'string'
                        ? Responsive.renderer[details.renderer]()
                        : details.renderer;
    
                var res = details.display(
                    row,
                    update,
                    function () {
                        return renderer.call(that, dt, row[0], that._detailsObj(row[0]));
                    },
                    function () {
                        event(false);
                    }
                );
    
                if (typeof res === 'boolean') {
                    event(res);
                }
            }
        },
    
        /**
         * Initialisation for the details handler
         *
         * @private
         */
        _detailsInit: function () {
            var that = this;
            var dt = this.s.dt;
            var details = this.c.details;
    
            // The inline type always uses the first child as the target
            if (details.type === 'inline') {
                details.target = 'td.dtr-control, th.dtr-control';
            }
    
            // Keyboard accessibility
            dt.on('draw.dtr', function () {
                that._tabIndexes();
            });
            that._tabIndexes(); // Initial draw has already happened
    
            $(dt.table().body()).on('keyup.dtr', 'td, th', function (e) {
                if (e.keyCode === 13 && $(this).data('dtr-keyboard')) {
                    $(this).click();
                }
            });
    
            // type.target can be a string jQuery selector or a column index
            var target = details.target;
            var selector = typeof target === 'string' ? target : 'td, th';
    
            if (target !== undefined || target !== null) {
                // Click handler to show / hide the details rows when they are available
                $(dt.table().body()).on('click.dtr mousedown.dtr mouseup.dtr', selector, function (e) {
                    // If the table is not collapsed (i.e. there is no hidden columns)
                    // then take no action
                    if (!$(dt.table().node()).hasClass('collapsed')) {
                        return;
                    }
    
                    // Check that the row is actually a DataTable's controlled node
                    if ($.inArray($(this).closest('tr').get(0), dt.rows().nodes().toArray()) === -1) {
                        return;
                    }
    
                    // For column index, we determine if we should act or not in the
                    // handler - otherwise it is already okay
                    if (typeof target === 'number') {
                        var targetIdx = target < 0 ? dt.columns().eq(0).length + target : target;
    
                        if (dt.cell(this).index().column !== targetIdx) {
                            return;
                        }
                    }
    
                    // $().closest() includes itself in its check
                    var row = dt.row($(this).closest('tr'));
    
                    // Check event type to do an action
                    if (e.type === 'click') {
                        // The renderer is given as a function so the caller can execute it
                        // only when they need (i.e. if hiding there is no point is running
                        // the renderer)
                        that._detailsDisplay(row, false);
                    }
                    else if (e.type === 'mousedown') {
                        // For mouse users, prevent the focus ring from showing
                        $(this).css('outline', 'none');
                    }
                    else if (e.type === 'mouseup') {
                        // And then re-allow at the end of the click
                        $(this).trigger('blur').css('outline', '');
                    }
                });
            }
        },
    
        /**
         * Get the details to pass to a renderer for a row
         * @param  {int} rowIdx Row index
         * @private
         */
        _detailsObj: function (rowIdx) {
            var that = this;
            var dt = this.s.dt;
    
            return $.map(this.s.columns, function (col, i) {
                // Never and control columns should not be passed to the renderer
                if (col.never || col.control) {
                    return;
                }
    
                var dtCol = dt.settings()[0].aoColumns[i];
    
                return {
                    className: dtCol.sClass,
                    columnIndex: i,
                    data: dt.cell(rowIdx, i).render(that.c.orthogonal),
                    hidden: dt.column(i).visible() && !that.s.current[i],
                    rowIndex: rowIdx,
                    title: dtCol.sTitle !== null ? dtCol.sTitle : $(dt.column(i).header()).text()
                };
            });
        },
    
        /**
         * Find a breakpoint object from a name
         *
         * @param  {string} name Breakpoint name to find
         * @return {object}      Breakpoint description object
         * @private
         */
        _find: function (name) {
            var breakpoints = this.c.breakpoints;
    
            for (var i = 0, ien = breakpoints.length; i < ien; i++) {
                if (breakpoints[i].name === name) {
                    return breakpoints[i];
                }
            }
        },
    
        /**
         * Re-create the contents of the child rows as the display has changed in
         * some way.
         *
         * @private
         */
        _redrawChildren: function () {
            var that = this;
            var dt = this.s.dt;
    
            dt.rows({ page: 'current' }).iterator('row', function (settings, idx) {
                that._detailsDisplay(dt.row(idx), true);
            });
        },
    
        /**
         * Alter the table display for a resized viewport. This involves first
         * determining what breakpoint the window currently is in, getting the
         * column visibilities to apply and then setting them.
         *
         * @param  {boolean} forceRedraw Force a redraw
         * @private
         */
        _resize: function (forceRedraw) {
            var that = this;
            var dt = this.s.dt;
            var width = $(window).innerWidth();
            var breakpoints = this.c.breakpoints;
            var breakpoint = breakpoints[0].name;
            var columns = this.s.columns;
            var i, ien;
            var oldVis = this.s.current.slice();
    
            // Determine what breakpoint we are currently at
            for (i = breakpoints.length - 1; i >= 0; i--) {
                if (width <= breakpoints[i].width) {
                    breakpoint = breakpoints[i].name;
                    break;
                }
            }
    
            // Show the columns for that break point
            var columnsVis = this._columnsVisiblity(breakpoint);
            this.s.current = columnsVis;
    
            // Set the class before the column visibility is changed so event
            // listeners know what the state is. Need to determine if there are
            // any columns that are not visible but can be shown
            var collapsedClass = false;
    
            for (i = 0, ien = columns.length; i < ien; i++) {
                if (
                    columnsVis[i] === false &&
                    !columns[i].never &&
                    !columns[i].control &&
                    !dt.column(i).visible() === false
                ) {
                    collapsedClass = true;
                    break;
                }
            }
    
            $(dt.table().node()).toggleClass('collapsed', collapsedClass);
    
            var changed = false;
            var visible = 0;
    
            dt.columns()
                .eq(0)
                .each(function (colIdx, i) {
                    if (columnsVis[i] === true) {
                        visible++;
                    }
    
                    if (forceRedraw || columnsVis[i] !== oldVis[i]) {
                        changed = true;
                        that._setColumnVis(colIdx, columnsVis[i]);
                    }
                });
    
            // Always need to update the display, regardless of if it has changed or not, so nodes
            // can be re-inserted for listHiddenNodes
            this._redrawChildren();
    
            if (changed) {
                // Inform listeners of the change
                $(dt.table().node()).trigger('responsive-resize.dt', [dt, this.s.current]);
    
                // If no records, update the "No records" display element
                if (dt.page.info().recordsDisplay === 0) {
                    $('td', dt.table().body()).eq(0).attr('colspan', visible);
                }
            }
    
            that._controlClass();
        },
    
        /**
         * Determine the width of each column in the table so the auto column hiding
         * has that information to work with. This method is never going to be 100%
         * perfect since column widths can change slightly per page, but without
         * seriously compromising performance this is quite effective.
         *
         * @private
         */
        _resizeAuto: function () {
            var dt = this.s.dt;
            var columns = this.s.columns;
            var that = this;
    
            // Are we allowed to do auto sizing?
            if (!this.c.auto) {
                return;
            }
    
            // Are there any columns that actually need auto-sizing, or do they all
            // have classes defined
            if (
                $.inArray(
                    true,
                    $.map(columns, function (c) {
                        return c.auto;
                    })
                ) === -1
            ) {
                return;
            }
    
            // Need to restore all children. They will be reinstated by a re-render
            if (!$.isEmptyObject(this.s.childNodeStore)) {
                $.each(this.s.childNodeStore, function (key) {
                    var idx = key.split('-');
    
                    that._childNodesRestore(dt, idx[0] * 1, idx[1] * 1);
                });
            }
    
            // Clone the table with the current data in it
            var tableWidth = dt.table().node().offsetWidth;
            var columnWidths = dt.columns;
            var clonedTable = dt.table().node().cloneNode(false);
            var clonedHeader = $(dt.table().header().cloneNode(false)).appendTo(clonedTable);
            var clonedBody = $(dt.table().body()).clone(false, false).empty().appendTo(clonedTable); // use jQuery because of IE8
    
            clonedTable.style.width = 'auto';
    
            // Header
            var headerCells = dt
                .columns()
                .header()
                .filter(function (idx) {
                    return dt.column(idx).visible();
                })
                .to$()
                .clone(false)
                .css('display', 'table-cell')
                .css('width', 'auto')
                .css('min-width', 0);
    
            // Body rows - we don't need to take account of DataTables' column
            // visibility since we implement our own here (hence the `display` set)
            $(clonedBody)
                .append($(dt.rows({ page: 'current' }).nodes()).clone(false))
                .find('th, td')
                .css('display', '');
    
            // Footer
            var footer = dt.table().footer();
            if (footer) {
                var clonedFooter = $(footer.cloneNode(false)).appendTo(clonedTable);
                var footerCells = dt
                    .columns()
                    .footer()
                    .filter(function (idx) {
                        return dt.column(idx).visible();
                    })
                    .to$()
                    .clone(false)
                    .css('display', 'table-cell');
    
                $('<tr/>').append(footerCells).appendTo(clonedFooter);
            }
    
            $('<tr/>').append(headerCells).appendTo(clonedHeader);
    
            // In the inline case extra padding is applied to the first column to
            // give space for the show / hide icon. We need to use this in the
            // calculation
            if (this.c.details.type === 'inline') {
                $(clonedTable).addClass('dtr-inline collapsed');
            }
    
            // It is unsafe to insert elements with the same name into the DOM
            // multiple times. For example, cloning and inserting a checked radio
            // clears the chcecked state of the original radio.
            $(clonedTable).find('[name]').removeAttr('name');
    
            // A position absolute table would take the table out of the flow of
            // our container element, bypassing the height and width (Scroller)
            $(clonedTable).css('position', 'relative');
    
            var inserted = $('<div/>')
                .css({
                    width: 1,
                    height: 1,
                    overflow: 'hidden',
                    clear: 'both'
                })
                .append(clonedTable);
    
            inserted.insertBefore(dt.table().node());
    
            // The cloned header now contains the smallest that each column can be
            headerCells.each(function (i) {
                var idx = dt.column.index('fromVisible', i);
                columns[idx].minWidth = this.offsetWidth || 0;
            });
    
            inserted.remove();
        },
    
        /**
         * Get the state of the current hidden columns - controlled by Responsive only
         */
        _responsiveOnlyHidden: function () {
            var dt = this.s.dt;
    
            return $.map(this.s.current, function (v, i) {
                // If the column is hidden by DataTables then it can't be hidden by
                // Responsive!
                if (dt.column(i).visible() === false) {
                    return true;
                }
                return v;
            });
        },
    
        /**
         * Set a column's visibility.
         *
         * We don't use DataTables' column visibility controls in order to ensure
         * that column visibility can Responsive can no-exist. Since only IE8+ is
         * supported (and all evergreen browsers of course) the control of the
         * display attribute works well.
         *
         * @param {integer} col      Column index
         * @param {boolean} showHide Show or hide (true or false)
         * @private
         */
        _setColumnVis: function (col, showHide) {
            var that = this;
            var dt = this.s.dt;
            var display = showHide ? '' : 'none'; // empty string will remove the attr
    
            $(dt.column(col).header()).css('display', display).toggleClass('dtr-hidden', !showHide);
    
            $(dt.column(col).footer()).css('display', display).toggleClass('dtr-hidden', !showHide);
    
            dt.column(col).nodes().to$().css('display', display).toggleClass('dtr-hidden', !showHide);
    
            // If the are child nodes stored, we might need to reinsert them
            if (!$.isEmptyObject(this.s.childNodeStore)) {
                dt.cells(null, col)
                    .indexes()
                    .each(function (idx) {
                        that._childNodesRestore(dt, idx.row, idx.column);
                    });
            }
        },
    
        /**
         * Update the cell tab indexes for keyboard accessibility. This is called on
         * every table draw - that is potentially inefficient, but also the least
         * complex option given that column visibility can change on the fly. Its a
         * shame user-focus was removed from CSS 3 UI, as it would have solved this
         * issue with a single CSS statement.
         *
         * @private
         */
        _tabIndexes: function () {
            var dt = this.s.dt;
            var cells = dt.cells({ page: 'current' }).nodes().to$();
            var ctx = dt.settings()[0];
            var target = this.c.details.target;
    
            cells.filter('[data-dtr-keyboard]').removeData('[data-dtr-keyboard]');
    
            if (typeof target === 'number') {
                dt.cells(null, target, { page: 'current' })
                    .nodes()
                    .to$()
                    .attr('tabIndex', ctx.iTabIndex)
                    .data('dtr-keyboard', 1);
            }
            else {
                // This is a bit of a hack - we need to limit the selected nodes to just
                // those of this table
                if (target === 'td:first-child, th:first-child') {
                    target = '>td:first-child, >th:first-child';
                }
    
                $(target, dt.rows({ page: 'current' }).nodes())
                    .attr('tabIndex', ctx.iTabIndex)
                    .data('dtr-keyboard', 1);
            }
        }
    });
    
    /**
     * List of default breakpoints. Each item in the array is an object with two
     * properties:
     *
     * * `name` - the breakpoint name.
     * * `width` - the breakpoint width
     *
     * @name Responsive.breakpoints
     * @static
     */
    Responsive.breakpoints = [
        { name: 'desktop', width: Infinity },
        { name: 'tablet-l', width: 1024 },
        { name: 'tablet-p', width: 768 },
        { name: 'mobile-l', width: 480 },
        { name: 'mobile-p', width: 320 }
    ];
    
    /**
     * Display methods - functions which define how the hidden data should be shown
     * in the table.
     *
     * @namespace
     * @name Responsive.defaults
     * @static
     */
    Responsive.display = {
        childRow: function (row, update, render) {
            if (update) {
                if ($(row.node()).hasClass('parent')) {
                    row.child(render(), 'child').show();
    
                    return true;
                }
            }
            else {
                if (!row.child.isShown()) {
                    row.child(render(), 'child').show();
    
                    return true;
                }
                else {
                    row.child(false);
    
                    return false;
                }
            }
        },
    
        childRowImmediate: function (row, update, render) {
            if ((!update && row.child.isShown()) || !row.responsive.hasHidden()) {
                // User interaction and the row is show, or nothing to show
                row.child(false);
    
                return false;
            }
            else {
                // Display
                row.child(render(), 'child').show();
    
                return true;
            }
        },
    
        // This is a wrapper so the modal options for Bootstrap and jQuery UI can
        // have options passed into them. This specific one doesn't need to be a
        // function but it is for consistency in the `modal` name
        modal: function (options) {
            return function (row, update, render, closeCallback) {
                if (!update) {
                    // Show a modal
                    var close = function () {
                        modal.remove(); // will tidy events for us
                        $(document).off('keypress.dtr');
                        $(row.node()).removeClass('parent');
    
                        closeCallback();
                    };
    
                    var modal = $('<div class="dtr-modal"/>')
                        .append(
                            $('<div class="dtr-modal-display"/>')
                                .append(
                                    $('<div class="dtr-modal-content"/>')
                                        .data('dtr-row-idx', row.index())
                                        .append(render())
                                )
                                .append(
                                    $('<div class="dtr-modal-close">&times;</div>').click(function () {
                                        close();
                                    })
                                )
                        )
                        .append(
                            $('<div class="dtr-modal-background"/>').click(function () {
                                close();
                            })
                        )
                        .appendTo('body');
    
                    $(row.node()).addClass('parent');
    
                    $(document).on('keyup.dtr', function (e) {
                        if (e.keyCode === 27) {
                            e.stopPropagation();
    
                            close();
                        }
                    });
                }
                else {
                    var modal = $('div.dtr-modal-content');
    
                    if (modal.length && row.index() === modal.data('dtr-row-idx')) {
                        modal.empty().append(render());
                    }
                    else {
                        // Modal not shown, nothing to update
                        return null;
                    }
                }
    
                if (options && options.header) {
                    $('div.dtr-modal-content').prepend('<h2>' + options.header(row) + '</h2>');
                }
    
                return true;
            };
        }
    };
    
    /**
     * Display methods - functions which define how the hidden data should be shown
     * in the table.
     *
     * @namespace
     * @name Responsive.defaults
     * @static
     */
    Responsive.renderer = {
        listHiddenNodes: function () {
            return function (api, rowIdx, columns) {
                var that = this;
                var ul = $('<ul data-dtr-index="' + rowIdx + '" class="dtr-details"/>');
                var found = false;
    
                var data = $.each(columns, function (i, col) {
                    if (col.hidden) {
                        var klass = col.className ? 'class="' + col.className + '"' : '';
    
                        $(
                            '<li ' +
                                klass +
                                ' data-dtr-index="' +
                                col.columnIndex +
                                '" data-dt-row="' +
                                col.rowIndex +
                                '" data-dt-column="' +
                                col.columnIndex +
                                '">' +
                                '<span class="dtr-title">' +
                                col.title +
                                '</span> ' +
                                '</li>'
                        )
                            .append(
                                $('<span class="dtr-data"/>').append(
                                    that._childNodes(api, col.rowIndex, col.columnIndex)
                                )
                            ) // api.cell( col.rowIndex, col.columnIndex ).node().childNodes ) )
                            .appendTo(ul);
    
                        found = true;
                    }
                });
    
                return found ? ul : false;
            };
        },
    
        listHidden: function () {
            return function (api, rowIdx, columns) {
                var data = $.map(columns, function (col) {
                    var klass = col.className ? 'class="' + col.className + '"' : '';
    
                    return col.hidden
                        ? '<li ' +
                                klass +
                                ' data-dtr-index="' +
                                col.columnIndex +
                                '" data-dt-row="' +
                                col.rowIndex +
                                '" data-dt-column="' +
                                col.columnIndex +
                                '">' +
                                '<span class="dtr-title">' +
                                col.title +
                                '</span> ' +
                                '<span class="dtr-data">' +
                                col.data +
                                '</span>' +
                                '</li>'
                        : '';
                }).join('');
    
                return data
                    ? $('<ul data-dtr-index="' + rowIdx + '" class="dtr-details"/>').append(data)
                    : false;
            };
        },
    
        tableAll: function (options) {
            options = $.extend(
                {
                    tableClass: ''
                },
                options
            );
    
            return function (api, rowIdx, columns) {
                var data = $.map(columns, function (col) {
                    var klass = col.className ? 'class="' + col.className + '"' : '';
    
                    return (
                        '<tr ' +
                        klass +
                        ' data-dt-row="' +
                        col.rowIndex +
                        '" data-dt-column="' +
                        col.columnIndex +
                        '">' +
                        '<td>' +
                        col.title +
                        ':' +
                        '</td> ' +
                        '<td>' +
                        col.data +
                        '</td>' +
                        '</tr>'
                    );
                }).join('');
    
                return $('<table class="' + options.tableClass + ' dtr-details" width="100%"/>').append(
                    data
                );
            };
        }
    };
    
    /**
     * Responsive default settings for initialisation
     *
     * @namespace
     * @name Responsive.defaults
     * @static
     */
    Responsive.defaults = {
        /**
         * List of breakpoints for the instance. Note that this means that each
         * instance can have its own breakpoints. Additionally, the breakpoints
         * cannot be changed once an instance has been creased.
         *
         * @type {Array}
         * @default Takes the value of `Responsive.breakpoints`
         */
        breakpoints: Responsive.breakpoints,
    
        /**
         * Enable / disable auto hiding calculations. It can help to increase
         * performance slightly if you disable this option, but all columns would
         * need to have breakpoint classes assigned to them
         *
         * @type {Boolean}
         * @default  `true`
         */
        auto: true,
    
        /**
         * Details control. If given as a string value, the `type` property of the
         * default object is set to that value, and the defaults used for the rest
         * of the object - this is for ease of implementation.
         *
         * The object consists of the following properties:
         *
         * * `display` - A function that is used to show and hide the hidden details
         * * `renderer` - function that is called for display of the child row data.
         *   The default function will show the data from the hidden columns
         * * `target` - Used as the selector for what objects to attach the child
         *   open / close to
         * * `type` - `false` to disable the details display, `inline` or `column`
         *   for the two control types
         *
         * @type {Object|string}
         */
        details: {
            display: Responsive.display.childRow,
    
            renderer: Responsive.renderer.listHidden(),
    
            target: 0,
    
            type: 'inline'
        },
    
        /**
         * Orthogonal data request option. This is used to define the data type
         * requested when Responsive gets the data to show in the child row.
         *
         * @type {String}
         */
        orthogonal: 'display'
    };
    
    /*
     * API
     */
    var Api = $.fn.dataTable.Api;
    
    // Doesn't do anything - work around for a bug in DT... Not documented
    Api.register('responsive()', function () {
        return this;
    });
    
    Api.register('responsive.index()', function (li) {
        li = $(li);
    
        return {
            column: li.data('dtr-index'),
            row: li.parent().data('dtr-index')
        };
    });
    
    Api.register('responsive.rebuild()', function () {
        return this.iterator('table', function (ctx) {
            if (ctx._responsive) {
                ctx._responsive._classLogic();
            }
        });
    });
    
    Api.register('responsive.recalc()', function () {
        return this.iterator('table', function (ctx) {
            if (ctx._responsive) {
                ctx._responsive._resizeAuto();
                ctx._responsive._resize();
            }
        });
    });
    
    Api.register('responsive.hasHidden()', function () {
        var ctx = this.context[0];
    
        return ctx._responsive
            ? $.inArray(false, ctx._responsive._responsiveOnlyHidden()) !== -1
            : false;
    });
    
    Api.registerPlural('columns().responsiveHidden()', 'column().responsiveHidden()', function () {
        return this.iterator(
            'column',
            function (settings, column) {
                return settings._responsive
                    ? settings._responsive._responsiveOnlyHidden()[column]
                    : false;
            },
            1
        );
    });
    
    /**
     * Version information
     *
     * @name Responsive.version
     * @static
     */
    Responsive.version = '2.5.0';
    
    $.fn.dataTable.Responsive = Responsive;
    $.fn.DataTable.Responsive = Responsive;
    
    // Attach a listener to the document which listens for DataTables initialisation
    // events so we can automatically initialise
    $(document).on('preInit.dt.dtr', function (e, settings, json) {
        if (e.namespace !== 'dt') {
            return;
        }
    
        if (
            $(settings.nTable).hasClass('responsive') ||
            $(settings.nTable).hasClass('dt-responsive') ||
            settings.oInit.responsive ||
            DataTable.defaults.responsive
        ) {
            var init = settings.oInit.responsive;
    
            if (init !== false) {
                new Responsive(settings, $.isPlainObject(init) ? init : {});
            }
        }
    });
    
    
    return DataTable;
    }));
    
    },{"datatables.net":404,"jquery":416}],403:[function(require,module,exports){
    /*! Select for DataTables 1.7.0-dev
     * © SpryMedia Ltd - datatables.net/license/mit
     */
    
    (function( factory ){
        if ( typeof define === 'function' && define.amd ) {
            // AMD
            define( ['jquery', 'datatables.net'], function ( $ ) {
                return factory( $, window, document );
            } );
        }
        else if ( typeof exports === 'object' ) {
            // CommonJS
            var jq = require('jquery');
            var cjsRequires = function (root, $) {
                if ( ! $.fn.dataTable ) {
                    require('datatables.net')(root, $);
                }
            };
    
            if (typeof window === 'undefined') {
                module.exports = function (root, $) {
                    if ( ! root ) {
                        // CommonJS environments without a window global must pass a
                        // root. This will give an error otherwise
                        root = window;
                    }
    
                    if ( ! $ ) {
                        $ = jq( root );
                    }
    
                    cjsRequires( root, $ );
                    return factory( $, root, root.document );
                };
            }
            else {
                cjsRequires( window, jq );
                module.exports = factory( jq, window, window.document );
            }
        }
        else {
            // Browser
            factory( jQuery, window, document );
        }
    }(function( $, window, document, undefined ) {
    'use strict';
    var DataTable = $.fn.dataTable;
    
    
    
    // Version information for debugger
    DataTable.select = {};
    
    DataTable.select.version = '1.7.0-dev';
    
    DataTable.select.init = function (dt) {
        var ctx = dt.settings()[0];
    
        if (ctx._select) {
            return;
        }
    
        var savedSelected = dt.state.loaded();
    
        var selectAndSave = function (e, settings, data) {
            if (data === null || data.select === undefined) {
                return;
            }
    
            // Clear any currently selected rows, before restoring state
            // None will be selected on first initialisation
            if (dt.rows({ selected: true }).any()) {
                dt.rows().deselect();
            }
            if (data.select.rows !== undefined) {
                dt.rows(data.select.rows).select();
            }
    
            if (dt.columns({ selected: true }).any()) {
                dt.columns().deselect();
            }
            if (data.select.columns !== undefined) {
                dt.columns(data.select.columns).select();
            }
    
            if (dt.cells({ selected: true }).any()) {
                dt.cells().deselect();
            }
            if (data.select.cells !== undefined) {
                for (var i = 0; i < data.select.cells.length; i++) {
                    dt.cell(data.select.cells[i].row, data.select.cells[i].column).select();
                }
            }
    
            dt.state.save();
        };
    
        dt.on('stateSaveParams', function (e, settings, data) {
            data.select = {};
            data.select.rows = dt.rows({ selected: true }).ids(true).toArray();
            data.select.columns = dt.columns({ selected: true })[0];
            data.select.cells = dt.cells({ selected: true })[0].map(function (coords) {
                return { row: dt.row(coords.row).id(true), column: coords.column };
            });
        })
            .on('stateLoadParams', selectAndSave)
            .one('init', function () {
                selectAndSave(undefined, undefined, savedSelected);
            });
    
        var init = ctx.oInit.select;
        var defaults = DataTable.defaults.select;
        var opts = init === undefined ? defaults : init;
    
        // Set defaults
        var items = 'row';
        var style = 'api';
        var blurable = false;
        var toggleable = true;
        var info = true;
        var selector = 'td, th';
        var className = 'selected';
        var setStyle = false;
    
        ctx._select = {};
    
        // Initialisation customisations
        if (opts === true) {
            style = 'os';
            setStyle = true;
        }
        else if (typeof opts === 'string') {
            style = opts;
            setStyle = true;
        }
        else if ($.isPlainObject(opts)) {
            if (opts.blurable !== undefined) {
                blurable = opts.blurable;
            }
    
            if (opts.toggleable !== undefined) {
                toggleable = opts.toggleable;
            }
    
            if (opts.info !== undefined) {
                info = opts.info;
            }
    
            if (opts.items !== undefined) {
                items = opts.items;
            }
    
            if (opts.style !== undefined) {
                style = opts.style;
                setStyle = true;
            }
            else {
                style = 'os';
                setStyle = true;
            }
    
            if (opts.selector !== undefined) {
                selector = opts.selector;
            }
    
            if (opts.className !== undefined) {
                className = opts.className;
            }
        }
    
        dt.select.selector(selector);
        dt.select.items(items);
        dt.select.style(style);
        dt.select.blurable(blurable);
        dt.select.toggleable(toggleable);
        dt.select.info(info);
        ctx._select.className = className;
    
        // Sort table based on selected rows. Requires Select Datatables extension
        $.fn.dataTable.ext.order['select-checkbox'] = function (settings, col) {
            return this.api()
                .column(col, { order: 'index' })
                .nodes()
                .map(function (td) {
                    if (settings._select.items === 'row') {
                        return $(td).parent().hasClass(settings._select.className);
                    }
                    else if (settings._select.items === 'cell') {
                        return $(td).hasClass(settings._select.className);
                    }
                    return false;
                });
        };
    
        // If the init options haven't enabled select, but there is a selectable
        // class name, then enable
        if (!setStyle && $(dt.table().node()).hasClass('selectable')) {
            dt.select.style('os');
        }
    };
    
    /*
    
    Select is a collection of API methods, event handlers, event emitters and
    buttons (for the `Buttons` extension) for DataTables. It provides the following
    features, with an overview of how they are implemented:
    
    ## Selection of rows, columns and cells. Whether an item is selected or not is
       stored in:
    
    * rows: a `_select_selected` property which contains a boolean value of the
      DataTables' `aoData` object for each row
    * columns: a `_select_selected` property which contains a boolean value of the
      DataTables' `aoColumns` object for each column
    * cells: a `_selected_cells` property which contains an array of boolean values
      of the `aoData` object for each row. The array is the same length as the
      columns array, with each element of it representing a cell.
    
    This method of using boolean flags allows Select to operate when nodes have not
    been created for rows / cells (DataTables' defer rendering feature).
    
    ## API methods
    
    A range of API methods are available for triggering selection and de-selection
    of rows. Methods are also available to configure the selection events that can
    be triggered by an end user (such as which items are to be selected). To a large
    extent, these of API methods *is* Select. It is basically a collection of helper
    functions that can be used to select items in a DataTable.
    
    Configuration of select is held in the object `_select` which is attached to the
    DataTables settings object on initialisation. Select being available on a table
    is not optional when Select is loaded, but its default is for selection only to
    be available via the API - so the end user wouldn't be able to select rows
    without additional configuration.
    
    The `_select` object contains the following properties:
    
    ```
    {
        items:string       - Can be `rows`, `columns` or `cells`. Defines what item 
                             will be selected if the user is allowed to activate row
                             selection using the mouse.
        style:string       - Can be `none`, `single`, `multi` or `os`. Defines the
                             interaction style when selecting items
        blurable:boolean   - If row selection can be cleared by clicking outside of
                             the table
        toggleable:boolean - If row selection can be cancelled by repeated clicking
                             on the row
        info:boolean       - If the selection summary should be shown in the table
                             information elements
    }
    ```
    
    In addition to the API methods, Select also extends the DataTables selector
    options for rows, columns and cells adding a `selected` option to the selector
    options object, allowing the developer to select only selected items or
    unselected items.
    
    ## Mouse selection of items
    
    Clicking on items can be used to select items. This is done by a simple event
    handler that will select the items using the API methods.
    
     */
    
    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Local functions
     */
    
    /**
     * Add one or more cells to the selection when shift clicking in OS selection
     * style cell selection.
     *
     * Cell range is more complicated than row and column as we want to select
     * in the visible grid rather than by index in sequence. For example, if you
     * click first in cell 1-1 and then shift click in 2-2 - cells 1-2 and 2-1
     * should also be selected (and not 1-3, 1-4. etc)
     *
     * @param  {DataTable.Api} dt   DataTable
     * @param  {object}        idx  Cell index to select to
     * @param  {object}        last Cell index to select from
     * @private
     */
    function cellRange(dt, idx, last) {
        var indexes;
        var columnIndexes;
        var rowIndexes;
        var selectColumns = function (start, end) {
            if (start > end) {
                var tmp = end;
                end = start;
                start = tmp;
            }
    
            var record = false;
            return dt
                .columns(':visible')
                .indexes()
                .filter(function (i) {
                    if (i === start) {
                        record = true;
                    }
    
                    if (i === end) {
                        // not else if, as start might === end
                        record = false;
                        return true;
                    }
    
                    return record;
                });
        };
    
        var selectRows = function (start, end) {
            var indexes = dt.rows({ search: 'applied' }).indexes();
    
            // Which comes first - might need to swap
            if (indexes.indexOf(start) > indexes.indexOf(end)) {
                var tmp = end;
                end = start;
                start = tmp;
            }
    
            var record = false;
            return indexes.filter(function (i) {
                if (i === start) {
                    record = true;
                }
    
                if (i === end) {
                    record = false;
                    return true;
                }
    
                return record;
            });
        };
    
        if (!dt.cells({ selected: true }).any() && !last) {
            // select from the top left cell to this one
            columnIndexes = selectColumns(0, idx.column);
            rowIndexes = selectRows(0, idx.row);
        }
        else {
            // Get column indexes between old and new
            columnIndexes = selectColumns(last.column, idx.column);
            rowIndexes = selectRows(last.row, idx.row);
        }
    
        indexes = dt.cells(rowIndexes, columnIndexes).flatten();
    
        if (!dt.cells(idx, { selected: true }).any()) {
            // Select range
            dt.cells(indexes).select();
        }
        else {
            // Deselect range
            dt.cells(indexes).deselect();
        }
    }
    
    /**
     * Disable mouse selection by removing the selectors
     *
     * @param {DataTable.Api} dt DataTable to remove events from
     * @private
     */
    function disableMouseSelection(dt) {
        var ctx = dt.settings()[0];
        var selector = ctx._select.selector;
    
        $(dt.table().container())
            .off('mousedown.dtSelect', selector)
            .off('mouseup.dtSelect', selector)
            .off('click.dtSelect', selector);
    
        $('body').off('click.dtSelect' + _safeId(dt.table().node()));
    }
    
    /**
     * Attach mouse listeners to the table to allow mouse selection of items
     *
     * @param {DataTable.Api} dt DataTable to remove events from
     * @private
     */
    function enableMouseSelection(dt) {
        var container = $(dt.table().container());
        var ctx = dt.settings()[0];
        var selector = ctx._select.selector;
        var matchSelection;
    
        container
            .on('mousedown.dtSelect', selector, function (e) {
                // Disallow text selection for shift clicking on the table so multi
                // element selection doesn't look terrible!
                if (e.shiftKey || e.metaKey || e.ctrlKey) {
                    container
                        .css('-moz-user-select', 'none')
                        .one('selectstart.dtSelect', selector, function () {
                            return false;
                        });
                }
    
                if (window.getSelection) {
                    matchSelection = window.getSelection();
                }
            })
            .on('mouseup.dtSelect', selector, function () {
                // Allow text selection to occur again, Mozilla style (tested in FF
                // 35.0.1 - still required)
                container.css('-moz-user-select', '');
            })
            .on('click.dtSelect', selector, function (e) {
                var items = dt.select.items();
                var idx;
    
                // If text was selected (click and drag), then we shouldn't change
                // the row's selected state
                if (matchSelection) {
                    var selection = window.getSelection();
    
                    // If the element that contains the selection is not in the table, we can ignore it
                    // This can happen if the developer selects text from the click event
                    if (
                        !selection.anchorNode ||
                        $(selection.anchorNode).closest('table')[0] === dt.table().node()
                    ) {
                        if (selection !== matchSelection) {
                            return;
                        }
                    }
                }
    
                var ctx = dt.settings()[0];
                var wrapperClass = dt.settings()[0].oClasses.sWrapper.trim().replace(/ +/g, '.');
    
                // Ignore clicks inside a sub-table
                if ($(e.target).closest('div.' + wrapperClass)[0] != dt.table().container()) {
                    return;
                }
    
                var cell = dt.cell($(e.target).closest('td, th'));
    
                // Check the cell actually belongs to the host DataTable (so child
                // rows, etc, are ignored)
                if (!cell.any()) {
                    return;
                }
    
                var event = $.Event('user-select.dt');
                eventTrigger(dt, event, [items, cell, e]);
    
                if (event.isDefaultPrevented()) {
                    return;
                }
    
                var cellIndex = cell.index();
                if (items === 'row') {
                    idx = cellIndex.row;
                    typeSelect(e, dt, ctx, 'row', idx);
                }
                else if (items === 'column') {
                    idx = cell.index().column;
                    typeSelect(e, dt, ctx, 'column', idx);
                }
                else if (items === 'cell') {
                    idx = cell.index();
                    typeSelect(e, dt, ctx, 'cell', idx);
                }
    
                ctx._select_lastCell = cellIndex;
            });
    
        // Blurable
        $('body').on('click.dtSelect' + _safeId(dt.table().node()), function (e) {
            if (ctx._select.blurable) {
                // If the click was inside the DataTables container, don't blur
                if ($(e.target).parents().filter(dt.table().container()).length) {
                    return;
                }
    
                // Ignore elements which have been removed from the DOM (i.e. paging
                // buttons)
                if ($(e.target).parents('html').length === 0) {
                    return;
                }
    
                // Don't blur in Editor form
                if ($(e.target).parents('div.DTE').length) {
                    return;
                }
    
                var event = $.Event('select-blur.dt');
                eventTrigger(dt, event, [e.target, e]);
    
                if (event.isDefaultPrevented()) {
                    return;
                }
    
                clear(ctx, true);
            }
        });
    }
    
    /**
     * Trigger an event on a DataTable
     *
     * @param {DataTable.Api} api      DataTable to trigger events on
     * @param  {boolean}      selected true if selected, false if deselected
     * @param  {string}       type     Item type acting on
     * @param  {boolean}      any      Require that there are values before
     *     triggering
     * @private
     */
    function eventTrigger(api, type, args, any) {
        if (any && !api.flatten().length) {
            return;
        }
    
        if (typeof type === 'string') {
            type = type + '.dt';
        }
    
        args.unshift(api);
    
        $(api.table().node()).trigger(type, args);
    }
    
    /**
     * Update the information element of the DataTable showing information about the
     * items selected. This is done by adding tags to the existing text
     *
     * @param {DataTable.Api} api DataTable to update
     * @private
     */
    function info(api) {
        var ctx = api.settings()[0];
    
        if (!ctx._select.info || !ctx.aanFeatures.i) {
            return;
        }
    
        if (api.select.style() === 'api') {
            return;
        }
    
        var rows = api.rows({ selected: true }).flatten().length;
        var columns = api.columns({ selected: true }).flatten().length;
        var cells = api.cells({ selected: true }).flatten().length;
    
        var add = function (el, name, num) {
            el.append(
                $('<span class="select-item"/>').append(
                    api.i18n(
                        'select.' + name + 's',
                        { _: '%d ' + name + 's selected', 0: '', 1: '1 ' + name + ' selected' },
                        num
                    )
                )
            );
        };
    
        // Internal knowledge of DataTables to loop over all information elements
        $.each(ctx.aanFeatures.i, function (i, el) {
            el = $(el);
    
            var output = $('<span class="select-info"/>');
            add(output, 'row', rows);
            add(output, 'column', columns);
            add(output, 'cell', cells);
    
            var exisiting = el.children('span.select-info');
            if (exisiting.length) {
                exisiting.remove();
            }
    
            if (output.text() !== '') {
                el.append(output);
            }
        });
    }
    
    /**
     * Initialisation of a new table. Attach event handlers and callbacks to allow
     * Select to operate correctly.
     *
     * This will occur _after_ the initial DataTables initialisation, although
     * before Ajax data is rendered, if there is ajax data
     *
     * @param  {DataTable.settings} ctx Settings object to operate on
     * @private
     */
    function init(ctx) {
        var api = new DataTable.Api(ctx);
        ctx._select_init = true;
    
        // Row callback so that classes can be added to rows and cells if the item
        // was selected before the element was created. This will happen with the
        // `deferRender` option enabled.
        //
        // This method of attaching to `aoRowCreatedCallback` is a hack until
        // DataTables has proper events for row manipulation If you are reviewing
        // this code to create your own plug-ins, please do not do this!
        ctx.aoRowCreatedCallback.push({
            fn: function (row, data, index) {
                var i, ien;
                var d = ctx.aoData[index];
    
                // Row
                if (d._select_selected) {
                    $(row).addClass(ctx._select.className);
                }
    
                // Cells and columns - if separated out, we would need to do two
                // loops, so it makes sense to combine them into a single one
                for (i = 0, ien = ctx.aoColumns.length; i < ien; i++) {
                    if (
                        ctx.aoColumns[i]._select_selected ||
                        (d._selected_cells && d._selected_cells[i])
                    ) {
                        $(d.anCells[i]).addClass(ctx._select.className);
                    }
                }
            },
            sName: 'select-deferRender'
        });
    
        // On Ajax reload we want to reselect all rows which are currently selected,
        // if there is an rowId (i.e. a unique value to identify each row with)
        api.on('preXhr.dt.dtSelect', function (e, settings) {
            if (settings !== api.settings()[0]) {
                // Not triggered by our DataTable!
                return;
            }
    
            // note that column selection doesn't need to be cached and then
            // reselected, as they are already selected
            var rows = api
                .rows({ selected: true })
                .ids(true)
                .filter(function (d) {
                    return d !== undefined;
                });
    
            var cells = api
                .cells({ selected: true })
                .eq(0)
                .map(function (cellIdx) {
                    var id = api.row(cellIdx.row).id(true);
                    return id ? { row: id, column: cellIdx.column } : undefined;
                })
                .filter(function (d) {
                    return d !== undefined;
                });
    
            // On the next draw, reselect the currently selected items
            api.one('draw.dt.dtSelect', function () {
                api.rows(rows).select();
    
                // `cells` is not a cell index selector, so it needs a loop
                if (cells.any()) {
                    cells.each(function (id) {
                        api.cells(id.row, id.column).select();
                    });
                }
            });
        });
    
        // Update the table information element with selected item summary
        api.on('draw.dtSelect.dt select.dtSelect.dt deselect.dtSelect.dt info.dt', function () {
            info(api);
            api.state.save();
        });
    
        // Clean up and release
        api.on('destroy.dtSelect', function () {
            // Remove class directly rather than calling deselect - which would trigger events
            $(api.rows({ selected: true }).nodes()).removeClass(api.settings()[0]._select.className);
    
            disableMouseSelection(api);
            api.off('.dtSelect');
            $('body').off('.dtSelect' + _safeId(api.table().node()));
        });
    }
    
    /**
     * Add one or more items (rows or columns) to the selection when shift clicking
     * in OS selection style
     *
     * @param  {DataTable.Api} dt   DataTable
     * @param  {string}        type Row or column range selector
     * @param  {object}        idx  Item index to select to
     * @param  {object}        last Item index to select from
     * @private
     */
    function rowColumnRange(dt, type, idx, last) {
        // Add a range of rows from the last selected row to this one
        var indexes = dt[type + 's']({ search: 'applied' }).indexes();
        var idx1 = $.inArray(last, indexes);
        var idx2 = $.inArray(idx, indexes);
    
        if (!dt[type + 's']({ selected: true }).any() && idx1 === -1) {
            // select from top to here - slightly odd, but both Windows and Mac OS
            // do this
            indexes.splice($.inArray(idx, indexes) + 1, indexes.length);
        }
        else {
            // reverse so we can shift click 'up' as well as down
            if (idx1 > idx2) {
                var tmp = idx2;
                idx2 = idx1;
                idx1 = tmp;
            }
    
            indexes.splice(idx2 + 1, indexes.length);
            indexes.splice(0, idx1);
        }
    
        if (!dt[type](idx, { selected: true }).any()) {
            // Select range
            dt[type + 's'](indexes).select();
        }
        else {
            // Deselect range - need to keep the clicked on row selected
            indexes.splice($.inArray(idx, indexes), 1);
            dt[type + 's'](indexes).deselect();
        }
    }
    
    /**
     * Clear all selected items
     *
     * @param  {DataTable.settings} ctx Settings object of the host DataTable
     * @param  {boolean} [force=false] Force the de-selection to happen, regardless
     *     of selection style
     * @private
     */
    function clear(ctx, force) {
        if (force || ctx._select.style === 'single') {
            var api = new DataTable.Api(ctx);
    
            api.rows({ selected: true }).deselect();
            api.columns({ selected: true }).deselect();
            api.cells({ selected: true }).deselect();
        }
    }
    
    /**
     * Select items based on the current configuration for style and items.
     *
     * @param  {object}             e    Mouse event object
     * @param  {DataTables.Api}     dt   DataTable
     * @param  {DataTable.settings} ctx  Settings object of the host DataTable
     * @param  {string}             type Items to select
     * @param  {int|object}         idx  Index of the item to select
     * @private
     */
    function typeSelect(e, dt, ctx, type, idx) {
        var style = dt.select.style();
        var toggleable = dt.select.toggleable();
        var isSelected = dt[type](idx, { selected: true }).any();
    
        if (isSelected && !toggleable) {
            return;
        }
    
        if (style === 'os') {
            if (e.ctrlKey || e.metaKey) {
                // Add or remove from the selection
                dt[type](idx).select(!isSelected);
            }
            else if (e.shiftKey) {
                if (type === 'cell') {
                    cellRange(dt, idx, ctx._select_lastCell || null);
                }
                else {
                    rowColumnRange(
                        dt,
                        type,
                        idx,
                        ctx._select_lastCell ? ctx._select_lastCell[type] : null
                    );
                }
            }
            else {
                // No cmd or shift click - deselect if selected, or select
                // this row only
                var selected = dt[type + 's']({ selected: true });
    
                if (isSelected && selected.flatten().length === 1) {
                    dt[type](idx).deselect();
                }
                else {
                    selected.deselect();
                    dt[type](idx).select();
                }
            }
        }
        else if (style == 'multi+shift') {
            if (e.shiftKey) {
                if (type === 'cell') {
                    cellRange(dt, idx, ctx._select_lastCell || null);
                }
                else {
                    rowColumnRange(
                        dt,
                        type,
                        idx,
                        ctx._select_lastCell ? ctx._select_lastCell[type] : null
                    );
                }
            }
            else {
                dt[type](idx).select(!isSelected);
            }
        }
        else {
            dt[type](idx).select(!isSelected);
        }
    }
    
    function _safeId(node) {
        return node.id.replace(/[^a-zA-Z0-9\-\_]/g, '-');
    }
    
    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * DataTables selectors
     */
    
    // row and column are basically identical just assigned to different properties
    // and checking a different array, so we can dynamically create the functions to
    // reduce the code size
    $.each(
        [
            { type: 'row', prop: 'aoData' },
            { type: 'column', prop: 'aoColumns' }
        ],
        function (i, o) {
            DataTable.ext.selector[o.type].push(function (settings, opts, indexes) {
                var selected = opts.selected;
                var data;
                var out = [];
    
                if (selected !== true && selected !== false) {
                    return indexes;
                }
    
                for (var i = 0, ien = indexes.length; i < ien; i++) {
                    data = settings[o.prop][indexes[i]];
    
                    if (
                        (selected === true && data._select_selected === true) ||
                        (selected === false && !data._select_selected)
                    ) {
                        out.push(indexes[i]);
                    }
                }
    
                return out;
            });
        }
    );
    
    DataTable.ext.selector.cell.push(function (settings, opts, cells) {
        var selected = opts.selected;
        var rowData;
        var out = [];
    
        if (selected === undefined) {
            return cells;
        }
    
        for (var i = 0, ien = cells.length; i < ien; i++) {
            rowData = settings.aoData[cells[i].row];
    
            if (
                (selected === true &&
                    rowData._selected_cells &&
                    rowData._selected_cells[cells[i].column] === true) ||
                (selected === false &&
                    (!rowData._selected_cells || !rowData._selected_cells[cells[i].column]))
            ) {
                out.push(cells[i]);
            }
        }
    
        return out;
    });
    
    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * DataTables API
     *
     * For complete documentation, please refer to the docs/api directory or the
     * DataTables site
     */
    
    // Local variables to improve compression
    var apiRegister = DataTable.Api.register;
    var apiRegisterPlural = DataTable.Api.registerPlural;
    
    apiRegister('select()', function () {
        return this.iterator('table', function (ctx) {
            DataTable.select.init(new DataTable.Api(ctx));
        });
    });
    
    apiRegister('select.blurable()', function (flag) {
        if (flag === undefined) {
            return this.context[0]._select.blurable;
        }
    
        return this.iterator('table', function (ctx) {
            ctx._select.blurable = flag;
        });
    });
    
    apiRegister('select.toggleable()', function (flag) {
        if (flag === undefined) {
            return this.context[0]._select.toggleable;
        }
    
        return this.iterator('table', function (ctx) {
            ctx._select.toggleable = flag;
        });
    });
    
    apiRegister('select.info()', function (flag) {
        if (flag === undefined) {
            return this.context[0]._select.info;
        }
    
        return this.iterator('table', function (ctx) {
            ctx._select.info = flag;
        });
    });
    
    apiRegister('select.items()', function (items) {
        if (items === undefined) {
            return this.context[0]._select.items;
        }
    
        return this.iterator('table', function (ctx) {
            ctx._select.items = items;
    
            eventTrigger(new DataTable.Api(ctx), 'selectItems', [items]);
        });
    });
    
    // Takes effect from the _next_ selection. None disables future selection, but
    // does not clear the current selection. Use the `deselect` methods for that
    apiRegister('select.style()', function (style) {
        if (style === undefined) {
            return this.context[0]._select.style;
        }
    
        return this.iterator('table', function (ctx) {
            if (!ctx._select) {
                DataTable.select.init(new DataTable.Api(ctx));
            }
    
            if (!ctx._select_init) {
                init(ctx);
            }
    
            ctx._select.style = style;
    
            // Add / remove mouse event handlers. They aren't required when only
            // API selection is available
            var dt = new DataTable.Api(ctx);
            disableMouseSelection(dt);
    
            if (style !== 'api') {
                enableMouseSelection(dt);
            }
    
            eventTrigger(new DataTable.Api(ctx), 'selectStyle', [style]);
        });
    });
    
    apiRegister('select.selector()', function (selector) {
        if (selector === undefined) {
            return this.context[0]._select.selector;
        }
    
        return this.iterator('table', function (ctx) {
            disableMouseSelection(new DataTable.Api(ctx));
    
            ctx._select.selector = selector;
    
            if (ctx._select.style !== 'api') {
                enableMouseSelection(new DataTable.Api(ctx));
            }
        });
    });
    
    apiRegisterPlural('rows().select()', 'row().select()', function (select) {
        var api = this;
    
        if (select === false) {
            return this.deselect();
        }
    
        this.iterator('row', function (ctx, idx) {
            clear(ctx);
    
            ctx.aoData[idx]._select_selected = true;
            $(ctx.aoData[idx].nTr).addClass(ctx._select.className);
        });
    
        this.iterator('table', function (ctx, i) {
            eventTrigger(api, 'select', ['row', api[i]], true);
        });
    
        return this;
    });
    
    apiRegister('row().selected()', function () {
        var ctx = this.context[0];
    
        if (ctx && this.length && ctx.aoData[this[0]] && ctx.aoData[this[0]]._select_selected) {
            return true;
        }
    
        return false;
    });
    
    apiRegisterPlural('columns().select()', 'column().select()', function (select) {
        var api = this;
    
        if (select === false) {
            return this.deselect();
        }
    
        this.iterator('column', function (ctx, idx) {
            clear(ctx);
    
            ctx.aoColumns[idx]._select_selected = true;
    
            var column = new DataTable.Api(ctx).column(idx);
    
            $(column.header()).addClass(ctx._select.className);
            $(column.footer()).addClass(ctx._select.className);
    
            column.nodes().to$().addClass(ctx._select.className);
        });
    
        this.iterator('table', function (ctx, i) {
            eventTrigger(api, 'select', ['column', api[i]], true);
        });
    
        return this;
    });
    
    apiRegister('column().selected()', function () {
        var ctx = this.context[0];
    
        if (ctx && this.length && ctx.aoColumns[this[0]] && ctx.aoColumns[this[0]]._select_selected) {
            return true;
        }
    
        return false;
    });
    
    apiRegisterPlural('cells().select()', 'cell().select()', function (select) {
        var api = this;
    
        if (select === false) {
            return this.deselect();
        }
    
        this.iterator('cell', function (ctx, rowIdx, colIdx) {
            clear(ctx);
    
            var data = ctx.aoData[rowIdx];
    
            if (data._selected_cells === undefined) {
                data._selected_cells = [];
            }
    
            data._selected_cells[colIdx] = true;
    
            if (data.anCells) {
                $(data.anCells[colIdx]).addClass(ctx._select.className);
            }
        });
    
        this.iterator('table', function (ctx, i) {
            eventTrigger(api, 'select', ['cell', api.cells(api[i]).indexes().toArray()], true);
        });
    
        return this;
    });
    
    apiRegister('cell().selected()', function () {
        var ctx = this.context[0];
    
        if (ctx && this.length) {
            var row = ctx.aoData[this[0][0].row];
    
            if (row && row._selected_cells && row._selected_cells[this[0][0].column]) {
                return true;
            }
        }
    
        return false;
    });
    
    apiRegisterPlural('rows().deselect()', 'row().deselect()', function () {
        var api = this;
    
        this.iterator('row', function (ctx, idx) {
            ctx.aoData[idx]._select_selected = false;
            ctx._select_lastCell = null;
            $(ctx.aoData[idx].nTr).removeClass(ctx._select.className);
        });
    
        this.iterator('table', function (ctx, i) {
            eventTrigger(api, 'deselect', ['row', api[i]], true);
        });
    
        return this;
    });
    
    apiRegisterPlural('columns().deselect()', 'column().deselect()', function () {
        var api = this;
    
        this.iterator('column', function (ctx, idx) {
            ctx.aoColumns[idx]._select_selected = false;
    
            var api = new DataTable.Api(ctx);
            var column = api.column(idx);
    
            $(column.header()).removeClass(ctx._select.className);
            $(column.footer()).removeClass(ctx._select.className);
    
            // Need to loop over each cell, rather than just using
            // `column().nodes()` as cells which are individually selected should
            // not have the `selected` class removed from them
            api.cells(null, idx)
                .indexes()
                .each(function (cellIdx) {
                    var data = ctx.aoData[cellIdx.row];
                    var cellSelected = data._selected_cells;
    
                    if (data.anCells && (!cellSelected || !cellSelected[cellIdx.column])) {
                        $(data.anCells[cellIdx.column]).removeClass(ctx._select.className);
                    }
                });
        });
    
        this.iterator('table', function (ctx, i) {
            eventTrigger(api, 'deselect', ['column', api[i]], true);
        });
    
        return this;
    });
    
    apiRegisterPlural('cells().deselect()', 'cell().deselect()', function () {
        var api = this;
    
        this.iterator('cell', function (ctx, rowIdx, colIdx) {
            var data = ctx.aoData[rowIdx];
    
            if (data._selected_cells !== undefined) {
                data._selected_cells[colIdx] = false;
            }
    
            // Remove class only if the cells exist, and the cell is not column
            // selected, in which case the class should remain (since it is selected
            // in the column)
            if (data.anCells && !ctx.aoColumns[colIdx]._select_selected) {
                $(data.anCells[colIdx]).removeClass(ctx._select.className);
            }
        });
    
        this.iterator('table', function (ctx, i) {
            eventTrigger(api, 'deselect', ['cell', api[i]], true);
        });
    
        return this;
    });
    
    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Buttons
     */
    function i18n(label, def) {
        return function (dt) {
            return dt.i18n('buttons.' + label, def);
        };
    }
    
    // Common events with suitable namespaces
    function namespacedEvents(config) {
        var unique = config._eventNamespace;
    
        return 'draw.dt.DT' + unique + ' select.dt.DT' + unique + ' deselect.dt.DT' + unique;
    }
    
    function enabled(dt, config) {
        if ($.inArray('rows', config.limitTo) !== -1 && dt.rows({ selected: true }).any()) {
            return true;
        }
    
        if ($.inArray('columns', config.limitTo) !== -1 && dt.columns({ selected: true }).any()) {
            return true;
        }
    
        if ($.inArray('cells', config.limitTo) !== -1 && dt.cells({ selected: true }).any()) {
            return true;
        }
    
        return false;
    }
    
    var _buttonNamespace = 0;
    
    $.extend(DataTable.ext.buttons, {
        selected: {
            text: i18n('selected', 'Selected'),
            className: 'buttons-selected',
            limitTo: ['rows', 'columns', 'cells'],
            init: function (dt, node, config) {
                var that = this;
                config._eventNamespace = '.select' + _buttonNamespace++;
    
                // .DT namespace listeners are removed by DataTables automatically
                // on table destroy
                dt.on(namespacedEvents(config), function () {
                    that.enable(enabled(dt, config));
                });
    
                this.disable();
            },
            destroy: function (dt, node, config) {
                dt.off(config._eventNamespace);
            }
        },
        selectedSingle: {
            text: i18n('selectedSingle', 'Selected single'),
            className: 'buttons-selected-single',
            init: function (dt, node, config) {
                var that = this;
                config._eventNamespace = '.select' + _buttonNamespace++;
    
                dt.on(namespacedEvents(config), function () {
                    var count =
                        dt.rows({ selected: true }).flatten().length +
                        dt.columns({ selected: true }).flatten().length +
                        dt.cells({ selected: true }).flatten().length;
    
                    that.enable(count === 1);
                });
    
                this.disable();
            },
            destroy: function (dt, node, config) {
                dt.off(config._eventNamespace);
            }
        },
        selectAll: {
            text: i18n('selectAll', 'Select all'),
            className: 'buttons-select-all',
            action: function (e, dt, node, config) {
                var items = this.select.items();
                var mod = config.selectorModifier;
                
                if (mod) {
                    if (typeof mod === 'function') {
                        mod = mod.call(dt, e, dt, node, config);
                    }
    
                    this[items + 's'](mod).select();
                }
                else {
                    this[items + 's']().select();
                }
            }
            // selectorModifier can be specified
        },
        selectNone: {
            text: i18n('selectNone', 'Deselect all'),
            className: 'buttons-select-none',
            action: function () {
                clear(this.settings()[0], true);
            },
            init: function (dt, node, config) {
                var that = this;
                config._eventNamespace = '.select' + _buttonNamespace++;
    
                dt.on(namespacedEvents(config), function () {
                    var count =
                        dt.rows({ selected: true }).flatten().length +
                        dt.columns({ selected: true }).flatten().length +
                        dt.cells({ selected: true }).flatten().length;
    
                    that.enable(count > 0);
                });
    
                this.disable();
            },
            destroy: function (dt, node, config) {
                dt.off(config._eventNamespace);
            }
        },
        showSelected: {
            text: i18n('showSelected', 'Show only selected'),
            className: 'buttons-show-selected',
            action: function (e, dt, node, conf) {
                // Works by having a filtering function which will reduce to the selected
                // items only. So we can re-reference the function it gets stored in the
                // `conf` object
                if (conf._filter) {
                    var idx = DataTable.ext.search.indexOf(conf._filter);
    
                    if (idx !== -1) {
                        DataTable.ext.search.splice(idx, 1);
                        conf._filter = null;
                    }
    
                    this.active(false);
                }
                else {
                    var fn = function (s, data, idx) {
                        // Need to be sure we are operating on our table!
                        if (s !== dt.settings()[0]) {
                            return true;
                        }
    
                        let row = s.aoData[idx];
    
                        return row._select_selected;
                    };
    
                    conf._filter = fn;
                    DataTable.ext.search.push(fn);
    
                    this.active(true);
                }
    
                dt.draw();
            }
        }
    });
    
    $.each(['Row', 'Column', 'Cell'], function (i, item) {
        var lc = item.toLowerCase();
    
        DataTable.ext.buttons['select' + item + 's'] = {
            text: i18n('select' + item + 's', 'Select ' + lc + 's'),
            className: 'buttons-select-' + lc + 's',
            action: function () {
                this.select.items(lc);
            },
            init: function (dt) {
                var that = this;
    
                dt.on('selectItems.dt.DT', function (e, ctx, items) {
                    that.active(items === lc);
                });
            }
        };
    });
    
    $.fn.DataTable.select = DataTable.select;
    
    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Initialisation
     */
    
    // DataTables creation - check if select has been defined in the options. Note
    // this required that the table be in the document! If it isn't then something
    // needs to trigger this method unfortunately. The next major release of
    // DataTables will rework the events and address this.
    $(document).on('preInit.dt.dtSelect', function (e, ctx) {
        if (e.namespace !== 'dt') {
            return;
        }
    
        DataTable.select.init(new DataTable.Api(ctx));
    });
    
    
    return DataTable;
    }));
    
    },{"datatables.net":404,"jquery":416}],404:[function(require,module,exports){
    /*! DataTables 1.13.11
     * ©2008-2024 SpryMedia Ltd - datatables.net/license
     */
    
    /**
     * @summary     DataTables
     * @description Paginate, search and order HTML tables
     * @version     1.13.11
     * @author      SpryMedia Ltd
     * @contact     www.datatables.net
     * @copyright   SpryMedia Ltd.
     *
     * This source file is free software, available under the following license:
     *   MIT license - https://datatables.net/license
     *
     * This source file is distributed in the hope that it will be useful, but
     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
     * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
     *
     * For details please refer to: https://www.datatables.net
     */
    
    /*jslint evil: true, undef: true, browser: true */
    /*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/
    
    (function( factory ) {
        "use strict";
    
        if ( typeof define === 'function' && define.amd ) {
            // AMD
            define( ['jquery'], function ( $ ) {
                return factory( $, window, document );
            } );
        }
        else if ( typeof exports === 'object' ) {
            // CommonJS
            // jQuery's factory checks for a global window - if it isn't present then it
            // returns a factory function that expects the window object
            var jq = require('jquery');
    
            if (typeof window === 'undefined') {
                module.exports = function (root, $) {
                    if ( ! root ) {
                        // CommonJS environments without a window global must pass a
                        // root. This will give an error otherwise
                        root = window;
                    }
    
                    if ( ! $ ) {
                        $ = jq( root );
                    }
    
                    return factory( $, root, root.document );
                };
            }
            else {
                module.exports = factory( jq, window, window.document );
            }
        }
        else {
            // Browser
            window.DataTable = factory( jQuery, window, document );
        }
    }
    (function( $, window, document, undefined ) {
        "use strict";
    
        
        var DataTable = function ( selector, options )
        {
            // Check if called with a window or jQuery object for DOM less applications
            // This is for backwards compatibility
            if (DataTable.factory(selector, options)) {
                return DataTable;
            }
        
            // When creating with `new`, create a new DataTable, returning the API instance
            if (this instanceof DataTable) {
                return $(selector).DataTable(options);
            }
            else {
                // Argument switching
                options = selector;
            }
        
            /**
             * Perform a jQuery selector action on the table's TR elements (from the tbody) and
             * return the resulting jQuery object.
             *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
             *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
             *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
             *    criterion ("applied") or all TR elements (i.e. no filter).
             *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
             *    Can be either 'current', whereby the current sorting of the table is used, or
             *    'original' whereby the original order the data was read into the table is used.
             *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
             *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
             *    'current' and filter is 'applied', regardless of what they might be given as.
             *  @returns {object} jQuery object, filtered by the given selector.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Highlight every second row
             *      oTable.$('tr:odd').css('backgroundColor', 'blue');
             *    } );
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Filter to rows with 'Webkit' in them, add a background colour and then
             *      // remove the filter, thus highlighting the 'Webkit' rows only.
             *      oTable.fnFilter('Webkit');
             *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
             *      oTable.fnFilter('');
             *    } );
             */
            this.$ = function ( sSelector, oOpts )
            {
                return this.api(true).$( sSelector, oOpts );
            };
            
            
            /**
             * Almost identical to $ in operation, but in this case returns the data for the matched
             * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
             * rather than any descendants, so the data can be obtained for the row/cell. If matching
             * rows are found, the data returned is the original data array/object that was used to
             * create the row (or a generated array if from a DOM source).
             *
             * This method is often useful in-combination with $ where both functions are given the
             * same parameters and the array indexes will match identically.
             *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
             *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
             *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
             *    criterion ("applied") or all elements (i.e. no filter).
             *  @param {string} [oOpts.order=current] Order of the data in the processed array.
             *    Can be either 'current', whereby the current sorting of the table is used, or
             *    'original' whereby the original order the data was read into the table is used.
             *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
             *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
             *    'current' and filter is 'applied', regardless of what they might be given as.
             *  @returns {array} Data for the matched elements. If any elements, as a result of the
             *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
             *    entry in the array.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Get the data from the first row in the table
             *      var data = oTable._('tr:first');
             *
             *      // Do something useful with the data
             *      alert( "First cell is: "+data[0] );
             *    } );
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Filter to 'Webkit' and get all data for
             *      oTable.fnFilter('Webkit');
             *      var data = oTable._('tr', {"search": "applied"});
             *
             *      // Do something with the data
             *      alert( data.length+" rows matched the search" );
             *    } );
             */
            this._ = function ( sSelector, oOpts )
            {
                return this.api(true).rows( sSelector, oOpts ).data();
            };
            
            
            /**
             * Create a DataTables Api instance, with the currently selected tables for
             * the Api's context.
             * @param {boolean} [traditional=false] Set the API instance's context to be
             *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
             *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
             *   or if all tables captured in the jQuery object should be used.
             * @return {DataTables.Api}
             */
            this.api = function ( traditional )
            {
                return traditional ?
                    new _Api(
                        _fnSettingsFromNode( this[ _ext.iApiIndex ] )
                    ) :
                    new _Api( this );
            };
            
            
            /**
             * Add a single new row or multiple rows of data to the table. Please note
             * that this is suitable for client-side processing only - if you are using
             * server-side processing (i.e. "bServerSide": true), then to add data, you
             * must add it to the data source, i.e. the server-side, through an Ajax call.
             *  @param {array|object} data The data to be added to the table. This can be:
             *    <ul>
             *      <li>1D array of data - add a single row with the data provided</li>
             *      <li>2D array of arrays - add multiple rows in a single call</li>
             *      <li>object - data object when using <i>mData</i></li>
             *      <li>array of objects - multiple data objects when using <i>mData</i></li>
             *    </ul>
             *  @param {bool} [redraw=true] redraw the table or not
             *  @returns {array} An array of integers, representing the list of indexes in
             *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
             *    the table.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    // Global var for counter
             *    var giCount = 2;
             *
             *    $(document).ready(function() {
             *      $('#example').dataTable();
             *    } );
             *
             *    function fnClickAddRow() {
             *      $('#example').dataTable().fnAddData( [
             *        giCount+".1",
             *        giCount+".2",
             *        giCount+".3",
             *        giCount+".4" ]
             *      );
             *
             *      giCount++;
             *    }
             */
            this.fnAddData = function( data, redraw )
            {
                var api = this.api( true );
            
                /* Check if we want to add multiple rows or not */
                var rows = Array.isArray(data) && ( Array.isArray(data[0]) || $.isPlainObject(data[0]) ) ?
                    api.rows.add( data ) :
                    api.row.add( data );
            
                if ( redraw === undefined || redraw ) {
                    api.draw();
                }
            
                return rows.flatten().toArray();
            };
            
            
            /**
             * This function will make DataTables recalculate the column sizes, based on the data
             * contained in the table and the sizes applied to the columns (in the DOM, CSS or
             * through the sWidth parameter). This can be useful when the width of the table's
             * parent element changes (for example a window resize).
             *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable( {
             *        "sScrollY": "200px",
             *        "bPaginate": false
             *      } );
             *
             *      $(window).on('resize', function () {
             *        oTable.fnAdjustColumnSizing();
             *      } );
             *    } );
             */
            this.fnAdjustColumnSizing = function ( bRedraw )
            {
                var api = this.api( true ).columns.adjust();
                var settings = api.settings()[0];
                var scroll = settings.oScroll;
            
                if ( bRedraw === undefined || bRedraw ) {
                    api.draw( false );
                }
                else if ( scroll.sX !== "" || scroll.sY !== "" ) {
                    /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
                    _fnScrollDraw( settings );
                }
            };
            
            
            /**
             * Quickly and simply clear a table
             *  @param {bool} [bRedraw=true] redraw the table or not
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
             *      oTable.fnClearTable();
             *    } );
             */
            this.fnClearTable = function( bRedraw )
            {
                var api = this.api( true ).clear();
            
                if ( bRedraw === undefined || bRedraw ) {
                    api.draw();
                }
            };
            
            
            /**
             * The exact opposite of 'opening' a row, this function will close any rows which
             * are currently 'open'.
             *  @param {node} nTr the table row to 'close'
             *  @returns {int} 0 on success, or 1 if failed (can't find the row)
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable;
             *
             *      // 'open' an information row when a row is clicked on
             *      $('#example tbody tr').click( function () {
             *        if ( oTable.fnIsOpen(this) ) {
             *          oTable.fnClose( this );
             *        } else {
             *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
             *        }
             *      } );
             *
             *      oTable = $('#example').dataTable();
             *    } );
             */
            this.fnClose = function( nTr )
            {
                this.api( true ).row( nTr ).child.hide();
            };
            
            
            /**
             * Remove a row for the table
             *  @param {mixed} target The index of the row from aoData to be deleted, or
             *    the TR element you want to delete
             *  @param {function|null} [callBack] Callback function
             *  @param {bool} [redraw=true] Redraw the table or not
             *  @returns {array} The row that was deleted
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Immediately remove the first row
             *      oTable.fnDeleteRow( 0 );
             *    } );
             */
            this.fnDeleteRow = function( target, callback, redraw )
            {
                var api = this.api( true );
                var rows = api.rows( target );
                var settings = rows.settings()[0];
                var data = settings.aoData[ rows[0][0] ];
            
                rows.remove();
            
                if ( callback ) {
                    callback.call( this, settings, data );
                }
            
                if ( redraw === undefined || redraw ) {
                    api.draw();
                }
            
                return data;
            };
            
            
            /**
             * Restore the table to it's original state in the DOM by removing all of DataTables
             * enhancements, alterations to the DOM structure of the table and event listeners.
             *  @param {boolean} [remove=false] Completely remove the table from the DOM
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
             *      var oTable = $('#example').dataTable();
             *      oTable.fnDestroy();
             *    } );
             */
            this.fnDestroy = function ( remove )
            {
                this.api( true ).destroy( remove );
            };
            
            
            /**
             * Redraw the table
             *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
             *      oTable.fnDraw();
             *    } );
             */
            this.fnDraw = function( complete )
            {
                // Note that this isn't an exact match to the old call to _fnDraw - it takes
                // into account the new data, but can hold position.
                this.api( true ).draw( complete );
            };
            
            
            /**
             * Filter the input based on data
             *  @param {string} sInput String to filter the table on
             *  @param {int|null} [iColumn] Column to limit filtering to
             *  @param {bool} [bRegex=false] Treat as regular expression or not
             *  @param {bool} [bSmart=true] Perform smart filtering or not
             *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
             *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Sometime later - filter...
             *      oTable.fnFilter( 'test string' );
             *    } );
             */
            this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )
            {
                var api = this.api( true );
            
                if ( iColumn === null || iColumn === undefined ) {
                    api.search( sInput, bRegex, bSmart, bCaseInsensitive );
                }
                else {
                    api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );
                }
            
                api.draw();
            };
            
            
            /**
             * Get the data for the whole table, an individual row or an individual cell based on the
             * provided parameters.
             *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
             *    a TR node then the data source for the whole row will be returned. If given as a
             *    TD/TH cell node then iCol will be automatically calculated and the data for the
             *    cell returned. If given as an integer, then this is treated as the aoData internal
             *    data index for the row (see fnGetPosition) and the data for that row used.
             *  @param {int} [col] Optional column index that you want the data of.
             *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
             *    returned. If mRow is defined, just data for that row, and is iCol is
             *    defined, only data for the designated cell is returned.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    // Row data
             *    $(document).ready(function() {
             *      oTable = $('#example').dataTable();
             *
             *      oTable.$('tr').click( function () {
             *        var data = oTable.fnGetData( this );
             *        // ... do something with the array / object of data for the row
             *      } );
             *    } );
             *
             *  @example
             *    // Individual cell data
             *    $(document).ready(function() {
             *      oTable = $('#example').dataTable();
             *
             *      oTable.$('td').click( function () {
             *        var sData = oTable.fnGetData( this );
             *        alert( 'The cell clicked on had the value of '+sData );
             *      } );
             *    } );
             */
            this.fnGetData = function( src, col )
            {
                var api = this.api( true );
            
                if ( src !== undefined ) {
                    var type = src.nodeName ? src.nodeName.toLowerCase() : '';
            
                    return col !== undefined || type == 'td' || type == 'th' ?
                        api.cell( src, col ).data() :
                        api.row( src ).data() || null;
                }
            
                return api.data().toArray();
            };
            
            
            /**
             * Get an array of the TR nodes that are used in the table's body. Note that you will
             * typically want to use the '$' API method in preference to this as it is more
             * flexible.
             *  @param {int} [iRow] Optional row index for the TR element you want
             *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
             *    in the table's body, or iRow is defined, just the TR element requested.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Get the nodes from the table
             *      var nNodes = oTable.fnGetNodes( );
             *    } );
             */
            this.fnGetNodes = function( iRow )
            {
                var api = this.api( true );
            
                return iRow !== undefined ?
                    api.row( iRow ).node() :
                    api.rows().nodes().flatten().toArray();
            };
            
            
            /**
             * Get the array indexes of a particular cell from it's DOM element
             * and column index including hidden columns
             *  @param {node} node this can either be a TR, TD or TH in the table's body
             *  @returns {int} If nNode is given as a TR, then a single index is returned, or
             *    if given as a cell, an array of [row index, column index (visible),
             *    column index (all)] is given.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      $('#example tbody td').click( function () {
             *        // Get the position of the current data from the node
             *        var aPos = oTable.fnGetPosition( this );
             *
             *        // Get the data array for this row
             *        var aData = oTable.fnGetData( aPos[0] );
             *
             *        // Update the data array and return the value
             *        aData[ aPos[1] ] = 'clicked';
             *        this.innerHTML = 'clicked';
             *      } );
             *
             *      // Init DataTables
             *      oTable = $('#example').dataTable();
             *    } );
             */
            this.fnGetPosition = function( node )
            {
                var api = this.api( true );
                var nodeName = node.nodeName.toUpperCase();
            
                if ( nodeName == 'TR' ) {
                    return api.row( node ).index();
                }
                else if ( nodeName == 'TD' || nodeName == 'TH' ) {
                    var cell = api.cell( node ).index();
            
                    return [
                        cell.row,
                        cell.columnVisible,
                        cell.column
                    ];
                }
                return null;
            };
            
            
            /**
             * Check to see if a row is 'open' or not.
             *  @param {node} nTr the table row to check
             *  @returns {boolean} true if the row is currently open, false otherwise
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable;
             *
             *      // 'open' an information row when a row is clicked on
             *      $('#example tbody tr').click( function () {
             *        if ( oTable.fnIsOpen(this) ) {
             *          oTable.fnClose( this );
             *        } else {
             *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
             *        }
             *      } );
             *
             *      oTable = $('#example').dataTable();
             *    } );
             */
            this.fnIsOpen = function( nTr )
            {
                return this.api( true ).row( nTr ).child.isShown();
            };
            
            
            /**
             * This function will place a new row directly after a row which is currently
             * on display on the page, with the HTML contents that is passed into the
             * function. This can be used, for example, to ask for confirmation that a
             * particular record should be deleted.
             *  @param {node} nTr The table row to 'open'
             *  @param {string|node|jQuery} mHtml The HTML to put into the row
             *  @param {string} sClass Class to give the new TD cell
             *  @returns {node} The row opened. Note that if the table row passed in as the
             *    first parameter, is not found in the table, this method will silently
             *    return.
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable;
             *
             *      // 'open' an information row when a row is clicked on
             *      $('#example tbody tr').click( function () {
             *        if ( oTable.fnIsOpen(this) ) {
             *          oTable.fnClose( this );
             *        } else {
             *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
             *        }
             *      } );
             *
             *      oTable = $('#example').dataTable();
             *    } );
             */
            this.fnOpen = function( nTr, mHtml, sClass )
            {
                return this.api( true )
                    .row( nTr )
                    .child( mHtml, sClass )
                    .show()
                    .child()[0];
            };
            
            
            /**
             * Change the pagination - provides the internal logic for pagination in a simple API
             * function. With this function you can have a DataTables table go to the next,
             * previous, first or last pages.
             *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
             *    or page number to jump to (integer), note that page 0 is the first page.
             *  @param {bool} [bRedraw=true] Redraw the table or not
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *      oTable.fnPageChange( 'next' );
             *    } );
             */
            this.fnPageChange = function ( mAction, bRedraw )
            {
                var api = this.api( true ).page( mAction );
            
                if ( bRedraw === undefined || bRedraw ) {
                    api.draw(false);
                }
            };
            
            
            /**
             * Show a particular column
             *  @param {int} iCol The column whose display should be changed
             *  @param {bool} bShow Show (true) or hide (false) the column
             *  @param {bool} [bRedraw=true] Redraw the table or not
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Hide the second column after initialisation
             *      oTable.fnSetColumnVis( 1, false );
             *    } );
             */
            this.fnSetColumnVis = function ( iCol, bShow, bRedraw )
            {
                var api = this.api( true ).column( iCol ).visible( bShow );
            
                if ( bRedraw === undefined || bRedraw ) {
                    api.columns.adjust().draw();
                }
            };
            
            
            /**
             * Get the settings for a particular table for external manipulation
             *  @returns {object} DataTables settings object. See
             *    {@link DataTable.models.oSettings}
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *      var oSettings = oTable.fnSettings();
             *
             *      // Show an example parameter from the settings
             *      alert( oSettings._iDisplayStart );
             *    } );
             */
            this.fnSettings = function()
            {
                return _fnSettingsFromNode( this[_ext.iApiIndex] );
            };
            
            
            /**
             * Sort the table by a particular column
             *  @param {int} iCol the data index to sort on. Note that this will not match the
             *    'display index' if you have hidden data entries
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Sort immediately with columns 0 and 1
             *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
             *    } );
             */
            this.fnSort = function( aaSort )
            {
                this.api( true ).order( aaSort ).draw();
            };
            
            
            /**
             * Attach a sort listener to an element for a given column
             *  @param {node} nNode the element to attach the sort listener to
             *  @param {int} iColumn the column that a click on this node will sort on
             *  @param {function} [fnCallback] callback function when sort is run
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *
             *      // Sort on column 1, when 'sorter' is clicked on
             *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
             *    } );
             */
            this.fnSortListener = function( nNode, iColumn, fnCallback )
            {
                this.api( true ).order.listener( nNode, iColumn, fnCallback );
            };
            
            
            /**
             * Update a table cell or row - this method will accept either a single value to
             * update the cell with, an array of values with one element for each column or
             * an object in the same format as the original data source. The function is
             * self-referencing in order to make the multi column updates easier.
             *  @param {object|array|string} mData Data to update the cell/row with
             *  @param {node|int} mRow TR element you want to update or the aoData index
             *  @param {int} [iColumn] The column to update, give as null or undefined to
             *    update a whole row.
             *  @param {bool} [bRedraw=true] Redraw the table or not
             *  @param {bool} [bAction=true] Perform pre-draw actions or not
             *  @returns {int} 0 on success, 1 on error
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
             *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
             *    } );
             */
            this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )
            {
                var api = this.api( true );
            
                if ( iColumn === undefined || iColumn === null ) {
                    api.row( mRow ).data( mData );
                }
                else {
                    api.cell( mRow, iColumn ).data( mData );
                }
            
                if ( bAction === undefined || bAction ) {
                    api.columns.adjust();
                }
            
                if ( bRedraw === undefined || bRedraw ) {
                    api.draw();
                }
                return 0;
            };
            
            
            /**
             * Provide a common method for plug-ins to check the version of DataTables being used, in order
             * to ensure compatibility.
             *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
             *    formats "X" and "X.Y" are also acceptable.
             *  @returns {boolean} true if this version of DataTables is greater or equal to the required
             *    version, or false if this version of DataTales is not suitable
             *  @method
             *  @dtopt API
             *  @deprecated Since v1.10
             *
             *  @example
             *    $(document).ready(function() {
             *      var oTable = $('#example').dataTable();
             *      alert( oTable.fnVersionCheck( '1.9.0' ) );
             *    } );
             */
            this.fnVersionCheck = _ext.fnVersionCheck;
            
        
            var _that = this;
            var emptyInit = options === undefined;
            var len = this.length;
        
            if ( emptyInit ) {
                options = {};
            }
        
            this.oApi = this.internal = _ext.internal;
        
            // Extend with old style plug-in API methods
            for ( var fn in DataTable.ext.internal ) {
                if ( fn ) {
                    this[fn] = _fnExternApiFunc(fn);
                }
            }
        
            this.each(function() {
                // For each initialisation we want to give it a clean initialisation
                // object that can be bashed around
                var o = {};
                var oInit = len > 1 ? // optimisation for single table case
                    _fnExtend( o, options, true ) :
                    options;
        
                /*global oInit,_that,emptyInit*/
                var i=0, iLen, j, jLen, k, kLen;
                var sId = this.getAttribute( 'id' );
                var bInitHandedOff = false;
                var defaults = DataTable.defaults;
                var $this = $(this);
                
                
                /* Sanity check */
                if ( this.nodeName.toLowerCase() != 'table' )
                {
                    _fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );
                    return;
                }
                
                /* Backwards compatibility for the defaults */
                _fnCompatOpts( defaults );
                _fnCompatCols( defaults.column );
                
                /* Convert the camel-case defaults to Hungarian */
                _fnCamelToHungarian( defaults, defaults, true );
                _fnCamelToHungarian( defaults.column, defaults.column, true );
                
                /* Setting up the initialisation object */
                _fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ), true );
                
                
                
                /* Check to see if we are re-initialising a table */
                var allSettings = DataTable.settings;
                for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )
                {
                    var s = allSettings[i];
                
                    /* Base check on table node */
                    if (
                        s.nTable == this ||
                        (s.nTHead && s.nTHead.parentNode == this) ||
                        (s.nTFoot && s.nTFoot.parentNode == this)
                    ) {
                        var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
                        var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;
                
                        if ( emptyInit || bRetrieve )
                        {
                            return s.oInstance;
                        }
                        else if ( bDestroy )
                        {
                            s.oInstance.fnDestroy();
                            break;
                        }
                        else
                        {
                            _fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );
                            return;
                        }
                    }
                
                    /* If the element we are initialising has the same ID as a table which was previously
                     * initialised, but the table nodes don't match (from before) then we destroy the old
                     * instance by simply deleting it. This is under the assumption that the table has been
                     * destroyed by other methods. Anyone using non-id selectors will need to do this manually
                     */
                    if ( s.sTableId == this.id )
                    {
                        allSettings.splice( i, 1 );
                        break;
                    }
                }
                
                /* Ensure the table has an ID - required for accessibility */
                if ( sId === null || sId === "" )
                {
                    sId = "DataTables_Table_"+(DataTable.ext._unique++);
                    this.id = sId;
                }
                
                /* Create the settings object for this table and set some of the default parameters */
                var oSettings = $.extend( true, {}, DataTable.models.oSettings, {
                    "sDestroyWidth": $this[0].style.width,
                    "sInstance":     sId,
                    "sTableId":      sId
                } );
                oSettings.nTable = this;
                oSettings.oApi   = _that.internal;
                oSettings.oInit  = oInit;
                
                allSettings.push( oSettings );
                
                // Need to add the instance after the instance after the settings object has been added
                // to the settings array, so we can self reference the table instance if more than one
                oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();
                
                // Backwards compatibility, before we apply all the defaults
                _fnCompatOpts( oInit );
                _fnLanguageCompat( oInit.oLanguage );
                
                // If the length menu is given, but the init display length is not, use the length menu
                if ( oInit.aLengthMenu && ! oInit.iDisplayLength )
                {
                    oInit.iDisplayLength = Array.isArray( oInit.aLengthMenu[0] ) ?
                        oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
                }
                
                // Apply the defaults and init options to make a single init object will all
                // options defined from defaults and instance options.
                oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );
                
                
                // Map the initialisation options onto the settings object
                _fnMap( oSettings.oFeatures, oInit, [
                    "bPaginate",
                    "bLengthChange",
                    "bFilter",
                    "bSort",
                    "bSortMulti",
                    "bInfo",
                    "bProcessing",
                    "bAutoWidth",
                    "bSortClasses",
                    "bServerSide",
                    "bDeferRender"
                ] );
                _fnMap( oSettings, oInit, [
                    "asStripeClasses",
                    "ajax",
                    "fnServerData",
                    "fnFormatNumber",
                    "sServerMethod",
                    "aaSorting",
                    "aaSortingFixed",
                    "aLengthMenu",
                    "sPaginationType",
                    "sAjaxSource",
                    "sAjaxDataProp",
                    "iStateDuration",
                    "sDom",
                    "bSortCellsTop",
                    "iTabIndex",
                    "fnStateLoadCallback",
                    "fnStateSaveCallback",
                    "renderer",
                    "searchDelay",
                    "rowId",
                    [ "iCookieDuration", "iStateDuration" ], // backwards compat
                    [ "oSearch", "oPreviousSearch" ],
                    [ "aoSearchCols", "aoPreSearchCols" ],
                    [ "iDisplayLength", "_iDisplayLength" ]
                ] );
                _fnMap( oSettings.oScroll, oInit, [
                    [ "sScrollX", "sX" ],
                    [ "sScrollXInner", "sXInner" ],
                    [ "sScrollY", "sY" ],
                    [ "bScrollCollapse", "bCollapse" ]
                ] );
                _fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );
                
                /* Callback functions which are array driven */
                _fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );
                _fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );
                _fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );
                _fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );
                _fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );
                _fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );
                _fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );
                _fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );
                _fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );
                _fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );
                _fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );
                
                oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );
                
                /* Browser support detection */
                _fnBrowserDetect( oSettings );
                
                var oClasses = oSettings.oClasses;
                
                $.extend( oClasses, DataTable.ext.classes, oInit.oClasses );
                $this.addClass( oClasses.sTable );
                
                
                if ( oSettings.iInitDisplayStart === undefined )
                {
                    /* Display start point, taking into account the save saving */
                    oSettings.iInitDisplayStart = oInit.iDisplayStart;
                    oSettings._iDisplayStart = oInit.iDisplayStart;
                }
                
                if ( oInit.iDeferLoading !== null )
                {
                    oSettings.bDeferLoading = true;
                    var tmp = Array.isArray( oInit.iDeferLoading );
                    oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
                    oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
                }
                
                /* Language definitions */
                var oLanguage = oSettings.oLanguage;
                $.extend( true, oLanguage, oInit.oLanguage );
                
                if ( oLanguage.sUrl )
                {
                    /* Get the language definitions from a file - because this Ajax call makes the language
                     * get async to the remainder of this function we use bInitHandedOff to indicate that
                     * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
                     */
                    $.ajax( {
                        dataType: 'json',
                        url: oLanguage.sUrl,
                        success: function ( json ) {
                            _fnCamelToHungarian( defaults.oLanguage, json );
                            _fnLanguageCompat( json );
                            $.extend( true, oLanguage, json, oSettings.oInit.oLanguage );
                
                            _fnCallbackFire( oSettings, null, 'i18n', [oSettings]);
                            _fnInitialise( oSettings );
                        },
                        error: function () {
                            // Error occurred loading language file, continue on as best we can
                            _fnInitialise( oSettings );
                        }
                    } );
                    bInitHandedOff = true;
                }
                else {
                    _fnCallbackFire( oSettings, null, 'i18n', [oSettings]);
                }
                
                /*
                 * Stripes
                 */
                if ( oInit.asStripeClasses === null )
                {
                    oSettings.asStripeClasses =[
                        oClasses.sStripeOdd,
                        oClasses.sStripeEven
                    ];
                }
                
                /* Remove row stripe classes if they are already on the table row */
                var stripeClasses = oSettings.asStripeClasses;
                var rowOne = $this.children('tbody').find('tr').eq(0);
                if ( $.inArray( true, $.map( stripeClasses, function(el, i) {
                    return rowOne.hasClass(el);
                } ) ) !== -1 ) {
                    $('tbody tr', this).removeClass( stripeClasses.join(' ') );
                    oSettings.asDestroyStripes = stripeClasses.slice();
                }
                
                /*
                 * Columns
                 * See if we should load columns automatically or use defined ones
                 */
                var anThs = [];
                var aoColumnsInit;
                var nThead = this.getElementsByTagName('thead');
                if ( nThead.length !== 0 )
                {
                    _fnDetectHeader( oSettings.aoHeader, nThead[0] );
                    anThs = _fnGetUniqueThs( oSettings );
                }
                
                /* If not given a column array, generate one with nulls */
                if ( oInit.aoColumns === null )
                {
                    aoColumnsInit = [];
                    for ( i=0, iLen=anThs.length ; i<iLen ; i++ )
                    {
                        aoColumnsInit.push( null );
                    }
                }
                else
                {
                    aoColumnsInit = oInit.aoColumns;
                }
                
                /* Add the columns */
                for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )
                {
                    _fnAddColumn( oSettings, anThs ? anThs[i] : null );
                }
                
                /* Apply the column definitions */
                _fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
                    _fnColumnOptions( oSettings, iCol, oDef );
                } );
                
                /* HTML5 attribute detection - build an mData object automatically if the
                 * attributes are found
                 */
                if ( rowOne.length ) {
                    var a = function ( cell, name ) {
                        return cell.getAttribute( 'data-'+name ) !== null ? name : null;
                    };
                
                    $( rowOne[0] ).children('th, td').each( function (i, cell) {
                        var col = oSettings.aoColumns[i];
                
                        if (! col) {
                            _fnLog( oSettings, 0, 'Incorrect column count', 18 );
                        }
                
                        if ( col.mData === i ) {
                            var sort = a( cell, 'sort' ) || a( cell, 'order' );
                            var filter = a( cell, 'filter' ) || a( cell, 'search' );
                
                            if ( sort !== null || filter !== null ) {
                                col.mData = {
                                    _:      i+'.display',
                                    sort:   sort !== null   ? i+'.@data-'+sort   : undefined,
                                    type:   sort !== null   ? i+'.@data-'+sort   : undefined,
                                    filter: filter !== null ? i+'.@data-'+filter : undefined
                                };
                                col._isArrayHost = true;
                
                                _fnColumnOptions( oSettings, i );
                            }
                        }
                    } );
                }
                
                var features = oSettings.oFeatures;
                var loadedInit = function () {
                    /*
                     * Sorting
                     * @todo For modularisation (1.11) this needs to do into a sort start up handler
                     */
                
                    // If aaSorting is not defined, then we use the first indicator in asSorting
                    // in case that has been altered, so the default sort reflects that option
                    if ( oInit.aaSorting === undefined ) {
                        var sorting = oSettings.aaSorting;
                        for ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {
                            sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];
                        }
                    }
                
                    /* Do a first pass on the sorting classes (allows any size changes to be taken into
                     * account, and also will apply sorting disabled classes if disabled
                     */
                    _fnSortingClasses( oSettings );
                
                    if ( features.bSort ) {
                        _fnCallbackReg( oSettings, 'aoDrawCallback', function () {
                            if ( oSettings.bSorted ) {
                                var aSort = _fnSortFlatten( oSettings );
                                var sortedColumns = {};
                
                                $.each( aSort, function (i, val) {
                                    sortedColumns[ val.src ] = val.dir;
                                } );
                
                                _fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );
                                _fnSortAria( oSettings );
                            }
                        } );
                    }
                
                    _fnCallbackReg( oSettings, 'aoDrawCallback', function () {
                        if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {
                            _fnSortingClasses( oSettings );
                        }
                    }, 'sc' );
                
                
                    /*
                     * Final init
                     * Cache the header, body and footer as required, creating them if needed
                     */
                
                    // Work around for Webkit bug 83867 - store the caption-side before removing from doc
                    var captions = $this.children('caption').each( function () {
                        this._captionSide = $(this).css('caption-side');
                    } );
                
                    var thead = $this.children('thead');
                    if ( thead.length === 0 ) {
                        thead = $('<thead/>').appendTo($this);
                    }
                    oSettings.nTHead = thead[0];
                
                    var tbody = $this.children('tbody');
                    if ( tbody.length === 0 ) {
                        tbody = $('<tbody/>').insertAfter(thead);
                    }
                    oSettings.nTBody = tbody[0];
                
                    var tfoot = $this.children('tfoot');
                    if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") ) {
                        // If we are a scrolling table, and no footer has been given, then we need to create
                        // a tfoot element for the caption element to be appended to
                        tfoot = $('<tfoot/>').appendTo($this);
                    }
                
                    if ( tfoot.length === 0 || tfoot.children().length === 0 ) {
                        $this.addClass( oClasses.sNoFooter );
                    }
                    else if ( tfoot.length > 0 ) {
                        oSettings.nTFoot = tfoot[0];
                        _fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );
                    }
                
                    /* Check if there is data passing into the constructor */
                    if ( oInit.aaData ) {
                        for ( i=0 ; i<oInit.aaData.length ; i++ ) {
                            _fnAddData( oSettings, oInit.aaData[ i ] );
                        }
                    }
                    else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {
                        /* Grab the data from the page - only do this when deferred loading or no Ajax
                         * source since there is no point in reading the DOM data if we are then going
                         * to replace it with Ajax data
                         */
                        _fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );
                    }
                
                    /* Copy the data index array */
                    oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
                
                    /* Initialisation complete - table can be drawn */
                    oSettings.bInitialised = true;
                
                    /* Check if we need to initialise the table (it might not have been handed off to the
                     * language processor)
                     */
                    if ( bInitHandedOff === false ) {
                        _fnInitialise( oSettings );
                    }
                };
                
                /* Must be done after everything which can be overridden by the state saving! */
                _fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );
                
                if ( oInit.bStateSave )
                {
                    features.bStateSave = true;
                    _fnLoadState( oSettings, oInit, loadedInit );
                }
                else {
                    loadedInit();
                }
                
            } );
            _that = null;
            return this;
        };
        
        
        /*
         * It is useful to have variables which are scoped locally so only the
         * DataTables functions can access them and they don't leak into global space.
         * At the same time these functions are often useful over multiple files in the
         * core and API, so we list, or at least document, all variables which are used
         * by DataTables as private variables here. This also ensures that there is no
         * clashing of variable names and that they can easily referenced for reuse.
         */
        
        
        // Defined else where
        //  _selector_run
        //  _selector_opts
        //  _selector_first
        //  _selector_row_indexes
        
        var _ext; // DataTable.ext
        var _Api; // DataTable.Api
        var _api_register; // DataTable.Api.register
        var _api_registerPlural; // DataTable.Api.registerPlural
        
        var _re_dic = {};
        var _re_new_lines = /[\r\n\u2028]/g;
        var _re_html = /<.*?>/g;
        
        // This is not strict ISO8601 - Date.parse() is quite lax, although
        // implementations differ between browsers.
        var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/;
        
        // Escape regular expression special characters
        var _re_escape_regex = new RegExp( '(\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-' ].join('|\\') + ')', 'g' );
        
        // https://en.wikipedia.org/wiki/Foreign_exchange_market
        // - \u20BD - Russian ruble.
        // - \u20a9 - South Korean Won
        // - \u20BA - Turkish Lira
        // - \u20B9 - Indian Rupee
        // - R - Brazil (R$) and South Africa
        // - fr - Swiss Franc
        // - kr - Swedish krona, Norwegian krone and Danish krone
        // - \u2009 is thin space and \u202F is narrow no-break space, both used in many
        // - Ƀ - Bitcoin
        // - Ξ - Ethereum
        //   standards as thousands separators.
        var _re_formatted_numeric = /['\u00A0,$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfkɃΞ]/gi;
        
        
        var _empty = function ( d ) {
            return !d || d === true || d === '-' ? true : false;
        };
        
        
        var _intVal = function ( s ) {
            var integer = parseInt( s, 10 );
            return !isNaN(integer) && isFinite(s) ? integer : null;
        };
        
        // Convert from a formatted number with characters other than `.` as the
        // decimal place, to a Javascript number
        var _numToDecimal = function ( num, decimalPoint ) {
            // Cache created regular expressions for speed as this function is called often
            if ( ! _re_dic[ decimalPoint ] ) {
                _re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );
            }
            return typeof num === 'string' && decimalPoint !== '.' ?
                num.replace( /\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :
                num;
        };
        
        
        var _isNumber = function ( d, decimalPoint, formatted ) {
            var type = typeof d;
            var strType = type === 'string';
        
            if ( type === 'number' || type === 'bigint') {
                return true;
            }
        
            // If empty return immediately so there must be a number if it is a
            // formatted string (this stops the string "k", or "kr", etc being detected
            // as a formatted number for currency
            if ( _empty( d ) ) {
                return true;
            }
        
            if ( decimalPoint && strType ) {
                d = _numToDecimal( d, decimalPoint );
            }
        
            if ( formatted && strType ) {
                d = d.replace( _re_formatted_numeric, '' );
            }
        
            return !isNaN( parseFloat(d) ) && isFinite( d );
        };
        
        
        // A string without HTML in it can be considered to be HTML still
        var _isHtml = function ( d ) {
            return _empty( d ) || typeof d === 'string';
        };
        
        
        var _htmlNumeric = function ( d, decimalPoint, formatted ) {
            if ( _empty( d ) ) {
                return true;
            }
        
            var html = _isHtml( d );
            return ! html ?
                null :
                _isNumber( _stripHtml( d ), decimalPoint, formatted ) ?
                    true :
                    null;
        };
        
        
        var _pluck = function ( a, prop, prop2 ) {
            var out = [];
            var i=0, ien=a.length;
        
            // Could have the test in the loop for slightly smaller code, but speed
            // is essential here
            if ( prop2 !== undefined ) {
                for ( ; i<ien ; i++ ) {
                    if ( a[i] && a[i][ prop ] ) {
                        out.push( a[i][ prop ][ prop2 ] );
                    }
                }
            }
            else {
                for ( ; i<ien ; i++ ) {
                    if ( a[i] ) {
                        out.push( a[i][ prop ] );
                    }
                }
            }
        
            return out;
        };
        
        
        // Basically the same as _pluck, but rather than looping over `a` we use `order`
        // as the indexes to pick from `a`
        var _pluck_order = function ( a, order, prop, prop2 )
        {
            var out = [];
            var i=0, ien=order.length;
        
            // Could have the test in the loop for slightly smaller code, but speed
            // is essential here
            if ( prop2 !== undefined ) {
                for ( ; i<ien ; i++ ) {
                    if ( a[ order[i] ][ prop ] ) {
                        out.push( a[ order[i] ][ prop ][ prop2 ] );
                    }
                }
            }
            else {
                for ( ; i<ien ; i++ ) {
                    out.push( a[ order[i] ][ prop ] );
                }
            }
        
            return out;
        };
        
        
        var _range = function ( len, start )
        {
            var out = [];
            var end;
        
            if ( start === undefined ) {
                start = 0;
                end = len;
            }
            else {
                end = start;
                start = len;
            }
        
            for ( var i=start ; i<end ; i++ ) {
                out.push( i );
            }
        
            return out;
        };
        
        
        var _removeEmpty = function ( a )
        {
            var out = [];
        
            for ( var i=0, ien=a.length ; i<ien ; i++ ) {
                if ( a[i] ) { // careful - will remove all falsy values!
                    out.push( a[i] );
                }
            }
        
            return out;
        };
        
        
        var _stripHtml = function ( d ) {
            return d
                .replace( _re_html, '' ) // Complete tags
                .replace(/<script/i, ''); // Safety for incomplete script tag
        };
        
        
        /**
         * Determine if all values in the array are unique. This means we can short
         * cut the _unique method at the cost of a single loop. A sorted array is used
         * to easily check the values.
         *
         * @param  {array} src Source array
         * @return {boolean} true if all unique, false otherwise
         * @ignore
         */
        var _areAllUnique = function ( src ) {
            if ( src.length < 2 ) {
                return true;
            }
        
            var sorted = src.slice().sort();
            var last = sorted[0];
        
            for ( var i=1, ien=sorted.length ; i<ien ; i++ ) {
                if ( sorted[i] === last ) {
                    return false;
                }
        
                last = sorted[i];
            }
        
            return true;
        };
        
        
        /**
         * Find the unique elements in a source array.
         *
         * @param  {array} src Source array
         * @return {array} Array of unique items
         * @ignore
         */
        var _unique = function ( src )
        {
            if ( _areAllUnique( src ) ) {
                return src.slice();
            }
        
            // A faster unique method is to use object keys to identify used values,
            // but this doesn't work with arrays or objects, which we must also
            // consider. See jsperf.com/compare-array-unique-versions/4 for more
            // information.
            var
                out = [],
                val,
                i, ien=src.length,
                j, k=0;
        
            again: for ( i=0 ; i<ien ; i++ ) {
                val = src[i];
        
                for ( j=0 ; j<k ; j++ ) {
                    if ( out[j] === val ) {
                        continue again;
                    }
                }
        
                out.push( val );
                k++;
            }
        
            return out;
        };
        
        // Surprisingly this is faster than [].concat.apply
        // https://jsperf.com/flatten-an-array-loop-vs-reduce/2
        var _flatten = function (out, val) {
            if (Array.isArray(val)) {
                for (var i=0 ; i<val.length ; i++) {
                    _flatten(out, val[i]);
                }
            }
            else {
                out.push(val);
            }
          
            return out;
        }
        
        var _includes = function (search, start) {
            if (start === undefined) {
                start = 0;
            }
        
            return this.indexOf(search, start) !== -1;	
        };
        
        // Array.isArray polyfill.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray
        if (! Array.isArray) {
            Array.isArray = function(arg) {
                return Object.prototype.toString.call(arg) === '[object Array]';
            };
        }
        
        if (! Array.prototype.includes) {
            Array.prototype.includes = _includes;
        }
        
        // .trim() polyfill
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim
        if (!String.prototype.trim) {
          String.prototype.trim = function () {
            return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
          };
        }
        
        if (! String.prototype.includes) {
            String.prototype.includes = _includes;
        }
        
        /**
         * DataTables utility methods
         * 
         * This namespace provides helper methods that DataTables uses internally to
         * create a DataTable, but which are not exclusively used only for DataTables.
         * These methods can be used by extension authors to save the duplication of
         * code.
         *
         *  @namespace
         */
        DataTable.util = {
            /**
             * Throttle the calls to a function. Arguments and context are maintained
             * for the throttled function.
             *
             * @param {function} fn Function to be called
             * @param {integer} freq Call frequency in mS
             * @return {function} Wrapped function
             */
            throttle: function ( fn, freq ) {
                var
                    frequency = freq !== undefined ? freq : 200,
                    last,
                    timer;
        
                return function () {
                    var
                        that = this,
                        now  = +new Date(),
                        args = arguments;
        
                    if ( last && now < last + frequency ) {
                        clearTimeout( timer );
        
                        timer = setTimeout( function () {
                            last = undefined;
                            fn.apply( that, args );
                        }, frequency );
                    }
                    else {
                        last = now;
                        fn.apply( that, args );
                    }
                };
            },
        
        
            /**
             * Escape a string such that it can be used in a regular expression
             *
             *  @param {string} val string to escape
             *  @returns {string} escaped string
             */
            escapeRegex: function ( val ) {
                return val.replace( _re_escape_regex, '\\$1' );
            },
        
            /**
             * Create a function that will write to a nested object or array
             * @param {*} source JSON notation string
             * @returns Write function
             */
            set: function ( source ) {
                if ( $.isPlainObject( source ) ) {
                    /* Unlike get, only the underscore (global) option is used for for
                     * setting data since we don't know the type here. This is why an object
                     * option is not documented for `mData` (which is read/write), but it is
                     * for `mRender` which is read only.
                     */
                    return DataTable.util.set( source._ );
                }
                else if ( source === null ) {
                    // Nothing to do when the data source is null
                    return function () {};
                }
                else if ( typeof source === 'function' ) {
                    return function (data, val, meta) {
                        source( data, 'set', val, meta );
                    };
                }
                else if ( typeof source === 'string' && (source.indexOf('.') !== -1 ||
                          source.indexOf('[') !== -1 || source.indexOf('(') !== -1) )
                {
                    // Like the get, we need to get data from a nested object
                    var setData = function (data, val, src) {
                        var a = _fnSplitObjNotation( src ), b;
                        var aLast = a[a.length-1];
                        var arrayNotation, funcNotation, o, innerSrc;
            
                        for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ ) {
                            // Protect against prototype pollution
                            if (a[i] === '__proto__' || a[i] === 'constructor') {
                                throw new Error('Cannot set prototype values');
                            }
            
                            // Check if we are dealing with an array notation request
                            arrayNotation = a[i].match(__reArray);
                            funcNotation = a[i].match(__reFn);
            
                            if ( arrayNotation ) {
                                a[i] = a[i].replace(__reArray, '');
                                data[ a[i] ] = [];
            
                                // Get the remainder of the nested object to set so we can recurse
                                b = a.slice();
                                b.splice( 0, i+1 );
                                innerSrc = b.join('.');
            
                                // Traverse each entry in the array setting the properties requested
                                if ( Array.isArray( val ) ) {
                                    for ( var j=0, jLen=val.length ; j<jLen ; j++ ) {
                                        o = {};
                                        setData( o, val[j], innerSrc );
                                        data[ a[i] ].push( o );
                                    }
                                }
                                else {
                                    // We've been asked to save data to an array, but it
                                    // isn't array data to be saved. Best that can be done
                                    // is to just save the value.
                                    data[ a[i] ] = val;
                                }
            
                                // The inner call to setData has already traversed through the remainder
                                // of the source and has set the data, thus we can exit here
                                return;
                            }
                            else if ( funcNotation ) {
                                // Function call
                                a[i] = a[i].replace(__reFn, '');
                                data = data[ a[i] ]( val );
                            }
            
                            // If the nested object doesn't currently exist - since we are
                            // trying to set the value - create it
                            if ( data[ a[i] ] === null || data[ a[i] ] === undefined ) {
                                data[ a[i] ] = {};
                            }
                            data = data[ a[i] ];
                        }
            
                        // Last item in the input - i.e, the actual set
                        if ( aLast.match(__reFn ) ) {
                            // Function call
                            data = data[ aLast.replace(__reFn, '') ]( val );
                        }
                        else {
                            // If array notation is used, we just want to strip it and use the property name
                            // and assign the value. If it isn't used, then we get the result we want anyway
                            data[ aLast.replace(__reArray, '') ] = val;
                        }
                    };
            
                    return function (data, val) { // meta is also passed in, but not used
                        return setData( data, val, source );
                    };
                }
                else {
                    // Array or flat object mapping
                    return function (data, val) { // meta is also passed in, but not used
                        data[source] = val;
                    };
                }
            },
        
            /**
             * Create a function that will read nested objects from arrays, based on JSON notation
             * @param {*} source JSON notation string
             * @returns Value read
             */
            get: function ( source ) {
                if ( $.isPlainObject( source ) ) {
                    // Build an object of get functions, and wrap them in a single call
                    var o = {};
                    $.each( source, function (key, val) {
                        if ( val ) {
                            o[key] = DataTable.util.get( val );
                        }
                    } );
            
                    return function (data, type, row, meta) {
                        var t = o[type] || o._;
                        return t !== undefined ?
                            t(data, type, row, meta) :
                            data;
                    };
                }
                else if ( source === null ) {
                    // Give an empty string for rendering / sorting etc
                    return function (data) { // type, row and meta also passed, but not used
                        return data;
                    };
                }
                else if ( typeof source === 'function' ) {
                    return function (data, type, row, meta) {
                        return source( data, type, row, meta );
                    };
                }
                else if ( typeof source === 'string' && (source.indexOf('.') !== -1 ||
                          source.indexOf('[') !== -1 || source.indexOf('(') !== -1) )
                {
                    /* If there is a . in the source string then the data source is in a
                     * nested object so we loop over the data for each level to get the next
                     * level down. On each loop we test for undefined, and if found immediately
                     * return. This allows entire objects to be missing and sDefaultContent to
                     * be used if defined, rather than throwing an error
                     */
                    var fetchData = function (data, type, src) {
                        var arrayNotation, funcNotation, out, innerSrc;
            
                        if ( src !== "" ) {
                            var a = _fnSplitObjNotation( src );
            
                            for ( var i=0, iLen=a.length ; i<iLen ; i++ ) {
                                // Check if we are dealing with special notation
                                arrayNotation = a[i].match(__reArray);
                                funcNotation = a[i].match(__reFn);
            
                                if ( arrayNotation ) {
                                    // Array notation
                                    a[i] = a[i].replace(__reArray, '');
            
                                    // Condition allows simply [] to be passed in
                                    if ( a[i] !== "" ) {
                                        data = data[ a[i] ];
                                    }
                                    out = [];
            
                                    // Get the remainder of the nested object to get
                                    a.splice( 0, i+1 );
                                    innerSrc = a.join('.');
            
                                    // Traverse each entry in the array getting the properties requested
                                    if ( Array.isArray( data ) ) {
                                        for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {
                                            out.push( fetchData( data[j], type, innerSrc ) );
                                        }
                                    }
            
                                    // If a string is given in between the array notation indicators, that
                                    // is used to join the strings together, otherwise an array is returned
                                    var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);
                                    data = (join==="") ? out : out.join(join);
            
                                    // The inner call to fetchData has already traversed through the remainder
                                    // of the source requested, so we exit from the loop
                                    break;
                                }
                                else if ( funcNotation ) {
                                    // Function call
                                    a[i] = a[i].replace(__reFn, '');
                                    data = data[ a[i] ]();
                                    continue;
                                }
            
                                if (data === null || data[ a[i] ] === null) {
                                    return null;
                                }
                                else if ( data === undefined || data[ a[i] ] === undefined ) {
                                    return undefined;
                                }
        
                                data = data[ a[i] ];
                            }
                        }
            
                        return data;
                    };
            
                    return function (data, type) { // row and meta also passed, but not used
                        return fetchData( data, type, source );
                    };
                }
                else {
                    // Array or flat object mapping
                    return function (data, type) { // row and meta also passed, but not used
                        return data[source];
                    };
                }
            }
        };
        
        
        
        /**
         * Create a mapping object that allows camel case parameters to be looked up
         * for their Hungarian counterparts. The mapping is stored in a private
         * parameter called `_hungarianMap` which can be accessed on the source object.
         *  @param {object} o
         *  @memberof DataTable#oApi
         */
        function _fnHungarianMap ( o )
        {
            var
                hungarian = 'a aa ai ao as b fn i m o s ',
                match,
                newKey,
                map = {};
        
            $.each( o, function (key, val) {
                match = key.match(/^([^A-Z]+?)([A-Z])/);
        
                if ( match && hungarian.indexOf(match[1]+' ') !== -1 )
                {
                    newKey = key.replace( match[0], match[2].toLowerCase() );
                    map[ newKey ] = key;
        
                    if ( match[1] === 'o' )
                    {
                        _fnHungarianMap( o[key] );
                    }
                }
            } );
        
            o._hungarianMap = map;
        }
        
        
        /**
         * Convert from camel case parameters to Hungarian, based on a Hungarian map
         * created by _fnHungarianMap.
         *  @param {object} src The model object which holds all parameters that can be
         *    mapped.
         *  @param {object} user The object to convert from camel case to Hungarian.
         *  @param {boolean} force When set to `true`, properties which already have a
         *    Hungarian value in the `user` object will be overwritten. Otherwise they
         *    won't be.
         *  @memberof DataTable#oApi
         */
        function _fnCamelToHungarian ( src, user, force )
        {
            if ( ! src._hungarianMap ) {
                _fnHungarianMap( src );
            }
        
            var hungarianKey;
        
            $.each( user, function (key, val) {
                hungarianKey = src._hungarianMap[ key ];
        
                if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )
                {
                    // For objects, we need to buzz down into the object to copy parameters
                    if ( hungarianKey.charAt(0) === 'o' )
                    {
                        // Copy the camelCase options over to the hungarian
                        if ( ! user[ hungarianKey ] ) {
                            user[ hungarianKey ] = {};
                        }
                        $.extend( true, user[hungarianKey], user[key] );
        
                        _fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );
                    }
                    else {
                        user[hungarianKey] = user[ key ];
                    }
                }
            } );
        }
        
        
        /**
         * Language compatibility - when certain options are given, and others aren't, we
         * need to duplicate the values over, in order to provide backwards compatibility
         * with older language files.
         *  @param {object} oSettings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnLanguageCompat( lang )
        {
            // Note the use of the Hungarian notation for the parameters in this method as
            // this is called after the mapping of camelCase to Hungarian
            var defaults = DataTable.defaults.oLanguage;
        
            // Default mapping
            var defaultDecimal = defaults.sDecimal;
            if ( defaultDecimal ) {
                _addNumericSort( defaultDecimal );
            }
        
            if ( lang ) {
                var zeroRecords = lang.sZeroRecords;
        
                // Backwards compatibility - if there is no sEmptyTable given, then use the same as
                // sZeroRecords - assuming that is given.
                if ( ! lang.sEmptyTable && zeroRecords &&
                    defaults.sEmptyTable === "No data available in table" )
                {
                    _fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );
                }
        
                // Likewise with loading records
                if ( ! lang.sLoadingRecords && zeroRecords &&
                    defaults.sLoadingRecords === "Loading..." )
                {
                    _fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );
                }
        
                // Old parameter name of the thousands separator mapped onto the new
                if ( lang.sInfoThousands ) {
                    lang.sThousands = lang.sInfoThousands;
                }
        
                var decimal = lang.sDecimal;
                if ( decimal && defaultDecimal !== decimal ) {
                    _addNumericSort( decimal );
                }
            }
        }
        
        
        /**
         * Map one parameter onto another
         *  @param {object} o Object to map
         *  @param {*} knew The new parameter name
         *  @param {*} old The old parameter name
         */
        var _fnCompatMap = function ( o, knew, old ) {
            if ( o[ knew ] !== undefined ) {
                o[ old ] = o[ knew ];
            }
        };
        
        
        /**
         * Provide backwards compatibility for the main DT options. Note that the new
         * options are mapped onto the old parameters, so this is an external interface
         * change only.
         *  @param {object} init Object to map
         */
        function _fnCompatOpts ( init )
        {
            _fnCompatMap( init, 'ordering',      'bSort' );
            _fnCompatMap( init, 'orderMulti',    'bSortMulti' );
            _fnCompatMap( init, 'orderClasses',  'bSortClasses' );
            _fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );
            _fnCompatMap( init, 'order',         'aaSorting' );
            _fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );
            _fnCompatMap( init, 'paging',        'bPaginate' );
            _fnCompatMap( init, 'pagingType',    'sPaginationType' );
            _fnCompatMap( init, 'pageLength',    'iDisplayLength' );
            _fnCompatMap( init, 'searching',     'bFilter' );
        
            // Boolean initialisation of x-scrolling
            if ( typeof init.sScrollX === 'boolean' ) {
                init.sScrollX = init.sScrollX ? '100%' : '';
            }
            if ( typeof init.scrollX === 'boolean' ) {
                init.scrollX = init.scrollX ? '100%' : '';
            }
        
            // Column search objects are in an array, so it needs to be converted
            // element by element
            var searchCols = init.aoSearchCols;
        
            if ( searchCols ) {
                for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {
                    if ( searchCols[i] ) {
                        _fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );
                    }
                }
            }
        }
        
        
        /**
         * Provide backwards compatibility for column options. Note that the new options
         * are mapped onto the old parameters, so this is an external interface change
         * only.
         *  @param {object} init Object to map
         */
        function _fnCompatCols ( init )
        {
            _fnCompatMap( init, 'orderable',     'bSortable' );
            _fnCompatMap( init, 'orderData',     'aDataSort' );
            _fnCompatMap( init, 'orderSequence', 'asSorting' );
            _fnCompatMap( init, 'orderDataType', 'sortDataType' );
        
            // orderData can be given as an integer
            var dataSort = init.aDataSort;
            if ( typeof dataSort === 'number' && ! Array.isArray( dataSort ) ) {
                init.aDataSort = [ dataSort ];
            }
        }
        
        
        /**
         * Browser feature detection for capabilities, quirks
         *  @param {object} settings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnBrowserDetect( settings )
        {
            // We don't need to do this every time DataTables is constructed, the values
            // calculated are specific to the browser and OS configuration which we
            // don't expect to change between initialisations
            if ( ! DataTable.__browser ) {
                var browser = {};
                DataTable.__browser = browser;
        
                // Scrolling feature / quirks detection
                var n = $('<div/>')
                    .css( {
                        position: 'fixed',
                        top: 0,
                        left: $(window).scrollLeft()*-1, // allow for scrolling
                        height: 1,
                        width: 1,
                        overflow: 'hidden'
                    } )
                    .append(
                        $('<div/>')
                            .css( {
                                position: 'absolute',
                                top: 1,
                                left: 1,
                                width: 100,
                                overflow: 'scroll'
                            } )
                            .append(
                                $('<div/>')
                                    .css( {
                                        width: '100%',
                                        height: 10
                                    } )
                            )
                    )
                    .appendTo( 'body' );
        
                var outer = n.children();
                var inner = outer.children();
        
                // Numbers below, in order, are:
                // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
                //
                // IE6 XP:                           100 100 100  83
                // IE7 Vista:                        100 100 100  83
                // IE 8+ Windows:                     83  83 100  83
                // Evergreen Windows:                 83  83 100  83
                // Evergreen Mac with scrollbars:     85  85 100  85
                // Evergreen Mac without scrollbars: 100 100 100 100
        
                // Get scrollbar width
                browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;
        
                // IE6/7 will oversize a width 100% element inside a scrolling element, to
                // include the width of the scrollbar, while other browsers ensure the inner
                // element is contained without forcing scrolling
                browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;
        
                // In rtl text layout, some browsers (most, but not all) will place the
                // scrollbar on the left, rather than the right.
                browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;
        
                // IE8- don't provide height and width for getBoundingClientRect
                browser.bBounding = n[0].getBoundingClientRect().width ? true : false;
        
                n.remove();
            }
        
            $.extend( settings.oBrowser, DataTable.__browser );
            settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
        }
        
        
        /**
         * Array.prototype reduce[Right] method, used for browsers which don't support
         * JS 1.6. Done this way to reduce code size, since we iterate either way
         *  @param {object} settings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnReduce ( that, fn, init, start, end, inc )
        {
            var
                i = start,
                value,
                isSet = false;
        
            if ( init !== undefined ) {
                value = init;
                isSet = true;
            }
        
            while ( i !== end ) {
                if ( ! that.hasOwnProperty(i) ) {
                    continue;
                }
        
                value = isSet ?
                    fn( value, that[i], i, that ) :
                    that[i];
        
                isSet = true;
                i += inc;
            }
        
            return value;
        }
        
        /**
         * Add a column to the list used for the table with default values
         *  @param {object} oSettings dataTables settings object
         *  @param {node} nTh The th element for this column
         *  @memberof DataTable#oApi
         */
        function _fnAddColumn( oSettings, nTh )
        {
            // Add column to aoColumns array
            var oDefaults = DataTable.defaults.column;
            var iCol = oSettings.aoColumns.length;
            var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {
                "nTh": nTh ? nTh : document.createElement('th'),
                "sTitle":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',
                "aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
                "mData": oDefaults.mData ? oDefaults.mData : iCol,
                idx: iCol
            } );
            oSettings.aoColumns.push( oCol );
        
            // Add search object for column specific search. Note that the `searchCols[ iCol ]`
            // passed into extend can be undefined. This allows the user to give a default
            // with only some of the parameters defined, and also not give a default
            var searchCols = oSettings.aoPreSearchCols;
            searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );
        
            // Use the default column options function to initialise classes etc
            _fnColumnOptions( oSettings, iCol, $(nTh).data() );
        }
        
        
        /**
         * Apply options for a column
         *  @param {object} oSettings dataTables settings object
         *  @param {int} iCol column index to consider
         *  @param {object} oOptions object with sType, bVisible and bSearchable etc
         *  @memberof DataTable#oApi
         */
        function _fnColumnOptions( oSettings, iCol, oOptions )
        {
            var oCol = oSettings.aoColumns[ iCol ];
            var oClasses = oSettings.oClasses;
            var th = $(oCol.nTh);
        
            // Try to get width information from the DOM. We can't get it from CSS
            // as we'd need to parse the CSS stylesheet. `width` option can override
            if ( ! oCol.sWidthOrig ) {
                // Width attribute
                oCol.sWidthOrig = th.attr('width') || null;
        
                // Style attribute
                var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
                if ( t ) {
                    oCol.sWidthOrig = t[1];
                }
            }
        
            /* User specified column options */
            if ( oOptions !== undefined && oOptions !== null )
            {
                // Backwards compatibility
                _fnCompatCols( oOptions );
        
                // Map camel case parameters to their Hungarian counterparts
                _fnCamelToHungarian( DataTable.defaults.column, oOptions, true );
        
                /* Backwards compatibility for mDataProp */
                if ( oOptions.mDataProp !== undefined && !oOptions.mData )
                {
                    oOptions.mData = oOptions.mDataProp;
                }
        
                if ( oOptions.sType )
                {
                    oCol._sManualType = oOptions.sType;
                }
        
                // `class` is a reserved word in Javascript, so we need to provide
                // the ability to use a valid name for the camel case input
                if ( oOptions.className && ! oOptions.sClass )
                {
                    oOptions.sClass = oOptions.className;
                }
                if ( oOptions.sClass ) {
                    th.addClass( oOptions.sClass );
                }
        
                var origClass = oCol.sClass;
        
                $.extend( oCol, oOptions );
                _fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );
        
                // Merge class from previously defined classes with this one, rather than just
                // overwriting it in the extend above
                if (origClass !== oCol.sClass) {
                    oCol.sClass = origClass + ' ' + oCol.sClass;
                }
        
                /* iDataSort to be applied (backwards compatibility), but aDataSort will take
                 * priority if defined
                 */
                if ( oOptions.iDataSort !== undefined )
                {
                    oCol.aDataSort = [ oOptions.iDataSort ];
                }
                _fnMap( oCol, oOptions, "aDataSort" );
        
                // Fall back to the aria-label attribute on the table header if no ariaTitle is
                // provided.
                if (! oCol.ariaTitle) {
                    oCol.ariaTitle = th.attr("aria-label");
                }
            }
        
            /* Cache the data get and set functions for speed */
            var mDataSrc = oCol.mData;
            var mData = _fnGetObjectDataFn( mDataSrc );
            var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;
        
            var attrTest = function( src ) {
                return typeof src === 'string' && src.indexOf('@') !== -1;
            };
            oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (
                attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)
            );
            oCol._setter = null;
        
            oCol.fnGetData = function (rowData, type, meta) {
                var innerData = mData( rowData, type, undefined, meta );
        
                return mRender && type ?
                    mRender( innerData, type, rowData, meta ) :
                    innerData;
            };
            oCol.fnSetData = function ( rowData, val, meta ) {
                return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );
            };
        
            // Indicate if DataTables should read DOM data as an object or array
            // Used in _fnGetRowElements
            if ( typeof mDataSrc !== 'number' && ! oCol._isArrayHost ) {
                oSettings._rowReadObject = true;
            }
        
            /* Feature sorting overrides column specific when off */
            if ( !oSettings.oFeatures.bSort )
            {
                oCol.bSortable = false;
                th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called
            }
        
            /* Check that the class assignment is correct for sorting */
            var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
            var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
            if ( !oCol.bSortable || (!bAsc && !bDesc) )
            {
                oCol.sSortingClass = oClasses.sSortableNone;
                oCol.sSortingClassJUI = "";
            }
            else if ( bAsc && !bDesc )
            {
                oCol.sSortingClass = oClasses.sSortableAsc;
                oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
            }
            else if ( !bAsc && bDesc )
            {
                oCol.sSortingClass = oClasses.sSortableDesc;
                oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
            }
            else
            {
                oCol.sSortingClass = oClasses.sSortable;
                oCol.sSortingClassJUI = oClasses.sSortJUI;
            }
        }
        
        
        /**
         * Adjust the table column widths for new data. Note: you would probably want to
         * do a redraw after calling this function!
         *  @param {object} settings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnAdjustColumnSizing ( settings )
        {
            /* Not interested in doing column width calculation if auto-width is disabled */
            if ( settings.oFeatures.bAutoWidth !== false )
            {
                var columns = settings.aoColumns;
        
                _fnCalculateColumnWidths( settings );
                for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )
                {
                    columns[i].nTh.style.width = columns[i].sWidth;
                }
            }
        
            var scroll = settings.oScroll;
            if ( scroll.sY !== '' || scroll.sX !== '')
            {
                _fnScrollDraw( settings );
            }
        
            _fnCallbackFire( settings, null, 'column-sizing', [settings] );
        }
        
        
        /**
         * Convert the index of a visible column to the index in the data array (take account
         * of hidden columns)
         *  @param {object} oSettings dataTables settings object
         *  @param {int} iMatch Visible column index to lookup
         *  @returns {int} i the data index
         *  @memberof DataTable#oApi
         */
        function _fnVisibleToColumnIndex( oSettings, iMatch )
        {
            var aiVis = _fnGetColumns( oSettings, 'bVisible' );
        
            return typeof aiVis[iMatch] === 'number' ?
                aiVis[iMatch] :
                null;
        }
        
        
        /**
         * Convert the index of an index in the data array and convert it to the visible
         *   column index (take account of hidden columns)
         *  @param {int} iMatch Column index to lookup
         *  @param {object} oSettings dataTables settings object
         *  @returns {int} i the data index
         *  @memberof DataTable#oApi
         */
        function _fnColumnIndexToVisible( oSettings, iMatch )
        {
            var aiVis = _fnGetColumns( oSettings, 'bVisible' );
            var iPos = $.inArray( iMatch, aiVis );
        
            return iPos !== -1 ? iPos : null;
        }
        
        
        /**
         * Get the number of visible columns
         *  @param {object} oSettings dataTables settings object
         *  @returns {int} i the number of visible columns
         *  @memberof DataTable#oApi
         */
        function _fnVisbleColumns( oSettings )
        {
            var vis = 0;
        
            // No reduce in IE8, use a loop for now
            $.each( oSettings.aoColumns, function ( i, col ) {
                if ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {
                    vis++;
                }
            } );
        
            return vis;
        }
        
        
        /**
         * Get an array of column indexes that match a given property
         *  @param {object} oSettings dataTables settings object
         *  @param {string} sParam Parameter in aoColumns to look for - typically
         *    bVisible or bSearchable
         *  @returns {array} Array of indexes with matched properties
         *  @memberof DataTable#oApi
         */
        function _fnGetColumns( oSettings, sParam )
        {
            var a = [];
        
            $.map( oSettings.aoColumns, function(val, i) {
                if ( val[sParam] ) {
                    a.push( i );
                }
            } );
        
            return a;
        }
        
        
        /**
         * Calculate the 'type' of a column
         *  @param {object} settings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnColumnTypes ( settings )
        {
            var columns = settings.aoColumns;
            var data = settings.aoData;
            var types = DataTable.ext.type.detect;
            var i, ien, j, jen, k, ken;
            var col, cell, detectedType, cache;
        
            // For each column, spin over the 
            for ( i=0, ien=columns.length ; i<ien ; i++ ) {
                col = columns[i];
                cache = [];
        
                if ( ! col.sType && col._sManualType ) {
                    col.sType = col._sManualType;
                }
                else if ( ! col.sType ) {
                    for ( j=0, jen=types.length ; j<jen ; j++ ) {
                        for ( k=0, ken=data.length ; k<ken ; k++ ) {
                            // Use a cache array so we only need to get the type data
                            // from the formatter once (when using multiple detectors)
                            if ( cache[k] === undefined ) {
                                cache[k] = _fnGetCellData( settings, k, i, 'type' );
                            }
        
                            detectedType = types[j]( cache[k], settings );
        
                            // If null, then this type can't apply to this column, so
                            // rather than testing all cells, break out. There is an
                            // exception for the last type which is `html`. We need to
                            // scan all rows since it is possible to mix string and HTML
                            // types
                            if ( ! detectedType && j !== types.length-1 ) {
                                break;
                            }
        
                            // Only a single match is needed for html type since it is
                            // bottom of the pile and very similar to string - but it
                            // must not be empty
                            if ( detectedType === 'html' && ! _empty(cache[k]) ) {
                                break;
                            }
                        }
        
                        // Type is valid for all data points in the column - use this
                        // type
                        if ( detectedType ) {
                            col.sType = detectedType;
                            break;
                        }
                    }
        
                    // Fall back - if no type was detected, always use string
                    if ( ! col.sType ) {
                        col.sType = 'string';
                    }
                }
            }
        }
        
        
        /**
         * Take the column definitions and static columns arrays and calculate how
         * they relate to column indexes. The callback function will then apply the
         * definition found for a column to a suitable configuration object.
         *  @param {object} oSettings dataTables settings object
         *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
         *  @param {array} aoCols The aoColumns array that defines columns individually
         *  @param {function} fn Callback function - takes two parameters, the calculated
         *    column index and the definition for that column.
         *  @memberof DataTable#oApi
         */
        function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )
        {
            var i, iLen, j, jLen, k, kLen, def;
            var columns = oSettings.aoColumns;
        
            // Column definitions with aTargets
            if ( aoColDefs )
            {
                /* Loop over the definitions array - loop in reverse so first instance has priority */
                for ( i=aoColDefs.length-1 ; i>=0 ; i-- )
                {
                    def = aoColDefs[i];
        
                    /* Each definition can target multiple columns, as it is an array */
                    var aTargets = def.target !== undefined
                        ? def.target
                        : def.targets !== undefined
                            ? def.targets
                            : def.aTargets;
        
                    if ( ! Array.isArray( aTargets ) )
                    {
                        aTargets = [ aTargets ];
                    }
        
                    for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )
                    {
                        if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )
                        {
                            /* Add columns that we don't yet know about */
                            while( columns.length <= aTargets[j] )
                            {
                                _fnAddColumn( oSettings );
                            }
        
                            /* Integer, basic index */
                            fn( aTargets[j], def );
                        }
                        else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )
                        {
                            /* Negative integer, right to left column counting */
                            fn( columns.length+aTargets[j], def );
                        }
                        else if ( typeof aTargets[j] === 'string' )
                        {
                            /* Class name matching on TH element */
                            for ( k=0, kLen=columns.length ; k<kLen ; k++ )
                            {
                                if ( aTargets[j] == "_all" ||
                                     $(columns[k].nTh).hasClass( aTargets[j] ) )
                                {
                                    fn( k, def );
                                }
                            }
                        }
                    }
                }
            }
        
            // Statically defined columns array
            if ( aoCols )
            {
                for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )
                {
                    fn( i, aoCols[i] );
                }
            }
        }
        
        /**
         * Add a data array to the table, creating DOM node etc. This is the parallel to
         * _fnGatherData, but for adding rows from a Javascript source, rather than a
         * DOM source.
         *  @param {object} oSettings dataTables settings object
         *  @param {array} aData data array to be added
         *  @param {node} [nTr] TR element to add to the table - optional. If not given,
         *    DataTables will create a row automatically
         *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
         *    if nTr is.
         *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
         *  @memberof DataTable#oApi
         */
        function _fnAddData ( oSettings, aDataIn, nTr, anTds )
        {
            /* Create the object for storing information about this new row */
            var iRow = oSettings.aoData.length;
            var oData = $.extend( true, {}, DataTable.models.oRow, {
                src: nTr ? 'dom' : 'data',
                idx: iRow
            } );
        
            oData._aData = aDataIn;
            oSettings.aoData.push( oData );
        
            /* Create the cells */
            var nTd, sThisType;
            var columns = oSettings.aoColumns;
        
            // Invalidate the column types as the new data needs to be revalidated
            for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
            {
                columns[i].sType = null;
            }
        
            /* Add to the display array */
            oSettings.aiDisplayMaster.push( iRow );
        
            var id = oSettings.rowIdFn( aDataIn );
            if ( id !== undefined ) {
                oSettings.aIds[ id ] = oData;
            }
        
            /* Create the DOM information, or register it if already present */
            if ( nTr || ! oSettings.oFeatures.bDeferRender )
            {
                _fnCreateTr( oSettings, iRow, nTr, anTds );
            }
        
            return iRow;
        }
        
        
        /**
         * Add one or more TR elements to the table. Generally we'd expect to
         * use this for reading data from a DOM sourced table, but it could be
         * used for an TR element. Note that if a TR is given, it is used (i.e.
         * it is not cloned).
         *  @param {object} settings dataTables settings object
         *  @param {array|node|jQuery} trs The TR element(s) to add to the table
         *  @returns {array} Array of indexes for the added rows
         *  @memberof DataTable#oApi
         */
        function _fnAddTr( settings, trs )
        {
            var row;
        
            // Allow an individual node to be passed in
            if ( ! (trs instanceof $) ) {
                trs = $(trs);
            }
        
            return trs.map( function (i, el) {
                row = _fnGetRowElements( settings, el );
                return _fnAddData( settings, row.data, el, row.cells );
            } );
        }
        
        
        /**
         * Take a TR element and convert it to an index in aoData
         *  @param {object} oSettings dataTables settings object
         *  @param {node} n the TR element to find
         *  @returns {int} index if the node is found, null if not
         *  @memberof DataTable#oApi
         */
        function _fnNodeToDataIndex( oSettings, n )
        {
            return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;
        }
        
        
        /**
         * Take a TD element and convert it into a column data index (not the visible index)
         *  @param {object} oSettings dataTables settings object
         *  @param {int} iRow The row number the TD/TH can be found in
         *  @param {node} n The TD/TH element to find
         *  @returns {int} index if the node is found, -1 if not
         *  @memberof DataTable#oApi
         */
        function _fnNodeToColumnIndex( oSettings, iRow, n )
        {
            return $.inArray( n, oSettings.aoData[ iRow ].anCells );
        }
        
        
        /**
         * Get the data for a given cell from the internal cache, taking into account data mapping
         *  @param {object} settings dataTables settings object
         *  @param {int} rowIdx aoData row id
         *  @param {int} colIdx Column index
         *  @param {string} type data get type ('display', 'type' 'filter|search' 'sort|order')
         *  @returns {*} Cell data
         *  @memberof DataTable#oApi
         */
        function _fnGetCellData( settings, rowIdx, colIdx, type )
        {
            if (type === 'search') {
                type = 'filter';
            }
            else if (type === 'order') {
                type = 'sort';
            }
        
            var draw           = settings.iDraw;
            var col            = settings.aoColumns[colIdx];
            var rowData        = settings.aoData[rowIdx]._aData;
            var defaultContent = col.sDefaultContent;
            var cellData       = col.fnGetData( rowData, type, {
                settings: settings,
                row:      rowIdx,
                col:      colIdx
            } );
        
            if ( cellData === undefined ) {
                if ( settings.iDrawError != draw && defaultContent === null ) {
                    _fnLog( settings, 0, "Requested unknown parameter "+
                        (typeof col.mData=='function' ? '{function}' : "'"+col.mData+"'")+
                        " for row "+rowIdx+", column "+colIdx, 4 );
                    settings.iDrawError = draw;
                }
                return defaultContent;
            }
        
            // When the data source is null and a specific data type is requested (i.e.
            // not the original data), we can use default column data
            if ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {
                cellData = defaultContent;
            }
            else if ( typeof cellData === 'function' ) {
                // If the data source is a function, then we run it and use the return,
                // executing in the scope of the data object (for instances)
                return cellData.call( rowData );
            }
        
            if ( cellData === null && type === 'display' ) {
                return '';
            }
        
            if ( type === 'filter' ) {
                var fomatters = DataTable.ext.type.search;
        
                if ( fomatters[ col.sType ] ) {
                    cellData = fomatters[ col.sType ]( cellData );
                }
            }
        
            return cellData;
        }
        
        
        /**
         * Set the value for a specific cell, into the internal data cache
         *  @param {object} settings dataTables settings object
         *  @param {int} rowIdx aoData row id
         *  @param {int} colIdx Column index
         *  @param {*} val Value to set
         *  @memberof DataTable#oApi
         */
        function _fnSetCellData( settings, rowIdx, colIdx, val )
        {
            var col     = settings.aoColumns[colIdx];
            var rowData = settings.aoData[rowIdx]._aData;
        
            col.fnSetData( rowData, val, {
                settings: settings,
                row:      rowIdx,
                col:      colIdx
            }  );
        }
        
        
        // Private variable that is used to match action syntax in the data property object
        var __reArray = /\[.*?\]$/;
        var __reFn = /\(\)$/;
        
        /**
         * Split string on periods, taking into account escaped periods
         * @param  {string} str String to split
         * @return {array} Split string
         */
        function _fnSplitObjNotation( str )
        {
            return $.map( str.match(/(\\.|[^\.])+/g) || [''], function ( s ) {
                return s.replace(/\\\./g, '.');
            } );
        }
        
        
        /**
         * Return a function that can be used to get data from a source object, taking
         * into account the ability to use nested objects as a source
         *  @param {string|int|function} mSource The data source for the object
         *  @returns {function} Data get function
         *  @memberof DataTable#oApi
         */
        var _fnGetObjectDataFn = DataTable.util.get;
        
        
        /**
         * Return a function that can be used to set data from a source object, taking
         * into account the ability to use nested objects as a source
         *  @param {string|int|function} mSource The data source for the object
         *  @returns {function} Data set function
         *  @memberof DataTable#oApi
         */
        var _fnSetObjectDataFn = DataTable.util.set;
        
        
        /**
         * Return an array with the full table data
         *  @param {object} oSettings dataTables settings object
         *  @returns array {array} aData Master data array
         *  @memberof DataTable#oApi
         */
        function _fnGetDataMaster ( settings )
        {
            return _pluck( settings.aoData, '_aData' );
        }
        
        
        /**
         * Nuke the table
         *  @param {object} oSettings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnClearTable( settings )
        {
            settings.aoData.length = 0;
            settings.aiDisplayMaster.length = 0;
            settings.aiDisplay.length = 0;
            settings.aIds = {};
        }
        
        
         /**
         * Take an array of integers (index array) and remove a target integer (value - not
         * the key!)
         *  @param {array} a Index array to target
         *  @param {int} iTarget value to find
         *  @memberof DataTable#oApi
         */
        function _fnDeleteIndex( a, iTarget, splice )
        {
            var iTargetIndex = -1;
        
            for ( var i=0, iLen=a.length ; i<iLen ; i++ )
            {
                if ( a[i] == iTarget )
                {
                    iTargetIndex = i;
                }
                else if ( a[i] > iTarget )
                {
                    a[i]--;
                }
            }
        
            if ( iTargetIndex != -1 && splice === undefined )
            {
                a.splice( iTargetIndex, 1 );
            }
        }
        
        
        /**
         * Mark cached data as invalid such that a re-read of the data will occur when
         * the cached data is next requested. Also update from the data source object.
         *
         * @param {object} settings DataTables settings object
         * @param {int}    rowIdx   Row index to invalidate
         * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
         *     or 'data'
         * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
         *     row will be invalidated
         * @memberof DataTable#oApi
         *
         * @todo For the modularisation of v1.11 this will need to become a callback, so
         *   the sort and filter methods can subscribe to it. That will required
         *   initialisation options for sorting, which is why it is not already baked in
         */
        function _fnInvalidate( settings, rowIdx, src, colIdx )
        {
            var row = settings.aoData[ rowIdx ];
            var i, ien;
            var cellWrite = function ( cell, col ) {
                // This is very frustrating, but in IE if you just write directly
                // to innerHTML, and elements that are overwritten are GC'ed,
                // even if there is a reference to them elsewhere
                while ( cell.childNodes.length ) {
                    cell.removeChild( cell.firstChild );
                }
        
                cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );
            };
        
            // Are we reading last data from DOM or the data object?
            if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {
                // Read the data from the DOM
                row._aData = _fnGetRowElements(
                        settings, row, colIdx, colIdx === undefined ? undefined : row._aData
                    )
                    .data;
            }
            else {
                // Reading from data object, update the DOM
                var cells = row.anCells;
        
                if ( cells ) {
                    if ( colIdx !== undefined ) {
                        cellWrite( cells[colIdx], colIdx );
                    }
                    else {
                        for ( i=0, ien=cells.length ; i<ien ; i++ ) {
                            cellWrite( cells[i], i );
                        }
                    }
                }
            }
        
            // For both row and cell invalidation, the cached data for sorting and
            // filtering is nulled out
            row._aSortData = null;
            row._aFilterData = null;
        
            // Invalidate the type for a specific column (if given) or all columns since
            // the data might have changed
            var cols = settings.aoColumns;
            if ( colIdx !== undefined ) {
                cols[ colIdx ].sType = null;
            }
            else {
                for ( i=0, ien=cols.length ; i<ien ; i++ ) {
                    cols[i].sType = null;
                }
        
                // Update DataTables special `DT_*` attributes for the row
                _fnRowAttributes( settings, row );
            }
        }
        
        
        /**
         * Build a data source object from an HTML row, reading the contents of the
         * cells that are in the row.
         *
         * @param {object} settings DataTables settings object
         * @param {node|object} TR element from which to read data or existing row
         *   object from which to re-read the data from the cells
         * @param {int} [colIdx] Optional column index
         * @param {array|object} [d] Data source object. If `colIdx` is given then this
         *   parameter should also be given and will be used to write the data into.
         *   Only the column in question will be written
         * @returns {object} Object with two parameters: `data` the data read, in
         *   document order, and `cells` and array of nodes (they can be useful to the
         *   caller, so rather than needing a second traversal to get them, just return
         *   them from here).
         * @memberof DataTable#oApi
         */
        function _fnGetRowElements( settings, row, colIdx, d )
        {
            var
                tds = [],
                td = row.firstChild,
                name, col, o, i=0, contents,
                columns = settings.aoColumns,
                objectRead = settings._rowReadObject;
        
            // Allow the data object to be passed in, or construct
            d = d !== undefined ?
                d :
                objectRead ?
                    {} :
                    [];
        
            var attr = function ( str, td  ) {
                if ( typeof str === 'string' ) {
                    var idx = str.indexOf('@');
        
                    if ( idx !== -1 ) {
                        var attr = str.substring( idx+1 );
                        var setter = _fnSetObjectDataFn( str );
                        setter( d, td.getAttribute( attr ) );
                    }
                }
            };
        
            // Read data from a cell and store into the data object
            var cellProcess = function ( cell ) {
                if ( colIdx === undefined || colIdx === i ) {
                    col = columns[i];
                    contents = (cell.innerHTML).trim();
        
                    if ( col && col._bAttrSrc ) {
                        var setter = _fnSetObjectDataFn( col.mData._ );
                        setter( d, contents );
        
                        attr( col.mData.sort, cell );
                        attr( col.mData.type, cell );
                        attr( col.mData.filter, cell );
                    }
                    else {
                        // Depending on the `data` option for the columns the data can
                        // be read to either an object or an array.
                        if ( objectRead ) {
                            if ( ! col._setter ) {
                                // Cache the setter function
                                col._setter = _fnSetObjectDataFn( col.mData );
                            }
                            col._setter( d, contents );
                        }
                        else {
                            d[i] = contents;
                        }
                    }
                }
        
                i++;
            };
        
            if ( td ) {
                // `tr` element was passed in
                while ( td ) {
                    name = td.nodeName.toUpperCase();
        
                    if ( name == "TD" || name == "TH" ) {
                        cellProcess( td );
                        tds.push( td );
                    }
        
                    td = td.nextSibling;
                }
            }
            else {
                // Existing row object passed in
                tds = row.anCells;
        
                for ( var j=0, jen=tds.length ; j<jen ; j++ ) {
                    cellProcess( tds[j] );
                }
            }
        
            // Read the ID from the DOM if present
            var rowNode = row.firstChild ? row : row.nTr;
        
            if ( rowNode ) {
                var id = rowNode.getAttribute( 'id' );
        
                if ( id ) {
                    _fnSetObjectDataFn( settings.rowId )( d, id );
                }
            }
        
            return {
                data: d,
                cells: tds
            };
        }
        /**
         * Create a new TR element (and it's TD children) for a row
         *  @param {object} oSettings dataTables settings object
         *  @param {int} iRow Row to consider
         *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
         *    DataTables will create a row automatically
         *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
         *    if nTr is.
         *  @memberof DataTable#oApi
         */
        function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )
        {
            var
                row = oSettings.aoData[iRow],
                rowData = row._aData,
                cells = [],
                nTr, nTd, oCol,
                i, iLen, create;
        
            if ( row.nTr === null )
            {
                nTr = nTrIn || document.createElement('tr');
        
                row.nTr = nTr;
                row.anCells = cells;
        
                /* Use a private property on the node to allow reserve mapping from the node
                 * to the aoData array for fast look up
                 */
                nTr._DT_RowIndex = iRow;
        
                /* Special parameters can be given by the data source to be used on the row */
                _fnRowAttributes( oSettings, row );
        
                /* Process each column */
                for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
                {
                    oCol = oSettings.aoColumns[i];
                    create = nTrIn ? false : true;
        
                    nTd = create ? document.createElement( oCol.sCellType ) : anTds[i];
        
                    if (! nTd) {
                        _fnLog( oSettings, 0, 'Incorrect column count', 18 );
                    }
        
                    nTd._DT_CellIndex = {
                        row: iRow,
                        column: i
                    };
                    
                    cells.push( nTd );
        
                    // Need to create the HTML if new, or if a rendering function is defined
                    if ( create || ((oCol.mRender || oCol.mData !== i) &&
                         (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')
                    )) {
                        nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );
                    }
        
                    /* Add user defined class */
                    if ( oCol.sClass )
                    {
                        nTd.className += ' '+oCol.sClass;
                    }
        
                    // Visibility - add or remove as required
                    if ( oCol.bVisible && ! nTrIn )
                    {
                        nTr.appendChild( nTd );
                    }
                    else if ( ! oCol.bVisible && nTrIn )
                    {
                        nTd.parentNode.removeChild( nTd );
                    }
        
                    if ( oCol.fnCreatedCell )
                    {
                        oCol.fnCreatedCell.call( oSettings.oInstance,
                            nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i
                        );
                    }
                }
        
                _fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells] );
            }
        }
        
        
        /**
         * Add attributes to a row based on the special `DT_*` parameters in a data
         * source object.
         *  @param {object} settings DataTables settings object
         *  @param {object} DataTables row object for the row to be modified
         *  @memberof DataTable#oApi
         */
        function _fnRowAttributes( settings, row )
        {
            var tr = row.nTr;
            var data = row._aData;
        
            if ( tr ) {
                var id = settings.rowIdFn( data );
        
                if ( id ) {
                    tr.id = id;
                }
        
                if ( data.DT_RowClass ) {
                    // Remove any classes added by DT_RowClass before
                    var a = data.DT_RowClass.split(' ');
                    row.__rowc = row.__rowc ?
                        _unique( row.__rowc.concat( a ) ) :
                        a;
        
                    $(tr)
                        .removeClass( row.__rowc.join(' ') )
                        .addClass( data.DT_RowClass );
                }
        
                if ( data.DT_RowAttr ) {
                    $(tr).attr( data.DT_RowAttr );
                }
        
                if ( data.DT_RowData ) {
                    $(tr).data( data.DT_RowData );
                }
            }
        }
        
        
        /**
         * Create the HTML header for the table
         *  @param {object} oSettings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnBuildHead( oSettings )
        {
            var i, ien, cell, row, column;
            var thead = oSettings.nTHead;
            var tfoot = oSettings.nTFoot;
            var createHeader = $('th, td', thead).length === 0;
            var classes = oSettings.oClasses;
            var columns = oSettings.aoColumns;
        
            if ( createHeader ) {
                row = $('<tr/>').appendTo( thead );
            }
        
            for ( i=0, ien=columns.length ; i<ien ; i++ ) {
                column = columns[i];
                cell = $( column.nTh ).addClass( column.sClass );
        
                if ( createHeader ) {
                    cell.appendTo( row );
                }
        
                // 1.11 move into sorting
                if ( oSettings.oFeatures.bSort ) {
                    cell.addClass( column.sSortingClass );
        
                    if ( column.bSortable !== false ) {
                        cell
                            .attr( 'tabindex', oSettings.iTabIndex )
                            .attr( 'aria-controls', oSettings.sTableId );
        
                        _fnSortAttachListener( oSettings, column.nTh, i );
                    }
                }
        
                if ( column.sTitle != cell[0].innerHTML ) {
                    cell.html( column.sTitle );
                }
        
                _fnRenderer( oSettings, 'header' )(
                    oSettings, cell, column, classes
                );
            }
        
            if ( createHeader ) {
                _fnDetectHeader( oSettings.aoHeader, thead );
            }
        
            /* Deal with the footer - add classes if required */
            $(thead).children('tr').children('th, td').addClass( classes.sHeaderTH );
            $(tfoot).children('tr').children('th, td').addClass( classes.sFooterTH );
        
            // Cache the footer cells. Note that we only take the cells from the first
            // row in the footer. If there is more than one row the user wants to
            // interact with, they need to use the table().foot() method. Note also this
            // allows cells to be used for multiple columns using colspan
            if ( tfoot !== null ) {
                var cells = oSettings.aoFooter[0];
        
                for ( i=0, ien=cells.length ; i<ien ; i++ ) {
                    column = columns[i];
        
                    if (column) {
                        column.nTf = cells[i].cell;
            
                        if ( column.sClass ) {
                            $(column.nTf).addClass( column.sClass );
                        }
                    }
                    else {
                        _fnLog( oSettings, 0, 'Incorrect column count', 18 );
                    }
                }
            }
        }
        
        
        /**
         * Draw the header (or footer) element based on the column visibility states. The
         * methodology here is to use the layout array from _fnDetectHeader, modified for
         * the instantaneous column visibility, to construct the new layout. The grid is
         * traversed over cell at a time in a rows x columns grid fashion, although each
         * cell insert can cover multiple elements in the grid - which is tracks using the
         * aApplied array. Cell inserts in the grid will only occur where there isn't
         * already a cell in that position.
         *  @param {object} oSettings dataTables settings object
         *  @param array {objects} aoSource Layout array from _fnDetectHeader
         *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
         *  @memberof DataTable#oApi
         */
        function _fnDrawHead( oSettings, aoSource, bIncludeHidden )
        {
            var i, iLen, j, jLen, k, kLen, n, nLocalTr;
            var aoLocal = [];
            var aApplied = [];
            var iColumns = oSettings.aoColumns.length;
            var iRowspan, iColspan;
        
            if ( ! aoSource )
            {
                return;
            }
        
            if (  bIncludeHidden === undefined )
            {
                bIncludeHidden = false;
            }
        
            /* Make a copy of the master layout array, but without the visible columns in it */
            for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )
            {
                aoLocal[i] = aoSource[i].slice();
                aoLocal[i].nTr = aoSource[i].nTr;
        
                /* Remove any columns which are currently hidden */
                for ( j=iColumns-1 ; j>=0 ; j-- )
                {
                    if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )
                    {
                        aoLocal[i].splice( j, 1 );
                    }
                }
        
                /* Prep the applied array - it needs an element for each row */
                aApplied.push( [] );
            }
        
            for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )
            {
                nLocalTr = aoLocal[i].nTr;
        
                /* All cells are going to be replaced, so empty out the row */
                if ( nLocalTr )
                {
                    while( (n = nLocalTr.firstChild) )
                    {
                        nLocalTr.removeChild( n );
                    }
                }
        
                for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )
                {
                    iRowspan = 1;
                    iColspan = 1;
        
                    /* Check to see if there is already a cell (row/colspan) covering our target
                     * insert point. If there is, then there is nothing to do.
                     */
                    if ( aApplied[i][j] === undefined )
                    {
                        nLocalTr.appendChild( aoLocal[i][j].cell );
                        aApplied[i][j] = 1;
        
                        /* Expand the cell to cover as many rows as needed */
                        while ( aoLocal[i+iRowspan] !== undefined &&
                                aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )
                        {
                            aApplied[i+iRowspan][j] = 1;
                            iRowspan++;
                        }
        
                        /* Expand the cell to cover as many columns as needed */
                        while ( aoLocal[i][j+iColspan] !== undefined &&
                                aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )
                        {
                            /* Must update the applied array over the rows for the columns */
                            for ( k=0 ; k<iRowspan ; k++ )
                            {
                                aApplied[i+k][j+iColspan] = 1;
                            }
                            iColspan++;
                        }
        
                        /* Do the actual expansion in the DOM */
                        $(aoLocal[i][j].cell)
                            .attr('rowspan', iRowspan)
                            .attr('colspan', iColspan);
                    }
                }
            }
        }
        
        
        /**
         * Insert the required TR nodes into the table for display
         *  @param {object} oSettings dataTables settings object
         *  @param ajaxComplete true after ajax call to complete rendering
         *  @memberof DataTable#oApi
         */
        function _fnDraw( oSettings, ajaxComplete )
        {
            // Allow for state saving and a custom start position
            _fnStart( oSettings );
        
            /* Provide a pre-callback function which can be used to cancel the draw is false is returned */
            var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );
            if ( $.inArray( false, aPreDraw ) !== -1 )
            {
                _fnProcessingDisplay( oSettings, false );
                return;
            }
        
            var anRows = [];
            var iRowCount = 0;
            var asStripeClasses = oSettings.asStripeClasses;
            var iStripes = asStripeClasses.length;
            var oLang = oSettings.oLanguage;
            var bServerSide = _fnDataSource( oSettings ) == 'ssp';
            var aiDisplay = oSettings.aiDisplay;
            var iDisplayStart = oSettings._iDisplayStart;
            var iDisplayEnd = oSettings.fnDisplayEnd();
        
            oSettings.bDrawing = true;
        
            /* Server-side processing draw intercept */
            if ( oSettings.bDeferLoading )
            {
                oSettings.bDeferLoading = false;
                oSettings.iDraw++;
                _fnProcessingDisplay( oSettings, false );
            }
            else if ( !bServerSide )
            {
                oSettings.iDraw++;
            }
            else if ( !oSettings.bDestroying && !ajaxComplete)
            {
                _fnAjaxUpdate( oSettings );
                return;
            }
        
            if ( aiDisplay.length !== 0 )
            {
                var iStart = bServerSide ? 0 : iDisplayStart;
                var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;
        
                for ( var j=iStart ; j<iEnd ; j++ )
                {
                    var iDataIndex = aiDisplay[j];
                    var aoData = oSettings.aoData[ iDataIndex ];
                    if ( aoData.nTr === null )
                    {
                        _fnCreateTr( oSettings, iDataIndex );
                    }
        
                    var nRow = aoData.nTr;
        
                    /* Remove the old striping classes and then add the new one */
                    if ( iStripes !== 0 )
                    {
                        var sStripe = asStripeClasses[ iRowCount % iStripes ];
                        if ( aoData._sRowStripe != sStripe )
                        {
                            $(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );
                            aoData._sRowStripe = sStripe;
                        }
                    }
        
                    // Row callback functions - might want to manipulate the row
                    // iRowCount and j are not currently documented. Are they at all
                    // useful?
                    _fnCallbackFire( oSettings, 'aoRowCallback', null,
                        [nRow, aoData._aData, iRowCount, j, iDataIndex] );
        
                    anRows.push( nRow );
                    iRowCount++;
                }
            }
            else
            {
                /* Table is empty - create a row with an empty message in it */
                var sZero = oLang.sZeroRecords;
                if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )
                {
                    sZero = oLang.sLoadingRecords;
                }
                else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )
                {
                    sZero = oLang.sEmptyTable;
                }
        
                anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )
                    .append( $('<td />', {
                        'valign':  'top',
                        'colSpan': _fnVisbleColumns( oSettings ),
                        'class':   oSettings.oClasses.sRowEmpty
                    } ).html( sZero ) )[0];
            }
        
            /* Header and footer callbacks */
            _fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],
                _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
        
            _fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],
                _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
        
            var body = $(oSettings.nTBody);
        
            body.children().detach();
            body.append( $(anRows) );
        
            /* Call all required callback functions for the end of a draw */
            _fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );
        
            /* Draw is complete, sorting and filtering must be as well */
            oSettings.bSorted = false;
            oSettings.bFiltered = false;
            oSettings.bDrawing = false;
        }
        
        
        /**
         * Redraw the table - taking account of the various features which are enabled
         *  @param {object} oSettings dataTables settings object
         *  @param {boolean} [holdPosition] Keep the current paging position. By default
         *    the paging is reset to the first page
         *  @memberof DataTable#oApi
         */
        function _fnReDraw( settings, holdPosition )
        {
            var
                features = settings.oFeatures,
                sort     = features.bSort,
                filter   = features.bFilter;
        
            if ( sort ) {
                _fnSort( settings );
            }
        
            if ( filter ) {
                _fnFilterComplete( settings, settings.oPreviousSearch );
            }
            else {
                // No filtering, so we want to just use the display master
                settings.aiDisplay = settings.aiDisplayMaster.slice();
            }
        
            if ( holdPosition !== true ) {
                settings._iDisplayStart = 0;
            }
        
            // Let any modules know about the draw hold position state (used by
            // scrolling internally)
            settings._drawHold = holdPosition;
        
            _fnDraw( settings );
        
            settings._drawHold = false;
        }
        
        
        /**
         * Add the options to the page HTML for the table
         *  @param {object} oSettings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnAddOptionsHtml ( oSettings )
        {
            var classes = oSettings.oClasses;
            var table = $(oSettings.nTable);
            var holding = $('<div/>').insertBefore( table ); // Holding element for speed
            var features = oSettings.oFeatures;
        
            // All DataTables are wrapped in a div
            var insert = $('<div/>', {
                id:      oSettings.sTableId+'_wrapper',
                'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)
            } );
        
            oSettings.nHolding = holding[0];
            oSettings.nTableWrapper = insert[0];
            oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;
        
            /* Loop over the user set positioning and place the elements as needed */
            var aDom = oSettings.sDom.split('');
            var featureNode, cOption, nNewNode, cNext, sAttr, j;
            for ( var i=0 ; i<aDom.length ; i++ )
            {
                featureNode = null;
                cOption = aDom[i];
        
                if ( cOption == '<' )
                {
                    /* New container div */
                    nNewNode = $('<div/>')[0];
        
                    /* Check to see if we should append an id and/or a class name to the container */
                    cNext = aDom[i+1];
                    if ( cNext == "'" || cNext == '"' )
                    {
                        sAttr = "";
                        j = 2;
                        while ( aDom[i+j] != cNext )
                        {
                            sAttr += aDom[i+j];
                            j++;
                        }
        
                        /* Replace jQuery UI constants @todo depreciated */
                        if ( sAttr == "H" )
                        {
                            sAttr = classes.sJUIHeader;
                        }
                        else if ( sAttr == "F" )
                        {
                            sAttr = classes.sJUIFooter;
                        }
        
                        /* The attribute can be in the format of "#id.class", "#id" or "class" This logic
                         * breaks the string into parts and applies them as needed
                         */
                        if ( sAttr.indexOf('.') != -1 )
                        {
                            var aSplit = sAttr.split('.');
                            nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);
                            nNewNode.className = aSplit[1];
                        }
                        else if ( sAttr.charAt(0) == "#" )
                        {
                            nNewNode.id = sAttr.substr(1, sAttr.length-1);
                        }
                        else
                        {
                            nNewNode.className = sAttr;
                        }
        
                        i += j; /* Move along the position array */
                    }
        
                    insert.append( nNewNode );
                    insert = $(nNewNode);
                }
                else if ( cOption == '>' )
                {
                    /* End container div */
                    insert = insert.parent();
                }
                // @todo Move options into their own plugins?
                else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )
                {
                    /* Length */
                    featureNode = _fnFeatureHtmlLength( oSettings );
                }
                else if ( cOption == 'f' && features.bFilter )
                {
                    /* Filter */
                    featureNode = _fnFeatureHtmlFilter( oSettings );
                }
                else if ( cOption == 'r' && features.bProcessing )
                {
                    /* pRocessing */
                    featureNode = _fnFeatureHtmlProcessing( oSettings );
                }
                else if ( cOption == 't' )
                {
                    /* Table */
                    featureNode = _fnFeatureHtmlTable( oSettings );
                }
                else if ( cOption ==  'i' && features.bInfo )
                {
                    /* Info */
                    featureNode = _fnFeatureHtmlInfo( oSettings );
                }
                else if ( cOption == 'p' && features.bPaginate )
                {
                    /* Pagination */
                    featureNode = _fnFeatureHtmlPaginate( oSettings );
                }
                else if ( DataTable.ext.feature.length !== 0 )
                {
                    /* Plug-in features */
                    var aoFeatures = DataTable.ext.feature;
                    for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )
                    {
                        if ( cOption == aoFeatures[k].cFeature )
                        {
                            featureNode = aoFeatures[k].fnInit( oSettings );
                            break;
                        }
                    }
                }
        
                /* Add to the 2D features array */
                if ( featureNode )
                {
                    var aanFeatures = oSettings.aanFeatures;
        
                    if ( ! aanFeatures[cOption] )
                    {
                        aanFeatures[cOption] = [];
                    }
        
                    aanFeatures[cOption].push( featureNode );
                    insert.append( featureNode );
                }
            }
        
            /* Built our DOM structure - replace the holding div with what we want */
            holding.replaceWith( insert );
            oSettings.nHolding = null;
        }
        
        
        /**
         * Use the DOM source to create up an array of header cells. The idea here is to
         * create a layout grid (array) of rows x columns, which contains a reference
         * to the cell that that point in the grid (regardless of col/rowspan), such that
         * any column / row could be removed and the new grid constructed
         *  @param array {object} aLayout Array to store the calculated layout in
         *  @param {node} nThead The header/footer element for the table
         *  @memberof DataTable#oApi
         */
        function _fnDetectHeader ( aLayout, nThead )
        {
            var nTrs = $(nThead).children('tr');
            var nTr, nCell;
            var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
            var bUnique;
            var fnShiftCol = function ( a, i, j ) {
                var k = a[i];
                        while ( k[j] ) {
                    j++;
                }
                return j;
            };
        
            aLayout.splice( 0, aLayout.length );
        
            /* We know how many rows there are in the layout - so prep it */
            for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
            {
                aLayout.push( [] );
            }
        
            /* Calculate a layout array */
            for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
            {
                nTr = nTrs[i];
                iColumn = 0;
        
                /* For every cell in the row... */
                nCell = nTr.firstChild;
                while ( nCell ) {
                    if ( nCell.nodeName.toUpperCase() == "TD" ||
                         nCell.nodeName.toUpperCase() == "TH" )
                    {
                        /* Get the col and rowspan attributes from the DOM and sanitise them */
                        iColspan = nCell.getAttribute('colspan') * 1;
                        iRowspan = nCell.getAttribute('rowspan') * 1;
                        iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;
                        iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;
        
                        /* There might be colspan cells already in this row, so shift our target
                         * accordingly
                         */
                        iColShifted = fnShiftCol( aLayout, i, iColumn );
        
                        /* Cache calculation for unique columns */
                        bUnique = iColspan === 1 ? true : false;
        
                        /* If there is col / rowspan, copy the information into the layout grid */
                        for ( l=0 ; l<iColspan ; l++ )
                        {
                            for ( k=0 ; k<iRowspan ; k++ )
                            {
                                aLayout[i+k][iColShifted+l] = {
                                    "cell": nCell,
                                    "unique": bUnique
                                };
                                aLayout[i+k].nTr = nTr;
                            }
                        }
                    }
                    nCell = nCell.nextSibling;
                }
            }
        }
        
        
        /**
         * Get an array of unique th elements, one for each column
         *  @param {object} oSettings dataTables settings object
         *  @param {node} nHeader automatically detect the layout from this node - optional
         *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
         *  @returns array {node} aReturn list of unique th's
         *  @memberof DataTable#oApi
         */
        function _fnGetUniqueThs ( oSettings, nHeader, aLayout )
        {
            var aReturn = [];
            if ( !aLayout )
            {
                aLayout = oSettings.aoHeader;
                if ( nHeader )
                {
                    aLayout = [];
                    _fnDetectHeader( aLayout, nHeader );
                }
            }
        
            for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )
            {
                for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )
                {
                    if ( aLayout[i][j].unique &&
                         (!aReturn[j] || !oSettings.bSortCellsTop) )
                    {
                        aReturn[j] = aLayout[i][j].cell;
                    }
                }
            }
        
            return aReturn;
        }
        
        /**
         * Set the start position for draw
         *  @param {object} oSettings dataTables settings object
         */
        function _fnStart( oSettings )
        {
            var bServerSide = _fnDataSource( oSettings ) == 'ssp';
            var iInitDisplayStart = oSettings.iInitDisplayStart;
        
            // Check and see if we have an initial draw position from state saving
            if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )
            {
                oSettings._iDisplayStart = bServerSide ?
                    iInitDisplayStart :
                    iInitDisplayStart >= oSettings.fnRecordsDisplay() ?
                        0 :
                        iInitDisplayStart;
        
                oSettings.iInitDisplayStart = -1;
            }
        }
        
        /**
         * Create an Ajax call based on the table's settings, taking into account that
         * parameters can have multiple forms, and backwards compatibility.
         *
         * @param {object} oSettings dataTables settings object
         * @param {array} data Data to send to the server, required by
         *     DataTables - may be augmented by developer callbacks
         * @param {function} fn Callback function to run when data is obtained
         */
        function _fnBuildAjax( oSettings, data, fn )
        {
            // Compatibility with 1.9-, allow fnServerData and event to manipulate
            _fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );
        
            // Convert to object based for 1.10+ if using the old array scheme which can
            // come from server-side processing or serverParams
            if ( data && Array.isArray(data) ) {
                var tmp = {};
                var rbracket = /(.*?)\[\]$/;
        
                $.each( data, function (key, val) {
                    var match = val.name.match(rbracket);
        
                    if ( match ) {
                        // Support for arrays
                        var name = match[0];
        
                        if ( ! tmp[ name ] ) {
                            tmp[ name ] = [];
                        }
                        tmp[ name ].push( val.value );
                    }
                    else {
                        tmp[val.name] = val.value;
                    }
                } );
                data = tmp;
            }
        
            var ajaxData;
            var ajax = oSettings.ajax;
            var instance = oSettings.oInstance;
            var callback = function ( json ) {
                var status = oSettings.jqXHR
                    ? oSettings.jqXHR.status
                    : null;
        
                if ( json === null || (typeof status === 'number' && status == 204 ) ) {
                    json = {};
                    _fnAjaxDataSrc( oSettings, json, [] );
                }
        
                var error = json.error || json.sError;
                if ( error ) {
                    _fnLog( oSettings, 0, error );
                }
        
                oSettings.json = json;
        
                _fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );
                fn( json );
            };
        
            if ( $.isPlainObject( ajax ) && ajax.data )
            {
                ajaxData = ajax.data;
        
                var newData = typeof ajaxData === 'function' ?
                    ajaxData( data, oSettings ) :  // fn can manipulate data or return
                    ajaxData;                      // an object object or array to merge
        
                // If the function returned something, use that alone
                data = typeof ajaxData === 'function' && newData ?
                    newData :
                    $.extend( true, data, newData );
        
                // Remove the data property as we've resolved it already and don't want
                // jQuery to do it again (it is restored at the end of the function)
                delete ajax.data;
            }
        
            var baseAjax = {
                "data": data,
                "success": callback,
                "dataType": "json",
                "cache": false,
                "type": oSettings.sServerMethod,
                "error": function (xhr, error, thrown) {
                    var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );
        
                    if ( $.inArray( true, ret ) === -1 ) {
                        if ( error == "parsererror" ) {
                            _fnLog( oSettings, 0, 'Invalid JSON response', 1 );
                        }
                        else if ( xhr.readyState === 4 ) {
                            _fnLog( oSettings, 0, 'Ajax error', 7 );
                        }
                    }
        
                    _fnProcessingDisplay( oSettings, false );
                }
            };
        
            // Store the data submitted for the API
            oSettings.oAjaxData = data;
        
            // Allow plug-ins and external processes to modify the data
            _fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );
        
            if ( oSettings.fnServerData )
            {
                // DataTables 1.9- compatibility
                oSettings.fnServerData.call( instance,
                    oSettings.sAjaxSource,
                    $.map( data, function (val, key) { // Need to convert back to 1.9 trad format
                        return { name: key, value: val };
                    } ),
                    callback,
                    oSettings
                );
            }
            else if ( oSettings.sAjaxSource || typeof ajax === 'string' )
            {
                // DataTables 1.9- compatibility
                oSettings.jqXHR = $.ajax( $.extend( baseAjax, {
                    url: ajax || oSettings.sAjaxSource
                } ) );
            }
            else if ( typeof ajax === 'function' )
            {
                // Is a function - let the caller define what needs to be done
                oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );
            }
            else
            {
                // Object to extend the base settings
                oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );
        
                // Restore for next time around
                ajax.data = ajaxData;
            }
        }
        
        
        /**
         * Update the table using an Ajax call
         *  @param {object} settings dataTables settings object
         *  @returns {boolean} Block the table drawing or not
         *  @memberof DataTable#oApi
         */
        function _fnAjaxUpdate( settings )
        {
            settings.iDraw++;
            _fnProcessingDisplay( settings, true );
        
            // Keep track of drawHold state to handle scrolling after the Ajax call
            var drawHold = settings._drawHold;
        
            _fnBuildAjax(
                settings,
                _fnAjaxParameters( settings ),
                function(json) {
                    settings._drawHold = drawHold;
                    _fnAjaxUpdateDraw( settings, json );
                    settings._drawHold = false;
                }
            );
        }
        
        
        /**
         * Build up the parameters in an object needed for a server-side processing
         * request. Note that this is basically done twice, is different ways - a modern
         * method which is used by default in DataTables 1.10 which uses objects and
         * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
         * the sAjaxSource option is used in the initialisation, or the legacyAjax
         * option is set.
         *  @param {object} oSettings dataTables settings object
         *  @returns {bool} block the table drawing or not
         *  @memberof DataTable#oApi
         */
        function _fnAjaxParameters( settings )
        {
            var
                columns = settings.aoColumns,
                columnCount = columns.length,
                features = settings.oFeatures,
                preSearch = settings.oPreviousSearch,
                preColSearch = settings.aoPreSearchCols,
                i, data = [], dataProp, column, columnSearch,
                sort = _fnSortFlatten( settings ),
                displayStart = settings._iDisplayStart,
                displayLength = features.bPaginate !== false ?
                    settings._iDisplayLength :
                    -1;
        
            var param = function ( name, value ) {
                data.push( { 'name': name, 'value': value } );
            };
        
            // DataTables 1.9- compatible method
            param( 'sEcho',          settings.iDraw );
            param( 'iColumns',       columnCount );
            param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );
            param( 'iDisplayStart',  displayStart );
            param( 'iDisplayLength', displayLength );
        
            // DataTables 1.10+ method
            var d = {
                draw:    settings.iDraw,
                columns: [],
                order:   [],
                start:   displayStart,
                length:  displayLength,
                search:  {
                    value: preSearch.sSearch,
                    regex: preSearch.bRegex
                }
            };
        
            for ( i=0 ; i<columnCount ; i++ ) {
                column = columns[i];
                columnSearch = preColSearch[i];
                dataProp = typeof column.mData=="function" ? 'function' : column.mData ;
        
                d.columns.push( {
                    data:       dataProp,
                    name:       column.sName,
                    searchable: column.bSearchable,
                    orderable:  column.bSortable,
                    search:     {
                        value: columnSearch.sSearch,
                        regex: columnSearch.bRegex
                    }
                } );
        
                param( "mDataProp_"+i, dataProp );
        
                if ( features.bFilter ) {
                    param( 'sSearch_'+i,     columnSearch.sSearch );
                    param( 'bRegex_'+i,      columnSearch.bRegex );
                    param( 'bSearchable_'+i, column.bSearchable );
                }
        
                if ( features.bSort ) {
                    param( 'bSortable_'+i, column.bSortable );
                }
            }
        
            if ( features.bFilter ) {
                param( 'sSearch', preSearch.sSearch );
                param( 'bRegex', preSearch.bRegex );
            }
        
            if ( features.bSort ) {
                $.each( sort, function ( i, val ) {
                    d.order.push( { column: val.col, dir: val.dir } );
        
                    param( 'iSortCol_'+i, val.col );
                    param( 'sSortDir_'+i, val.dir );
                } );
        
                param( 'iSortingCols', sort.length );
            }
        
            // If the legacy.ajax parameter is null, then we automatically decide which
            // form to use, based on sAjaxSource
            var legacy = DataTable.ext.legacy.ajax;
            if ( legacy === null ) {
                return settings.sAjaxSource ? data : d;
            }
        
            // Otherwise, if legacy has been specified then we use that to decide on the
            // form
            return legacy ? data : d;
        }
        
        
        /**
         * Data the data from the server (nuking the old) and redraw the table
         *  @param {object} oSettings dataTables settings object
         *  @param {object} json json data return from the server.
         *  @param {string} json.sEcho Tracking flag for DataTables to match requests
         *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
         *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
         *  @param {array} json.aaData The data to display on this page
         *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
         *  @memberof DataTable#oApi
         */
        function _fnAjaxUpdateDraw ( settings, json )
        {
            // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
            // Support both
            var compat = function ( old, modern ) {
                return json[old] !== undefined ? json[old] : json[modern];
            };
        
            var data = _fnAjaxDataSrc( settings, json );
            var draw            = compat( 'sEcho',                'draw' );
            var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );
            var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );
        
            if ( draw !== undefined ) {
                // Protect against out of sequence returns
                if ( draw*1 < settings.iDraw ) {
                    return;
                }
                settings.iDraw = draw * 1;
            }
        
            // No data in returned object, so rather than an array, we show an empty table
            if ( ! data ) {
                data = [];
            }
        
            _fnClearTable( settings );
            settings._iRecordsTotal   = parseInt(recordsTotal, 10);
            settings._iRecordsDisplay = parseInt(recordsFiltered, 10);
        
            for ( var i=0, ien=data.length ; i<ien ; i++ ) {
                _fnAddData( settings, data[i] );
            }
            settings.aiDisplay = settings.aiDisplayMaster.slice();
        
            _fnDraw( settings, true );
        
            if ( ! settings._bInitComplete ) {
                _fnInitComplete( settings, json );
            }
        
            _fnProcessingDisplay( settings, false );
        }
        
        
        /**
         * Get the data from the JSON data source to use for drawing a table. Using
         * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
         * source object, or from a processing function.
         *  @param {object} oSettings dataTables settings object
         *  @param  {object} json Data source object / array from the server
         *  @return {array} Array of data to use
         */
         function _fnAjaxDataSrc ( oSettings, json, write )
         {
            var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?
                oSettings.ajax.dataSrc :
                oSettings.sAjaxDataProp; // Compatibility with 1.9-.
        
            if ( ! write ) {
                if ( dataSrc === 'data' ) {
                    // If the default, then we still want to support the old style, and safely ignore
                    // it if possible
                    return json.aaData || json[dataSrc];
                }
        
                return dataSrc !== "" ?
                    _fnGetObjectDataFn( dataSrc )( json ) :
                    json;
            }
        
            // set
            _fnSetObjectDataFn( dataSrc )( json, write );
        }
        
        /**
         * Generate the node required for filtering text
         *  @returns {node} Filter control element
         *  @param {object} oSettings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnFeatureHtmlFilter ( settings )
        {
            var classes = settings.oClasses;
            var tableId = settings.sTableId;
            var language = settings.oLanguage;
            var previousSearch = settings.oPreviousSearch;
            var features = settings.aanFeatures;
            var input = '<input type="search" class="'+classes.sFilterInput+'"/>';
        
            var str = language.sSearch;
            str = str.match(/_INPUT_/) ?
                str.replace('_INPUT_', input) :
                str+input;
        
            var filter = $('<div/>', {
                    'id': ! features.f ? tableId+'_filter' : null,
                    'class': classes.sFilter
                } )
                .append( $('<label/>' ).append( str ) );
        
            var searchFn = function(event) {
                /* Update all other filter input elements for the new display */
                var n = features.f;
                var val = !this.value ? "" : this.value; // mental IE8 fix :-(
                if(previousSearch['return'] && event.key !== "Enter") {
                    return;
                }
                /* Now do the filter */
                if ( val != previousSearch.sSearch ) {
                    _fnFilterComplete( settings, {
                        "sSearch": val,
                        "bRegex": previousSearch.bRegex,
                        "bSmart": previousSearch.bSmart ,
                        "bCaseInsensitive": previousSearch.bCaseInsensitive,
                        "return": previousSearch['return']
                    } );
        
                    // Need to redraw, without resorting
                    settings._iDisplayStart = 0;
                    _fnDraw( settings );
                }
            };
        
            var searchDelay = settings.searchDelay !== null ?
                settings.searchDelay :
                _fnDataSource( settings ) === 'ssp' ?
                    400 :
                    0;
        
            var jqFilter = $('input', filter)
                .val( previousSearch.sSearch )
                .attr( 'placeholder', language.sSearchPlaceholder )
                .on(
                    'keyup.DT search.DT input.DT paste.DT cut.DT',
                    searchDelay ?
                        _fnThrottle( searchFn, searchDelay ) :
                        searchFn
                )
                .on( 'mouseup.DT', function(e) {
                    // Edge fix! Edge 17 does not trigger anything other than mouse events when clicking
                    // on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`
                    // checks the value to see if it has changed. In other browsers it won't have.
                    setTimeout( function () {
                        searchFn.call(jqFilter[0], e);
                    }, 10);
                } )
                .on( 'keypress.DT', function(e) {
                    /* Prevent form submission */
                    if ( e.keyCode == 13 ) {
                        return false;
                    }
                } )
                .attr('aria-controls', tableId);
        
            // Update the input elements whenever the table is filtered
            $(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {
                if ( settings === s ) {
                    // IE9 throws an 'unknown error' if document.activeElement is used
                    // inside an iframe or frame...
                    try {
                        if ( jqFilter[0] !== document.activeElement ) {
                            jqFilter.val( previousSearch.sSearch );
                        }
                    }
                    catch ( e ) {}
                }
            } );
        
            return filter[0];
        }
        
        
        /**
         * Filter the table using both the global filter and column based filtering
         *  @param {object} oSettings dataTables settings object
         *  @param {object} oSearch search information
         *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
         *  @memberof DataTable#oApi
         */
        function _fnFilterComplete ( oSettings, oInput, iForce )
        {
            var oPrevSearch = oSettings.oPreviousSearch;
            var aoPrevSearch = oSettings.aoPreSearchCols;
            var fnSaveFilter = function ( oFilter ) {
                /* Save the filtering values */
                oPrevSearch.sSearch = oFilter.sSearch;
                oPrevSearch.bRegex = oFilter.bRegex;
                oPrevSearch.bSmart = oFilter.bSmart;
                oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
                oPrevSearch['return'] = oFilter['return'];
            };
            var fnRegex = function ( o ) {
                // Backwards compatibility with the bEscapeRegex option
                return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
            };
        
            // Resolve any column types that are unknown due to addition or invalidation
            // @todo As per sort - can this be moved into an event handler?
            _fnColumnTypes( oSettings );
        
            /* In server-side processing all filtering is done by the server, so no point hanging around here */
            if ( _fnDataSource( oSettings ) != 'ssp' )
            {
                /* Global filter */
                _fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );
                fnSaveFilter( oInput );
        
                /* Now do the individual column filter */
                for ( var i=0 ; i<aoPrevSearch.length ; i++ )
                {
                    _fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),
                        aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );
                }
        
                /* Custom filtering */
                _fnFilterCustom( oSettings );
            }
            else
            {
                fnSaveFilter( oInput );
            }
        
            /* Tell the draw function we have been filtering */
            oSettings.bFiltered = true;
            _fnCallbackFire( oSettings, null, 'search', [oSettings] );
        }
        
        
        /**
         * Apply custom filtering functions
         *  @param {object} oSettings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnFilterCustom( settings )
        {
            var filters = DataTable.ext.search;
            var displayRows = settings.aiDisplay;
            var row, rowIdx;
        
            for ( var i=0, ien=filters.length ; i<ien ; i++ ) {
                var rows = [];
        
                // Loop over each row and see if it should be included
                for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {
                    rowIdx = displayRows[ j ];
                    row = settings.aoData[ rowIdx ];
        
                    if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {
                        rows.push( rowIdx );
                    }
                }
        
                // So the array reference doesn't break set the results into the
                // existing array
                displayRows.length = 0;
                $.merge( displayRows, rows );
            }
        }
        
        
        /**
         * Filter the table on a per-column basis
         *  @param {object} oSettings dataTables settings object
         *  @param {string} sInput string to filter on
         *  @param {int} iColumn column to filter
         *  @param {bool} bRegex treat search string as a regular expression or not
         *  @param {bool} bSmart use smart filtering or not
         *  @param {bool} bCaseInsensitive Do case insensitive matching or not
         *  @memberof DataTable#oApi
         */
        function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )
        {
            if ( searchStr === '' ) {
                return;
            }
        
            var data;
            var out = [];
            var display = settings.aiDisplay;
            var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );
        
            for ( var i=0 ; i<display.length ; i++ ) {
                data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];
        
                if ( rpSearch.test( data ) ) {
                    out.push( display[i] );
                }
            }
        
            settings.aiDisplay = out;
        }
        
        
        /**
         * Filter the data table based on user input and draw the table
         *  @param {object} settings dataTables settings object
         *  @param {string} input string to filter on
         *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
         *  @param {bool} regex treat as a regular expression or not
         *  @param {bool} smart perform smart filtering or not
         *  @param {bool} caseInsensitive Do case insensitive matching or not
         *  @memberof DataTable#oApi
         */
        function _fnFilter( settings, input, force, regex, smart, caseInsensitive )
        {
            var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );
            var prevSearch = settings.oPreviousSearch.sSearch;
            var displayMaster = settings.aiDisplayMaster;
            var display, invalidated, i;
            var filtered = [];
        
            // Need to take account of custom filtering functions - always filter
            if ( DataTable.ext.search.length !== 0 ) {
                force = true;
            }
        
            // Check if any of the rows were invalidated
            invalidated = _fnFilterData( settings );
        
            // If the input is blank - we just want the full data set
            if ( input.length <= 0 ) {
                settings.aiDisplay = displayMaster.slice();
            }
            else {
                // New search - start from the master array
                if ( invalidated ||
                     force ||
                     regex ||
                     prevSearch.length > input.length ||
                     input.indexOf(prevSearch) !== 0 ||
                     settings.bSorted // On resort, the display master needs to be
                                      // re-filtered since indexes will have changed
                ) {
                    settings.aiDisplay = displayMaster.slice();
                }
        
                // Search the display array
                display = settings.aiDisplay;
        
                for ( i=0 ; i<display.length ; i++ ) {
                    if ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {
                        filtered.push( display[i] );
                    }
                }
        
                settings.aiDisplay = filtered;
            }
        }
        
        
        /**
         * Build a regular expression object suitable for searching a table
         *  @param {string} sSearch string to search for
         *  @param {bool} bRegex treat as a regular expression or not
         *  @param {bool} bSmart perform smart filtering or not
         *  @param {bool} bCaseInsensitive Do case insensitive matching or not
         *  @returns {RegExp} constructed object
         *  @memberof DataTable#oApi
         */
        function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )
        {
            search = regex ?
                search :
                _fnEscapeRegex( search );
            
            if ( smart ) {
                /* For smart filtering we want to allow the search to work regardless of
                 * word order. We also want double quoted text to be preserved, so word
                 * order is important - a la google. So this is what we want to
                 * generate:
                 * 
                 * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
                 */
                var a = $.map( search.match( /["\u201C][^"\u201D]+["\u201D]|[^ ]+/g ) || [''], function ( word ) {
                    if ( word.charAt(0) === '"' ) {
                        var m = word.match( /^"(.*)"$/ );
                        word = m ? m[1] : word;
                    }
                    else if ( word.charAt(0) === '\u201C' ) {
                        var m = word.match( /^\u201C(.*)\u201D$/ );
                        word = m ? m[1] : word;
                    }
        
                    return word.replace('"', '');
                } );
        
                search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';
            }
        
            return new RegExp( search, caseInsensitive ? 'i' : '' );
        }
        
        
        /**
         * Escape a string such that it can be used in a regular expression
         *  @param {string} sVal string to escape
         *  @returns {string} escaped string
         *  @memberof DataTable#oApi
         */
        var _fnEscapeRegex = DataTable.util.escapeRegex;
        
        var __filter_div = $('<div>')[0];
        var __filter_div_textContent = __filter_div.textContent !== undefined;
        
        // Update the filtering data for each row if needed (by invalidation or first run)
        function _fnFilterData ( settings )
        {
            var columns = settings.aoColumns;
            var column;
            var i, j, ien, jen, filterData, cellData, row;
            var wasInvalidated = false;
        
            for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
                row = settings.aoData[i];
        
                if ( ! row._aFilterData ) {
                    filterData = [];
        
                    for ( j=0, jen=columns.length ; j<jen ; j++ ) {
                        column = columns[j];
        
                        if ( column.bSearchable ) {
                            cellData = _fnGetCellData( settings, i, j, 'filter' );
        
                            // Search in DataTables 1.10 is string based. In 1.11 this
                            // should be altered to also allow strict type checking.
                            if ( cellData === null ) {
                                cellData = '';
                            }
        
                            if ( typeof cellData !== 'string' && cellData.toString ) {
                                cellData = cellData.toString();
                            }
                        }
                        else {
                            cellData = '';
                        }
        
                        // If it looks like there is an HTML entity in the string,
                        // attempt to decode it so sorting works as expected. Note that
                        // we could use a single line of jQuery to do this, but the DOM
                        // method used here is much faster https://jsperf.com/html-decode
                        if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {
                            __filter_div.innerHTML = cellData;
                            cellData = __filter_div_textContent ?
                                __filter_div.textContent :
                                __filter_div.innerText;
                        }
        
                        if ( cellData.replace ) {
                            cellData = cellData.replace(/[\r\n\u2028]/g, '');
                        }
        
                        filterData.push( cellData );
                    }
        
                    row._aFilterData = filterData;
                    row._sFilterRow = filterData.join('  ');
                    wasInvalidated = true;
                }
            }
        
            return wasInvalidated;
        }
        
        
        /**
         * Convert from the internal Hungarian notation to camelCase for external
         * interaction
         *  @param {object} obj Object to convert
         *  @returns {object} Inverted object
         *  @memberof DataTable#oApi
         */
        function _fnSearchToCamel ( obj )
        {
            return {
                search:          obj.sSearch,
                smart:           obj.bSmart,
                regex:           obj.bRegex,
                caseInsensitive: obj.bCaseInsensitive
            };
        }
        
        
        
        /**
         * Convert from camelCase notation to the internal Hungarian. We could use the
         * Hungarian convert function here, but this is cleaner
         *  @param {object} obj Object to convert
         *  @returns {object} Inverted object
         *  @memberof DataTable#oApi
         */
        function _fnSearchToHung ( obj )
        {
            return {
                sSearch:          obj.search,
                bSmart:           obj.smart,
                bRegex:           obj.regex,
                bCaseInsensitive: obj.caseInsensitive
            };
        }
        
        /**
         * Generate the node required for the info display
         *  @param {object} oSettings dataTables settings object
         *  @returns {node} Information element
         *  @memberof DataTable#oApi
         */
        function _fnFeatureHtmlInfo ( settings )
        {
            var
                tid = settings.sTableId,
                nodes = settings.aanFeatures.i,
                n = $('<div/>', {
                    'class': settings.oClasses.sInfo,
                    'id': ! nodes ? tid+'_info' : null
                } );
        
            if ( ! nodes ) {
                // Update display on each draw
                settings.aoDrawCallback.push( {
                    "fn": _fnUpdateInfo,
                    "sName": "information"
                } );
        
                n
                    .attr( 'role', 'status' )
                    .attr( 'aria-live', 'polite' );
        
                // Table is described by our info div
                $(settings.nTable).attr( 'aria-describedby', tid+'_info' );
            }
        
            return n[0];
        }
        
        
        /**
         * Update the information elements in the display
         *  @param {object} settings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnUpdateInfo ( settings )
        {
            /* Show information about the table */
            var nodes = settings.aanFeatures.i;
            if ( nodes.length === 0 ) {
                return;
            }
        
            var
                lang  = settings.oLanguage,
                start = settings._iDisplayStart+1,
                end   = settings.fnDisplayEnd(),
                max   = settings.fnRecordsTotal(),
                total = settings.fnRecordsDisplay(),
                out   = total ?
                    lang.sInfo :
                    lang.sInfoEmpty;
        
            if ( total !== max ) {
                /* Record set after filtering */
                out += ' ' + lang.sInfoFiltered;
            }
        
            // Convert the macros
            out += lang.sInfoPostFix;
            out = _fnInfoMacros( settings, out );
        
            var callback = lang.fnInfoCallback;
            if ( callback !== null ) {
                out = callback.call( settings.oInstance,
                    settings, start, end, max, total, out
                );
            }
        
            $(nodes).html( out );
        }
        
        
        function _fnInfoMacros ( settings, str )
        {
            // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
            // internally
            var
                formatter  = settings.fnFormatNumber,
                start      = settings._iDisplayStart+1,
                len        = settings._iDisplayLength,
                vis        = settings.fnRecordsDisplay(),
                all        = len === -1;
        
            return str.
                replace(/_START_/g, formatter.call( settings, start ) ).
                replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).
                replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).
                replace(/_TOTAL_/g, formatter.call( settings, vis ) ).
                replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).
                replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );
        }
        
        
        
        /**
         * Draw the table for the first time, adding all required features
         *  @param {object} settings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnInitialise ( settings )
        {
            var i, iLen, iAjaxStart=settings.iInitDisplayStart;
            var columns = settings.aoColumns, column;
            var features = settings.oFeatures;
            var deferLoading = settings.bDeferLoading; // value modified by the draw
        
            /* Ensure that the table data is fully initialised */
            if ( ! settings.bInitialised ) {
                setTimeout( function(){ _fnInitialise( settings ); }, 200 );
                return;
            }
        
            /* Show the display HTML options */
            _fnAddOptionsHtml( settings );
        
            /* Build and draw the header / footer for the table */
            _fnBuildHead( settings );
            _fnDrawHead( settings, settings.aoHeader );
            _fnDrawHead( settings, settings.aoFooter );
        
            /* Okay to show that something is going on now */
            _fnProcessingDisplay( settings, true );
        
            /* Calculate sizes for columns */
            if ( features.bAutoWidth ) {
                _fnCalculateColumnWidths( settings );
            }
        
            for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {
                column = columns[i];
        
                if ( column.sWidth ) {
                    column.nTh.style.width = _fnStringToCss( column.sWidth );
                }
            }
        
            _fnCallbackFire( settings, null, 'preInit', [settings] );
        
            // If there is default sorting required - let's do it. The sort function
            // will do the drawing for us. Otherwise we draw the table regardless of the
            // Ajax source - this allows the table to look initialised for Ajax sourcing
            // data (show 'loading' message possibly)
            _fnReDraw( settings );
        
            // Server-side processing init complete is done by _fnAjaxUpdateDraw
            var dataSrc = _fnDataSource( settings );
            if ( dataSrc != 'ssp' || deferLoading ) {
                // if there is an ajax source load the data
                if ( dataSrc == 'ajax' ) {
                    _fnBuildAjax( settings, [], function(json) {
                        var aData = _fnAjaxDataSrc( settings, json );
        
                        // Got the data - add it to the table
                        for ( i=0 ; i<aData.length ; i++ ) {
                            _fnAddData( settings, aData[i] );
                        }
        
                        // Reset the init display for cookie saving. We've already done
                        // a filter, and therefore cleared it before. So we need to make
                        // it appear 'fresh'
                        settings.iInitDisplayStart = iAjaxStart;
        
                        _fnReDraw( settings );
        
                        _fnProcessingDisplay( settings, false );
                        _fnInitComplete( settings, json );
                    }, settings );
                }
                else {
                    _fnProcessingDisplay( settings, false );
                    _fnInitComplete( settings );
                }
            }
        }
        
        
        /**
         * Draw the table for the first time, adding all required features
         *  @param {object} oSettings dataTables settings object
         *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
         *    with client-side processing (optional)
         *  @memberof DataTable#oApi
         */
        function _fnInitComplete ( settings, json )
        {
            settings._bInitComplete = true;
        
            // When data was added after the initialisation (data or Ajax) we need to
            // calculate the column sizing
            if ( json || settings.oInit.aaData ) {
                _fnAdjustColumnSizing( settings );
            }
        
            _fnCallbackFire( settings, null, 'plugin-init', [settings, json] );
            _fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );
        }
        
        
        function _fnLengthChange ( settings, val )
        {
            var len = parseInt( val, 10 );
            settings._iDisplayLength = len;
        
            _fnLengthOverflow( settings );
        
            // Fire length change event
            _fnCallbackFire( settings, null, 'length', [settings, len] );
        }
        
        
        /**
         * Generate the node required for user display length changing
         *  @param {object} settings dataTables settings object
         *  @returns {node} Display length feature node
         *  @memberof DataTable#oApi
         */
        function _fnFeatureHtmlLength ( settings )
        {
            var
                classes  = settings.oClasses,
                tableId  = settings.sTableId,
                menu     = settings.aLengthMenu,
                d2       = Array.isArray( menu[0] ),
                lengths  = d2 ? menu[0] : menu,
                language = d2 ? menu[1] : menu;
        
            var select = $('<select/>', {
                'name':          tableId+'_length',
                'aria-controls': tableId,
                'class':         classes.sLengthSelect
            } );
        
            for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {
                select[0][ i ] = new Option(
                    typeof language[i] === 'number' ?
                        settings.fnFormatNumber( language[i] ) :
                        language[i],
                    lengths[i]
                );
            }
        
            var div = $('<div><label/></div>').addClass( classes.sLength );
            if ( ! settings.aanFeatures.l ) {
                div[0].id = tableId+'_length';
            }
        
            div.children().append(
                settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )
            );
        
            // Can't use `select` variable as user might provide their own and the
            // reference is broken by the use of outerHTML
            $('select', div)
                .val( settings._iDisplayLength )
                .on( 'change.DT', function(e) {
                    _fnLengthChange( settings, $(this).val() );
                    _fnDraw( settings );
                } );
        
            // Update node value whenever anything changes the table's length
            $(settings.nTable).on( 'length.dt.DT', function (e, s, len) {
                if ( settings === s ) {
                    $('select', div).val( len );
                }
            } );
        
            return div[0];
        }
        
        
        
        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         * Note that most of the paging logic is done in
         * DataTable.ext.pager
         */
        
        /**
         * Generate the node required for default pagination
         *  @param {object} oSettings dataTables settings object
         *  @returns {node} Pagination feature node
         *  @memberof DataTable#oApi
         */
        function _fnFeatureHtmlPaginate ( settings )
        {
            var
                type   = settings.sPaginationType,
                plugin = DataTable.ext.pager[ type ],
                modern = typeof plugin === 'function',
                redraw = function( settings ) {
                    _fnDraw( settings );
                },
                node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],
                features = settings.aanFeatures;
        
            if ( ! modern ) {
                plugin.fnInit( settings, node, redraw );
            }
        
            /* Add a draw callback for the pagination on first instance, to update the paging display */
            if ( ! features.p )
            {
                node.id = settings.sTableId+'_paginate';
        
                settings.aoDrawCallback.push( {
                    "fn": function( settings ) {
                        if ( modern ) {
                            var
                                start      = settings._iDisplayStart,
                                len        = settings._iDisplayLength,
                                visRecords = settings.fnRecordsDisplay(),
                                all        = len === -1,
                                page = all ? 0 : Math.ceil( start / len ),
                                pages = all ? 1 : Math.ceil( visRecords / len ),
                                buttons = plugin(page, pages),
                                i, ien;
        
                            for ( i=0, ien=features.p.length ; i<ien ; i++ ) {
                                _fnRenderer( settings, 'pageButton' )(
                                    settings, features.p[i], i, buttons, page, pages
                                );
                            }
                        }
                        else {
                            plugin.fnUpdate( settings, redraw );
                        }
                    },
                    "sName": "pagination"
                } );
            }
        
            return node;
        }
        
        
        /**
         * Alter the display settings to change the page
         *  @param {object} settings DataTables settings object
         *  @param {string|int} action Paging action to take: "first", "previous",
         *    "next" or "last" or page number to jump to (integer)
         *  @param [bool] redraw Automatically draw the update or not
         *  @returns {bool} true page has changed, false - no change
         *  @memberof DataTable#oApi
         */
        function _fnPageChange ( settings, action, redraw )
        {
            var
                start     = settings._iDisplayStart,
                len       = settings._iDisplayLength,
                records   = settings.fnRecordsDisplay();
        
            if ( records === 0 || len === -1 )
            {
                start = 0;
            }
            else if ( typeof action === "number" )
            {
                start = action * len;
        
                if ( start > records )
                {
                    start = 0;
                }
            }
            else if ( action == "first" )
            {
                start = 0;
            }
            else if ( action == "previous" )
            {
                start = len >= 0 ?
                    start - len :
                    0;
        
                if ( start < 0 )
                {
                  start = 0;
                }
            }
            else if ( action == "next" )
            {
                if ( start + len < records )
                {
                    start += len;
                }
            }
            else if ( action == "last" )
            {
                start = Math.floor( (records-1) / len) * len;
            }
            else
            {
                _fnLog( settings, 0, "Unknown paging action: "+action, 5 );
            }
        
            var changed = settings._iDisplayStart !== start;
            settings._iDisplayStart = start;
        
            if ( changed ) {
                _fnCallbackFire( settings, null, 'page', [settings] );
        
                if ( redraw ) {
                    _fnDraw( settings );
                }
            }
            else {
                // No change event - paging was called, but no change
                _fnCallbackFire( settings, null, 'page-nc', [settings] );
            }
        
            return changed;
        }
        
        
        
        /**
         * Generate the node required for the processing node
         *  @param {object} settings dataTables settings object
         *  @returns {node} Processing element
         *  @memberof DataTable#oApi
         */
        function _fnFeatureHtmlProcessing ( settings )
        {
            return $('<div/>', {
                    'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,
                    'class': settings.oClasses.sProcessing,
                    'role': 'status'
                } )
                .html( settings.oLanguage.sProcessing )
                .append('<div><div></div><div></div><div></div><div></div></div>')
                .insertBefore( settings.nTable )[0];
        }
        
        
        /**
         * Display or hide the processing indicator
         *  @param {object} settings dataTables settings object
         *  @param {bool} show Show the processing indicator (true) or not (false)
         *  @memberof DataTable#oApi
         */
        function _fnProcessingDisplay ( settings, show )
        {
            if ( settings.oFeatures.bProcessing ) {
                $(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );
            }
        
            _fnCallbackFire( settings, null, 'processing', [settings, show] );
        }
        
        /**
         * Add any control elements for the table - specifically scrolling
         *  @param {object} settings dataTables settings object
         *  @returns {node} Node to add to the DOM
         *  @memberof DataTable#oApi
         */
        function _fnFeatureHtmlTable ( settings )
        {
            var table = $(settings.nTable);
        
            // Scrolling from here on in
            var scroll = settings.oScroll;
        
            if ( scroll.sX === '' && scroll.sY === '' ) {
                return settings.nTable;
            }
        
            var scrollX = scroll.sX;
            var scrollY = scroll.sY;
            var classes = settings.oClasses;
            var caption = table.children('caption');
            var captionSide = caption.length ? caption[0]._captionSide : null;
            var headerClone = $( table[0].cloneNode(false) );
            var footerClone = $( table[0].cloneNode(false) );
            var footer = table.children('tfoot');
            var _div = '<div/>';
            var size = function ( s ) {
                return !s ? null : _fnStringToCss( s );
            };
        
            if ( ! footer.length ) {
                footer = null;
            }
        
            /*
             * The HTML structure that we want to generate in this function is:
             *  div - scroller
             *    div - scroll head
             *      div - scroll head inner
             *        table - scroll head table
             *          thead - thead
             *    div - scroll body
             *      table - table (master table)
             *        thead - thead clone for sizing
             *        tbody - tbody
             *    div - scroll foot
             *      div - scroll foot inner
             *        table - scroll foot table
             *          tfoot - tfoot
             */
            var scroller = $( _div, { 'class': classes.sScrollWrapper } )
                .append(
                    $(_div, { 'class': classes.sScrollHead } )
                        .css( {
                            overflow: 'hidden',
                            position: 'relative',
                            border: 0,
                            width: scrollX ? size(scrollX) : '100%'
                        } )
                        .append(
                            $(_div, { 'class': classes.sScrollHeadInner } )
                                .css( {
                                    'box-sizing': 'content-box',
                                    width: scroll.sXInner || '100%'
                                } )
                                .append(
                                    headerClone
                                        .removeAttr('id')
                                        .css( 'margin-left', 0 )
                                        .append( captionSide === 'top' ? caption : null )
                                        .append(
                                            table.children('thead')
                                        )
                                )
                        )
                )
                .append(
                    $(_div, { 'class': classes.sScrollBody } )
                        .css( {
                            position: 'relative',
                            overflow: 'auto',
                            width: size( scrollX )
                        } )
                        .append( table )
                );
        
            if ( footer ) {
                scroller.append(
                    $(_div, { 'class': classes.sScrollFoot } )
                        .css( {
                            overflow: 'hidden',
                            border: 0,
                            width: scrollX ? size(scrollX) : '100%'
                        } )
                        .append(
                            $(_div, { 'class': classes.sScrollFootInner } )
                                .append(
                                    footerClone
                                        .removeAttr('id')
                                        .css( 'margin-left', 0 )
                                        .append( captionSide === 'bottom' ? caption : null )
                                        .append(
                                            table.children('tfoot')
                                        )
                                )
                        )
                );
            }
        
            var children = scroller.children();
            var scrollHead = children[0];
            var scrollBody = children[1];
            var scrollFoot = footer ? children[2] : null;
        
            // When the body is scrolled, then we also want to scroll the headers
            if ( scrollX ) {
                $(scrollBody).on( 'scroll.DT', function (e) {
                    var scrollLeft = this.scrollLeft;
        
                    scrollHead.scrollLeft = scrollLeft;
        
                    if ( footer ) {
                        scrollFoot.scrollLeft = scrollLeft;
                    }
                } );
            }
        
            $(scrollBody).css('max-height', scrollY);
            if (! scroll.bCollapse) {
                $(scrollBody).css('height', scrollY);
            }
        
            settings.nScrollHead = scrollHead;
            settings.nScrollBody = scrollBody;
            settings.nScrollFoot = scrollFoot;
        
            // On redraw - align columns
            settings.aoDrawCallback.push( {
                "fn": _fnScrollDraw,
                "sName": "scrolling"
            } );
        
            return scroller[0];
        }
        
        
        
        /**
         * Update the header, footer and body tables for resizing - i.e. column
         * alignment.
         *
         * Welcome to the most horrible function DataTables. The process that this
         * function follows is basically:
         *   1. Re-create the table inside the scrolling div
         *   2. Take live measurements from the DOM
         *   3. Apply the measurements to align the columns
         *   4. Clean up
         *
         *  @param {object} settings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnScrollDraw ( settings )
        {
            // Given that this is such a monster function, a lot of variables are use
            // to try and keep the minimised size as small as possible
            var
                scroll         = settings.oScroll,
                scrollX        = scroll.sX,
                scrollXInner   = scroll.sXInner,
                scrollY        = scroll.sY,
                barWidth       = scroll.iBarWidth,
                divHeader      = $(settings.nScrollHead),
                divHeaderStyle = divHeader[0].style,
                divHeaderInner = divHeader.children('div'),
                divHeaderInnerStyle = divHeaderInner[0].style,
                divHeaderTable = divHeaderInner.children('table'),
                divBodyEl      = settings.nScrollBody,
                divBody        = $(divBodyEl),
                divBodyStyle   = divBodyEl.style,
                divFooter      = $(settings.nScrollFoot),
                divFooterInner = divFooter.children('div'),
                divFooterTable = divFooterInner.children('table'),
                header         = $(settings.nTHead),
                table          = $(settings.nTable),
                tableEl        = table[0],
                tableStyle     = tableEl.style,
                footer         = settings.nTFoot ? $(settings.nTFoot) : null,
                browser        = settings.oBrowser,
                ie67           = browser.bScrollOversize,
                dtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),
                headerTrgEls, footerTrgEls,
                headerSrcEls, footerSrcEls,
                headerCopy, footerCopy,
                headerWidths=[], footerWidths=[],
                headerContent=[], footerContent=[],
                idx, correction, sanityWidth,
                zeroOut = function(nSizer) {
                    var style = nSizer.style;
                    style.paddingTop = "0";
                    style.paddingBottom = "0";
                    style.borderTopWidth = "0";
                    style.borderBottomWidth = "0";
                    style.height = 0;
                };
        
            // If the scrollbar visibility has changed from the last draw, we need to
            // adjust the column sizes as the table width will have changed to account
            // for the scrollbar
            var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;
            
            if ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {
                settings.scrollBarVis = scrollBarVis;
                _fnAdjustColumnSizing( settings );
                return; // adjust column sizing will call this function again
            }
            else {
                settings.scrollBarVis = scrollBarVis;
            }
        
            /*
             * 1. Re-create the table inside the scrolling div
             */
        
            // Remove the old minimised thead and tfoot elements in the inner table
            table.children('thead, tfoot').remove();
        
            if ( footer ) {
                footerCopy = footer.clone().prependTo( table );
                footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
                footerSrcEls = footerCopy.find('tr');
                footerCopy.find('[id]').removeAttr('id');
            }
        
            // Clone the current header and footer elements and then place it into the inner table
            headerCopy = header.clone().prependTo( table );
            headerTrgEls = header.find('tr'); // original header is in its own table
            headerSrcEls = headerCopy.find('tr');
            headerCopy.find('th, td').removeAttr('tabindex');
            headerCopy.find('[id]').removeAttr('id');
        
        
            /*
             * 2. Take live measurements from the DOM - do not alter the DOM itself!
             */
        
            // Remove old sizing and apply the calculated column widths
            // Get the unique column headers in the newly created (cloned) header. We want to apply the
            // calculated sizes to this header
            if ( ! scrollX )
            {
                divBodyStyle.width = '100%';
                divHeader[0].style.width = '100%';
            }
        
            $.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {
                idx = _fnVisibleToColumnIndex( settings, i );
                el.style.width = settings.aoColumns[idx].sWidth;
            } );
        
            if ( footer ) {
                _fnApplyToChildren( function(n) {
                    n.style.width = "";
                }, footerSrcEls );
            }
        
            // Size the table as a whole
            sanityWidth = table.outerWidth();
            if ( scrollX === "" ) {
                // No x scrolling
                tableStyle.width = "100%";
        
                // IE7 will make the width of the table when 100% include the scrollbar
                // - which is shouldn't. When there is a scrollbar we need to take this
                // into account.
                if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||
                    divBody.css('overflow-y') == "scroll")
                ) {
                    tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);
                }
        
                // Recalculate the sanity width
                sanityWidth = table.outerWidth();
            }
            else if ( scrollXInner !== "" ) {
                // legacy x scroll inner has been given - use it
                tableStyle.width = _fnStringToCss(scrollXInner);
        
                // Recalculate the sanity width
                sanityWidth = table.outerWidth();
            }
        
            // Hidden header should have zero height, so remove padding and borders. Then
            // set the width based on the real headers
        
            // Apply all styles in one pass
            _fnApplyToChildren( zeroOut, headerSrcEls );
        
            // Read all widths in next pass
            _fnApplyToChildren( function(nSizer) {
                var style = window.getComputedStyle ?
                    window.getComputedStyle(nSizer).width :
                    _fnStringToCss( $(nSizer).width() );
        
                headerContent.push( nSizer.innerHTML );
                headerWidths.push( style );
            }, headerSrcEls );
        
            // Apply all widths in final pass
            _fnApplyToChildren( function(nToSize, i) {
                nToSize.style.width = headerWidths[i];
            }, headerTrgEls );
        
            $(headerSrcEls).css('height', 0);
        
            /* Same again with the footer if we have one */
            if ( footer )
            {
                _fnApplyToChildren( zeroOut, footerSrcEls );
        
                _fnApplyToChildren( function(nSizer) {
                    footerContent.push( nSizer.innerHTML );
                    footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
                }, footerSrcEls );
        
                _fnApplyToChildren( function(nToSize, i) {
                    nToSize.style.width = footerWidths[i];
                }, footerTrgEls );
        
                $(footerSrcEls).height(0);
            }
        
        
            /*
             * 3. Apply the measurements
             */
        
            // "Hide" the header and footer that we used for the sizing. We need to keep
            // the content of the cell so that the width applied to the header and body
            // both match, but we want to hide it completely. We want to also fix their
            // width to what they currently are
            _fnApplyToChildren( function(nSizer, i) {
                nSizer.innerHTML = '<div class="dataTables_sizing">'+headerContent[i]+'</div>';
                nSizer.childNodes[0].style.height = "0";
                nSizer.childNodes[0].style.overflow = "hidden";
                nSizer.style.width = headerWidths[i];
            }, headerSrcEls );
        
            if ( footer )
            {
                _fnApplyToChildren( function(nSizer, i) {
                    nSizer.innerHTML = '<div class="dataTables_sizing">'+footerContent[i]+'</div>';
                    nSizer.childNodes[0].style.height = "0";
                    nSizer.childNodes[0].style.overflow = "hidden";
                    nSizer.style.width = footerWidths[i];
                }, footerSrcEls );
            }
        
            // Sanity check that the table is of a sensible width. If not then we are going to get
            // misalignment - try to prevent this by not allowing the table to shrink below its min width
            if ( Math.round(table.outerWidth()) < Math.round(sanityWidth) )
            {
                // The min width depends upon if we have a vertical scrollbar visible or not */
                correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
                    divBody.css('overflow-y') == "scroll")) ?
                        sanityWidth+barWidth :
                        sanityWidth;
        
                // IE6/7 are a law unto themselves...
                if ( ie67 && (divBodyEl.scrollHeight >
                    divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")
                ) {
                    tableStyle.width = _fnStringToCss( correction-barWidth );
                }
        
                // And give the user a warning that we've stopped the table getting too small
                if ( scrollX === "" || scrollXInner !== "" ) {
                    _fnLog( settings, 1, 'Possible column misalignment', 6 );
                }
            }
            else
            {
                correction = '100%';
            }
        
            // Apply to the container elements
            divBodyStyle.width = _fnStringToCss( correction );
            divHeaderStyle.width = _fnStringToCss( correction );
        
            if ( footer ) {
                settings.nScrollFoot.style.width = _fnStringToCss( correction );
            }
        
        
            /*
             * 4. Clean up
             */
            if ( ! scrollY ) {
                /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
                 * the scrollbar height from the visible display, rather than adding it on. We need to
                 * set the height in order to sort this. Don't want to do it in any other browsers.
                 */
                if ( ie67 ) {
                    divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );
                }
            }
        
            /* Finally set the width's of the header and footer tables */
            var iOuterWidth = table.outerWidth();
            divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );
            divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );
        
            // Figure out if there are scrollbar present - if so then we need a the header and footer to
            // provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
            var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
            var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );
            divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+"px" : "0px";
        
            if ( footer ) {
                divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );
                divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );
                divFooterInner[0].style[padding] = bScrolling ? barWidth+"px" : "0px";
            }
        
            // Correct DOM ordering for colgroup - comes before the thead
            table.children('colgroup').insertBefore( table.children('thead') );
        
            /* Adjust the position of the header in case we loose the y-scrollbar */
            divBody.trigger('scroll');
        
            // If sorting or filtering has occurred, jump the scrolling back to the top
            // only if we aren't holding the position
            if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {
                divBodyEl.scrollTop = 0;
            }
        }
        
        
        
        /**
         * Apply a given function to the display child nodes of an element array (typically
         * TD children of TR rows
         *  @param {function} fn Method to apply to the objects
         *  @param array {nodes} an1 List of elements to look through for display children
         *  @param array {nodes} an2 Another list (identical structure to the first) - optional
         *  @memberof DataTable#oApi
         */
        function _fnApplyToChildren( fn, an1, an2 )
        {
            var index=0, i=0, iLen=an1.length;
            var nNode1, nNode2;
        
            while ( i < iLen ) {
                nNode1 = an1[i].firstChild;
                nNode2 = an2 ? an2[i].firstChild : null;
        
                while ( nNode1 ) {
                    if ( nNode1.nodeType === 1 ) {
                        if ( an2 ) {
                            fn( nNode1, nNode2, index );
                        }
                        else {
                            fn( nNode1, index );
                        }
        
                        index++;
                    }
        
                    nNode1 = nNode1.nextSibling;
                    nNode2 = an2 ? nNode2.nextSibling : null;
                }
        
                i++;
            }
        }
        
        
        
        var __re_html_remove = /<.*?>/g;
        
        
        /**
         * Calculate the width of columns for the table
         *  @param {object} oSettings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnCalculateColumnWidths ( oSettings )
        {
            var
                table = oSettings.nTable,
                columns = oSettings.aoColumns,
                scroll = oSettings.oScroll,
                scrollY = scroll.sY,
                scrollX = scroll.sX,
                scrollXInner = scroll.sXInner,
                columnCount = columns.length,
                visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),
                headerCells = $('th', oSettings.nTHead),
                tableWidthAttr = table.getAttribute('width'), // from DOM element
                tableContainer = table.parentNode,
                userInputs = false,
                i, column, columnIdx, width, outerWidth,
                browser = oSettings.oBrowser,
                ie67 = browser.bScrollOversize;
        
            var styleWidth = table.style.width;
            if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {
                tableWidthAttr = styleWidth;
            }
        
            /* Convert any user input sizes into pixel sizes */
            var sizes = _fnConvertToWidth(_pluck(columns, 'sWidthOrig'), tableContainer);
        
            for ( i=0 ; i<visibleColumns.length ; i++ ) {
                column = columns[ visibleColumns[i] ];
        
                if ( column.sWidth !== null ) {
                    column.sWidth = sizes[i];
        
                    userInputs = true;
                }
            }
        
            /* If the number of columns in the DOM equals the number that we have to
             * process in DataTables, then we can use the offsets that are created by
             * the web- browser. No custom sizes can be set in order for this to happen,
             * nor scrolling used
             */
            if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&
                 columnCount == _fnVisbleColumns( oSettings ) &&
                 columnCount == headerCells.length
            ) {
                for ( i=0 ; i<columnCount ; i++ ) {
                    var colIdx = _fnVisibleToColumnIndex( oSettings, i );
        
                    if ( colIdx !== null ) {
                        columns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );
                    }
                }
            }
            else
            {
                // Otherwise construct a single row, worst case, table with the widest
                // node in the data, assign any user defined widths, then insert it into
                // the DOM and allow the browser to do all the hard work of calculating
                // table widths
                var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
                    .css( 'visibility', 'hidden' )
                    .removeAttr( 'id' );
        
                // Clean up the table body
                tmpTable.find('tbody tr').remove();
                var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );
        
                // Clone the table header and footer - we can't use the header / footer
                // from the cloned table, since if scrolling is active, the table's
                // real header and footer are contained in different table tags
                tmpTable.find('thead, tfoot').remove();
                tmpTable
                    .append( $(oSettings.nTHead).clone() )
                    .append( $(oSettings.nTFoot).clone() );
        
                // Remove any assigned widths from the footer (from scrolling)
                tmpTable.find('tfoot th, tfoot td').css('width', '');
        
                // Apply custom sizing to the cloned header
                headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );
        
                for ( i=0 ; i<visibleColumns.length ; i++ ) {
                    column = columns[ visibleColumns[i] ];
        
                    headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?
                        _fnStringToCss( column.sWidthOrig ) :
                        '';
        
                    // For scrollX we need to force the column width otherwise the
                    // browser will collapse it. If this width is smaller than the
                    // width the column requires, then it will have no effect
                    if ( column.sWidthOrig && scrollX ) {
                        $( headerCells[i] ).append( $('<div/>').css( {
                            width: column.sWidthOrig,
                            margin: 0,
                            padding: 0,
                            border: 0,
                            height: 1
                        } ) );
                    }
                }
        
                // Find the widest cell for each column and put it into the table
                if ( oSettings.aoData.length ) {
                    for ( i=0 ; i<visibleColumns.length ; i++ ) {
                        columnIdx = visibleColumns[i];
                        column = columns[ columnIdx ];
        
                        $( _fnGetWidestNode( oSettings, columnIdx ) )
                            .clone( false )
                            .append( column.sContentPadding )
                            .appendTo( tr );
                    }
                }
        
                // Tidy the temporary table - remove name attributes so there aren't
                // duplicated in the dom (radio elements for example)
                $('[name]', tmpTable).removeAttr('name');
        
                // Table has been built, attach to the document so we can work with it.
                // A holding element is used, positioned at the top of the container
                // with minimal height, so it has no effect on if the container scrolls
                // or not. Otherwise it might trigger scrolling when it actually isn't
                // needed
                var holder = $('<div/>').css( scrollX || scrollY ?
                        {
                            position: 'absolute',
                            top: 0,
                            left: 0,
                            height: 1,
                            right: 0,
                            overflow: 'hidden'
                        } :
                        {}
                    )
                    .append( tmpTable )
                    .appendTo( tableContainer );
        
                // When scrolling (X or Y) we want to set the width of the table as 
                // appropriate. However, when not scrolling leave the table width as it
                // is. This results in slightly different, but I think correct behaviour
                if ( scrollX && scrollXInner ) {
                    tmpTable.width( scrollXInner );
                }
                else if ( scrollX ) {
                    tmpTable.css( 'width', 'auto' );
                    tmpTable.removeAttr('width');
        
                    // If there is no width attribute or style, then allow the table to
                    // collapse
                    if ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {
                        tmpTable.width( tableContainer.clientWidth );
                    }
                }
                else if ( scrollY ) {
                    tmpTable.width( tableContainer.clientWidth );
                }
                else if ( tableWidthAttr ) {
                    tmpTable.width( tableWidthAttr );
                }
        
                // Get the width of each column in the constructed table - we need to
                // know the inner width (so it can be assigned to the other table's
                // cells) and the outer width so we can calculate the full width of the
                // table. This is safe since DataTables requires a unique cell for each
                // column, but if ever a header can span multiple columns, this will
                // need to be modified.
                var total = 0;
                for ( i=0 ; i<visibleColumns.length ; i++ ) {
                    var cell = $(headerCells[i]);
                    var border = cell.outerWidth() - cell.width();
        
                    // Use getBounding... where possible (not IE8-) because it can give
                    // sub-pixel accuracy, which we then want to round up!
                    var bounding = browser.bBounding ?
                        Math.ceil( headerCells[i].getBoundingClientRect().width ) :
                        cell.outerWidth();
        
                    // Total is tracked to remove any sub-pixel errors as the outerWidth
                    // of the table might not equal the total given here (IE!).
                    total += bounding;
        
                    // Width for each column to use
                    columns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );
                }
        
                table.style.width = _fnStringToCss( total );
        
                // Finished with the table - ditch it
                holder.remove();
            }
        
            // If there is a width attr, we want to attach an event listener which
            // allows the table sizing to automatically adjust when the window is
            // resized. Use the width attr rather than CSS, since we can't know if the
            // CSS is a relative value or absolute - DOM read is always px.
            if ( tableWidthAttr ) {
                table.style.width = _fnStringToCss( tableWidthAttr );
            }
        
            if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {
                var bindResize = function () {
                    $(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {
                        _fnAdjustColumnSizing( oSettings );
                    } ) );
                };
        
                // IE6/7 will crash if we bind a resize event handler on page load.
                // To be removed in 1.11 which drops IE6/7 support
                if ( ie67 ) {
                    setTimeout( bindResize, 1000 );
                }
                else {
                    bindResize();
                }
        
                oSettings._reszEvt = true;
            }
        }
        
        
        /**
         * Throttle the calls to a function. Arguments and context are maintained for
         * the throttled function
         *  @param {function} fn Function to be called
         *  @param {int} [freq=200] call frequency in mS
         *  @returns {function} wrapped function
         *  @memberof DataTable#oApi
         */
        var _fnThrottle = DataTable.util.throttle;
        
        
        /**
         * Convert a set of CSS units width to pixels (e.g. 2em)
         *  @param {string[]} widths widths to be converted
         *  @param {node} parent parent to get the with for (required for relative widths) - optional
         *  @returns {int[]} widths in pixels
         *  @memberof DataTable#oApi
         */
        function _fnConvertToWidth ( widths, parent )
        {
            var els = [];
            var results = [];
        
            // Add the elements in a single loop so we only need to reflow once
            for (var i=0 ; i<widths.length ; i++) {
                if (widths[i]) {
                    els.push(
                        $('<div/>')
                            .css( 'width', _fnStringToCss( widths[i] ) )
                            .appendTo( parent || document.body )
                    )
                }
                else {
                    els.push(null);
                }
            }
        
            // Get the sizes (will reflow once)
            for (var i=0 ; i<widths.length ; i++) {
                results.push(els[i] ? els[i][0].offsetWidth : null);
            }
        
            // Tidy
            $(els).remove();
        
            return results;
        }
        
        
        /**
         * Get the widest node
         *  @param {object} settings dataTables settings object
         *  @param {int} colIdx column of interest
         *  @returns {node} widest table node
         *  @memberof DataTable#oApi
         */
        function _fnGetWidestNode( settings, colIdx )
        {
            var idx = _fnGetMaxLenString( settings, colIdx );
            if ( idx < 0 ) {
                return null;
            }
        
            var data = settings.aoData[ idx ];
            return ! data.nTr ? // Might not have been created when deferred rendering
                $('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :
                data.anCells[ colIdx ];
        }
        
        
        /**
         * Get the maximum strlen for each data column
         *  @param {object} settings dataTables settings object
         *  @param {int} colIdx column of interest
         *  @returns {string} max string length for each column
         *  @memberof DataTable#oApi
         */
        function _fnGetMaxLenString( settings, colIdx )
        {
            var s, max=-1, maxIdx = -1;
        
            for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
                s = _fnGetCellData( settings, i, colIdx, 'display' )+'';
                s = s.replace( __re_html_remove, '' );
                s = s.replace( /&nbsp;/g, ' ' );
        
                if ( s.length > max ) {
                    max = s.length;
                    maxIdx = i;
                }
            }
        
            return maxIdx;
        }
        
        
        /**
         * Append a CSS unit (only if required) to a string
         *  @param {string} value to css-ify
         *  @returns {string} value with css unit
         *  @memberof DataTable#oApi
         */
        function _fnStringToCss( s )
        {
            if ( s === null ) {
                return '0px';
            }
        
            if ( typeof s == 'number' ) {
                return s < 0 ?
                    '0px' :
                    s+'px';
            }
        
            // Check it has a unit character already
            return s.match(/\d$/) ?
                s+'px' :
                s;
        }
        
        
        
        function _fnSortFlatten ( settings )
        {
            var
                i, iLen, k, kLen,
                aSort = [],
                aiOrig = [],
                aoColumns = settings.aoColumns,
                aDataSort, iCol, sType, srcCol,
                fixed = settings.aaSortingFixed,
                fixedObj = $.isPlainObject( fixed ),
                nestedSort = [],
                add = function ( a ) {
                    if ( a.length && ! Array.isArray( a[0] ) ) {
                        // 1D array
                        nestedSort.push( a );
                    }
                    else {
                        // 2D array
                        $.merge( nestedSort, a );
                    }
                };
        
            // Build the sort array, with pre-fix and post-fix options if they have been
            // specified
            if ( Array.isArray( fixed ) ) {
                add( fixed );
            }
        
            if ( fixedObj && fixed.pre ) {
                add( fixed.pre );
            }
        
            add( settings.aaSorting );
        
            if (fixedObj && fixed.post ) {
                add( fixed.post );
            }
        
            for ( i=0 ; i<nestedSort.length ; i++ )
            {
                srcCol = nestedSort[i][0];
                aDataSort = aoColumns[ srcCol ].aDataSort;
        
                for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )
                {
                    iCol = aDataSort[k];
                    sType = aoColumns[ iCol ].sType || 'string';
        
                    if ( nestedSort[i]._idx === undefined ) {
                        nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );
                    }
        
                    aSort.push( {
                        src:       srcCol,
                        col:       iCol,
                        dir:       nestedSort[i][1],
                        index:     nestedSort[i]._idx,
                        type:      sType,
                        formatter: DataTable.ext.type.order[ sType+"-pre" ]
                    } );
                }
            }
        
            return aSort;
        }
        
        /**
         * Change the order of the table
         *  @param {object} oSettings dataTables settings object
         *  @memberof DataTable#oApi
         *  @todo This really needs split up!
         */
        function _fnSort ( oSettings )
        {
            var
                i, ien, iLen, j, jLen, k, kLen,
                sDataType, nTh,
                aiOrig = [],
                oExtSort = DataTable.ext.type.order,
                aoData = oSettings.aoData,
                aoColumns = oSettings.aoColumns,
                aDataSort, data, iCol, sType, oSort,
                formatters = 0,
                sortCol,
                displayMaster = oSettings.aiDisplayMaster,
                aSort;
        
            // Resolve any column types that are unknown due to addition or invalidation
            // @todo Can this be moved into a 'data-ready' handler which is called when
            //   data is going to be used in the table?
            _fnColumnTypes( oSettings );
        
            aSort = _fnSortFlatten( oSettings );
        
            for ( i=0, ien=aSort.length ; i<ien ; i++ ) {
                sortCol = aSort[i];
        
                // Track if we can use the fast sort algorithm
                if ( sortCol.formatter ) {
                    formatters++;
                }
        
                // Load the data needed for the sort, for each cell
                _fnSortData( oSettings, sortCol.col );
            }
        
            /* No sorting required if server-side or no sorting array */
            if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )
            {
                // Create a value - key array of the current row positions such that we can use their
                // current position during the sort, if values match, in order to perform stable sorting
                for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {
                    aiOrig[ displayMaster[i] ] = i;
                }
        
                /* Do the sort - here we want multi-column sorting based on a given data source (column)
                 * and sorting function (from oSort) in a certain direction. It's reasonably complex to
                 * follow on it's own, but this is what we want (example two column sorting):
                 *  fnLocalSorting = function(a,b){
                 *    var iTest;
                 *    iTest = oSort['string-asc']('data11', 'data12');
                 *      if (iTest !== 0)
                 *        return iTest;
                 *    iTest = oSort['numeric-desc']('data21', 'data22');
                 *    if (iTest !== 0)
                 *      return iTest;
                 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
                 *  }
                 * Basically we have a test for each sorting column, if the data in that column is equal,
                 * test the next column. If all columns match, then we use a numeric sort on the row
                 * positions in the original data array to provide a stable sort.
                 *
                 * Note - I know it seems excessive to have two sorting methods, but the first is around
                 * 15% faster, so the second is only maintained for backwards compatibility with sorting
                 * methods which do not have a pre-sort formatting function.
                 */
                if ( formatters === aSort.length ) {
                    // All sort types have formatting functions
                    displayMaster.sort( function ( a, b ) {
                        var
                            x, y, k, test, sort,
                            len=aSort.length,
                            dataA = aoData[a]._aSortData,
                            dataB = aoData[b]._aSortData;
        
                        for ( k=0 ; k<len ; k++ ) {
                            sort = aSort[k];
        
                            x = dataA[ sort.col ];
                            y = dataB[ sort.col ];
        
                            test = x<y ? -1 : x>y ? 1 : 0;
                            if ( test !== 0 ) {
                                return sort.dir === 'asc' ? test : -test;
                            }
                        }
        
                        x = aiOrig[a];
                        y = aiOrig[b];
                        return x<y ? -1 : x>y ? 1 : 0;
                    } );
                }
                else {
                    // Depreciated - remove in 1.11 (providing a plug-in option)
                    // Not all sort types have formatting methods, so we have to call their sorting
                    // methods.
                    displayMaster.sort( function ( a, b ) {
                        var
                            x, y, k, l, test, sort, fn,
                            len=aSort.length,
                            dataA = aoData[a]._aSortData,
                            dataB = aoData[b]._aSortData;
        
                        for ( k=0 ; k<len ; k++ ) {
                            sort = aSort[k];
        
                            x = dataA[ sort.col ];
                            y = dataB[ sort.col ];
        
                            fn = oExtSort[ sort.type+"-"+sort.dir ] || oExtSort[ "string-"+sort.dir ];
                            test = fn( x, y );
                            if ( test !== 0 ) {
                                return test;
                            }
                        }
        
                        x = aiOrig[a];
                        y = aiOrig[b];
                        return x<y ? -1 : x>y ? 1 : 0;
                    } );
                }
            }
        
            /* Tell the draw function that we have sorted the data */
            oSettings.bSorted = true;
        }
        
        
        function _fnSortAria ( settings )
        {
            var label;
            var nextSort;
            var columns = settings.aoColumns;
            var aSort = _fnSortFlatten( settings );
            var oAria = settings.oLanguage.oAria;
        
            // ARIA attributes - need to loop all columns, to update all (removing old
            // attributes as needed)
            for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
            {
                var col = columns[i];
                var asSorting = col.asSorting;
                var sTitle = col.ariaTitle || col.sTitle.replace( /<.*?>/g, "" );
                var th = col.nTh;
        
                // IE7 is throwing an error when setting these properties with jQuery's
                // attr() and removeAttr() methods...
                th.removeAttribute('aria-sort');
        
                /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
                if ( col.bSortable ) {
                    if ( aSort.length > 0 && aSort[0].col == i ) {
                        th.setAttribute('aria-sort', aSort[0].dir=="asc" ? "ascending" : "descending" );
                        nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];
                    }
                    else {
                        nextSort = asSorting[0];
                    }
        
                    label = sTitle + ( nextSort === "asc" ?
                        oAria.sSortAscending :
                        oAria.sSortDescending
                    );
                }
                else {
                    label = sTitle;
                }
        
                th.setAttribute('aria-label', label);
            }
        }
        
        
        /**
         * Function to run on user sort request
         *  @param {object} settings dataTables settings object
         *  @param {node} attachTo node to attach the handler to
         *  @param {int} colIdx column sorting index
         *  @param {boolean} [append=false] Append the requested sort to the existing
         *    sort if true (i.e. multi-column sort)
         *  @param {function} [callback] callback function
         *  @memberof DataTable#oApi
         */
        function _fnSortListener ( settings, colIdx, append, callback )
        {
            var col = settings.aoColumns[ colIdx ];
            var sorting = settings.aaSorting;
            var asSorting = col.asSorting;
            var nextSortIdx;
            var next = function ( a, overflow ) {
                var idx = a._idx;
                if ( idx === undefined ) {
                    idx = $.inArray( a[1], asSorting );
                }
        
                return idx+1 < asSorting.length ?
                    idx+1 :
                    overflow ?
                        null :
                        0;
            };
        
            // Convert to 2D array if needed
            if ( typeof sorting[0] === 'number' ) {
                sorting = settings.aaSorting = [ sorting ];
            }
        
            // If appending the sort then we are multi-column sorting
            if ( append && settings.oFeatures.bSortMulti ) {
                // Are we already doing some kind of sort on this column?
                var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );
        
                if ( sortIdx !== -1 ) {
                    // Yes, modify the sort
                    nextSortIdx = next( sorting[sortIdx], true );
        
                    if ( nextSortIdx === null && sorting.length === 1 ) {
                        nextSortIdx = 0; // can't remove sorting completely
                    }
        
                    if ( nextSortIdx === null ) {
                        sorting.splice( sortIdx, 1 );
                    }
                    else {
                        sorting[sortIdx][1] = asSorting[ nextSortIdx ];
                        sorting[sortIdx]._idx = nextSortIdx;
                    }
                }
                else {
                    // No sort on this column yet
                    sorting.push( [ colIdx, asSorting[0], 0 ] );
                    sorting[sorting.length-1]._idx = 0;
                }
            }
            else if ( sorting.length && sorting[0][0] == colIdx ) {
                // Single column - already sorting on this column, modify the sort
                nextSortIdx = next( sorting[0] );
        
                sorting.length = 1;
                sorting[0][1] = asSorting[ nextSortIdx ];
                sorting[0]._idx = nextSortIdx;
            }
            else {
                // Single column - sort only on this column
                sorting.length = 0;
                sorting.push( [ colIdx, asSorting[0] ] );
                sorting[0]._idx = 0;
            }
        
            // Run the sort by calling a full redraw
            _fnReDraw( settings );
        
            // callback used for async user interaction
            if ( typeof callback == 'function' ) {
                callback( settings );
            }
        }
        
        
        /**
         * Attach a sort handler (click) to a node
         *  @param {object} settings dataTables settings object
         *  @param {node} attachTo node to attach the handler to
         *  @param {int} colIdx column sorting index
         *  @param {function} [callback] callback function
         *  @memberof DataTable#oApi
         */
        function _fnSortAttachListener ( settings, attachTo, colIdx, callback )
        {
            var col = settings.aoColumns[ colIdx ];
        
            _fnBindAction( attachTo, {}, function (e) {
                /* If the column is not sortable - don't to anything */
                if ( col.bSortable === false ) {
                    return;
                }
        
                // If processing is enabled use a timeout to allow the processing
                // display to be shown - otherwise to it synchronously
                if ( settings.oFeatures.bProcessing ) {
                    _fnProcessingDisplay( settings, true );
        
                    setTimeout( function() {
                        _fnSortListener( settings, colIdx, e.shiftKey, callback );
        
                        // In server-side processing, the draw callback will remove the
                        // processing display
                        if ( _fnDataSource( settings ) !== 'ssp' ) {
                            _fnProcessingDisplay( settings, false );
                        }
                    }, 0 );
                }
                else {
                    _fnSortListener( settings, colIdx, e.shiftKey, callback );
                }
            } );
        }
        
        
        /**
         * Set the sorting classes on table's body, Note: it is safe to call this function
         * when bSort and bSortClasses are false
         *  @param {object} oSettings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnSortingClasses( settings )
        {
            var oldSort = settings.aLastSort;
            var sortClass = settings.oClasses.sSortColumn;
            var sort = _fnSortFlatten( settings );
            var features = settings.oFeatures;
            var i, ien, colIdx;
        
            if ( features.bSort && features.bSortClasses ) {
                // Remove old sorting classes
                for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {
                    colIdx = oldSort[i].src;
        
                    // Remove column sorting
                    $( _pluck( settings.aoData, 'anCells', colIdx ) )
                        .removeClass( sortClass + (i<2 ? i+1 : 3) );
                }
        
                // Add new column sorting
                for ( i=0, ien=sort.length ; i<ien ; i++ ) {
                    colIdx = sort[i].src;
        
                    $( _pluck( settings.aoData, 'anCells', colIdx ) )
                        .addClass( sortClass + (i<2 ? i+1 : 3) );
                }
            }
        
            settings.aLastSort = sort;
        }
        
        
        // Get the data to sort a column, be it from cache, fresh (populating the
        // cache), or from a sort formatter
        function _fnSortData( settings, idx )
        {
            // Custom sorting function - provided by the sort data type
            var column = settings.aoColumns[ idx ];
            var customSort = DataTable.ext.order[ column.sSortDataType ];
            var customData;
        
            if ( customSort ) {
                customData = customSort.call( settings.oInstance, settings, idx,
                    _fnColumnIndexToVisible( settings, idx )
                );
            }
        
            // Use / populate cache
            var row, cellData;
            var formatter = DataTable.ext.type.order[ column.sType+"-pre" ];
        
            for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
                row = settings.aoData[i];
        
                if ( ! row._aSortData ) {
                    row._aSortData = [];
                }
        
                if ( ! row._aSortData[idx] || customSort ) {
                    cellData = customSort ?
                        customData[i] : // If there was a custom sort function, use data from there
                        _fnGetCellData( settings, i, idx, 'sort' );
        
                    row._aSortData[ idx ] = formatter ?
                        formatter( cellData ) :
                        cellData;
                }
            }
        }
        
        
        
        /**
         * Save the state of a table
         *  @param {object} oSettings dataTables settings object
         *  @memberof DataTable#oApi
         */
        function _fnSaveState ( settings )
        {
            if (settings._bLoadingState) {
                return;
            }
        
            /* Store the interesting variables */
            var state = {
                time:    +new Date(),
                start:   settings._iDisplayStart,
                length:  settings._iDisplayLength,
                order:   $.extend( true, [], settings.aaSorting ),
                search:  _fnSearchToCamel( settings.oPreviousSearch ),
                columns: $.map( settings.aoColumns, function ( col, i ) {
                    return {
                        visible: col.bVisible,
                        search: _fnSearchToCamel( settings.aoPreSearchCols[i] )
                    };
                } )
            };
        
            settings.oSavedState = state;
            _fnCallbackFire( settings, "aoStateSaveParams", 'stateSaveParams', [settings, state] );
            
            if ( settings.oFeatures.bStateSave && !settings.bDestroying )
            {
                settings.fnStateSaveCallback.call( settings.oInstance, settings, state );
            }	
        }
        
        
        /**
         * Attempt to load a saved table state
         *  @param {object} oSettings dataTables settings object
         *  @param {object} oInit DataTables init object so we can override settings
         *  @param {function} callback Callback to execute when the state has been loaded
         *  @memberof DataTable#oApi
         */
        function _fnLoadState ( settings, oInit, callback )
        {
            if ( ! settings.oFeatures.bStateSave ) {
                callback();
                return;
            }
        
            var loaded = function(state) {
                _fnImplementState(settings, state, callback);
            }
        
            var state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );
        
            if ( state !== undefined ) {
                _fnImplementState( settings, state, callback );
            }
            // otherwise, wait for the loaded callback to be executed
        
            return true;
        }
        
        function _fnImplementState ( settings, s, callback) {
            var i, ien;
            var columns = settings.aoColumns;
            settings._bLoadingState = true;
        
            // When StateRestore was introduced the state could now be implemented at any time
            // Not just initialisation. To do this an api instance is required in some places
            var api = settings._bInitComplete ? new DataTable.Api(settings) : null;
        
            if ( ! s || ! s.time ) {
                settings._bLoadingState = false;
                callback();
                return;
            }
        
            // Allow custom and plug-in manipulation functions to alter the saved data set and
            // cancelling of loading by returning false
            var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );
            if ( $.inArray( false, abStateLoad ) !== -1 ) {
                settings._bLoadingState = false;
                callback();
                return;
            }
        
            // Reject old data
            var duration = settings.iStateDuration;
            if ( duration > 0 && s.time < +new Date() - (duration*1000) ) {
                settings._bLoadingState = false;
                callback();
                return;
            }
        
            // Number of columns have changed - all bets are off, no restore of settings
            if ( s.columns && columns.length !== s.columns.length ) {
                settings._bLoadingState = false;
                callback();
                return;
            }
        
            // Store the saved state so it might be accessed at any time
            settings.oLoadedState = $.extend( true, {}, s );
        
            // Page Length
            if ( s.length !== undefined ) {
                // If already initialised just set the value directly so that the select element is also updated
                if (api) {
                    api.page.len(s.length)
                }
                else {
                    settings._iDisplayLength   = s.length;
                }
            }
        
            // Restore key features - todo - for 1.11 this needs to be done by
            // subscribed events
            if ( s.start !== undefined ) {
                if(api === null) {
                    settings._iDisplayStart    = s.start;
                    settings.iInitDisplayStart = s.start;
                }
                else {
                    _fnPageChange(settings, s.start/settings._iDisplayLength);
                }
            }
        
            // Order
            if ( s.order !== undefined ) {
                settings.aaSorting = [];
                $.each( s.order, function ( i, col ) {
                    settings.aaSorting.push( col[0] >= columns.length ?
                        [ 0, col[1] ] :
                        col
                    );
                } );
            }
        
            // Search
            if ( s.search !== undefined ) {
                $.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );
            }
        
            // Columns
            if ( s.columns ) {
                for ( i=0, ien=s.columns.length ; i<ien ; i++ ) {
                    var col = s.columns[i];
        
                    // Visibility
                    if ( col.visible !== undefined ) {
                        // If the api is defined, the table has been initialised so we need to use it rather than internal settings
                        if (api) {
                            // Don't redraw the columns on every iteration of this loop, we will do this at the end instead
                            api.column(i).visible(col.visible, false);
                        }
                        else {
                            columns[i].bVisible = col.visible;
                        }
                    }
        
                    // Search
                    if ( col.search !== undefined ) {
                        $.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );
                    }
                }
                
                // If the api is defined then we need to adjust the columns once the visibility has been changed
                if (api) {
                    api.columns.adjust();
                }
            }
        
            settings._bLoadingState = false;
            _fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );
            callback();
        };
        
        
        /**
         * Return the settings object for a particular table
         *  @param {node} table table we are using as a dataTable
         *  @returns {object} Settings object - or null if not found
         *  @memberof DataTable#oApi
         */
        function _fnSettingsFromNode ( table )
        {
            var settings = DataTable.settings;
            var idx = $.inArray( table, _pluck( settings, 'nTable' ) );
        
            return idx !== -1 ?
                settings[ idx ] :
                null;
        }
        
        
        /**
         * Log an error message
         *  @param {object} settings dataTables settings object
         *  @param {int} level log error messages, or display them to the user
         *  @param {string} msg error message
         *  @param {int} tn Technical note id to get more information about the error.
         *  @memberof DataTable#oApi
         */
        function _fnLog( settings, level, msg, tn )
        {
            msg = 'DataTables warning: '+
                (settings ? 'table id='+settings.sTableId+' - ' : '')+msg;
        
            if ( tn ) {
                msg += '. For more information about this error, please see '+
                'https://datatables.net/tn/'+tn;
            }
        
            if ( ! level  ) {
                // Backwards compatibility pre 1.10
                var ext = DataTable.ext;
                var type = ext.sErrMode || ext.errMode;
        
                if ( settings ) {
                    _fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );
                }
        
                if ( type == 'alert' ) {
                    alert( msg );
                }
                else if ( type == 'throw' ) {
                    throw new Error(msg);
                }
                else if ( typeof type == 'function' ) {
                    type( settings, tn, msg );
                }
            }
            else if ( window.console && console.log ) {
                console.log( msg );
            }
        }
        
        
        /**
         * See if a property is defined on one object, if so assign it to the other object
         *  @param {object} ret target object
         *  @param {object} src source object
         *  @param {string} name property
         *  @param {string} [mappedName] name to map too - optional, name used if not given
         *  @memberof DataTable#oApi
         */
        function _fnMap( ret, src, name, mappedName )
        {
            if ( Array.isArray( name ) ) {
                $.each( name, function (i, val) {
                    if ( Array.isArray( val ) ) {
                        _fnMap( ret, src, val[0], val[1] );
                    }
                    else {
                        _fnMap( ret, src, val );
                    }
                } );
        
                return;
            }
        
            if ( mappedName === undefined ) {
                mappedName = name;
            }
        
            if ( src[name] !== undefined ) {
                ret[mappedName] = src[name];
            }
        }
        
        
        /**
         * Extend objects - very similar to jQuery.extend, but deep copy objects, and
         * shallow copy arrays. The reason we need to do this, is that we don't want to
         * deep copy array init values (such as aaSorting) since the dev wouldn't be
         * able to override them, but we do want to deep copy arrays.
         *  @param {object} out Object to extend
         *  @param {object} extender Object from which the properties will be applied to
         *      out
         *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
         *      independent copy with the exception of the `data` or `aaData` parameters
         *      if they are present. This is so you can pass in a collection to
         *      DataTables and have that used as your data source without breaking the
         *      references
         *  @returns {object} out Reference, just for convenience - out === the return.
         *  @memberof DataTable#oApi
         *  @todo This doesn't take account of arrays inside the deep copied objects.
         */
        function _fnExtend( out, extender, breakRefs )
        {
            var val;
        
            for ( var prop in extender ) {
                if ( extender.hasOwnProperty(prop) ) {
                    val = extender[prop];
        
                    if ( $.isPlainObject( val ) ) {
                        if ( ! $.isPlainObject( out[prop] ) ) {
                            out[prop] = {};
                        }
                        $.extend( true, out[prop], val );
                    }
                    else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && Array.isArray(val) ) {
                        out[prop] = val.slice();
                    }
                    else {
                        out[prop] = val;
                    }
                }
            }
        
            return out;
        }
        
        
        /**
         * Bind an event handers to allow a click or return key to activate the callback.
         * This is good for accessibility since a return on the keyboard will have the
         * same effect as a click, if the element has focus.
         *  @param {element} n Element to bind the action to
         *  @param {object} oData Data object to pass to the triggered function
         *  @param {function} fn Callback function for when the event is triggered
         *  @memberof DataTable#oApi
         */
        function _fnBindAction( n, oData, fn )
        {
            $(n)
                .on( 'click.DT', oData, function (e) {
                        $(n).trigger('blur'); // Remove focus outline for mouse users
                        fn(e);
                    } )
                .on( 'keypress.DT', oData, function (e){
                        if ( e.which === 13 ) {
                            e.preventDefault();
                            fn(e);
                        }
                    } )
                .on( 'selectstart.DT', function () {
                        /* Take the brutal approach to cancelling text selection */
                        return false;
                    } );
        }
        
        
        /**
         * Register a callback function. Easily allows a callback function to be added to
         * an array store of callback functions that can then all be called together.
         *  @param {object} oSettings dataTables settings object
         *  @param {string} sStore Name of the array storage for the callbacks in oSettings
         *  @param {function} fn Function to be called back
         *  @param {string} sName Identifying name for the callback (i.e. a label)
         *  @memberof DataTable#oApi
         */
        function _fnCallbackReg( oSettings, sStore, fn, sName )
        {
            if ( fn )
            {
                oSettings[sStore].push( {
                    "fn": fn,
                    "sName": sName
                } );
            }
        }
        
        
        /**
         * Fire callback functions and trigger events. Note that the loop over the
         * callback array store is done backwards! Further note that you do not want to
         * fire off triggers in time sensitive applications (for example cell creation)
         * as its slow.
         *  @param {object} settings dataTables settings object
         *  @param {string} callbackArr Name of the array storage for the callbacks in
         *      oSettings
         *  @param {string} eventName Name of the jQuery custom event to trigger. If
         *      null no trigger is fired
         *  @param {array} args Array of arguments to pass to the callback function /
         *      trigger
         *  @memberof DataTable#oApi
         */
        function _fnCallbackFire( settings, callbackArr, eventName, args )
        {
            var ret = [];
        
            if ( callbackArr ) {
                ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {
                    return val.fn.apply( settings.oInstance, args );
                } );
            }
        
            if ( eventName !== null ) {
                var e = $.Event( eventName+'.dt' );
                var table = $(settings.nTable);
        
                table.trigger( e, args );
        
                // If not yet attached to the document, trigger the event
                // on the body directly to sort of simulate the bubble
                if (table.parents('body').length === 0) {
                    $('body').trigger( e, args );
                }
        
                ret.push( e.result );
            }
        
            return ret;
        }
        
        
        function _fnLengthOverflow ( settings )
        {
            var
                start = settings._iDisplayStart,
                end = settings.fnDisplayEnd(),
                len = settings._iDisplayLength;
        
            /* If we have space to show extra rows (backing up from the end point - then do so */
            if ( start >= end )
            {
                start = end - len;
            }
        
            // Keep the start record on the current page
            start -= (start % len);
        
            if ( len === -1 || start < 0 )
            {
                start = 0;
            }
        
            settings._iDisplayStart = start;
        }
        
        
        function _fnRenderer( settings, type )
        {
            var renderer = settings.renderer;
            var host = DataTable.ext.renderer[type];
        
            if ( $.isPlainObject( renderer ) && renderer[type] ) {
                // Specific renderer for this type. If available use it, otherwise use
                // the default.
                return host[renderer[type]] || host._;
            }
            else if ( typeof renderer === 'string' ) {
                // Common renderer - if there is one available for this type use it,
                // otherwise use the default
                return host[renderer] || host._;
            }
        
            // Use the default
            return host._;
        }
        
        
        /**
         * Detect the data source being used for the table. Used to simplify the code
         * a little (ajax) and to make it compress a little smaller.
         *
         *  @param {object} settings dataTables settings object
         *  @returns {string} Data source
         *  @memberof DataTable#oApi
         */
        function _fnDataSource ( settings )
        {
            if ( settings.oFeatures.bServerSide ) {
                return 'ssp';
            }
            else if ( settings.ajax || settings.sAjaxSource ) {
                return 'ajax';
            }
            return 'dom';
        }
        
        
        
        
        /**
         * Computed structure of the DataTables API, defined by the options passed to
         * `DataTable.Api.register()` when building the API.
         *
         * The structure is built in order to speed creation and extension of the Api
         * objects since the extensions are effectively pre-parsed.
         *
         * The array is an array of objects with the following structure, where this
         * base array represents the Api prototype base:
         *
         *     [
         *       {
         *         name:      'data'                -- string   - Property name
         *         val:       function () {},       -- function - Api method (or undefined if just an object
         *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
         *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
         *       },
         *       {
         *         name:     'row'
         *         val:       {},
         *         methodExt: [ ... ],
         *         propExt:   [
         *           {
         *             name:      'data'
         *             val:       function () {},
         *             methodExt: [ ... ],
         *             propExt:   [ ... ]
         *           },
         *           ...
         *         ]
         *       }
         *     ]
         *
         * @type {Array}
         * @ignore
         */
        var __apiStruct = [];
        
        
        /**
         * `Array.prototype` reference.
         *
         * @type object
         * @ignore
         */
        var __arrayProto = Array.prototype;
        
        
        /**
         * Abstraction for `context` parameter of the `Api` constructor to allow it to
         * take several different forms for ease of use.
         *
         * Each of the input parameter types will be converted to a DataTables settings
         * object where possible.
         *
         * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
         *   of:
         *
         *   * `string` - jQuery selector. Any DataTables' matching the given selector
         *     with be found and used.
         *   * `node` - `TABLE` node which has already been formed into a DataTable.
         *   * `jQuery` - A jQuery object of `TABLE` nodes.
         *   * `object` - DataTables settings object
         *   * `DataTables.Api` - API instance
         * @return {array|null} Matching DataTables settings objects. `null` or
         *   `undefined` is returned if no matching DataTable is found.
         * @ignore
         */
        var _toSettings = function ( mixed )
        {
            var idx, jq;
            var settings = DataTable.settings;
            var tables = $.map( settings, function (el, i) {
                return el.nTable;
            } );
        
            if ( ! mixed ) {
                return [];
            }
            else if ( mixed.nTable && mixed.oApi ) {
                // DataTables settings object
                return [ mixed ];
            }
            else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {
                // Table node
                idx = $.inArray( mixed, tables );
                return idx !== -1 ? [ settings[idx] ] : null;
            }
            else if ( mixed && typeof mixed.settings === 'function' ) {
                return mixed.settings().toArray();
            }
            else if ( typeof mixed === 'string' ) {
                // jQuery selector
                jq = $(mixed);
            }
            else if ( mixed instanceof $ ) {
                // jQuery object (also DataTables instance)
                jq = mixed;
            }
        
            if ( jq ) {
                return jq.map( function(i) {
                    idx = $.inArray( this, tables );
                    return idx !== -1 ? settings[idx] : null;
                } ).toArray();
            }
        };
        
        
        /**
         * DataTables API class - used to control and interface with  one or more
         * DataTables enhanced tables.
         *
         * The API class is heavily based on jQuery, presenting a chainable interface
         * that you can use to interact with tables. Each instance of the API class has
         * a "context" - i.e. the tables that it will operate on. This could be a single
         * table, all tables on a page or a sub-set thereof.
         *
         * Additionally the API is designed to allow you to easily work with the data in
         * the tables, retrieving and manipulating it as required. This is done by
         * presenting the API class as an array like interface. The contents of the
         * array depend upon the actions requested by each method (for example
         * `rows().nodes()` will return an array of nodes, while `rows().data()` will
         * return an array of objects or arrays depending upon your table's
         * configuration). The API object has a number of array like methods (`push`,
         * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
         * `unique` etc) to assist your working with the data held in a table.
         *
         * Most methods (those which return an Api instance) are chainable, which means
         * the return from a method call also has all of the methods available that the
         * top level object had. For example, these two calls are equivalent:
         *
         *     // Not chained
         *     api.row.add( {...} );
         *     api.draw();
         *
         *     // Chained
         *     api.row.add( {...} ).draw();
         *
         * @class DataTable.Api
         * @param {array|object|string|jQuery} context DataTable identifier. This is
         *   used to define which DataTables enhanced tables this API will operate on.
         *   Can be one of:
         *
         *   * `string` - jQuery selector. Any DataTables' matching the given selector
         *     with be found and used.
         *   * `node` - `TABLE` node which has already been formed into a DataTable.
         *   * `jQuery` - A jQuery object of `TABLE` nodes.
         *   * `object` - DataTables settings object
         * @param {array} [data] Data to initialise the Api instance with.
         *
         * @example
         *   // Direct initialisation during DataTables construction
         *   var api = $('#example').DataTable();
         *
         * @example
         *   // Initialisation using a DataTables jQuery object
         *   var api = $('#example').dataTable().api();
         *
         * @example
         *   // Initialisation as a constructor
         *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
         */
        _Api = function ( context, data )
        {
            if ( ! (this instanceof _Api) ) {
                return new _Api( context, data );
            }
        
            var settings = [];
            var ctxSettings = function ( o ) {
                var a = _toSettings( o );
                if ( a ) {
                    settings.push.apply( settings, a );
                }
            };
        
            if ( Array.isArray( context ) ) {
                for ( var i=0, ien=context.length ; i<ien ; i++ ) {
                    ctxSettings( context[i] );
                }
            }
            else {
                ctxSettings( context );
            }
        
            // Remove duplicates
            this.context = _unique( settings );
        
            // Initial data
            if ( data ) {
                $.merge( this, data );
            }
        
            // selector
            this.selector = {
                rows: null,
                cols: null,
                opts: null
            };
        
            _Api.extend( this, this, __apiStruct );
        };
        
        DataTable.Api = _Api;
        
        // Don't destroy the existing prototype, just extend it. Required for jQuery 2's
        // isPlainObject.
        $.extend( _Api.prototype, {
            any: function ()
            {
                return this.count() !== 0;
            },
        
        
            concat:  __arrayProto.concat,
        
        
            context: [], // array of table settings objects
        
        
            count: function ()
            {
                return this.flatten().length;
            },
        
        
            each: function ( fn )
            {
                for ( var i=0, ien=this.length ; i<ien; i++ ) {
                    fn.call( this, this[i], i, this );
                }
        
                return this;
            },
        
        
            eq: function ( idx )
            {
                var ctx = this.context;
        
                return ctx.length > idx ?
                    new _Api( ctx[idx], this[idx] ) :
                    null;
            },
        
        
            filter: function ( fn )
            {
                var a = [];
        
                if ( __arrayProto.filter ) {
                    a = __arrayProto.filter.call( this, fn, this );
                }
                else {
                    // Compatibility for browsers without EMCA-252-5 (JS 1.6)
                    for ( var i=0, ien=this.length ; i<ien ; i++ ) {
                        if ( fn.call( this, this[i], i, this ) ) {
                            a.push( this[i] );
                        }
                    }
                }
        
                return new _Api( this.context, a );
            },
        
        
            flatten: function ()
            {
                var a = [];
                return new _Api( this.context, a.concat.apply( a, this.toArray() ) );
            },
        
        
            join:    __arrayProto.join,
        
        
            indexOf: __arrayProto.indexOf || function (obj, start)
            {
                for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {
                    if ( this[i] === obj ) {
                        return i;
                    }
                }
                return -1;
            },
        
            iterator: function ( flatten, type, fn, alwaysNew ) {
                var
                    a = [], ret,
                    i, ien, j, jen,
                    context = this.context,
                    rows, items, item,
                    selector = this.selector;
        
                // Argument shifting
                if ( typeof flatten === 'string' ) {
                    alwaysNew = fn;
                    fn = type;
                    type = flatten;
                    flatten = false;
                }
        
                for ( i=0, ien=context.length ; i<ien ; i++ ) {
                    var apiInst = new _Api( context[i] );
        
                    if ( type === 'table' ) {
                        ret = fn.call( apiInst, context[i], i );
        
                        if ( ret !== undefined ) {
                            a.push( ret );
                        }
                    }
                    else if ( type === 'columns' || type === 'rows' ) {
                        // this has same length as context - one entry for each table
                        ret = fn.call( apiInst, context[i], this[i], i );
        
                        if ( ret !== undefined ) {
                            a.push( ret );
                        }
                    }
                    else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {
                        // columns and rows share the same structure.
                        // 'this' is an array of column indexes for each context
                        items = this[i];
        
                        if ( type === 'column-rows' ) {
                            rows = _selector_row_indexes( context[i], selector.opts );
                        }
        
                        for ( j=0, jen=items.length ; j<jen ; j++ ) {
                            item = items[j];
        
                            if ( type === 'cell' ) {
                                ret = fn.call( apiInst, context[i], item.row, item.column, i, j );
                            }
                            else {
                                ret = fn.call( apiInst, context[i], item, i, j, rows );
                            }
        
                            if ( ret !== undefined ) {
                                a.push( ret );
                            }
                        }
                    }
                }
        
                if ( a.length || alwaysNew ) {
                    var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );
                    var apiSelector = api.selector;
                    apiSelector.rows = selector.rows;
                    apiSelector.cols = selector.cols;
                    apiSelector.opts = selector.opts;
                    return api;
                }
                return this;
            },
        
        
            lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)
            {
                // Bit cheeky...
                return this.indexOf.apply( this.toArray.reverse(), arguments );
            },
        
        
            length:  0,
        
        
            map: function ( fn )
            {
                var a = [];
        
                if ( __arrayProto.map ) {
                    a = __arrayProto.map.call( this, fn, this );
                }
                else {
                    // Compatibility for browsers without EMCA-252-5 (JS 1.6)
                    for ( var i=0, ien=this.length ; i<ien ; i++ ) {
                        a.push( fn.call( this, this[i], i ) );
                    }
                }
        
                return new _Api( this.context, a );
            },
        
        
            pluck: function ( prop )
            {
                var fn = DataTable.util.get(prop);
        
                return this.map( function ( el ) {
                    return fn(el);
                } );
            },
        
            pop:     __arrayProto.pop,
        
        
            push:    __arrayProto.push,
        
        
            // Does not return an API instance
            reduce: __arrayProto.reduce || function ( fn, init )
            {
                return _fnReduce( this, fn, init, 0, this.length, 1 );
            },
        
        
            reduceRight: __arrayProto.reduceRight || function ( fn, init )
            {
                return _fnReduce( this, fn, init, this.length-1, -1, -1 );
            },
        
        
            reverse: __arrayProto.reverse,
        
        
            // Object with rows, columns and opts
            selector: null,
        
        
            shift:   __arrayProto.shift,
        
        
            slice: function () {
                return new _Api( this.context, this );
            },
        
        
            sort:    __arrayProto.sort, // ? name - order?
        
        
            splice:  __arrayProto.splice,
        
        
            toArray: function ()
            {
                return __arrayProto.slice.call( this );
            },
        
        
            to$: function ()
            {
                return $( this );
            },
        
        
            toJQuery: function ()
            {
                return $( this );
            },
        
        
            unique: function ()
            {
                return new _Api( this.context, _unique(this) );
            },
        
        
            unshift: __arrayProto.unshift
        } );
        
        
        _Api.extend = function ( scope, obj, ext )
        {
            // Only extend API instances and static properties of the API
            if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {
                return;
            }
        
            var
                i, ien,
                struct,
                methodScoping = function ( scope, fn, struc ) {
                    return function () {
                        var ret = fn.apply( scope, arguments );
        
                        // Method extension
                        _Api.extend( ret, ret, struc.methodExt );
                        return ret;
                    };
                };
        
            for ( i=0, ien=ext.length ; i<ien ; i++ ) {
                struct = ext[i];
        
                // Value
                obj[ struct.name ] = struct.type === 'function' ?
                    methodScoping( scope, struct.val, struct ) :
                    struct.type === 'object' ?
                        {} :
                        struct.val;
        
                obj[ struct.name ].__dt_wrapper = true;
        
                // Property extension
                _Api.extend( scope, obj[ struct.name ], struct.propExt );
            }
        };
        
        
        // @todo - Is there need for an augment function?
        // _Api.augment = function ( inst, name )
        // {
        // 	// Find src object in the structure from the name
        // 	var parts = name.split('.');
        
        // 	_Api.extend( inst, obj );
        // };
        
        
        //     [
        //       {
        //         name:      'data'                -- string   - Property name
        //         val:       function () {},       -- function - Api method (or undefined if just an object
        //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
        //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
        //       },
        //       {
        //         name:     'row'
        //         val:       {},
        //         methodExt: [ ... ],
        //         propExt:   [
        //           {
        //             name:      'data'
        //             val:       function () {},
        //             methodExt: [ ... ],
        //             propExt:   [ ... ]
        //           },
        //           ...
        //         ]
        //       }
        //     ]
        
        _Api.register = _api_register = function ( name, val )
        {
            if ( Array.isArray( name ) ) {
                for ( var j=0, jen=name.length ; j<jen ; j++ ) {
                    _Api.register( name[j], val );
                }
                return;
            }
        
            var
                i, ien,
                heir = name.split('.'),
                struct = __apiStruct,
                key, method;
        
            var find = function ( src, name ) {
                for ( var i=0, ien=src.length ; i<ien ; i++ ) {
                    if ( src[i].name === name ) {
                        return src[i];
                    }
                }
                return null;
            };
        
            for ( i=0, ien=heir.length ; i<ien ; i++ ) {
                method = heir[i].indexOf('()') !== -1;
                key = method ?
                    heir[i].replace('()', '') :
                    heir[i];
        
                var src = find( struct, key );
                if ( ! src ) {
                    src = {
                        name:      key,
                        val:       {},
                        methodExt: [],
                        propExt:   [],
                        type:      'object'
                    };
                    struct.push( src );
                }
        
                if ( i === ien-1 ) {
                    src.val = val;
                    src.type = typeof val === 'function' ?
                        'function' :
                        $.isPlainObject( val ) ?
                            'object' :
                            'other';
                }
                else {
                    struct = method ?
                        src.methodExt :
                        src.propExt;
                }
            }
        };
        
        _Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {
            _Api.register( pluralName, val );
        
            _Api.register( singularName, function () {
                var ret = val.apply( this, arguments );
        
                if ( ret === this ) {
                    // Returned item is the API instance that was passed in, return it
                    return this;
                }
                else if ( ret instanceof _Api ) {
                    // New API instance returned, want the value from the first item
                    // in the returned array for the singular result.
                    return ret.length ?
                        Array.isArray( ret[0] ) ?
                            new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'
                            ret[0] :
                        undefined;
                }
        
                // Non-API return - just fire it back
                return ret;
            } );
        };
        
        
        /**
         * Selector for HTML tables. Apply the given selector to the give array of
         * DataTables settings objects.
         *
         * @param {string|integer} [selector] jQuery selector string or integer
         * @param  {array} Array of DataTables settings objects to be filtered
         * @return {array}
         * @ignore
         */
        var __table_selector = function ( selector, a )
        {
            if ( Array.isArray(selector) ) {
                return $.map( selector, function (item) {
                    return __table_selector(item, a);
                } );
            }
        
            // Integer is used to pick out a table by index
            if ( typeof selector === 'number' ) {
                return [ a[ selector ] ];
            }
        
            // Perform a jQuery selector on the table nodes
            var nodes = $.map( a, function (el, i) {
                return el.nTable;
            } );
        
            return $(nodes)
                .filter( selector )
                .map( function (i) {
                    // Need to translate back from the table node to the settings
                    var idx = $.inArray( this, nodes );
                    return a[ idx ];
                } )
                .toArray();
        };
        
        
        
        /**
         * Context selector for the API's context (i.e. the tables the API instance
         * refers to.
         *
         * @name    DataTable.Api#tables
         * @param {string|integer} [selector] Selector to pick which tables the iterator
         *   should operate on. If not given, all tables in the current context are
         *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
         *   select multiple tables or as an integer to select a single table.
         * @returns {DataTable.Api} Returns a new API instance if a selector is given.
         */
        _api_register( 'tables()', function ( selector ) {
            // A new instance is created if there was a selector specified
            return selector !== undefined && selector !== null ?
                new _Api( __table_selector( selector, this.context ) ) :
                this;
        } );
        
        
        _api_register( 'table()', function ( selector ) {
            var tables = this.tables( selector );
            var ctx = tables.context;
        
            // Truncate to the first matched table
            return ctx.length ?
                new _Api( ctx[0] ) :
                tables;
        } );
        
        
        _api_registerPlural( 'tables().nodes()', 'table().node()' , function () {
            return this.iterator( 'table', function ( ctx ) {
                return ctx.nTable;
            }, 1 );
        } );
        
        
        _api_registerPlural( 'tables().body()', 'table().body()' , function () {
            return this.iterator( 'table', function ( ctx ) {
                return ctx.nTBody;
            }, 1 );
        } );
        
        
        _api_registerPlural( 'tables().header()', 'table().header()' , function () {
            return this.iterator( 'table', function ( ctx ) {
                return ctx.nTHead;
            }, 1 );
        } );
        
        
        _api_registerPlural( 'tables().footer()', 'table().footer()' , function () {
            return this.iterator( 'table', function ( ctx ) {
                return ctx.nTFoot;
            }, 1 );
        } );
        
        
        _api_registerPlural( 'tables().containers()', 'table().container()' , function () {
            return this.iterator( 'table', function ( ctx ) {
                return ctx.nTableWrapper;
            }, 1 );
        } );
        
        
        
        /**
         * Redraw the tables in the current context.
         */
        _api_register( 'draw()', function ( paging ) {
            return this.iterator( 'table', function ( settings ) {
                if ( paging === 'page' ) {
                    _fnDraw( settings );
                }
                else {
                    if ( typeof paging === 'string' ) {
                        paging = paging === 'full-hold' ?
                            false :
                            true;
                    }
        
                    _fnReDraw( settings, paging===false );
                }
            } );
        } );
        
        
        
        /**
         * Get the current page index.
         *
         * @return {integer} Current page index (zero based)
         *//**
         * Set the current page.
         *
         * Note that if you attempt to show a page which does not exist, DataTables will
         * not throw an error, but rather reset the paging.
         *
         * @param {integer|string} action The paging action to take. This can be one of:
         *  * `integer` - The page index to jump to
         *  * `string` - An action to take:
         *    * `first` - Jump to first page.
         *    * `next` - Jump to the next page
         *    * `previous` - Jump to previous page
         *    * `last` - Jump to the last page.
         * @returns {DataTables.Api} this
         */
        _api_register( 'page()', function ( action ) {
            if ( action === undefined ) {
                return this.page.info().page; // not an expensive call
            }
        
            // else, have an action to take on all tables
            return this.iterator( 'table', function ( settings ) {
                _fnPageChange( settings, action );
            } );
        } );
        
        
        /**
         * Paging information for the first table in the current context.
         *
         * If you require paging information for another table, use the `table()` method
         * with a suitable selector.
         *
         * @return {object} Object with the following properties set:
         *  * `page` - Current page index (zero based - i.e. the first page is `0`)
         *  * `pages` - Total number of pages
         *  * `start` - Display index for the first record shown on the current page
         *  * `end` - Display index for the last record shown on the current page
         *  * `length` - Display length (number of records). Note that generally `start
         *    + length = end`, but this is not always true, for example if there are
         *    only 2 records to show on the final page, with a length of 10.
         *  * `recordsTotal` - Full data set length
         *  * `recordsDisplay` - Data set length once the current filtering criterion
         *    are applied.
         */
        _api_register( 'page.info()', function ( action ) {
            if ( this.context.length === 0 ) {
                return undefined;
            }
        
            var
                settings   = this.context[0],
                start      = settings._iDisplayStart,
                len        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
                visRecords = settings.fnRecordsDisplay(),
                all        = len === -1;
        
            return {
                "page":           all ? 0 : Math.floor( start / len ),
                "pages":          all ? 1 : Math.ceil( visRecords / len ),
                "start":          start,
                "end":            settings.fnDisplayEnd(),
                "length":         len,
                "recordsTotal":   settings.fnRecordsTotal(),
                "recordsDisplay": visRecords,
                "serverSide":     _fnDataSource( settings ) === 'ssp'
            };
        } );
        
        
        /**
         * Get the current page length.
         *
         * @return {integer} Current page length. Note `-1` indicates that all records
         *   are to be shown.
         *//**
         * Set the current page length.
         *
         * @param {integer} Page length to set. Use `-1` to show all records.
         * @returns {DataTables.Api} this
         */
        _api_register( 'page.len()', function ( len ) {
            // Note that we can't call this function 'length()' because `length`
            // is a Javascript property of functions which defines how many arguments
            // the function expects.
            if ( len === undefined ) {
                return this.context.length !== 0 ?
                    this.context[0]._iDisplayLength :
                    undefined;
            }
        
            // else, set the page length
            return this.iterator( 'table', function ( settings ) {
                _fnLengthChange( settings, len );
            } );
        } );
        
        
        
        var __reload = function ( settings, holdPosition, callback ) {
            // Use the draw event to trigger a callback
            if ( callback ) {
                var api = new _Api( settings );
        
                api.one( 'draw', function () {
                    callback( api.ajax.json() );
                } );
            }
        
            if ( _fnDataSource( settings ) == 'ssp' ) {
                _fnReDraw( settings, holdPosition );
            }
            else {
                _fnProcessingDisplay( settings, true );
        
                // Cancel an existing request
                var xhr = settings.jqXHR;
                if ( xhr && xhr.readyState !== 4 ) {
                    xhr.abort();
                }
        
                // Trigger xhr
                _fnBuildAjax( settings, [], function( json ) {
                    _fnClearTable( settings );
        
                    var data = _fnAjaxDataSrc( settings, json );
                    for ( var i=0, ien=data.length ; i<ien ; i++ ) {
                        _fnAddData( settings, data[i] );
                    }
        
                    _fnReDraw( settings, holdPosition );
                    _fnProcessingDisplay( settings, false );
                } );
            }
        };
        
        
        /**
         * Get the JSON response from the last Ajax request that DataTables made to the
         * server. Note that this returns the JSON from the first table in the current
         * context.
         *
         * @return {object} JSON received from the server.
         */
        _api_register( 'ajax.json()', function () {
            var ctx = this.context;
        
            if ( ctx.length > 0 ) {
                return ctx[0].json;
            }
        
            // else return undefined;
        } );
        
        
        /**
         * Get the data submitted in the last Ajax request
         */
        _api_register( 'ajax.params()', function () {
            var ctx = this.context;
        
            if ( ctx.length > 0 ) {
                return ctx[0].oAjaxData;
            }
        
            // else return undefined;
        } );
        
        
        /**
         * Reload tables from the Ajax data source. Note that this function will
         * automatically re-draw the table when the remote data has been loaded.
         *
         * @param {boolean} [reset=true] Reset (default) or hold the current paging
         *   position. A full re-sort and re-filter is performed when this method is
         *   called, which is why the pagination reset is the default action.
         * @returns {DataTables.Api} this
         */
        _api_register( 'ajax.reload()', function ( callback, resetPaging ) {
            return this.iterator( 'table', function (settings) {
                __reload( settings, resetPaging===false, callback );
            } );
        } );
        
        
        /**
         * Get the current Ajax URL. Note that this returns the URL from the first
         * table in the current context.
         *
         * @return {string} Current Ajax source URL
         *//**
         * Set the Ajax URL. Note that this will set the URL for all tables in the
         * current context.
         *
         * @param {string} url URL to set.
         * @returns {DataTables.Api} this
         */
        _api_register( 'ajax.url()', function ( url ) {
            var ctx = this.context;
        
            if ( url === undefined ) {
                // get
                if ( ctx.length === 0 ) {
                    return undefined;
                }
                ctx = ctx[0];
        
                return ctx.ajax ?
                    $.isPlainObject( ctx.ajax ) ?
                        ctx.ajax.url :
                        ctx.ajax :
                    ctx.sAjaxSource;
            }
        
            // set
            return this.iterator( 'table', function ( settings ) {
                if ( $.isPlainObject( settings.ajax ) ) {
                    settings.ajax.url = url;
                }
                else {
                    settings.ajax = url;
                }
                // No need to consider sAjaxSource here since DataTables gives priority
                // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
                // value of `sAjaxSource` redundant.
            } );
        } );
        
        
        /**
         * Load data from the newly set Ajax URL. Note that this method is only
         * available when `ajax.url()` is used to set a URL. Additionally, this method
         * has the same effect as calling `ajax.reload()` but is provided for
         * convenience when setting a new URL. Like `ajax.reload()` it will
         * automatically redraw the table once the remote data has been loaded.
         *
         * @returns {DataTables.Api} this
         */
        _api_register( 'ajax.url().load()', function ( callback, resetPaging ) {
            // Same as a reload, but makes sense to present it for easy access after a
            // url change
            return this.iterator( 'table', function ( ctx ) {
                __reload( ctx, resetPaging===false, callback );
            } );
        } );
        
        
        
        
        var _selector_run = function ( type, selector, selectFn, settings, opts )
        {
            var
                out = [], res,
                a, i, ien, j, jen,
                selectorType = typeof selector;
        
            // Can't just check for isArray here, as an API or jQuery instance might be
            // given with their array like look
            if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {
                selector = [ selector ];
            }
        
            for ( i=0, ien=selector.length ; i<ien ; i++ ) {
                // Only split on simple strings - complex expressions will be jQuery selectors
                a = selector[i] && selector[i].split && ! selector[i].match(/[\[\(:]/) ?
                    selector[i].split(',') :
                    [ selector[i] ];
        
                for ( j=0, jen=a.length ; j<jen ; j++ ) {
                    res = selectFn( typeof a[j] === 'string' ? (a[j]).trim() : a[j] );
        
                    if ( res && res.length ) {
                        out = out.concat( res );
                    }
                }
            }
        
            // selector extensions
            var ext = _ext.selector[ type ];
            if ( ext.length ) {
                for ( i=0, ien=ext.length ; i<ien ; i++ ) {
                    out = ext[i]( settings, opts, out );
                }
            }
        
            return _unique( out );
        };
        
        
        var _selector_opts = function ( opts )
        {
            if ( ! opts ) {
                opts = {};
            }
        
            // Backwards compatibility for 1.9- which used the terminology filter rather
            // than search
            if ( opts.filter && opts.search === undefined ) {
                opts.search = opts.filter;
            }
        
            return $.extend( {
                search: 'none',
                order: 'current',
                page: 'all'
            }, opts );
        };
        
        
        var _selector_first = function ( inst )
        {
            // Reduce the API instance to the first item found
            for ( var i=0, ien=inst.length ; i<ien ; i++ ) {
                if ( inst[i].length > 0 ) {
                    // Assign the first element to the first item in the instance
                    // and truncate the instance and context
                    inst[0] = inst[i];
                    inst[0].length = 1;
                    inst.length = 1;
                    inst.context = [ inst.context[i] ];
        
                    return inst;
                }
            }
        
            // Not found - return an empty instance
            inst.length = 0;
            return inst;
        };
        
        
        var _selector_row_indexes = function ( settings, opts )
        {
            var
                i, ien, tmp, a=[],
                displayFiltered = settings.aiDisplay,
                displayMaster = settings.aiDisplayMaster;
        
            var
                search = opts.search,  // none, applied, removed
                order  = opts.order,   // applied, current, index (original - compatibility with 1.9)
                page   = opts.page;    // all, current
        
            if ( _fnDataSource( settings ) == 'ssp' ) {
                // In server-side processing mode, most options are irrelevant since
                // rows not shown don't exist and the index order is the applied order
                // Removed is a special case - for consistency just return an empty
                // array
                return search === 'removed' ?
                    [] :
                    _range( 0, displayMaster.length );
            }
            else if ( page == 'current' ) {
                // Current page implies that order=current and filter=applied, since it is
                // fairly senseless otherwise, regardless of what order and search actually
                // are
                for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {
                    a.push( displayFiltered[i] );
                }
            }
            else if ( order == 'current' || order == 'applied' ) {
                if ( search == 'none') {
                    a = displayMaster.slice();
                }
                else if ( search == 'applied' ) {
                    a = displayFiltered.slice();
                }
                else if ( search == 'removed' ) {
                    // O(n+m) solution by creating a hash map
                    var displayFilteredMap = {};
        
                    for ( var i=0, ien=displayFiltered.length ; i<ien ; i++ ) {
                        displayFilteredMap[displayFiltered[i]] = null;
                    }
        
                    a = $.map( displayMaster, function (el) {
                        return ! displayFilteredMap.hasOwnProperty(el) ?
                            el :
                            null;
                    } );
                }
            }
            else if ( order == 'index' || order == 'original' ) {
                for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
                    if ( search == 'none' ) {
                        a.push( i );
                    }
                    else { // applied | removed
                        tmp = $.inArray( i, displayFiltered );
        
                        if ((tmp === -1 && search == 'removed') ||
                            (tmp >= 0   && search == 'applied') )
                        {
                            a.push( i );
                        }
                    }
                }
            }
        
            return a;
        };
        
        
        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         * Rows
         *
         * {}          - no selector - use all available rows
         * {integer}   - row aoData index
         * {node}      - TR node
         * {string}    - jQuery selector to apply to the TR elements
         * {array}     - jQuery array of nodes, or simply an array of TR nodes
         *
         */
        var __row_selector = function ( settings, selector, opts )
        {
            var rows;
            var run = function ( sel ) {
                var selInt = _intVal( sel );
                var i, ien;
                var aoData = settings.aoData;
        
                // Short cut - selector is a number and no options provided (default is
                // all records, so no need to check if the index is in there, since it
                // must be - dev error if the index doesn't exist).
                if ( selInt !== null && ! opts ) {
                    return [ selInt ];
                }
        
                if ( ! rows ) {
                    rows = _selector_row_indexes( settings, opts );
                }
        
                if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {
                    // Selector - integer
                    return [ selInt ];
                }
                else if ( sel === null || sel === undefined || sel === '' ) {
                    // Selector - none
                    return rows;
                }
        
                // Selector - function
                if ( typeof sel === 'function' ) {
                    return $.map( rows, function (idx) {
                        var row = aoData[ idx ];
                        return sel( idx, row._aData, row.nTr ) ? idx : null;
                    } );
                }
        
                // Selector - node
                if ( sel.nodeName ) {
                    var rowIdx = sel._DT_RowIndex;  // Property added by DT for fast lookup
                    var cellIdx = sel._DT_CellIndex;
        
                    if ( rowIdx !== undefined ) {
                        // Make sure that the row is actually still present in the table
                        return aoData[ rowIdx ] && aoData[ rowIdx ].nTr === sel ?
                            [ rowIdx ] :
                            [];
                    }
                    else if ( cellIdx ) {
                        return aoData[ cellIdx.row ] && aoData[ cellIdx.row ].nTr === sel.parentNode ?
                            [ cellIdx.row ] :
                            [];
                    }
                    else {
                        var host = $(sel).closest('*[data-dt-row]');
                        return host.length ?
                            [ host.data('dt-row') ] :
                            [];
                    }
                }
        
                // ID selector. Want to always be able to select rows by id, regardless
                // of if the tr element has been created or not, so can't rely upon
                // jQuery here - hence a custom implementation. This does not match
                // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
                // but to select it using a CSS selector engine (like Sizzle or
                // querySelect) it would need to need to be escaped for some characters.
                // DataTables simplifies this for row selectors since you can select
                // only a row. A # indicates an id any anything that follows is the id -
                // unescaped.
                if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {
                    // get row index from id
                    var rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];
                    if ( rowObj !== undefined ) {
                        return [ rowObj.idx ];
                    }
        
                    // need to fall through to jQuery in case there is DOM id that
                    // matches
                }
                
                // Get nodes in the order from the `rows` array with null values removed
                var nodes = _removeEmpty(
                    _pluck_order( settings.aoData, rows, 'nTr' )
                );
        
                // Selector - jQuery selector string, array of nodes or jQuery object/
                // As jQuery's .filter() allows jQuery objects to be passed in filter,
                // it also allows arrays, so this will cope with all three options
                return $(nodes)
                    .filter( sel )
                    .map( function () {
                        return this._DT_RowIndex;
                    } )
                    .toArray();
            };
        
            return _selector_run( 'row', selector, run, settings, opts );
        };
        
        
        _api_register( 'rows()', function ( selector, opts ) {
            // argument shifting
            if ( selector === undefined ) {
                selector = '';
            }
            else if ( $.isPlainObject( selector ) ) {
                opts = selector;
                selector = '';
            }
        
            opts = _selector_opts( opts );
        
            var inst = this.iterator( 'table', function ( settings ) {
                return __row_selector( settings, selector, opts );
            }, 1 );
        
            // Want argument shifting here and in __row_selector?
            inst.selector.rows = selector;
            inst.selector.opts = opts;
        
            return inst;
        } );
        
        _api_register( 'rows().nodes()', function () {
            return this.iterator( 'row', function ( settings, row ) {
                return settings.aoData[ row ].nTr || undefined;
            }, 1 );
        } );
        
        _api_register( 'rows().data()', function () {
            return this.iterator( true, 'rows', function ( settings, rows ) {
                return _pluck_order( settings.aoData, rows, '_aData' );
            }, 1 );
        } );
        
        _api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {
            return this.iterator( 'row', function ( settings, row ) {
                var r = settings.aoData[ row ];
                return type === 'search' ? r._aFilterData : r._aSortData;
            }, 1 );
        } );
        
        _api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {
            return this.iterator( 'row', function ( settings, row ) {
                _fnInvalidate( settings, row, src );
            } );
        } );
        
        _api_registerPlural( 'rows().indexes()', 'row().index()', function () {
            return this.iterator( 'row', function ( settings, row ) {
                return row;
            }, 1 );
        } );
        
        _api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {
            var a = [];
            var context = this.context;
        
            // `iterator` will drop undefined values, but in this case we want them
            for ( var i=0, ien=context.length ; i<ien ; i++ ) {
                for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {
                    var id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );
                    a.push( (hash === true ? '#' : '' )+ id );
                }
            }
        
            return new _Api( context, a );
        } );
        
        _api_registerPlural( 'rows().remove()', 'row().remove()', function () {
            var that = this;
        
            this.iterator( 'row', function ( settings, row, thatIdx ) {
                var data = settings.aoData;
                var rowData = data[ row ];
                var i, ien, j, jen;
                var loopRow, loopCells;
        
                data.splice( row, 1 );
        
                // Update the cached indexes
                for ( i=0, ien=data.length ; i<ien ; i++ ) {
                    loopRow = data[i];
                    loopCells = loopRow.anCells;
        
                    // Rows
                    if ( loopRow.nTr !== null ) {
                        loopRow.nTr._DT_RowIndex = i;
                    }
        
                    // Cells
                    if ( loopCells !== null ) {
                        for ( j=0, jen=loopCells.length ; j<jen ; j++ ) {
                            loopCells[j]._DT_CellIndex.row = i;
                        }
                    }
                }
        
                // Delete from the display arrays
                _fnDeleteIndex( settings.aiDisplayMaster, row );
                _fnDeleteIndex( settings.aiDisplay, row );
                _fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes
        
                // For server-side processing tables - subtract the deleted row from the count
                if ( settings._iRecordsDisplay > 0 ) {
                    settings._iRecordsDisplay--;
                }
        
                // Check for an 'overflow' they case for displaying the table
                _fnLengthOverflow( settings );
        
                // Remove the row's ID reference if there is one
                var id = settings.rowIdFn( rowData._aData );
                if ( id !== undefined ) {
                    delete settings.aIds[ id ];
                }
            } );
        
            this.iterator( 'table', function ( settings ) {
                for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
                    settings.aoData[i].idx = i;
                }
            } );
        
            return this;
        } );
        
        
        _api_register( 'rows.add()', function ( rows ) {
            var newRows = this.iterator( 'table', function ( settings ) {
                    var row, i, ien;
                    var out = [];
        
                    for ( i=0, ien=rows.length ; i<ien ; i++ ) {
                        row = rows[i];
        
                        if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
                            out.push( _fnAddTr( settings, row )[0] );
                        }
                        else {
                            out.push( _fnAddData( settings, row ) );
                        }
                    }
        
                    return out;
                }, 1 );
        
            // Return an Api.rows() extended instance, so rows().nodes() etc can be used
            var modRows = this.rows( -1 );
            modRows.pop();
            $.merge( modRows, newRows );
        
            return modRows;
        } );
        
        
        
        
        
        /**
         *
         */
        _api_register( 'row()', function ( selector, opts ) {
            return _selector_first( this.rows( selector, opts ) );
        } );
        
        
        _api_register( 'row().data()', function ( data ) {
            var ctx = this.context;
        
            if ( data === undefined ) {
                // Get
                return ctx.length && this.length ?
                    ctx[0].aoData[ this[0] ]._aData :
                    undefined;
            }
        
            // Set
            var row = ctx[0].aoData[ this[0] ];
            row._aData = data;
        
            // If the DOM has an id, and the data source is an array
            if ( Array.isArray( data ) && row.nTr && row.nTr.id ) {
                _fnSetObjectDataFn( ctx[0].rowId )( data, row.nTr.id );
            }
        
            // Automatically invalidate
            _fnInvalidate( ctx[0], this[0], 'data' );
        
            return this;
        } );
        
        
        _api_register( 'row().node()', function () {
            var ctx = this.context;
        
            return ctx.length && this.length ?
                ctx[0].aoData[ this[0] ].nTr || null :
                null;
        } );
        
        
        _api_register( 'row.add()', function ( row ) {
            // Allow a jQuery object to be passed in - only a single row is added from
            // it though - the first element in the set
            if ( row instanceof $ && row.length ) {
                row = row[0];
            }
        
            var rows = this.iterator( 'table', function ( settings ) {
                if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
                    return _fnAddTr( settings, row )[0];
                }
                return _fnAddData( settings, row );
            } );
        
            // Return an Api.rows() extended instance, with the newly added row selected
            return this.row( rows[0] );
        } );
        
        
        $(document).on('plugin-init.dt', function (e, context) {
            var api = new _Api( context );
            var namespace = 'on-plugin-init';
            var stateSaveParamsEvent = 'stateSaveParams.' + namespace;
            var destroyEvent = 'destroy. ' + namespace;
        
            api.on( stateSaveParamsEvent, function ( e, settings, d ) {
                // This could be more compact with the API, but it is a lot faster as a simple
                // internal loop
                var idFn = settings.rowIdFn;
                var data = settings.aoData;
                var ids = [];
        
                for (var i=0 ; i<data.length ; i++) {
                    if (data[i]._detailsShow) {
                        ids.push( '#' + idFn(data[i]._aData) );
                    }
                }
        
                d.childRows = ids;
            });
        
            api.on( destroyEvent, function () {
                api.off(stateSaveParamsEvent + ' ' + destroyEvent);
            });
        
            var loaded = api.state.loaded();
        
            if ( loaded && loaded.childRows ) {
                api
                    .rows( $.map(loaded.childRows, function (id){
                        return id.replace(/:/g, '\\:')
                    }) )
                    .every( function () {
                        _fnCallbackFire( context, null, 'requestChild', [ this ] )
                    });
            }
        });
        
        var __details_add = function ( ctx, row, data, klass )
        {
            // Convert to array of TR elements
            var rows = [];
            var addRow = function ( r, k ) {
                // Recursion to allow for arrays of jQuery objects
                if ( Array.isArray( r ) || r instanceof $ ) {
                    for ( var i=0, ien=r.length ; i<ien ; i++ ) {
                        addRow( r[i], k );
                    }
                    return;
                }
        
                // If we get a TR element, then just add it directly - up to the dev
                // to add the correct number of columns etc
                if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {
                    rows.push( r );
                }
                else {
                    // Otherwise create a row with a wrapper
                    var created = $('<tr><td></td></tr>').addClass( k );
                    $('td', created)
                        .addClass( k )
                        .html( r )
                        [0].colSpan = _fnVisbleColumns( ctx );
        
                    rows.push( created[0] );
                }
            };
        
            addRow( data, klass );
        
            if ( row._details ) {
                row._details.detach();
            }
        
            row._details = $(rows);
        
            // If the children were already shown, that state should be retained
            if ( row._detailsShow ) {
                row._details.insertAfter( row.nTr );
            }
        };
        
        
        // Make state saving of child row details async to allow them to be batch processed
        var __details_state = DataTable.util.throttle(
            function (ctx) {
                _fnSaveState( ctx[0] )
            },
            500
        );
        
        
        var __details_remove = function ( api, idx )
        {
            var ctx = api.context;
        
            if ( ctx.length ) {
                var row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];
        
                if ( row && row._details ) {
                    row._details.remove();
        
                    row._detailsShow = undefined;
                    row._details = undefined;
                    $( row.nTr ).removeClass( 'dt-hasChild' );
                    __details_state( ctx );
                }
            }
        };
        
        
        var __details_display = function ( api, show ) {
            var ctx = api.context;
        
            if ( ctx.length && api.length ) {
                var row = ctx[0].aoData[ api[0] ];
        
                if ( row._details ) {
                    row._detailsShow = show;
        
                    if ( show ) {
                        row._details.insertAfter( row.nTr );
                        $( row.nTr ).addClass( 'dt-hasChild' );
                    }
                    else {
                        row._details.detach();
                        $( row.nTr ).removeClass( 'dt-hasChild' );
                    }
        
                    _fnCallbackFire( ctx[0], null, 'childRow', [ show, api.row( api[0] ) ] )
        
                    __details_events( ctx[0] );
                    __details_state( ctx );
                }
            }
        };
        
        
        var __details_events = function ( settings )
        {
            var api = new _Api( settings );
            var namespace = '.dt.DT_details';
            var drawEvent = 'draw'+namespace;
            var colvisEvent = 'column-sizing'+namespace;
            var destroyEvent = 'destroy'+namespace;
            var data = settings.aoData;
        
            api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );
        
            if ( _pluck( data, '_details' ).length > 0 ) {
                // On each draw, insert the required elements into the document
                api.on( drawEvent, function ( e, ctx ) {
                    if ( settings !== ctx ) {
                        return;
                    }
        
                    api.rows( {page:'current'} ).eq(0).each( function (idx) {
                        // Internal data grab
                        var row = data[ idx ];
        
                        if ( row._detailsShow ) {
                            row._details.insertAfter( row.nTr );
                        }
                    } );
                } );
        
                // Column visibility change - update the colspan
                api.on( colvisEvent, function ( e, ctx, idx, vis ) {
                    if ( settings !== ctx ) {
                        return;
                    }
        
                    // Update the colspan for the details rows (note, only if it already has
                    // a colspan)
                    var row, visible = _fnVisbleColumns( ctx );
        
                    for ( var i=0, ien=data.length ; i<ien ; i++ ) {
                        row = data[i];
        
                        if ( row._details ) {
                            row._details.each(function () {
                                var el = $(this).children('td');
        
                                if (el.length == 1) {
                                    el.attr('colspan', visible);
                                }
                            });
                        }
                    }
                } );
        
                // Table destroyed - nuke any child rows
                api.on( destroyEvent, function ( e, ctx ) {
                    if ( settings !== ctx ) {
                        return;
                    }
        
                    for ( var i=0, ien=data.length ; i<ien ; i++ ) {
                        if ( data[i]._details ) {
                            __details_remove( api, i );
                        }
                    }
                } );
            }
        };
        
        // Strings for the method names to help minification
        var _emp = '';
        var _child_obj = _emp+'row().child';
        var _child_mth = _child_obj+'()';
        
        // data can be:
        //  tr
        //  string
        //  jQuery or array of any of the above
        _api_register( _child_mth, function ( data, klass ) {
            var ctx = this.context;
        
            if ( data === undefined ) {
                // get
                return ctx.length && this.length ?
                    ctx[0].aoData[ this[0] ]._details :
                    undefined;
            }
            else if ( data === true ) {
                // show
                this.child.show();
            }
            else if ( data === false ) {
                // remove
                __details_remove( this );
            }
            else if ( ctx.length && this.length ) {
                // set
                __details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );
            }
        
            return this;
        } );
        
        
        _api_register( [
            _child_obj+'.show()',
            _child_mth+'.show()' // only when `child()` was called with parameters (without
        ], function ( show ) {   // it returns an object and this method is not executed)
            __details_display( this, true );
            return this;
        } );
        
        
        _api_register( [
            _child_obj+'.hide()',
            _child_mth+'.hide()' // only when `child()` was called with parameters (without
        ], function () {         // it returns an object and this method is not executed)
            __details_display( this, false );
            return this;
        } );
        
        
        _api_register( [
            _child_obj+'.remove()',
            _child_mth+'.remove()' // only when `child()` was called with parameters (without
        ], function () {           // it returns an object and this method is not executed)
            __details_remove( this );
            return this;
        } );
        
        
        _api_register( _child_obj+'.isShown()', function () {
            var ctx = this.context;
        
            if ( ctx.length && this.length ) {
                // _detailsShown as false or undefined will fall through to return false
                return ctx[0].aoData[ this[0] ]._detailsShow || false;
            }
            return false;
        } );
        
        
        
        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         * Columns
         *
         * {integer}           - column index (>=0 count from left, <0 count from right)
         * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
         * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
         * "{string}:name"     - column name
         * "{string}"          - jQuery selector on column header nodes
         *
         */
        
        // can be an array of these items, comma separated list, or an array of comma
        // separated lists
        
        var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;
        
        
        // r1 and r2 are redundant - but it means that the parameters match for the
        // iterator callback in columns().data()
        var __columnData = function ( settings, column, r1, r2, rows ) {
            var a = [];
            for ( var row=0, ien=rows.length ; row<ien ; row++ ) {
                a.push( _fnGetCellData( settings, rows[row], column ) );
            }
            return a;
        };
        
        
        var __column_selector = function ( settings, selector, opts )
        {
            var
                columns = settings.aoColumns,
                names = _pluck( columns, 'sName' ),
                nodes = _pluck( columns, 'nTh' );
        
            var run = function ( s ) {
                var selInt = _intVal( s );
        
                // Selector - all
                if ( s === '' ) {
                    return _range( columns.length );
                }
        
                // Selector - index
                if ( selInt !== null ) {
                    return [ selInt >= 0 ?
                        selInt : // Count from left
                        columns.length + selInt // Count from right (+ because its a negative value)
                    ];
                }
        
                // Selector = function
                if ( typeof s === 'function' ) {
                    var rows = _selector_row_indexes( settings, opts );
        
                    return $.map( columns, function (col, idx) {
                        return s(
                                idx,
                                __columnData( settings, idx, 0, 0, rows ),
                                nodes[ idx ]
                            ) ? idx : null;
                    } );
                }
        
                // jQuery or string selector
                var match = typeof s === 'string' ?
                    s.match( __re_column_selector ) :
                    '';
        
                if ( match ) {
                    switch( match[2] ) {
                        case 'visIdx':
                        case 'visible':
                            var idx = parseInt( match[1], 10 );
                            // Visible index given, convert to column index
                            if ( idx < 0 ) {
                                // Counting from the right
                                var visColumns = $.map( columns, function (col,i) {
                                    return col.bVisible ? i : null;
                                } );
                                return [ visColumns[ visColumns.length + idx ] ];
                            }
                            // Counting from the left
                            return [ _fnVisibleToColumnIndex( settings, idx ) ];
        
                        case 'name':
                            // match by name. `names` is column index complete and in order
                            return $.map( names, function (name, i) {
                                return name === match[1] ? i : null;
                            } );
        
                        default:
                            return [];
                    }
                }
        
                // Cell in the table body
                if ( s.nodeName && s._DT_CellIndex ) {
                    return [ s._DT_CellIndex.column ];
                }
        
                // jQuery selector on the TH elements for the columns
                var jqResult = $( nodes )
                    .filter( s )
                    .map( function () {
                        return $.inArray( this, nodes ); // `nodes` is column index complete and in order
                    } )
                    .toArray();
        
                if ( jqResult.length || ! s.nodeName ) {
                    return jqResult;
                }
        
                // Otherwise a node which might have a `dt-column` data attribute, or be
                // a child or such an element
                var host = $(s).closest('*[data-dt-column]');
                return host.length ?
                    [ host.data('dt-column') ] :
                    [];
            };
        
            return _selector_run( 'column', selector, run, settings, opts );
        };
        
        
        var __setColumnVis = function ( settings, column, vis ) {
            var
                cols = settings.aoColumns,
                col  = cols[ column ],
                data = settings.aoData,
                row, cells, i, ien, tr;
        
            // Get
            if ( vis === undefined ) {
                return col.bVisible;
            }
        
            // Set
            // No change
            if ( col.bVisible === vis ) {
                return;
            }
        
            if ( vis ) {
                // Insert column
                // Need to decide if we should use appendChild or insertBefore
                var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );
        
                for ( i=0, ien=data.length ; i<ien ; i++ ) {
                    tr = data[i].nTr;
                    cells = data[i].anCells;
        
                    if ( tr ) {
                        // insertBefore can act like appendChild if 2nd arg is null
                        tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );
                    }
                }
            }
            else {
                // Remove column
                $( _pluck( settings.aoData, 'anCells', column ) ).detach();
            }
        
            // Common actions
            col.bVisible = vis;
        };
        
        
        _api_register( 'columns()', function ( selector, opts ) {
            // argument shifting
            if ( selector === undefined ) {
                selector = '';
            }
            else if ( $.isPlainObject( selector ) ) {
                opts = selector;
                selector = '';
            }
        
            opts = _selector_opts( opts );
        
            var inst = this.iterator( 'table', function ( settings ) {
                return __column_selector( settings, selector, opts );
            }, 1 );
        
            // Want argument shifting here and in _row_selector?
            inst.selector.cols = selector;
            inst.selector.opts = opts;
        
            return inst;
        } );
        
        _api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {
            return this.iterator( 'column', function ( settings, column ) {
                return settings.aoColumns[column].nTh;
            }, 1 );
        } );
        
        _api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {
            return this.iterator( 'column', function ( settings, column ) {
                return settings.aoColumns[column].nTf;
            }, 1 );
        } );
        
        _api_registerPlural( 'columns().data()', 'column().data()', function () {
            return this.iterator( 'column-rows', __columnData, 1 );
        } );
        
        _api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {
            return this.iterator( 'column', function ( settings, column ) {
                return settings.aoColumns[column].mData;
            }, 1 );
        } );
        
        _api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {
            return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
                return _pluck_order( settings.aoData, rows,
                    type === 'search' ? '_aFilterData' : '_aSortData', column
                );
            }, 1 );
        } );
        
        _api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {
            return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
                return _pluck_order( settings.aoData, rows, 'anCells', column ) ;
            }, 1 );
        } );
        
        _api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {
            var that = this;
            var ret = this.iterator( 'column', function ( settings, column ) {
                if ( vis === undefined ) {
                    return settings.aoColumns[ column ].bVisible;
                } // else
                __setColumnVis( settings, column, vis );
            } );
        
            // Group the column visibility changes
            if ( vis !== undefined ) {
                this.iterator( 'table', function ( settings ) {
                    // Redraw the header after changes
                    _fnDrawHead( settings, settings.aoHeader );
                    _fnDrawHead( settings, settings.aoFooter );
            
                    // Update colspan for no records display. Child rows and extensions will use their own
                    // listeners to do this - only need to update the empty table item here
                    if ( ! settings.aiDisplay.length ) {
                        $(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));
                    }
            
                    _fnSaveState( settings );
        
                    // Second loop once the first is done for events
                    that.iterator( 'column', function ( settings, column ) {
                        _fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );
                    } );
        
                    if ( calc === undefined || calc ) {
                        that.columns.adjust();
                    }
                });
            }
        
            return ret;
        } );
        
        _api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {
            return this.iterator( 'column', function ( settings, column ) {
                return type === 'visible' ?
                    _fnColumnIndexToVisible( settings, column ) :
                    column;
            }, 1 );
        } );
        
        _api_register( 'columns.adjust()', function () {
            return this.iterator( 'table', function ( settings ) {
                _fnAdjustColumnSizing( settings );
            }, 1 );
        } );
        
        _api_register( 'column.index()', function ( type, idx ) {
            if ( this.context.length !== 0 ) {
                var ctx = this.context[0];
        
                if ( type === 'fromVisible' || type === 'toData' ) {
                    return _fnVisibleToColumnIndex( ctx, idx );
                }
                else if ( type === 'fromData' || type === 'toVisible' ) {
                    return _fnColumnIndexToVisible( ctx, idx );
                }
            }
        } );
        
        _api_register( 'column()', function ( selector, opts ) {
            return _selector_first( this.columns( selector, opts ) );
        } );
        
        var __cell_selector = function ( settings, selector, opts )
        {
            var data = settings.aoData;
            var rows = _selector_row_indexes( settings, opts );
            var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );
            var allCells = $(_flatten( [], cells ));
            var row;
            var columns = settings.aoColumns.length;
            var a, i, ien, j, o, host;
        
            var run = function ( s ) {
                var fnSelector = typeof s === 'function';
        
                if ( s === null || s === undefined || fnSelector ) {
                    // All cells and function selectors
                    a = [];
        
                    for ( i=0, ien=rows.length ; i<ien ; i++ ) {
                        row = rows[i];
        
                        for ( j=0 ; j<columns ; j++ ) {
                            o = {
                                row: row,
                                column: j
                            };
        
                            if ( fnSelector ) {
                                // Selector - function
                                host = data[ row ];
        
                                if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {
                                    a.push( o );
                                }
                            }
                            else {
                                // Selector - all
                                a.push( o );
                            }
                        }
                    }
        
                    return a;
                }
                
                // Selector - index
                if ( $.isPlainObject( s ) ) {
                    // Valid cell index and its in the array of selectable rows
                    return s.column !== undefined && s.row !== undefined && $.inArray( s.row, rows ) !== -1 ?
                        [s] :
                        [];
                }
        
                // Selector - jQuery filtered cells
                var jqResult = allCells
                    .filter( s )
                    .map( function (i, el) {
                        return { // use a new object, in case someone changes the values
                            row:    el._DT_CellIndex.row,
                            column: el._DT_CellIndex.column
                         };
                    } )
                    .toArray();
        
                if ( jqResult.length || ! s.nodeName ) {
                    return jqResult;
                }
        
                // Otherwise the selector is a node, and there is one last option - the
                // element might be a child of an element which has dt-row and dt-column
                // data attributes
                host = $(s).closest('*[data-dt-row]');
                return host.length ?
                    [ {
                        row: host.data('dt-row'),
                        column: host.data('dt-column')
                    } ] :
                    [];
            };
        
            return _selector_run( 'cell', selector, run, settings, opts );
        };
        
        
        
        
        _api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {
            // Argument shifting
            if ( $.isPlainObject( rowSelector ) ) {
                // Indexes
                if ( rowSelector.row === undefined ) {
                    // Selector options in first parameter
                    opts = rowSelector;
                    rowSelector = null;
                }
                else {
                    // Cell index objects in first parameter
                    opts = columnSelector;
                    columnSelector = null;
                }
            }
            if ( $.isPlainObject( columnSelector ) ) {
                opts = columnSelector;
                columnSelector = null;
            }
        
            // Cell selector
            if ( columnSelector === null || columnSelector === undefined ) {
                return this.iterator( 'table', function ( settings ) {
                    return __cell_selector( settings, rowSelector, _selector_opts( opts ) );
                } );
            }
        
            // The default built in options need to apply to row and columns
            var internalOpts = opts ? {
                page: opts.page,
                order: opts.order,
                search: opts.search
            } : {};
        
            // Row + column selector
            var columns = this.columns( columnSelector, internalOpts );
            var rows = this.rows( rowSelector, internalOpts );
            var i, ien, j, jen;
        
            var cellsNoOpts = this.iterator( 'table', function ( settings, idx ) {
                var a = [];
        
                for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {
                    for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {
                        a.push( {
                            row:    rows[idx][i],
                            column: columns[idx][j]
                        } );
                    }
                }
        
                return a;
            }, 1 );
        
            // There is currently only one extension which uses a cell selector extension
            // It is a _major_ performance drag to run this if it isn't needed, so this is
            // an extension specific check at the moment
            var cells = opts && opts.selected ?
                this.cells( cellsNoOpts, opts ) :
                cellsNoOpts;
        
            $.extend( cells.selector, {
                cols: columnSelector,
                rows: rowSelector,
                opts: opts
            } );
        
            return cells;
        } );
        
        
        _api_registerPlural( 'cells().nodes()', 'cell().node()', function () {
            return this.iterator( 'cell', function ( settings, row, column ) {
                var data = settings.aoData[ row ];
        
                return data && data.anCells ?
                    data.anCells[ column ] :
                    undefined;
            }, 1 );
        } );
        
        
        _api_register( 'cells().data()', function () {
            return this.iterator( 'cell', function ( settings, row, column ) {
                return _fnGetCellData( settings, row, column );
            }, 1 );
        } );
        
        
        _api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {
            type = type === 'search' ? '_aFilterData' : '_aSortData';
        
            return this.iterator( 'cell', function ( settings, row, column ) {
                return settings.aoData[ row ][ type ][ column ];
            }, 1 );
        } );
        
        
        _api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {
            return this.iterator( 'cell', function ( settings, row, column ) {
                return _fnGetCellData( settings, row, column, type );
            }, 1 );
        } );
        
        
        _api_registerPlural( 'cells().indexes()', 'cell().index()', function () {
            return this.iterator( 'cell', function ( settings, row, column ) {
                return {
                    row: row,
                    column: column,
                    columnVisible: _fnColumnIndexToVisible( settings, column )
                };
            }, 1 );
        } );
        
        
        _api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {
            return this.iterator( 'cell', function ( settings, row, column ) {
                _fnInvalidate( settings, row, src, column );
            } );
        } );
        
        
        
        _api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {
            return _selector_first( this.cells( rowSelector, columnSelector, opts ) );
        } );
        
        
        _api_register( 'cell().data()', function ( data ) {
            var ctx = this.context;
            var cell = this[0];
        
            if ( data === undefined ) {
                // Get
                return ctx.length && cell.length ?
                    _fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :
                    undefined;
            }
        
            // Set
            _fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );
            _fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );
        
            return this;
        } );
        
        
        
        /**
         * Get current ordering (sorting) that has been applied to the table.
         *
         * @returns {array} 2D array containing the sorting information for the first
         *   table in the current context. Each element in the parent array represents
         *   a column being sorted upon (i.e. multi-sorting with two columns would have
         *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
         *   the column index that the sorting condition applies to, the second is the
         *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
         *   index of the sorting order from the `column.sorting` initialisation array.
         *//**
         * Set the ordering for the table.
         *
         * @param {integer} order Column index to sort upon.
         * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
         * @returns {DataTables.Api} this
         *//**
         * Set the ordering for the table.
         *
         * @param {array} order 1D array of sorting information to be applied.
         * @param {array} [...] Optional additional sorting conditions
         * @returns {DataTables.Api} this
         *//**
         * Set the ordering for the table.
         *
         * @param {array} order 2D array of sorting information to be applied.
         * @returns {DataTables.Api} this
         */
        _api_register( 'order()', function ( order, dir ) {
            var ctx = this.context;
        
            if ( order === undefined ) {
                // get
                return ctx.length !== 0 ?
                    ctx[0].aaSorting :
                    undefined;
            }
        
            // set
            if ( typeof order === 'number' ) {
                // Simple column / direction passed in
                order = [ [ order, dir ] ];
            }
            else if ( order.length && ! Array.isArray( order[0] ) ) {
                // Arguments passed in (list of 1D arrays)
                order = Array.prototype.slice.call( arguments );
            }
            // otherwise a 2D array was passed in
        
            return this.iterator( 'table', function ( settings ) {
                settings.aaSorting = order.slice();
            } );
        } );
        
        
        /**
         * Attach a sort listener to an element for a given column
         *
         * @param {node|jQuery|string} node Identifier for the element(s) to attach the
         *   listener to. This can take the form of a single DOM node, a jQuery
         *   collection of nodes or a jQuery selector which will identify the node(s).
         * @param {integer} column the column that a click on this node will sort on
         * @param {function} [callback] callback function when sort is run
         * @returns {DataTables.Api} this
         */
        _api_register( 'order.listener()', function ( node, column, callback ) {
            return this.iterator( 'table', function ( settings ) {
                _fnSortAttachListener( settings, node, column, callback );
            } );
        } );
        
        
        _api_register( 'order.fixed()', function ( set ) {
            if ( ! set ) {
                var ctx = this.context;
                var fixed = ctx.length ?
                    ctx[0].aaSortingFixed :
                    undefined;
        
                return Array.isArray( fixed ) ?
                    { pre: fixed } :
                    fixed;
            }
        
            return this.iterator( 'table', function ( settings ) {
                settings.aaSortingFixed = $.extend( true, {}, set );
            } );
        } );
        
        
        // Order by the selected column(s)
        _api_register( [
            'columns().order()',
            'column().order()'
        ], function ( dir ) {
            var that = this;
        
            return this.iterator( 'table', function ( settings, i ) {
                var sort = [];
        
                $.each( that[i], function (j, col) {
                    sort.push( [ col, dir ] );
                } );
        
                settings.aaSorting = sort;
            } );
        } );
        
        
        
        _api_register( 'search()', function ( input, regex, smart, caseInsen ) {
            var ctx = this.context;
        
            if ( input === undefined ) {
                // get
                return ctx.length !== 0 ?
                    ctx[0].oPreviousSearch.sSearch :
                    undefined;
            }
        
            // set
            return this.iterator( 'table', function ( settings ) {
                if ( ! settings.oFeatures.bFilter ) {
                    return;
                }
        
                _fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {
                    "sSearch": input+"",
                    "bRegex":  regex === null ? false : regex,
                    "bSmart":  smart === null ? true  : smart,
                    "bCaseInsensitive": caseInsen === null ? true : caseInsen
                } ), 1 );
            } );
        } );
        
        
        _api_registerPlural(
            'columns().search()',
            'column().search()',
            function ( input, regex, smart, caseInsen ) {
                return this.iterator( 'column', function ( settings, column ) {
                    var preSearch = settings.aoPreSearchCols;
        
                    if ( input === undefined ) {
                        // get
                        return preSearch[ column ].sSearch;
                    }
        
                    // set
                    if ( ! settings.oFeatures.bFilter ) {
                        return;
                    }
        
                    $.extend( preSearch[ column ], {
                        "sSearch": input+"",
                        "bRegex":  regex === null ? false : regex,
                        "bSmart":  smart === null ? true  : smart,
                        "bCaseInsensitive": caseInsen === null ? true : caseInsen
                    } );
        
                    _fnFilterComplete( settings, settings.oPreviousSearch, 1 );
                } );
            }
        );
        
        /*
         * State API methods
         */
        
        _api_register( 'state()', function () {
            return this.context.length ?
                this.context[0].oSavedState :
                null;
        } );
        
        
        _api_register( 'state.clear()', function () {
            return this.iterator( 'table', function ( settings ) {
                // Save an empty object
                settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );
            } );
        } );
        
        
        _api_register( 'state.loaded()', function () {
            return this.context.length ?
                this.context[0].oLoadedState :
                null;
        } );
        
        
        _api_register( 'state.save()', function () {
            return this.iterator( 'table', function ( settings ) {
                _fnSaveState( settings );
            } );
        } );
        
        
        
        /**
         * Set the jQuery or window object to be used by DataTables
         *
         * @param {*} module Library / container object
         * @param {string} [type] Library or container type `lib`, `win` or `datetime`.
         *   If not provided, automatic detection is attempted.
         */
        DataTable.use = function (module, type) {
            if (type === 'lib' || module.fn) {
                $ = module;
            }
            else if (type == 'win' || module.document) {
                window = module;
                document = module.document;
            }
            else if (type === 'datetime' || module.type === 'DateTime') {
                DataTable.DateTime = module;
            }
        }
        
        /**
         * CommonJS factory function pass through. This will check if the arguments
         * given are a window object or a jQuery object. If so they are set
         * accordingly.
         * @param {*} root Window
         * @param {*} jq jQUery
         * @returns {boolean} Indicator
         */
        DataTable.factory = function (root, jq) {
            var is = false;
        
            // Test if the first parameter is a window object
            if (root && root.document) {
                window = root;
                document = root.document;
            }
        
            // Test if the second parameter is a jQuery object
            if (jq && jq.fn && jq.fn.jquery) {
                $ = jq;
                is = true;
            }
        
            return is;
        }
        
        /**
         * Provide a common method for plug-ins to check the version of DataTables being
         * used, in order to ensure compatibility.
         *
         *  @param {string} version Version string to check for, in the format "X.Y.Z".
         *    Note that the formats "X" and "X.Y" are also acceptable.
         *  @returns {boolean} true if this version of DataTables is greater or equal to
         *    the required version, or false if this version of DataTales is not
         *    suitable
         *  @static
         *  @dtopt API-Static
         *
         *  @example
         *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
         */
        DataTable.versionCheck = DataTable.fnVersionCheck = function( version )
        {
            var aThis = DataTable.version.split('.');
            var aThat = version.split('.');
            var iThis, iThat;
        
            for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {
                iThis = parseInt( aThis[i], 10 ) || 0;
                iThat = parseInt( aThat[i], 10 ) || 0;
        
                // Parts are the same, keep comparing
                if (iThis === iThat) {
                    continue;
                }
        
                // Parts are different, return immediately
                return iThis > iThat;
            }
        
            return true;
        };
        
        
        /**
         * Check if a `<table>` node is a DataTable table already or not.
         *
         *  @param {node|jquery|string} table Table node, jQuery object or jQuery
         *      selector for the table to test. Note that if more than more than one
         *      table is passed on, only the first will be checked
         *  @returns {boolean} true the table given is a DataTable, or false otherwise
         *  @static
         *  @dtopt API-Static
         *
         *  @example
         *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
         *      $('#example').dataTable();
         *    }
         */
        DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )
        {
            var t = $(table).get(0);
            var is = false;
        
            if ( table instanceof DataTable.Api ) {
                return true;
            }
        
            $.each( DataTable.settings, function (i, o) {
                var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
                var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;
        
                if ( o.nTable === t || head === t || foot === t ) {
                    is = true;
                }
            } );
        
            return is;
        };
        
        
        /**
         * Get all DataTable tables that have been initialised - optionally you can
         * select to get only currently visible tables.
         *
         *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
         *    or visible tables only.
         *  @returns {array} Array of `table` nodes (not DataTable instances) which are
         *    DataTables
         *  @static
         *  @dtopt API-Static
         *
         *  @example
         *    $.each( $.fn.dataTable.tables(true), function () {
         *      $(table).DataTable().columns.adjust();
         *    } );
         */
        DataTable.tables = DataTable.fnTables = function ( visible )
        {
            var api = false;
        
            if ( $.isPlainObject( visible ) ) {
                api = visible.api;
                visible = visible.visible;
            }
        
            var a = $.map( DataTable.settings, function (o) {
                if ( !visible || (visible && $(o.nTable).is(':visible')) ) {
                    return o.nTable;
                }
            } );
        
            return api ?
                new _Api( a ) :
                a;
        };
        
        
        /**
         * Convert from camel case parameters to Hungarian notation. This is made public
         * for the extensions to provide the same ability as DataTables core to accept
         * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
         * parameters.
         *
         *  @param {object} src The model object which holds all parameters that can be
         *    mapped.
         *  @param {object} user The object to convert from camel case to Hungarian.
         *  @param {boolean} force When set to `true`, properties which already have a
         *    Hungarian value in the `user` object will be overwritten. Otherwise they
         *    won't be.
         */
        DataTable.camelToHungarian = _fnCamelToHungarian;
        
        
        
        /**
         *
         */
        _api_register( '$()', function ( selector, opts ) {
            var
                rows   = this.rows( opts ).nodes(), // Get all rows
                jqRows = $(rows);
        
            return $( [].concat(
                jqRows.filter( selector ).toArray(),
                jqRows.find( selector ).toArray()
            ) );
        } );
        
        
        // jQuery functions to operate on the tables
        $.each( [ 'on', 'one', 'off' ], function (i, key) {
            _api_register( key+'()', function ( /* event, handler */ ) {
                var args = Array.prototype.slice.call(arguments);
        
                // Add the `dt` namespace automatically if it isn't already present
                args[0] = $.map( args[0].split( /\s/ ), function ( e ) {
                    return ! e.match(/\.dt\b/) ?
                        e+'.dt' :
                        e;
                    } ).join( ' ' );
        
                var inst = $( this.tables().nodes() );
                inst[key].apply( inst, args );
                return this;
            } );
        } );
        
        
        _api_register( 'clear()', function () {
            return this.iterator( 'table', function ( settings ) {
                _fnClearTable( settings );
            } );
        } );
        
        
        _api_register( 'settings()', function () {
            return new _Api( this.context, this.context );
        } );
        
        
        _api_register( 'init()', function () {
            var ctx = this.context;
            return ctx.length ? ctx[0].oInit : null;
        } );
        
        
        _api_register( 'data()', function () {
            return this.iterator( 'table', function ( settings ) {
                return _pluck( settings.aoData, '_aData' );
            } ).flatten();
        } );
        
        
        _api_register( 'destroy()', function ( remove ) {
            remove = remove || false;
        
            return this.iterator( 'table', function ( settings ) {
                var classes   = settings.oClasses;
                var table     = settings.nTable;
                var tbody     = settings.nTBody;
                var thead     = settings.nTHead;
                var tfoot     = settings.nTFoot;
                var jqTable   = $(table);
                var jqTbody   = $(tbody);
                var jqWrapper = $(settings.nTableWrapper);
                var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );
                var i, ien;
        
                // Flag to note that the table is currently being destroyed - no action
                // should be taken
                settings.bDestroying = true;
        
                // Fire off the destroy callbacks for plug-ins etc
                _fnCallbackFire( settings, "aoDestroyCallback", "destroy", [settings] );
        
                // If not being removed from the document, make all columns visible
                if ( ! remove ) {
                    new _Api( settings ).columns().visible( true );
                }
        
                // Blitz all `DT` namespaced events (these are internal events, the
                // lowercase, `dt` events are user subscribed and they are responsible
                // for removing them
                jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');
                $(window).off('.DT-'+settings.sInstance);
        
                // When scrolling we had to break the table up - restore it
                if ( table != thead.parentNode ) {
                    jqTable.children('thead').detach();
                    jqTable.append( thead );
                }
        
                if ( tfoot && table != tfoot.parentNode ) {
                    jqTable.children('tfoot').detach();
                    jqTable.append( tfoot );
                }
        
                settings.aaSorting = [];
                settings.aaSortingFixed = [];
                _fnSortingClasses( settings );
        
                $( rows ).removeClass( settings.asStripeClasses.join(' ') );
        
                $('th, td', thead).removeClass( classes.sSortable+' '+
                    classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone
                );
        
                // Add the TR elements back into the table in their original order
                jqTbody.children().detach();
                jqTbody.append( rows );
        
                var orig = settings.nTableWrapper.parentNode;
        
                // Remove the DataTables generated nodes, events and classes
                var removedMethod = remove ? 'remove' : 'detach';
                jqTable[ removedMethod ]();
                jqWrapper[ removedMethod ]();
        
                // If we need to reattach the table to the document
                if ( ! remove && orig ) {
                    // insertBefore acts like appendChild if !arg[1]
                    orig.insertBefore( table, settings.nTableReinsertBefore );
        
                    // Restore the width of the original table - was read from the style property,
                    // so we can restore directly to that
                    jqTable
                        .css( 'width', settings.sDestroyWidth )
                        .removeClass( classes.sTable );
        
                    // If the were originally stripe classes - then we add them back here.
                    // Note this is not fool proof (for example if not all rows had stripe
                    // classes - but it's a good effort without getting carried away
                    ien = settings.asDestroyStripes.length;
        
                    if ( ien ) {
                        jqTbody.children().each( function (i) {
                            $(this).addClass( settings.asDestroyStripes[i % ien] );
                        } );
                    }
                }
        
                /* Remove the settings object from the settings array */
                var idx = $.inArray( settings, DataTable.settings );
                if ( idx !== -1 ) {
                    DataTable.settings.splice( idx, 1 );
                }
            } );
        } );
        
        
        // Add the `every()` method for rows, columns and cells in a compact form
        $.each( [ 'column', 'row', 'cell' ], function ( i, type ) {
            _api_register( type+'s().every()', function ( fn ) {
                var opts = this.selector.opts;
                var api = this;
        
                return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {
                    // Rows and columns:
                    //  arg1 - index
                    //  arg2 - table counter
                    //  arg3 - loop counter
                    //  arg4 - undefined
                    // Cells:
                    //  arg1 - row index
                    //  arg2 - column index
                    //  arg3 - table counter
                    //  arg4 - loop counter
                    fn.call(
                        api[ type ](
                            arg1,
                            type==='cell' ? arg2 : opts,
                            type==='cell' ? opts : undefined
                        ),
                        arg1, arg2, arg3, arg4
                    );
                } );
            } );
        } );
        
        
        // i18n method for extensions to be able to use the language object from the
        // DataTable
        _api_register( 'i18n()', function ( token, def, plural ) {
            var ctx = this.context[0];
            var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );
        
            if ( resolved === undefined ) {
                resolved = def;
            }
        
            if ( plural !== undefined && $.isPlainObject( resolved ) ) {
                resolved = resolved[ plural ] !== undefined ?
                    resolved[ plural ] :
                    resolved._;
            }
        
            return typeof resolved === 'string'
                ? resolved.replace( '%d', plural ) // nb: plural might be undefined,
                : resolved;
        } );	
        /**
         * Version string for plug-ins to check compatibility. Allowed format is
         * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
         * only for non-release builds. See https://semver.org/ for more information.
         *  @member
         *  @type string
         *  @default Version number
         */
        DataTable.version = "1.13.11";
        
        /**
         * Private data store, containing all of the settings objects that are
         * created for the tables on a given page.
         *
         * Note that the `DataTable.settings` object is aliased to
         * `jQuery.fn.dataTableExt` through which it may be accessed and
         * manipulated, or `jQuery.fn.dataTable.settings`.
         *  @member
         *  @type array
         *  @default []
         *  @private
         */
        DataTable.settings = [];
        
        /**
         * Object models container, for the various models that DataTables has
         * available to it. These models define the objects that are used to hold
         * the active state and configuration of the table.
         *  @namespace
         */
        DataTable.models = {};
        
        
        
        /**
         * Template object for the way in which DataTables holds information about
         * search information for the global filter and individual column filters.
         *  @namespace
         */
        DataTable.models.oSearch = {
            /**
             * Flag to indicate if the filtering should be case insensitive or not
             *  @type boolean
             *  @default true
             */
            "bCaseInsensitive": true,
        
            /**
             * Applied search term
             *  @type string
             *  @default <i>Empty string</i>
             */
            "sSearch": "",
        
            /**
             * Flag to indicate if the search term should be interpreted as a
             * regular expression (true) or not (false) and therefore and special
             * regex characters escaped.
             *  @type boolean
             *  @default false
             */
            "bRegex": false,
        
            /**
             * Flag to indicate if DataTables is to use its smart filtering or not.
             *  @type boolean
             *  @default true
             */
            "bSmart": true,
        
            /**
             * Flag to indicate if DataTables should only trigger a search when
             * the return key is pressed.
             *  @type boolean
             *  @default false
             */
            "return": false
        };
        
        
        
        
        /**
         * Template object for the way in which DataTables holds information about
         * each individual row. This is the object format used for the settings
         * aoData array.
         *  @namespace
         */
        DataTable.models.oRow = {
            /**
             * TR element for the row
             *  @type node
             *  @default null
             */
            "nTr": null,
        
            /**
             * Array of TD elements for each row. This is null until the row has been
             * created.
             *  @type array nodes
             *  @default []
             */
            "anCells": null,
        
            /**
             * Data object from the original data source for the row. This is either
             * an array if using the traditional form of DataTables, or an object if
             * using mData options. The exact type will depend on the passed in
             * data from the data source, or will be an array if using DOM a data
             * source.
             *  @type array|object
             *  @default []
             */
            "_aData": [],
        
            /**
             * Sorting data cache - this array is ostensibly the same length as the
             * number of columns (although each index is generated only as it is
             * needed), and holds the data that is used for sorting each column in the
             * row. We do this cache generation at the start of the sort in order that
             * the formatting of the sort data need be done only once for each cell
             * per sort. This array should not be read from or written to by anything
             * other than the master sorting methods.
             *  @type array
             *  @default null
             *  @private
             */
            "_aSortData": null,
        
            /**
             * Per cell filtering data cache. As per the sort data cache, used to
             * increase the performance of the filtering in DataTables
             *  @type array
             *  @default null
             *  @private
             */
            "_aFilterData": null,
        
            /**
             * Filtering data cache. This is the same as the cell filtering cache, but
             * in this case a string rather than an array. This is easily computed with
             * a join on `_aFilterData`, but is provided as a cache so the join isn't
             * needed on every search (memory traded for performance)
             *  @type array
             *  @default null
             *  @private
             */
            "_sFilterRow": null,
        
            /**
             * Cache of the class name that DataTables has applied to the row, so we
             * can quickly look at this variable rather than needing to do a DOM check
             * on className for the nTr property.
             *  @type string
             *  @default <i>Empty string</i>
             *  @private
             */
            "_sRowStripe": "",
        
            /**
             * Denote if the original data source was from the DOM, or the data source
             * object. This is used for invalidating data, so DataTables can
             * automatically read data from the original source, unless uninstructed
             * otherwise.
             *  @type string
             *  @default null
             *  @private
             */
            "src": null,
        
            /**
             * Index in the aoData array. This saves an indexOf lookup when we have the
             * object, but want to know the index
             *  @type integer
             *  @default -1
             *  @private
             */
            "idx": -1
        };
        
        
        /**
         * Template object for the column information object in DataTables. This object
         * is held in the settings aoColumns array and contains all the information that
         * DataTables needs about each individual column.
         *
         * Note that this object is related to {@link DataTable.defaults.column}
         * but this one is the internal data store for DataTables's cache of columns.
         * It should NOT be manipulated outside of DataTables. Any configuration should
         * be done through the initialisation options.
         *  @namespace
         */
        DataTable.models.oColumn = {
            /**
             * Column index. This could be worked out on-the-fly with $.inArray, but it
             * is faster to just hold it as a variable
             *  @type integer
             *  @default null
             */
            "idx": null,
        
            /**
             * A list of the columns that sorting should occur on when this column
             * is sorted. That this property is an array allows multi-column sorting
             * to be defined for a column (for example first name / last name columns
             * would benefit from this). The values are integers pointing to the
             * columns to be sorted on (typically it will be a single integer pointing
             * at itself, but that doesn't need to be the case).
             *  @type array
             */
            "aDataSort": null,
        
            /**
             * Define the sorting directions that are applied to the column, in sequence
             * as the column is repeatedly sorted upon - i.e. the first value is used
             * as the sorting direction when the column if first sorted (clicked on).
             * Sort it again (click again) and it will move on to the next index.
             * Repeat until loop.
             *  @type array
             */
            "asSorting": null,
        
            /**
             * Flag to indicate if the column is searchable, and thus should be included
             * in the filtering or not.
             *  @type boolean
             */
            "bSearchable": null,
        
            /**
             * Flag to indicate if the column is sortable or not.
             *  @type boolean
             */
            "bSortable": null,
        
            /**
             * Flag to indicate if the column is currently visible in the table or not
             *  @type boolean
             */
            "bVisible": null,
        
            /**
             * Store for manual type assignment using the `column.type` option. This
             * is held in store so we can manipulate the column's `sType` property.
             *  @type string
             *  @default null
             *  @private
             */
            "_sManualType": null,
        
            /**
             * Flag to indicate if HTML5 data attributes should be used as the data
             * source for filtering or sorting. True is either are.
             *  @type boolean
             *  @default false
             *  @private
             */
            "_bAttrSrc": false,
        
            /**
             * Developer definable function that is called whenever a cell is created (Ajax source,
             * etc) or processed for input (DOM source). This can be used as a compliment to mRender
             * allowing you to modify the DOM element (add background colour for example) when the
             * element is available.
             *  @type function
             *  @param {element} nTd The TD node that has been created
             *  @param {*} sData The Data for the cell
             *  @param {array|object} oData The data for the whole row
             *  @param {int} iRow The row index for the aoData data store
             *  @default null
             */
            "fnCreatedCell": null,
        
            /**
             * Function to get data from a cell in a column. You should <b>never</b>
             * access data directly through _aData internally in DataTables - always use
             * the method attached to this property. It allows mData to function as
             * required. This function is automatically assigned by the column
             * initialisation method
             *  @type function
             *  @param {array|object} oData The data array/object for the array
             *    (i.e. aoData[]._aData)
             *  @param {string} sSpecific The specific data type you want to get -
             *    'display', 'type' 'filter' 'sort'
             *  @returns {*} The data for the cell from the given row's data
             *  @default null
             */
            "fnGetData": null,
        
            /**
             * Function to set data for a cell in the column. You should <b>never</b>
             * set the data directly to _aData internally in DataTables - always use
             * this method. It allows mData to function as required. This function
             * is automatically assigned by the column initialisation method
             *  @type function
             *  @param {array|object} oData The data array/object for the array
             *    (i.e. aoData[]._aData)
             *  @param {*} sValue Value to set
             *  @default null
             */
            "fnSetData": null,
        
            /**
             * Property to read the value for the cells in the column from the data
             * source array / object. If null, then the default content is used, if a
             * function is given then the return from the function is used.
             *  @type function|int|string|null
             *  @default null
             */
            "mData": null,
        
            /**
             * Partner property to mData which is used (only when defined) to get
             * the data - i.e. it is basically the same as mData, but without the
             * 'set' option, and also the data fed to it is the result from mData.
             * This is the rendering method to match the data method of mData.
             *  @type function|int|string|null
             *  @default null
             */
            "mRender": null,
        
            /**
             * Unique header TH/TD element for this column - this is what the sorting
             * listener is attached to (if sorting is enabled.)
             *  @type node
             *  @default null
             */
            "nTh": null,
        
            /**
             * Unique footer TH/TD element for this column (if there is one). Not used
             * in DataTables as such, but can be used for plug-ins to reference the
             * footer for each column.
             *  @type node
             *  @default null
             */
            "nTf": null,
        
            /**
             * The class to apply to all TD elements in the table's TBODY for the column
             *  @type string
             *  @default null
             */
            "sClass": null,
        
            /**
             * When DataTables calculates the column widths to assign to each column,
             * it finds the longest string in each column and then constructs a
             * temporary table and reads the widths from that. The problem with this
             * is that "mmm" is much wider then "iiii", but the latter is a longer
             * string - thus the calculation can go wrong (doing it properly and putting
             * it into an DOM object and measuring that is horribly(!) slow). Thus as
             * a "work around" we provide this option. It will append its value to the
             * text that is found to be the longest string for the column - i.e. padding.
             *  @type string
             */
            "sContentPadding": null,
        
            /**
             * Allows a default value to be given for a column's data, and will be used
             * whenever a null data source is encountered (this can be because mData
             * is set to null, or because the data source itself is null).
             *  @type string
             *  @default null
             */
            "sDefaultContent": null,
        
            /**
             * Name for the column, allowing reference to the column by name as well as
             * by index (needs a lookup to work by name).
             *  @type string
             */
            "sName": null,
        
            /**
             * Custom sorting data type - defines which of the available plug-ins in
             * afnSortData the custom sorting will use - if any is defined.
             *  @type string
             *  @default std
             */
            "sSortDataType": 'std',
        
            /**
             * Class to be applied to the header element when sorting on this column
             *  @type string
             *  @default null
             */
            "sSortingClass": null,
        
            /**
             * Class to be applied to the header element when sorting on this column -
             * when jQuery UI theming is used.
             *  @type string
             *  @default null
             */
            "sSortingClassJUI": null,
        
            /**
             * Title of the column - what is seen in the TH element (nTh).
             *  @type string
             */
            "sTitle": null,
        
            /**
             * Column sorting and filtering type
             *  @type string
             *  @default null
             */
            "sType": null,
        
            /**
             * Width of the column
             *  @type string
             *  @default null
             */
            "sWidth": null,
        
            /**
             * Width of the column when it was first "encountered"
             *  @type string
             *  @default null
             */
            "sWidthOrig": null
        };
        
        
        /*
         * Developer note: The properties of the object below are given in Hungarian
         * notation, that was used as the interface for DataTables prior to v1.10, however
         * from v1.10 onwards the primary interface is camel case. In order to avoid
         * breaking backwards compatibility utterly with this change, the Hungarian
         * version is still, internally the primary interface, but is is not documented
         * - hence the @name tags in each doc comment. This allows a Javascript function
         * to create a map from Hungarian notation to camel case (going the other direction
         * would require each property to be listed, which would add around 3K to the size
         * of DataTables, while this method is about a 0.5K hit).
         *
         * Ultimately this does pave the way for Hungarian notation to be dropped
         * completely, but that is a massive amount of work and will break current
         * installs (therefore is on-hold until v2).
         */
        
        /**
         * Initialisation options that can be given to DataTables at initialisation
         * time.
         *  @namespace
         */
        DataTable.defaults = {
            /**
             * An array of data to use for the table, passed in at initialisation which
             * will be used in preference to any data which is already in the DOM. This is
             * particularly useful for constructing tables purely in Javascript, for
             * example with a custom Ajax call.
             *  @type array
             *  @default null
             *
             *  @dtopt Option
             *  @name DataTable.defaults.data
             *
             *  @example
             *    // Using a 2D array data source
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "data": [
             *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
             *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
             *        ],
             *        "columns": [
             *          { "title": "Engine" },
             *          { "title": "Browser" },
             *          { "title": "Platform" },
             *          { "title": "Version" },
             *          { "title": "Grade" }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using an array of objects as a data source (`data`)
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "data": [
             *          {
             *            "engine":   "Trident",
             *            "browser":  "Internet Explorer 4.0",
             *            "platform": "Win 95+",
             *            "version":  4,
             *            "grade":    "X"
             *          },
             *          {
             *            "engine":   "Trident",
             *            "browser":  "Internet Explorer 5.0",
             *            "platform": "Win 95+",
             *            "version":  5,
             *            "grade":    "C"
             *          }
             *        ],
             *        "columns": [
             *          { "title": "Engine",   "data": "engine" },
             *          { "title": "Browser",  "data": "browser" },
             *          { "title": "Platform", "data": "platform" },
             *          { "title": "Version",  "data": "version" },
             *          { "title": "Grade",    "data": "grade" }
             *        ]
             *      } );
             *    } );
             */
            "aaData": null,
        
        
            /**
             * If ordering is enabled, then DataTables will perform a first pass sort on
             * initialisation. You can define which column(s) the sort is performed
             * upon, and the sorting direction, with this variable. The `sorting` array
             * should contain an array for each column to be sorted initially containing
             * the column's index and a direction string ('asc' or 'desc').
             *  @type array
             *  @default [[0,'asc']]
             *
             *  @dtopt Option
             *  @name DataTable.defaults.order
             *
             *  @example
             *    // Sort by 3rd column first, and then 4th column
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "order": [[2,'asc'], [3,'desc']]
             *      } );
             *    } );
             *
             *    // No initial sorting
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "order": []
             *      } );
             *    } );
             */
            "aaSorting": [[0,'asc']],
        
        
            /**
             * This parameter is basically identical to the `sorting` parameter, but
             * cannot be overridden by user interaction with the table. What this means
             * is that you could have a column (visible or hidden) which the sorting
             * will always be forced on first - any sorting after that (from the user)
             * will then be performed as required. This can be useful for grouping rows
             * together.
             *  @type array
             *  @default null
             *
             *  @dtopt Option
             *  @name DataTable.defaults.orderFixed
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "orderFixed": [[0,'asc']]
             *      } );
             *    } )
             */
            "aaSortingFixed": [],
        
        
            /**
             * DataTables can be instructed to load data to display in the table from a
             * Ajax source. This option defines how that Ajax call is made and where to.
             *
             * The `ajax` property has three different modes of operation, depending on
             * how it is defined. These are:
             *
             * * `string` - Set the URL from where the data should be loaded from.
             * * `object` - Define properties for `jQuery.ajax`.
             * * `function` - Custom data get function
             *
             * `string`
             * --------
             *
             * As a string, the `ajax` property simply defines the URL from which
             * DataTables will load data.
             *
             * `object`
             * --------
             *
             * As an object, the parameters in the object are passed to
             * [jQuery.ajax](https://api.jquery.com/jQuery.ajax/) allowing fine control
             * of the Ajax request. DataTables has a number of default parameters which
             * you can override using this option. Please refer to the jQuery
             * documentation for a full description of the options available, although
             * the following parameters provide additional options in DataTables or
             * require special consideration:
             *
             * * `data` - As with jQuery, `data` can be provided as an object, but it
             *   can also be used as a function to manipulate the data DataTables sends
             *   to the server. The function takes a single parameter, an object of
             *   parameters with the values that DataTables has readied for sending. An
             *   object may be returned which will be merged into the DataTables
             *   defaults, or you can add the items to the object that was passed in and
             *   not return anything from the function. This supersedes `fnServerParams`
             *   from DataTables 1.9-.
             *
             * * `dataSrc` - By default DataTables will look for the property `data` (or
             *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
             *   from an Ajax source or for server-side processing - this parameter
             *   allows that property to be changed. You can use Javascript dotted
             *   object notation to get a data source for multiple levels of nesting, or
             *   it my be used as a function. As a function it takes a single parameter,
             *   the JSON returned from the server, which can be manipulated as
             *   required, with the returned value being that used by DataTables as the
             *   data source for the table. This supersedes `sAjaxDataProp` from
             *   DataTables 1.9-.
             *
             * * `success` - Should not be overridden it is used internally in
             *   DataTables. To manipulate / transform the data returned by the server
             *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
             *
             * `function`
             * ----------
             *
             * As a function, making the Ajax call is left up to yourself allowing
             * complete control of the Ajax request. Indeed, if desired, a method other
             * than Ajax could be used to obtain the required data, such as Web storage
             * or an AIR database.
             *
             * The function is given four parameters and no return is required. The
             * parameters are:
             *
             * 1. _object_ - Data to send to the server
             * 2. _function_ - Callback function that must be executed when the required
             *    data has been obtained. That data should be passed into the callback
             *    as the only parameter
             * 3. _object_ - DataTables settings object for the table
             *
             * Note that this supersedes `fnServerData` from DataTables 1.9-.
             *
             *  @type string|object|function
             *  @default null
             *
             *  @dtopt Option
             *  @name DataTable.defaults.ajax
             *  @since 1.10.0
             *
             * @example
             *   // Get JSON data from a file via Ajax.
             *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
             *   $('#example').dataTable( {
             *     "ajax": "data.json"
             *   } );
             *
             * @example
             *   // Get JSON data from a file via Ajax, using `dataSrc` to change
             *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
             *   $('#example').dataTable( {
             *     "ajax": {
             *       "url": "data.json",
             *       "dataSrc": "tableData"
             *     }
             *   } );
             *
             * @example
             *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
             *   // from a plain array rather than an array in an object
             *   $('#example').dataTable( {
             *     "ajax": {
             *       "url": "data.json",
             *       "dataSrc": ""
             *     }
             *   } );
             *
             * @example
             *   // Manipulate the data returned from the server - add a link to data
             *   // (note this can, should, be done using `render` for the column - this
             *   // is just a simple example of how the data can be manipulated).
             *   $('#example').dataTable( {
             *     "ajax": {
             *       "url": "data.json",
             *       "dataSrc": function ( json ) {
             *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
             *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
             *         }
             *         return json;
             *       }
             *     }
             *   } );
             *
             * @example
             *   // Add data to the request
             *   $('#example').dataTable( {
             *     "ajax": {
             *       "url": "data.json",
             *       "data": function ( d ) {
             *         return {
             *           "extra_search": $('#extra').val()
             *         };
             *       }
             *     }
             *   } );
             *
             * @example
             *   // Send request as POST
             *   $('#example').dataTable( {
             *     "ajax": {
             *       "url": "data.json",
             *       "type": "POST"
             *     }
             *   } );
             *
             * @example
             *   // Get the data from localStorage (could interface with a form for
             *   // adding, editing and removing rows).
             *   $('#example').dataTable( {
             *     "ajax": function (data, callback, settings) {
             *       callback(
             *         JSON.parse( localStorage.getItem('dataTablesData') )
             *       );
             *     }
             *   } );
             */
            "ajax": null,
        
        
            /**
             * This parameter allows you to readily specify the entries in the length drop
             * down menu that DataTables shows when pagination is enabled. It can be
             * either a 1D array of options which will be used for both the displayed
             * option and the value, or a 2D array which will use the array in the first
             * position as the value, and the array in the second position as the
             * displayed options (useful for language strings such as 'All').
             *
             * Note that the `pageLength` property will be automatically set to the
             * first value given in this array, unless `pageLength` is also provided.
             *  @type array
             *  @default [ 10, 25, 50, 100 ]
             *
             *  @dtopt Option
             *  @name DataTable.defaults.lengthMenu
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
             *      } );
             *    } );
             */
            "aLengthMenu": [ 10, 25, 50, 100 ],
        
        
            /**
             * The `columns` option in the initialisation parameter allows you to define
             * details about the way individual columns behave. For a full list of
             * column options that can be set, please see
             * {@link DataTable.defaults.column}. Note that if you use `columns` to
             * define your columns, you must have an entry in the array for every single
             * column that you have in your table (these can be null if you don't which
             * to specify any options).
             *  @member
             *
             *  @name DataTable.defaults.column
             */
            "aoColumns": null,
        
            /**
             * Very similar to `columns`, `columnDefs` allows you to target a specific
             * column, multiple columns, or all columns, using the `targets` property of
             * each object in the array. This allows great flexibility when creating
             * tables, as the `columnDefs` arrays can be of any length, targeting the
             * columns you specifically want. `columnDefs` may use any of the column
             * options available: {@link DataTable.defaults.column}, but it _must_
             * have `targets` defined in each object in the array. Values in the `targets`
             * array may be:
             *   <ul>
             *     <li>a string - class name will be matched on the TH for the column</li>
             *     <li>0 or a positive integer - column index counting from the left</li>
             *     <li>a negative integer - column index counting from the right</li>
             *     <li>the string "_all" - all columns (i.e. assign a default)</li>
             *   </ul>
             *  @member
             *
             *  @name DataTable.defaults.columnDefs
             */
            "aoColumnDefs": null,
        
        
            /**
             * Basically the same as `search`, this parameter defines the individual column
             * filtering state at initialisation time. The array must be of the same size
             * as the number of columns, and each element be an object with the parameters
             * `search` and `escapeRegex` (the latter is optional). 'null' is also
             * accepted and the default will be used.
             *  @type array
             *  @default []
             *
             *  @dtopt Option
             *  @name DataTable.defaults.searchCols
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "searchCols": [
             *          null,
             *          { "search": "My filter" },
             *          null,
             *          { "search": "^[0-9]", "escapeRegex": false }
             *        ]
             *      } );
             *    } )
             */
            "aoSearchCols": [],
        
        
            /**
             * An array of CSS classes that should be applied to displayed rows. This
             * array may be of any length, and DataTables will apply each class
             * sequentially, looping when required.
             *  @type array
             *  @default null <i>Will take the values determined by the `oClasses.stripe*`
             *    options</i>
             *
             *  @dtopt Option
             *  @name DataTable.defaults.stripeClasses
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
             *      } );
             *    } )
             */
            "asStripeClasses": null,
        
        
            /**
             * Enable or disable automatic column width calculation. This can be disabled
             * as an optimisation (it takes some time to calculate the widths) if the
             * tables widths are passed in using `columns`.
             *  @type boolean
             *  @default true
             *
             *  @dtopt Features
             *  @name DataTable.defaults.autoWidth
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "autoWidth": false
             *      } );
             *    } );
             */
            "bAutoWidth": true,
        
        
            /**
             * Deferred rendering can provide DataTables with a huge speed boost when you
             * are using an Ajax or JS data source for the table. This option, when set to
             * true, will cause DataTables to defer the creation of the table elements for
             * each row until they are needed for a draw - saving a significant amount of
             * time.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Features
             *  @name DataTable.defaults.deferRender
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "ajax": "sources/arrays.txt",
             *        "deferRender": true
             *      } );
             *    } );
             */
            "bDeferRender": false,
        
        
            /**
             * Replace a DataTable which matches the given selector and replace it with
             * one which has the properties of the new initialisation object passed. If no
             * table matches the selector, then the new DataTable will be constructed as
             * per normal.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Options
             *  @name DataTable.defaults.destroy
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "srollY": "200px",
             *        "paginate": false
             *      } );
             *
             *      // Some time later....
             *      $('#example').dataTable( {
             *        "filter": false,
             *        "destroy": true
             *      } );
             *    } );
             */
            "bDestroy": false,
        
        
            /**
             * Enable or disable filtering of data. Filtering in DataTables is "smart" in
             * that it allows the end user to input multiple words (space separated) and
             * will match a row containing those words, even if not in the order that was
             * specified (this allow matching across multiple columns). Note that if you
             * wish to use filtering in DataTables this must remain 'true' - to remove the
             * default filtering input box and retain filtering abilities, please use
             * {@link DataTable.defaults.dom}.
             *  @type boolean
             *  @default true
             *
             *  @dtopt Features
             *  @name DataTable.defaults.searching
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "searching": false
             *      } );
             *    } );
             */
            "bFilter": true,
        
        
            /**
             * Enable or disable the table information display. This shows information
             * about the data that is currently visible on the page, including information
             * about filtered data if that action is being performed.
             *  @type boolean
             *  @default true
             *
             *  @dtopt Features
             *  @name DataTable.defaults.info
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "info": false
             *      } );
             *    } );
             */
            "bInfo": true,
        
        
            /**
             * Allows the end user to select the size of a formatted page from a select
             * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
             *  @type boolean
             *  @default true
             *
             *  @dtopt Features
             *  @name DataTable.defaults.lengthChange
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "lengthChange": false
             *      } );
             *    } );
             */
            "bLengthChange": true,
        
        
            /**
             * Enable or disable pagination.
             *  @type boolean
             *  @default true
             *
             *  @dtopt Features
             *  @name DataTable.defaults.paging
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "paging": false
             *      } );
             *    } );
             */
            "bPaginate": true,
        
        
            /**
             * Enable or disable the display of a 'processing' indicator when the table is
             * being processed (e.g. a sort). This is particularly useful for tables with
             * large amounts of data where it can take a noticeable amount of time to sort
             * the entries.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Features
             *  @name DataTable.defaults.processing
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "processing": true
             *      } );
             *    } );
             */
            "bProcessing": false,
        
        
            /**
             * Retrieve the DataTables object for the given selector. Note that if the
             * table has already been initialised, this parameter will cause DataTables
             * to simply return the object that has already been set up - it will not take
             * account of any changes you might have made to the initialisation object
             * passed to DataTables (setting this parameter to true is an acknowledgement
             * that you understand this). `destroy` can be used to reinitialise a table if
             * you need.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Options
             *  @name DataTable.defaults.retrieve
             *
             *  @example
             *    $(document).ready( function() {
             *      initTable();
             *      tableActions();
             *    } );
             *
             *    function initTable ()
             *    {
             *      return $('#example').dataTable( {
             *        "scrollY": "200px",
             *        "paginate": false,
             *        "retrieve": true
             *      } );
             *    }
             *
             *    function tableActions ()
             *    {
             *      var table = initTable();
             *      // perform API operations with oTable
             *    }
             */
            "bRetrieve": false,
        
        
            /**
             * When vertical (y) scrolling is enabled, DataTables will force the height of
             * the table's viewport to the given height at all times (useful for layout).
             * However, this can look odd when filtering data down to a small data set,
             * and the footer is left "floating" further down. This parameter (when
             * enabled) will cause DataTables to collapse the table's viewport down when
             * the result set will fit within the given Y height.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Options
             *  @name DataTable.defaults.scrollCollapse
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "scrollY": "200",
             *        "scrollCollapse": true
             *      } );
             *    } );
             */
            "bScrollCollapse": false,
        
        
            /**
             * Configure DataTables to use server-side processing. Note that the
             * `ajax` parameter must also be given in order to give DataTables a
             * source to obtain the required data for each draw.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Features
             *  @dtopt Server-side
             *  @name DataTable.defaults.serverSide
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "serverSide": true,
             *        "ajax": "xhr.php"
             *      } );
             *    } );
             */
            "bServerSide": false,
        
        
            /**
             * Enable or disable sorting of columns. Sorting of individual columns can be
             * disabled by the `sortable` option for each column.
             *  @type boolean
             *  @default true
             *
             *  @dtopt Features
             *  @name DataTable.defaults.ordering
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "ordering": false
             *      } );
             *    } );
             */
            "bSort": true,
        
        
            /**
             * Enable or display DataTables' ability to sort multiple columns at the
             * same time (activated by shift-click by the user).
             *  @type boolean
             *  @default true
             *
             *  @dtopt Options
             *  @name DataTable.defaults.orderMulti
             *
             *  @example
             *    // Disable multiple column sorting ability
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "orderMulti": false
             *      } );
             *    } );
             */
            "bSortMulti": true,
        
        
            /**
             * Allows control over whether DataTables should use the top (true) unique
             * cell that is found for a single column, or the bottom (false - default).
             * This is useful when using complex headers.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Options
             *  @name DataTable.defaults.orderCellsTop
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "orderCellsTop": true
             *      } );
             *    } );
             */
            "bSortCellsTop": false,
        
        
            /**
             * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
             * `sorting\_3` to the columns which are currently being sorted on. This is
             * presented as a feature switch as it can increase processing time (while
             * classes are removed and added) so for large data sets you might want to
             * turn this off.
             *  @type boolean
             *  @default true
             *
             *  @dtopt Features
             *  @name DataTable.defaults.orderClasses
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "orderClasses": false
             *      } );
             *    } );
             */
            "bSortClasses": true,
        
        
            /**
             * Enable or disable state saving. When enabled HTML5 `localStorage` will be
             * used to save table display information such as pagination information,
             * display length, filtering and sorting. As such when the end user reloads
             * the page the display display will match what thy had previously set up.
             *
             * Due to the use of `localStorage` the default state saving is not supported
             * in IE6 or 7. If state saving is required in those browsers, use
             * `stateSaveCallback` to provide a storage solution such as cookies.
             *  @type boolean
             *  @default false
             *
             *  @dtopt Features
             *  @name DataTable.defaults.stateSave
             *
             *  @example
             *    $(document).ready( function () {
             *      $('#example').dataTable( {
             *        "stateSave": true
             *      } );
             *    } );
             */
            "bStateSave": false,
        
        
            /**
             * This function is called when a TR element is created (and all TD child
             * elements have been inserted), or registered if using a DOM source, allowing
             * manipulation of the TR element (adding classes etc).
             *  @type function
             *  @param {node} row "TR" element for the current row
             *  @param {array} data Raw data array for this row
             *  @param {int} dataIndex The index of this row in the internal aoData array
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.createdRow
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "createdRow": function( row, data, dataIndex ) {
             *          // Bold the grade for all 'A' grade browsers
             *          if ( data[4] == "A" )
             *          {
             *            $('td:eq(4)', row).html( '<b>A</b>' );
             *          }
             *        }
             *      } );
             *    } );
             */
            "fnCreatedRow": null,
        
        
            /**
             * This function is called on every 'draw' event, and allows you to
             * dynamically modify any aspect you want about the created DOM.
             *  @type function
             *  @param {object} settings DataTables settings object
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.drawCallback
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "drawCallback": function( settings ) {
             *          alert( 'DataTables has redrawn the table' );
             *        }
             *      } );
             *    } );
             */
            "fnDrawCallback": null,
        
        
            /**
             * Identical to fnHeaderCallback() but for the table footer this function
             * allows you to modify the table footer on every 'draw' event.
             *  @type function
             *  @param {node} foot "TR" element for the footer
             *  @param {array} data Full table data (as derived from the original HTML)
             *  @param {int} start Index for the current display starting point in the
             *    display array
             *  @param {int} end Index for the current display ending point in the
             *    display array
             *  @param {array int} display Index array to translate the visual position
             *    to the full data array
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.footerCallback
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "footerCallback": function( tfoot, data, start, end, display ) {
             *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
             *        }
             *      } );
             *    } )
             */
            "fnFooterCallback": null,
        
        
            /**
             * When rendering large numbers in the information element for the table
             * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
             * to have a comma separator for the 'thousands' units (e.g. 1 million is
             * rendered as "1,000,000") to help readability for the end user. This
             * function will override the default method DataTables uses.
             *  @type function
             *  @member
             *  @param {int} toFormat number to be formatted
             *  @returns {string} formatted string for DataTables to show the number
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.formatNumber
             *
             *  @example
             *    // Format a number using a single quote for the separator (note that
             *    // this can also be done with the language.thousands option)
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "formatNumber": function ( toFormat ) {
             *          return toFormat.toString().replace(
             *            /\B(?=(\d{3})+(?!\d))/g, "'"
             *          );
             *        };
             *      } );
             *    } );
             */
            "fnFormatNumber": function ( toFormat ) {
                return toFormat.toString().replace(
                    /\B(?=(\d{3})+(?!\d))/g,
                    this.oLanguage.sThousands
                );
            },
        
        
            /**
             * This function is called on every 'draw' event, and allows you to
             * dynamically modify the header row. This can be used to calculate and
             * display useful information about the table.
             *  @type function
             *  @param {node} head "TR" element for the header
             *  @param {array} data Full table data (as derived from the original HTML)
             *  @param {int} start Index for the current display starting point in the
             *    display array
             *  @param {int} end Index for the current display ending point in the
             *    display array
             *  @param {array int} display Index array to translate the visual position
             *    to the full data array
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.headerCallback
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "fheaderCallback": function( head, data, start, end, display ) {
             *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
             *        }
             *      } );
             *    } )
             */
            "fnHeaderCallback": null,
        
        
            /**
             * The information element can be used to convey information about the current
             * state of the table. Although the internationalisation options presented by
             * DataTables are quite capable of dealing with most customisations, there may
             * be times where you wish to customise the string further. This callback
             * allows you to do exactly that.
             *  @type function
             *  @param {object} oSettings DataTables settings object
             *  @param {int} start Starting position in data for the draw
             *  @param {int} end End position in data for the draw
             *  @param {int} max Total number of rows in the table (regardless of
             *    filtering)
             *  @param {int} total Total number of rows in the data set, after filtering
             *  @param {string} pre The string that DataTables has formatted using it's
             *    own rules
             *  @returns {string} The string to be displayed in the information element.
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.infoCallback
             *
             *  @example
             *    $('#example').dataTable( {
             *      "infoCallback": function( settings, start, end, max, total, pre ) {
             *        return start +" to "+ end;
             *      }
             *    } );
             */
            "fnInfoCallback": null,
        
        
            /**
             * Called when the table has been initialised. Normally DataTables will
             * initialise sequentially and there will be no need for this function,
             * however, this does not hold true when using external language information
             * since that is obtained using an async XHR call.
             *  @type function
             *  @param {object} settings DataTables settings object
             *  @param {object} json The JSON object request from the server - only
             *    present if client-side Ajax sourced data is used
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.initComplete
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "initComplete": function(settings, json) {
             *          alert( 'DataTables has finished its initialisation.' );
             *        }
             *      } );
             *    } )
             */
            "fnInitComplete": null,
        
        
            /**
             * Called at the very start of each table draw and can be used to cancel the
             * draw by returning false, any other return (including undefined) results in
             * the full draw occurring).
             *  @type function
             *  @param {object} settings DataTables settings object
             *  @returns {boolean} False will cancel the draw, anything else (including no
             *    return) will allow it to complete.
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.preDrawCallback
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "preDrawCallback": function( settings ) {
             *          if ( $('#test').val() == 1 ) {
             *            return false;
             *          }
             *        }
             *      } );
             *    } );
             */
            "fnPreDrawCallback": null,
        
        
            /**
             * This function allows you to 'post process' each row after it have been
             * generated for each table draw, but before it is rendered on screen. This
             * function might be used for setting the row class name etc.
             *  @type function
             *  @param {node} row "TR" element for the current row
             *  @param {array} data Raw data array for this row
             *  @param {int} displayIndex The display index for the current table draw
             *  @param {int} displayIndexFull The index of the data in the full list of
             *    rows (after filtering)
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.rowCallback
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
             *          // Bold the grade for all 'A' grade browsers
             *          if ( data[4] == "A" ) {
             *            $('td:eq(4)', row).html( '<b>A</b>' );
             *          }
             *        }
             *      } );
             *    } );
             */
            "fnRowCallback": null,
        
        
            /**
             * __Deprecated__ The functionality provided by this parameter has now been
             * superseded by that provided through `ajax`, which should be used instead.
             *
             * This parameter allows you to override the default function which obtains
             * the data from the server so something more suitable for your application.
             * For example you could use POST data, or pull information from a Gears or
             * AIR database.
             *  @type function
             *  @member
             *  @param {string} source HTTP source to obtain the data from (`ajax`)
             *  @param {array} data A key/value pair object containing the data to send
             *    to the server
             *  @param {function} callback to be called on completion of the data get
             *    process that will draw the data on the page.
             *  @param {object} settings DataTables settings object
             *
             *  @dtopt Callbacks
             *  @dtopt Server-side
             *  @name DataTable.defaults.serverData
             *
             *  @deprecated 1.10. Please use `ajax` for this functionality now.
             */
            "fnServerData": null,
        
        
            /**
             * __Deprecated__ The functionality provided by this parameter has now been
             * superseded by that provided through `ajax`, which should be used instead.
             *
             *  It is often useful to send extra data to the server when making an Ajax
             * request - for example custom filtering information, and this callback
             * function makes it trivial to send extra information to the server. The
             * passed in parameter is the data set that has been constructed by
             * DataTables, and you can add to this or modify it as you require.
             *  @type function
             *  @param {array} data Data array (array of objects which are name/value
             *    pairs) that has been constructed by DataTables and will be sent to the
             *    server. In the case of Ajax sourced data with server-side processing
             *    this will be an empty array, for server-side processing there will be a
             *    significant number of parameters!
             *  @returns {undefined} Ensure that you modify the data array passed in,
             *    as this is passed by reference.
             *
             *  @dtopt Callbacks
             *  @dtopt Server-side
             *  @name DataTable.defaults.serverParams
             *
             *  @deprecated 1.10. Please use `ajax` for this functionality now.
             */
            "fnServerParams": null,
        
        
            /**
             * Load the table state. With this function you can define from where, and how, the
             * state of a table is loaded. By default DataTables will load from `localStorage`
             * but you might wish to use a server-side database or cookies.
             *  @type function
             *  @member
             *  @param {object} settings DataTables settings object
             *  @param {object} callback Callback that can be executed when done. It
             *    should be passed the loaded state object.
             *  @return {object} The DataTables state object to be loaded
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.stateLoadCallback
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stateSave": true,
             *        "stateLoadCallback": function (settings, callback) {
             *          $.ajax( {
             *            "url": "/state_load",
             *            "dataType": "json",
             *            "success": function (json) {
             *              callback( json );
             *            }
             *          } );
             *        }
             *      } );
             *    } );
             */
            "fnStateLoadCallback": function ( settings ) {
                try {
                    return JSON.parse(
                        (settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
                            'DataTables_'+settings.sInstance+'_'+location.pathname
                        )
                    );
                } catch (e) {
                    return {};
                }
            },
        
        
            /**
             * Callback which allows modification of the saved state prior to loading that state.
             * This callback is called when the table is loading state from the stored data, but
             * prior to the settings object being modified by the saved state. Note that for
             * plug-in authors, you should use the `stateLoadParams` event to load parameters for
             * a plug-in.
             *  @type function
             *  @param {object} settings DataTables settings object
             *  @param {object} data The state object that is to be loaded
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.stateLoadParams
             *
             *  @example
             *    // Remove a saved filter, so filtering is never loaded
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stateSave": true,
             *        "stateLoadParams": function (settings, data) {
             *          data.oSearch.sSearch = "";
             *        }
             *      } );
             *    } );
             *
             *  @example
             *    // Disallow state loading by returning false
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stateSave": true,
             *        "stateLoadParams": function (settings, data) {
             *          return false;
             *        }
             *      } );
             *    } );
             */
            "fnStateLoadParams": null,
        
        
            /**
             * Callback that is called when the state has been loaded from the state saving method
             * and the DataTables settings object has been modified as a result of the loaded state.
             *  @type function
             *  @param {object} settings DataTables settings object
             *  @param {object} data The state object that was loaded
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.stateLoaded
             *
             *  @example
             *    // Show an alert with the filtering value that was saved
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stateSave": true,
             *        "stateLoaded": function (settings, data) {
             *          alert( 'Saved filter was: '+data.oSearch.sSearch );
             *        }
             *      } );
             *    } );
             */
            "fnStateLoaded": null,
        
        
            /**
             * Save the table state. This function allows you to define where and how the state
             * information for the table is stored By default DataTables will use `localStorage`
             * but you might wish to use a server-side database or cookies.
             *  @type function
             *  @member
             *  @param {object} settings DataTables settings object
             *  @param {object} data The state object to be saved
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.stateSaveCallback
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stateSave": true,
             *        "stateSaveCallback": function (settings, data) {
             *          // Send an Ajax request to the server with the state object
             *          $.ajax( {
             *            "url": "/state_save",
             *            "data": data,
             *            "dataType": "json",
             *            "method": "POST"
             *            "success": function () {}
             *          } );
             *        }
             *      } );
             *    } );
             */
            "fnStateSaveCallback": function ( settings, data ) {
                try {
                    (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
                        'DataTables_'+settings.sInstance+'_'+location.pathname,
                        JSON.stringify( data )
                    );
                } catch (e) {}
            },
        
        
            /**
             * Callback which allows modification of the state to be saved. Called when the table
             * has changed state a new state save is required. This method allows modification of
             * the state saving object prior to actually doing the save, including addition or
             * other state properties or modification. Note that for plug-in authors, you should
             * use the `stateSaveParams` event to save parameters for a plug-in.
             *  @type function
             *  @param {object} settings DataTables settings object
             *  @param {object} data The state object to be saved
             *
             *  @dtopt Callbacks
             *  @name DataTable.defaults.stateSaveParams
             *
             *  @example
             *    // Remove a saved filter, so filtering is never saved
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stateSave": true,
             *        "stateSaveParams": function (settings, data) {
             *          data.oSearch.sSearch = "";
             *        }
             *      } );
             *    } );
             */
            "fnStateSaveParams": null,
        
        
            /**
             * Duration for which the saved state information is considered valid. After this period
             * has elapsed the state will be returned to the default.
             * Value is given in seconds.
             *  @type int
             *  @default 7200 <i>(2 hours)</i>
             *
             *  @dtopt Options
             *  @name DataTable.defaults.stateDuration
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "stateDuration": 60*60*24; // 1 day
             *      } );
             *    } )
             */
            "iStateDuration": 7200,
        
        
            /**
             * When enabled DataTables will not make a request to the server for the first
             * page draw - rather it will use the data already on the page (no sorting etc
             * will be applied to it), thus saving on an XHR at load time. `deferLoading`
             * is used to indicate that deferred loading is required, but it is also used
             * to tell DataTables how many records there are in the full table (allowing
             * the information element and pagination to be displayed correctly). In the case
             * where a filtering is applied to the table on initial load, this can be
             * indicated by giving the parameter as an array, where the first element is
             * the number of records available after filtering and the second element is the
             * number of records without filtering (allowing the table information element
             * to be shown correctly).
             *  @type int | array
             *  @default null
             *
             *  @dtopt Options
             *  @name DataTable.defaults.deferLoading
             *
             *  @example
             *    // 57 records available in the table, no filtering applied
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "serverSide": true,
             *        "ajax": "scripts/server_processing.php",
             *        "deferLoading": 57
             *      } );
             *    } );
             *
             *  @example
             *    // 57 records after filtering, 100 without filtering (an initial filter applied)
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "serverSide": true,
             *        "ajax": "scripts/server_processing.php",
             *        "deferLoading": [ 57, 100 ],
             *        "search": {
             *          "search": "my_filter"
             *        }
             *      } );
             *    } );
             */
            "iDeferLoading": null,
        
        
            /**
             * Number of rows to display on a single page when using pagination. If
             * feature enabled (`lengthChange`) then the end user will be able to override
             * this to a custom setting using a pop-up menu.
             *  @type int
             *  @default 10
             *
             *  @dtopt Options
             *  @name DataTable.defaults.pageLength
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "pageLength": 50
             *      } );
             *    } )
             */
            "iDisplayLength": 10,
        
        
            /**
             * Define the starting point for data display when using DataTables with
             * pagination. Note that this parameter is the number of records, rather than
             * the page number, so if you have 10 records per page and want to start on
             * the third page, it should be "20".
             *  @type int
             *  @default 0
             *
             *  @dtopt Options
             *  @name DataTable.defaults.displayStart
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "displayStart": 20
             *      } );
             *    } )
             */
            "iDisplayStart": 0,
        
        
            /**
             * By default DataTables allows keyboard navigation of the table (sorting, paging,
             * and filtering) by adding a `tabindex` attribute to the required elements. This
             * allows you to tab through the controls and press the enter key to activate them.
             * The tabindex is default 0, meaning that the tab follows the flow of the document.
             * You can overrule this using this parameter if you wish. Use a value of -1 to
             * disable built-in keyboard navigation.
             *  @type int
             *  @default 0
             *
             *  @dtopt Options
             *  @name DataTable.defaults.tabIndex
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "tabIndex": 1
             *      } );
             *    } );
             */
            "iTabIndex": 0,
        
        
            /**
             * Classes that DataTables assigns to the various components and features
             * that it adds to the HTML table. This allows classes to be configured
             * during initialisation in addition to through the static
             * {@link DataTable.ext.oStdClasses} object).
             *  @namespace
             *  @name DataTable.defaults.classes
             */
            "oClasses": {},
        
        
            /**
             * All strings that DataTables uses in the user interface that it creates
             * are defined in this object, allowing you to modified them individually or
             * completely replace them all as required.
             *  @namespace
             *  @name DataTable.defaults.language
             */
            "oLanguage": {
                /**
                 * Strings that are used for WAI-ARIA labels and controls only (these are not
                 * actually visible on the page, but will be read by screenreaders, and thus
                 * must be internationalised as well).
                 *  @namespace
                 *  @name DataTable.defaults.language.aria
                 */
                "oAria": {
                    /**
                     * ARIA label that is added to the table headers when the column may be
                     * sorted ascending by activing the column (click or return when focused).
                     * Note that the column header is prefixed to this string.
                     *  @type string
                     *  @default : activate to sort column ascending
                     *
                     *  @dtopt Language
                     *  @name DataTable.defaults.language.aria.sortAscending
                     *
                     *  @example
                     *    $(document).ready( function() {
                     *      $('#example').dataTable( {
                     *        "language": {
                     *          "aria": {
                     *            "sortAscending": " - click/return to sort ascending"
                     *          }
                     *        }
                     *      } );
                     *    } );
                     */
                    "sSortAscending": ": activate to sort column ascending",
        
                    /**
                     * ARIA label that is added to the table headers when the column may be
                     * sorted descending by activing the column (click or return when focused).
                     * Note that the column header is prefixed to this string.
                     *  @type string
                     *  @default : activate to sort column ascending
                     *
                     *  @dtopt Language
                     *  @name DataTable.defaults.language.aria.sortDescending
                     *
                     *  @example
                     *    $(document).ready( function() {
                     *      $('#example').dataTable( {
                     *        "language": {
                     *          "aria": {
                     *            "sortDescending": " - click/return to sort descending"
                     *          }
                     *        }
                     *      } );
                     *    } );
                     */
                    "sSortDescending": ": activate to sort column descending"
                },
        
                /**
                 * Pagination string used by DataTables for the built-in pagination
                 * control types.
                 *  @namespace
                 *  @name DataTable.defaults.language.paginate
                 */
                "oPaginate": {
                    /**
                     * Text to use when using the 'full_numbers' type of pagination for the
                     * button to take the user to the first page.
                     *  @type string
                     *  @default First
                     *
                     *  @dtopt Language
                     *  @name DataTable.defaults.language.paginate.first
                     *
                     *  @example
                     *    $(document).ready( function() {
                     *      $('#example').dataTable( {
                     *        "language": {
                     *          "paginate": {
                     *            "first": "First page"
                     *          }
                     *        }
                     *      } );
                     *    } );
                     */
                    "sFirst": "First",
        
        
                    /**
                     * Text to use when using the 'full_numbers' type of pagination for the
                     * button to take the user to the last page.
                     *  @type string
                     *  @default Last
                     *
                     *  @dtopt Language
                     *  @name DataTable.defaults.language.paginate.last
                     *
                     *  @example
                     *    $(document).ready( function() {
                     *      $('#example').dataTable( {
                     *        "language": {
                     *          "paginate": {
                     *            "last": "Last page"
                     *          }
                     *        }
                     *      } );
                     *    } );
                     */
                    "sLast": "Last",
        
        
                    /**
                     * Text to use for the 'next' pagination button (to take the user to the
                     * next page).
                     *  @type string
                     *  @default Next
                     *
                     *  @dtopt Language
                     *  @name DataTable.defaults.language.paginate.next
                     *
                     *  @example
                     *    $(document).ready( function() {
                     *      $('#example').dataTable( {
                     *        "language": {
                     *          "paginate": {
                     *            "next": "Next page"
                     *          }
                     *        }
                     *      } );
                     *    } );
                     */
                    "sNext": "Next",
        
        
                    /**
                     * Text to use for the 'previous' pagination button (to take the user to
                     * the previous page).
                     *  @type string
                     *  @default Previous
                     *
                     *  @dtopt Language
                     *  @name DataTable.defaults.language.paginate.previous
                     *
                     *  @example
                     *    $(document).ready( function() {
                     *      $('#example').dataTable( {
                     *        "language": {
                     *          "paginate": {
                     *            "previous": "Previous page"
                     *          }
                     *        }
                     *      } );
                     *    } );
                     */
                    "sPrevious": "Previous"
                },
        
                /**
                 * This string is shown in preference to `zeroRecords` when the table is
                 * empty of data (regardless of filtering). Note that this is an optional
                 * parameter - if it is not given, the value of `zeroRecords` will be used
                 * instead (either the default or given value).
                 *  @type string
                 *  @default No data available in table
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.emptyTable
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "emptyTable": "No data available in table"
                 *        }
                 *      } );
                 *    } );
                 */
                "sEmptyTable": "No data available in table",
        
        
                /**
                 * This string gives information to the end user about the information
                 * that is current on display on the page. The following tokens can be
                 * used in the string and will be dynamically replaced as the table
                 * display updates. This tokens can be placed anywhere in the string, or
                 * removed as needed by the language requires:
                 *
                 * * `\_START\_` - Display index of the first record on the current page
                 * * `\_END\_` - Display index of the last record on the current page
                 * * `\_TOTAL\_` - Number of records in the table after filtering
                 * * `\_MAX\_` - Number of records in the table without filtering
                 * * `\_PAGE\_` - Current page number
                 * * `\_PAGES\_` - Total number of pages of data in the table
                 *
                 *  @type string
                 *  @default Showing _START_ to _END_ of _TOTAL_ entries
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.info
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "info": "Showing page _PAGE_ of _PAGES_"
                 *        }
                 *      } );
                 *    } );
                 */
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
        
        
                /**
                 * Display information string for when the table is empty. Typically the
                 * format of this string should match `info`.
                 *  @type string
                 *  @default Showing 0 to 0 of 0 entries
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.infoEmpty
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "infoEmpty": "No entries to show"
                 *        }
                 *      } );
                 *    } );
                 */
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
        
        
                /**
                 * When a user filters the information in a table, this string is appended
                 * to the information (`info`) to give an idea of how strong the filtering
                 * is. The variable _MAX_ is dynamically updated.
                 *  @type string
                 *  @default (filtered from _MAX_ total entries)
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.infoFiltered
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "infoFiltered": " - filtering from _MAX_ records"
                 *        }
                 *      } );
                 *    } );
                 */
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
        
        
                /**
                 * If can be useful to append extra information to the info string at times,
                 * and this variable does exactly that. This information will be appended to
                 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
                 * being used) at all times.
                 *  @type string
                 *  @default <i>Empty string</i>
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.infoPostFix
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "infoPostFix": "All records shown are derived from real information."
                 *        }
                 *      } );
                 *    } );
                 */
                "sInfoPostFix": "",
        
        
                /**
                 * This decimal place operator is a little different from the other
                 * language options since DataTables doesn't output floating point
                 * numbers, so it won't ever use this for display of a number. Rather,
                 * what this parameter does is modify the sort methods of the table so
                 * that numbers which are in a format which has a character other than
                 * a period (`.`) as a decimal place will be sorted numerically.
                 *
                 * Note that numbers with different decimal places cannot be shown in
                 * the same table and still be sortable, the table must be consistent.
                 * However, multiple different tables on the page can use different
                 * decimal place characters.
                 *  @type string
                 *  @default 
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.decimal
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "decimal": ","
                 *          "thousands": "."
                 *        }
                 *      } );
                 *    } );
                 */
                "sDecimal": "",
        
        
                /**
                 * DataTables has a build in number formatter (`formatNumber`) which is
                 * used to format large numbers that are used in the table information.
                 * By default a comma is used, but this can be trivially changed to any
                 * character you wish with this parameter.
                 *  @type string
                 *  @default ,
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.thousands
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "thousands": "'"
                 *        }
                 *      } );
                 *    } );
                 */
                "sThousands": ",",
        
        
                /**
                 * Detail the action that will be taken when the drop down menu for the
                 * pagination length option is changed. The '_MENU_' variable is replaced
                 * with a default select list of 10, 25, 50 and 100, and can be replaced
                 * with a custom select box if required.
                 *  @type string
                 *  @default Show _MENU_ entries
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.lengthMenu
                 *
                 *  @example
                 *    // Language change only
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "lengthMenu": "Display _MENU_ records"
                 *        }
                 *      } );
                 *    } );
                 *
                 *  @example
                 *    // Language and options change
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "lengthMenu": 'Display <select>'+
                 *            '<option value="10">10</option>'+
                 *            '<option value="20">20</option>'+
                 *            '<option value="30">30</option>'+
                 *            '<option value="40">40</option>'+
                 *            '<option value="50">50</option>'+
                 *            '<option value="-1">All</option>'+
                 *            '</select> records'
                 *        }
                 *      } );
                 *    } );
                 */
                "sLengthMenu": "Show _MENU_ entries",
        
        
                /**
                 * When using Ajax sourced data and during the first draw when DataTables is
                 * gathering the data, this message is shown in an empty row in the table to
                 * indicate to the end user the the data is being loaded. Note that this
                 * parameter is not used when loading data by server-side processing, just
                 * Ajax sourced data with client-side processing.
                 *  @type string
                 *  @default Loading...
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.loadingRecords
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "loadingRecords": "Please wait - loading..."
                 *        }
                 *      } );
                 *    } );
                 */
                "sLoadingRecords": "Loading...",
        
        
                /**
                 * Text which is displayed when the table is processing a user action
                 * (usually a sort command or similar).
                 *  @type string
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.processing
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "processing": "DataTables is currently busy"
                 *        }
                 *      } );
                 *    } );
                 */
                "sProcessing": "",
        
        
                /**
                 * Details the actions that will be taken when the user types into the
                 * filtering input text box. The variable "_INPUT_", if used in the string,
                 * is replaced with the HTML text box for the filtering input allowing
                 * control over where it appears in the string. If "_INPUT_" is not given
                 * then the input box is appended to the string automatically.
                 *  @type string
                 *  @default Search:
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.search
                 *
                 *  @example
                 *    // Input text box will be appended at the end automatically
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "search": "Filter records:"
                 *        }
                 *      } );
                 *    } );
                 *
                 *  @example
                 *    // Specify where the filter should appear
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "search": "Apply filter _INPUT_ to table"
                 *        }
                 *      } );
                 *    } );
                 */
                "sSearch": "Search:",
        
        
                /**
                 * Assign a `placeholder` attribute to the search `input` element
                 *  @type string
                 *  @default 
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.searchPlaceholder
                 */
                "sSearchPlaceholder": "",
        
        
                /**
                 * All of the language information can be stored in a file on the
                 * server-side, which DataTables will look up if this parameter is passed.
                 * It must store the URL of the language file, which is in a JSON format,
                 * and the object has the same properties as the oLanguage object in the
                 * initialiser object (i.e. the above parameters). Please refer to one of
                 * the example language files to see how this works in action.
                 *  @type string
                 *  @default <i>Empty string - i.e. disabled</i>
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.url
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "url": "https://www.sprymedia.co.uk/dataTables/lang.txt"
                 *        }
                 *      } );
                 *    } );
                 */
                "sUrl": "",
        
        
                /**
                 * Text shown inside the table records when the is no information to be
                 * displayed after filtering. `emptyTable` is shown when there is simply no
                 * information in the table at all (regardless of filtering).
                 *  @type string
                 *  @default No matching records found
                 *
                 *  @dtopt Language
                 *  @name DataTable.defaults.language.zeroRecords
                 *
                 *  @example
                 *    $(document).ready( function() {
                 *      $('#example').dataTable( {
                 *        "language": {
                 *          "zeroRecords": "No records to display"
                 *        }
                 *      } );
                 *    } );
                 */
                "sZeroRecords": "No matching records found"
            },
        
        
            /**
             * This parameter allows you to have define the global filtering state at
             * initialisation time. As an object the `search` parameter must be
             * defined, but all other parameters are optional. When `regex` is true,
             * the search string will be treated as a regular expression, when false
             * (default) it will be treated as a straight string. When `smart`
             * DataTables will use it's smart filtering methods (to word match at
             * any point in the data), when false this will not be done.
             *  @namespace
             *  @extends DataTable.models.oSearch
             *
             *  @dtopt Options
             *  @name DataTable.defaults.search
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "search": {"search": "Initial search"}
             *      } );
             *    } )
             */
            "oSearch": $.extend( {}, DataTable.models.oSearch ),
        
        
            /**
             * __Deprecated__ The functionality provided by this parameter has now been
             * superseded by that provided through `ajax`, which should be used instead.
             *
             * By default DataTables will look for the property `data` (or `aaData` for
             * compatibility with DataTables 1.9-) when obtaining data from an Ajax
             * source or for server-side processing - this parameter allows that
             * property to be changed. You can use Javascript dotted object notation to
             * get a data source for multiple levels of nesting.
             *  @type string
             *  @default data
             *
             *  @dtopt Options
             *  @dtopt Server-side
             *  @name DataTable.defaults.ajaxDataProp
             *
             *  @deprecated 1.10. Please use `ajax` for this functionality now.
             */
            "sAjaxDataProp": "data",
        
        
            /**
             * __Deprecated__ The functionality provided by this parameter has now been
             * superseded by that provided through `ajax`, which should be used instead.
             *
             * You can instruct DataTables to load data from an external
             * source using this parameter (use aData if you want to pass data in you
             * already have). Simply provide a url a JSON object can be obtained from.
             *  @type string
             *  @default null
             *
             *  @dtopt Options
             *  @dtopt Server-side
             *  @name DataTable.defaults.ajaxSource
             *
             *  @deprecated 1.10. Please use `ajax` for this functionality now.
             */
            "sAjaxSource": null,
        
        
            /**
             * This initialisation variable allows you to specify exactly where in the
             * DOM you want DataTables to inject the various controls it adds to the page
             * (for example you might want the pagination controls at the top of the
             * table). DIV elements (with or without a custom class) can also be added to
             * aid styling. The follow syntax is used:
             *   <ul>
             *     <li>The following options are allowed:
             *       <ul>
             *         <li>'l' - Length changing</li>
             *         <li>'f' - Filtering input</li>
             *         <li>'t' - The table!</li>
             *         <li>'i' - Information</li>
             *         <li>'p' - Pagination</li>
             *         <li>'r' - pRocessing</li>
             *       </ul>
             *     </li>
             *     <li>The following constants are allowed:
             *       <ul>
             *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
             *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
             *       </ul>
             *     </li>
             *     <li>The following syntax is expected:
             *       <ul>
             *         <li>'&lt;' and '&gt;' - div elements</li>
             *         <li>'&lt;"class" and '&gt;' - div with a class</li>
             *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
             *       </ul>
             *     </li>
             *     <li>Examples:
             *       <ul>
             *         <li>'&lt;"wrapper"flipt&gt;'</li>
             *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
             *       </ul>
             *     </li>
             *   </ul>
             *  @type string
             *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
             *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
             *
             *  @dtopt Options
             *  @name DataTable.defaults.dom
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
             *      } );
             *    } );
             */
            "sDom": "lfrtip",
        
        
            /**
             * Search delay option. This will throttle full table searches that use the
             * DataTables provided search input element (it does not effect calls to
             * `dt-api search()`, providing a delay before the search is made.
             *  @type integer
             *  @default 0
             *
             *  @dtopt Options
             *  @name DataTable.defaults.searchDelay
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "searchDelay": 200
             *      } );
             *    } )
             */
            "searchDelay": null,
        
        
            /**
             * DataTables features six different built-in options for the buttons to
             * display for pagination control:
             *
             * * `numbers` - Page number buttons only
             * * `simple` - 'Previous' and 'Next' buttons only
             * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
             * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
             * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers
             * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers
             *  
             * Further methods can be added using {@link DataTable.ext.oPagination}.
             *  @type string
             *  @default simple_numbers
             *
             *  @dtopt Options
             *  @name DataTable.defaults.pagingType
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "pagingType": "full_numbers"
             *      } );
             *    } )
             */
            "sPaginationType": "simple_numbers",
        
        
            /**
             * Enable horizontal scrolling. When a table is too wide to fit into a
             * certain layout, or you have a large number of columns in the table, you
             * can enable x-scrolling to show the table in a viewport, which can be
             * scrolled. This property can be `true` which will allow the table to
             * scroll horizontally when needed, or any CSS unit, or a number (in which
             * case it will be treated as a pixel measurement). Setting as simply `true`
             * is recommended.
             *  @type boolean|string
             *  @default <i>blank string - i.e. disabled</i>
             *
             *  @dtopt Features
             *  @name DataTable.defaults.scrollX
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "scrollX": true,
             *        "scrollCollapse": true
             *      } );
             *    } );
             */
            "sScrollX": "",
        
        
            /**
             * This property can be used to force a DataTable to use more width than it
             * might otherwise do when x-scrolling is enabled. For example if you have a
             * table which requires to be well spaced, this parameter is useful for
             * "over-sizing" the table, and thus forcing scrolling. This property can by
             * any CSS unit, or a number (in which case it will be treated as a pixel
             * measurement).
             *  @type string
             *  @default <i>blank string - i.e. disabled</i>
             *
             *  @dtopt Options
             *  @name DataTable.defaults.scrollXInner
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "scrollX": "100%",
             *        "scrollXInner": "110%"
             *      } );
             *    } );
             */
            "sScrollXInner": "",
        
        
            /**
             * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
             * to the given height, and enable scrolling for any data which overflows the
             * current viewport. This can be used as an alternative to paging to display
             * a lot of data in a small area (although paging and scrolling can both be
             * enabled at the same time). This property can be any CSS unit, or a number
             * (in which case it will be treated as a pixel measurement).
             *  @type string
             *  @default <i>blank string - i.e. disabled</i>
             *
             *  @dtopt Features
             *  @name DataTable.defaults.scrollY
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "scrollY": "200px",
             *        "paginate": false
             *      } );
             *    } );
             */
            "sScrollY": "",
        
        
            /**
             * __Deprecated__ The functionality provided by this parameter has now been
             * superseded by that provided through `ajax`, which should be used instead.
             *
             * Set the HTTP method that is used to make the Ajax call for server-side
             * processing or Ajax sourced data.
             *  @type string
             *  @default GET
             *
             *  @dtopt Options
             *  @dtopt Server-side
             *  @name DataTable.defaults.serverMethod
             *
             *  @deprecated 1.10. Please use `ajax` for this functionality now.
             */
            "sServerMethod": "GET",
        
        
            /**
             * DataTables makes use of renderers when displaying HTML elements for
             * a table. These renderers can be added or modified by plug-ins to
             * generate suitable mark-up for a site. For example the Bootstrap
             * integration plug-in for DataTables uses a paging button renderer to
             * display pagination buttons in the mark-up required by Bootstrap.
             *
             * For further information about the renderers available see
             * DataTable.ext.renderer
             *  @type string|object
             *  @default null
             *
             *  @name DataTable.defaults.renderer
             *
             */
            "renderer": null,
        
        
            /**
             * Set the data property name that DataTables should use to get a row's id
             * to set as the `id` property in the node.
             *  @type string
             *  @default DT_RowId
             *
             *  @name DataTable.defaults.rowId
             */
            "rowId": "DT_RowId"
        };
        
        _fnHungarianMap( DataTable.defaults );
        
        
        
        /*
         * Developer note - See note in model.defaults.js about the use of Hungarian
         * notation and camel case.
         */
        
        /**
         * Column options that can be given to DataTables at initialisation time.
         *  @namespace
         */
        DataTable.defaults.column = {
            /**
             * Define which column(s) an order will occur on for this column. This
             * allows a column's ordering to take multiple columns into account when
             * doing a sort or use the data from a different column. For example first
             * name / last name columns make sense to do a multi-column sort over the
             * two columns.
             *  @type array|int
             *  @default null <i>Takes the value of the column index automatically</i>
             *
             *  @name DataTable.defaults.column.orderData
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
             *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
             *          { "orderData": 2, "targets": [ 2 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "orderData": [ 0, 1 ] },
             *          { "orderData": [ 1, 0 ] },
             *          { "orderData": 2 },
             *          null,
             *          null
             *        ]
             *      } );
             *    } );
             */
            "aDataSort": null,
            "iDataSort": -1,
        
        
            /**
             * You can control the default ordering direction, and even alter the
             * behaviour of the sort handler (i.e. only allow ascending ordering etc)
             * using this parameter.
             *  @type array
             *  @default [ 'asc', 'desc' ]
             *
             *  @name DataTable.defaults.column.orderSequence
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
             *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
             *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          null,
             *          { "orderSequence": [ "asc" ] },
             *          { "orderSequence": [ "desc", "asc", "asc" ] },
             *          { "orderSequence": [ "desc" ] },
             *          null
             *        ]
             *      } );
             *    } );
             */
            "asSorting": [ 'asc', 'desc' ],
        
        
            /**
             * Enable or disable filtering on the data in this column.
             *  @type boolean
             *  @default true
             *
             *  @name DataTable.defaults.column.searchable
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "searchable": false, "targets": [ 0 ] }
             *        ] } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "searchable": false },
             *          null,
             *          null,
             *          null,
             *          null
             *        ] } );
             *    } );
             */
            "bSearchable": true,
        
        
            /**
             * Enable or disable ordering on this column.
             *  @type boolean
             *  @default true
             *
             *  @name DataTable.defaults.column.orderable
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "orderable": false, "targets": [ 0 ] }
             *        ] } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "orderable": false },
             *          null,
             *          null,
             *          null,
             *          null
             *        ] } );
             *    } );
             */
            "bSortable": true,
        
        
            /**
             * Enable or disable the display of this column.
             *  @type boolean
             *  @default true
             *
             *  @name DataTable.defaults.column.visible
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "visible": false, "targets": [ 0 ] }
             *        ] } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "visible": false },
             *          null,
             *          null,
             *          null,
             *          null
             *        ] } );
             *    } );
             */
            "bVisible": true,
        
        
            /**
             * Developer definable function that is called whenever a cell is created (Ajax source,
             * etc) or processed for input (DOM source). This can be used as a compliment to mRender
             * allowing you to modify the DOM element (add background colour for example) when the
             * element is available.
             *  @type function
             *  @param {element} td The TD node that has been created
             *  @param {*} cellData The Data for the cell
             *  @param {array|object} rowData The data for the whole row
             *  @param {int} row The row index for the aoData data store
             *  @param {int} col The column index for aoColumns
             *
             *  @name DataTable.defaults.column.createdCell
             *  @dtopt Columns
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [3],
             *          "createdCell": function (td, cellData, rowData, row, col) {
             *            if ( cellData == "1.7" ) {
             *              $(td).css('color', 'blue')
             *            }
             *          }
             *        } ]
             *      });
             *    } );
             */
            "fnCreatedCell": null,
        
        
            /**
             * This parameter has been replaced by `data` in DataTables to ensure naming
             * consistency. `dataProp` can still be used, as there is backwards
             * compatibility in DataTables for this option, but it is strongly
             * recommended that you use `data` in preference to `dataProp`.
             *  @name DataTable.defaults.column.dataProp
             */
        
        
            /**
             * This property can be used to read data from any data source property,
             * including deeply nested objects / properties. `data` can be given in a
             * number of different ways which effect its behaviour:
             *
             * * `integer` - treated as an array index for the data source. This is the
             *   default that DataTables uses (incrementally increased for each column).
             * * `string` - read an object property from the data source. There are
             *   three 'special' options that can be used in the string to alter how
             *   DataTables reads the data from the source object:
             *    * `.` - Dotted Javascript notation. Just as you use a `.` in
             *      Javascript to read from nested objects, so to can the options
             *      specified in `data`. For example: `browser.version` or
             *      `browser.name`. If your object parameter name contains a period, use
             *      `\\` to escape it - i.e. `first\\.name`.
             *    * `[]` - Array notation. DataTables can automatically combine data
             *      from and array source, joining the data with the characters provided
             *      between the two brackets. For example: `name[, ]` would provide a
             *      comma-space separated list from the source array. If no characters
             *      are provided between the brackets, the original array source is
             *      returned.
             *    * `()` - Function notation. Adding `()` to the end of a parameter will
             *      execute a function of the name given. For example: `browser()` for a
             *      simple function on the data source, `browser.version()` for a
             *      function in a nested property or even `browser().version` to get an
             *      object property if the function called returns an object. Note that
             *      function notation is recommended for use in `render` rather than
             *      `data` as it is much simpler to use as a renderer.
             * * `null` - use the original data source for the row rather than plucking
             *   data directly from it. This action has effects on two other
             *   initialisation options:
             *    * `defaultContent` - When null is given as the `data` option and
             *      `defaultContent` is specified for the column, the value defined by
             *      `defaultContent` will be used for the cell.
             *    * `render` - When null is used for the `data` option and the `render`
             *      option is specified for the column, the whole data source for the
             *      row is used for the renderer.
             * * `function` - the function given will be executed whenever DataTables
             *   needs to set or get the data for a cell in the column. The function
             *   takes three parameters:
             *    * Parameters:
             *      * `{array|object}` The data source for the row
             *      * `{string}` The type call data requested - this will be 'set' when
             *        setting data or 'filter', 'display', 'type', 'sort' or undefined
             *        when gathering data. Note that when `undefined` is given for the
             *        type DataTables expects to get the raw data for the object back<
             *      * `{*}` Data to set when the second parameter is 'set'.
             *    * Return:
             *      * The return value from the function is not required when 'set' is
             *        the type of call, but otherwise the return is what will be used
             *        for the data requested.
             *
             * Note that `data` is a getter and setter option. If you just require
             * formatting of data for output, you will likely want to use `render` which
             * is simply a getter and thus simpler to use.
             *
             * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
             * name change reflects the flexibility of this property and is consistent
             * with the naming of mRender. If 'mDataProp' is given, then it will still
             * be used by DataTables, as it automatically maps the old name to the new
             * if required.
             *
             *  @type string|int|function|null
             *  @default null <i>Use automatically calculated column index</i>
             *
             *  @name DataTable.defaults.column.data
             *  @dtopt Columns
             *
             *  @example
             *    // Read table data from objects
             *    // JSON structure for each row:
             *    //   {
             *    //      "engine": {value},
             *    //      "browser": {value},
             *    //      "platform": {value},
             *    //      "version": {value},
             *    //      "grade": {value}
             *    //   }
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "ajaxSource": "sources/objects.txt",
             *        "columns": [
             *          { "data": "engine" },
             *          { "data": "browser" },
             *          { "data": "platform" },
             *          { "data": "version" },
             *          { "data": "grade" }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Read information from deeply nested objects
             *    // JSON structure for each row:
             *    //   {
             *    //      "engine": {value},
             *    //      "browser": {value},
             *    //      "platform": {
             *    //         "inner": {value}
             *    //      },
             *    //      "details": [
             *    //         {value}, {value}
             *    //      ]
             *    //   }
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "ajaxSource": "sources/deep.txt",
             *        "columns": [
             *          { "data": "engine" },
             *          { "data": "browser" },
             *          { "data": "platform.inner" },
             *          { "data": "details.0" },
             *          { "data": "details.1" }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `data` as a function to provide different information for
             *    // sorting, filtering and display. In this case, currency (price)
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [ 0 ],
             *          "data": function ( source, type, val ) {
             *            if (type === 'set') {
             *              source.price = val;
             *              // Store the computed display and filter values for efficiency
             *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
             *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
             *              return;
             *            }
             *            else if (type === 'display') {
             *              return source.price_display;
             *            }
             *            else if (type === 'filter') {
             *              return source.price_filter;
             *            }
             *            // 'sort', 'type' and undefined all just use the integer
             *            return source.price;
             *          }
             *        } ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using default content
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [ 0 ],
             *          "data": null,
             *          "defaultContent": "Click to edit"
             *        } ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using array notation - outputting a list from an array
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [ 0 ],
             *          "data": "name[, ]"
             *        } ]
             *      } );
             *    } );
             *
             */
            "mData": null,
        
        
            /**
             * This property is the rendering partner to `data` and it is suggested that
             * when you want to manipulate data for display (including filtering,
             * sorting etc) without altering the underlying data for the table, use this
             * property. `render` can be considered to be the the read only companion to
             * `data` which is read / write (then as such more complex). Like `data`
             * this option can be given in a number of different ways to effect its
             * behaviour:
             *
             * * `integer` - treated as an array index for the data source. This is the
             *   default that DataTables uses (incrementally increased for each column).
             * * `string` - read an object property from the data source. There are
             *   three 'special' options that can be used in the string to alter how
             *   DataTables reads the data from the source object:
             *    * `.` - Dotted Javascript notation. Just as you use a `.` in
             *      Javascript to read from nested objects, so to can the options
             *      specified in `data`. For example: `browser.version` or
             *      `browser.name`. If your object parameter name contains a period, use
             *      `\\` to escape it - i.e. `first\\.name`.
             *    * `[]` - Array notation. DataTables can automatically combine data
             *      from and array source, joining the data with the characters provided
             *      between the two brackets. For example: `name[, ]` would provide a
             *      comma-space separated list from the source array. If no characters
             *      are provided between the brackets, the original array source is
             *      returned.
             *    * `()` - Function notation. Adding `()` to the end of a parameter will
             *      execute a function of the name given. For example: `browser()` for a
             *      simple function on the data source, `browser.version()` for a
             *      function in a nested property or even `browser().version` to get an
             *      object property if the function called returns an object.
             * * `object` - use different data for the different data types requested by
             *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
             *   of the object is the data type the property refers to and the value can
             *   defined using an integer, string or function using the same rules as
             *   `render` normally does. Note that an `_` option _must_ be specified.
             *   This is the default value to use if you haven't specified a value for
             *   the data type requested by DataTables.
             * * `function` - the function given will be executed whenever DataTables
             *   needs to set or get the data for a cell in the column. The function
             *   takes three parameters:
             *    * Parameters:
             *      * {array|object} The data source for the row (based on `data`)
             *      * {string} The type call data requested - this will be 'filter',
             *        'display', 'type' or 'sort'.
             *      * {array|object} The full data source for the row (not based on
             *        `data`)
             *    * Return:
             *      * The return value from the function is what will be used for the
             *        data requested.
             *
             *  @type string|int|function|object|null
             *  @default null Use the data source value.
             *
             *  @name DataTable.defaults.column.render
             *  @dtopt Columns
             *
             *  @example
             *    // Create a comma separated list from an array of objects
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "ajaxSource": "sources/deep.txt",
             *        "columns": [
             *          { "data": "engine" },
             *          { "data": "browser" },
             *          {
             *            "data": "platform",
             *            "render": "[, ].name"
             *          }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Execute a function to obtain data
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [ 0 ],
             *          "data": null, // Use the full data source object for the renderer's source
             *          "render": "browserName()"
             *        } ]
             *      } );
             *    } );
             *
             *  @example
             *    // As an object, extracting different data for the different types
             *    // This would be used with a data source such as:
             *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
             *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
             *    // (which has both forms) is used for filtering for if a user inputs either format, while
             *    // the formatted phone number is the one that is shown in the table.
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [ 0 ],
             *          "data": null, // Use the full data source object for the renderer's source
             *          "render": {
             *            "_": "phone",
             *            "filter": "phone_filter",
             *            "display": "phone_display"
             *          }
             *        } ]
             *      } );
             *    } );
             *
             *  @example
             *    // Use as a function to create a link from the data source
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [ 0 ],
             *          "data": "download_link",
             *          "render": function ( data, type, full ) {
             *            return '<a href="'+data+'">Download</a>';
             *          }
             *        } ]
             *      } );
             *    } );
             */
            "mRender": null,
        
        
            /**
             * Change the cell type created for the column - either TD cells or TH cells. This
             * can be useful as TH cells have semantic meaning in the table body, allowing them
             * to act as a header for a row (you may wish to add scope='row' to the TH elements).
             *  @type string
             *  @default td
             *
             *  @name DataTable.defaults.column.cellType
             *  @dtopt Columns
             *
             *  @example
             *    // Make the first column use TH cells
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [ {
             *          "targets": [ 0 ],
             *          "cellType": "th"
             *        } ]
             *      } );
             *    } );
             */
            "sCellType": "td",
        
        
            /**
             * Class to give to each cell in this column.
             *  @type string
             *  @default <i>Empty string</i>
             *
             *  @name DataTable.defaults.column.class
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "class": "my_class", "targets": [ 0 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "class": "my_class" },
             *          null,
             *          null,
             *          null,
             *          null
             *        ]
             *      } );
             *    } );
             */
            "sClass": "",
        
            /**
             * When DataTables calculates the column widths to assign to each column,
             * it finds the longest string in each column and then constructs a
             * temporary table and reads the widths from that. The problem with this
             * is that "mmm" is much wider then "iiii", but the latter is a longer
             * string - thus the calculation can go wrong (doing it properly and putting
             * it into an DOM object and measuring that is horribly(!) slow). Thus as
             * a "work around" we provide this option. It will append its value to the
             * text that is found to be the longest string for the column - i.e. padding.
             * Generally you shouldn't need this!
             *  @type string
             *  @default <i>Empty string<i>
             *
             *  @name DataTable.defaults.column.contentPadding
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          null,
             *          null,
             *          null,
             *          {
             *            "contentPadding": "mmm"
             *          }
             *        ]
             *      } );
             *    } );
             */
            "sContentPadding": "",
        
        
            /**
             * Allows a default value to be given for a column's data, and will be used
             * whenever a null data source is encountered (this can be because `data`
             * is set to null, or because the data source itself is null).
             *  @type string
             *  @default null
             *
             *  @name DataTable.defaults.column.defaultContent
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          {
             *            "data": null,
             *            "defaultContent": "Edit",
             *            "targets": [ -1 ]
             *          }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          null,
             *          null,
             *          null,
             *          {
             *            "data": null,
             *            "defaultContent": "Edit"
             *          }
             *        ]
             *      } );
             *    } );
             */
            "sDefaultContent": null,
        
        
            /**
             * This parameter is only used in DataTables' server-side processing. It can
             * be exceptionally useful to know what columns are being displayed on the
             * client side, and to map these to database fields. When defined, the names
             * also allow DataTables to reorder information from the server if it comes
             * back in an unexpected order (i.e. if you switch your columns around on the
             * client-side, your server-side code does not also need updating).
             *  @type string
             *  @default <i>Empty string</i>
             *
             *  @name DataTable.defaults.column.name
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "name": "engine", "targets": [ 0 ] },
             *          { "name": "browser", "targets": [ 1 ] },
             *          { "name": "platform", "targets": [ 2 ] },
             *          { "name": "version", "targets": [ 3 ] },
             *          { "name": "grade", "targets": [ 4 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "name": "engine" },
             *          { "name": "browser" },
             *          { "name": "platform" },
             *          { "name": "version" },
             *          { "name": "grade" }
             *        ]
             *      } );
             *    } );
             */
            "sName": "",
        
        
            /**
             * Defines a data source type for the ordering which can be used to read
             * real-time information from the table (updating the internally cached
             * version) prior to ordering. This allows ordering to occur on user
             * editable elements such as form inputs.
             *  @type string
             *  @default std
             *
             *  @name DataTable.defaults.column.orderDataType
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
             *          { "type": "numeric", "targets": [ 3 ] },
             *          { "orderDataType": "dom-select", "targets": [ 4 ] },
             *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          null,
             *          null,
             *          { "orderDataType": "dom-text" },
             *          { "orderDataType": "dom-text", "type": "numeric" },
             *          { "orderDataType": "dom-select" },
             *          { "orderDataType": "dom-checkbox" }
             *        ]
             *      } );
             *    } );
             */
            "sSortDataType": "std",
        
        
            /**
             * The title of this column.
             *  @type string
             *  @default null <i>Derived from the 'TH' value for this column in the
             *    original HTML table.</i>
             *
             *  @name DataTable.defaults.column.title
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "title": "My column title", "targets": [ 0 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "title": "My column title" },
             *          null,
             *          null,
             *          null,
             *          null
             *        ]
             *      } );
             *    } );
             */
            "sTitle": null,
        
        
            /**
             * The type allows you to specify how the data for this column will be
             * ordered. Four types (string, numeric, date and html (which will strip
             * HTML tags before ordering)) are currently available. Note that only date
             * formats understood by Javascript's Date() object will be accepted as type
             * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
             * 'numeric', 'date' or 'html' (by default). Further types can be adding
             * through plug-ins.
             *  @type string
             *  @default null <i>Auto-detected from raw data</i>
             *
             *  @name DataTable.defaults.column.type
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "type": "html", "targets": [ 0 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "type": "html" },
             *          null,
             *          null,
             *          null,
             *          null
             *        ]
             *      } );
             *    } );
             */
            "sType": null,
        
        
            /**
             * Defining the width of the column, this parameter may take any CSS value
             * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
             * been given a specific width through this interface ensuring that the table
             * remains readable.
             *  @type string
             *  @default null <i>Automatic</i>
             *
             *  @name DataTable.defaults.column.width
             *  @dtopt Columns
             *
             *  @example
             *    // Using `columnDefs`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columnDefs": [
             *          { "width": "20%", "targets": [ 0 ] }
             *        ]
             *      } );
             *    } );
             *
             *  @example
             *    // Using `columns`
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "columns": [
             *          { "width": "20%" },
             *          null,
             *          null,
             *          null,
             *          null
             *        ]
             *      } );
             *    } );
             */
            "sWidth": null
        };
        
        _fnHungarianMap( DataTable.defaults.column );
        
        
        
        /**
         * DataTables settings object - this holds all the information needed for a
         * given table, including configuration, data and current application of the
         * table options. DataTables does not have a single instance for each DataTable
         * with the settings attached to that instance, but rather instances of the
         * DataTable "class" are created on-the-fly as needed (typically by a
         * $().dataTable() call) and the settings object is then applied to that
         * instance.
         *
         * Note that this object is related to {@link DataTable.defaults} but this
         * one is the internal data store for DataTables's cache of columns. It should
         * NOT be manipulated outside of DataTables. Any configuration should be done
         * through the initialisation options.
         *  @namespace
         *  @todo Really should attach the settings object to individual instances so we
         *    don't need to create new instances on each $().dataTable() call (if the
         *    table already exists). It would also save passing oSettings around and
         *    into every single function. However, this is a very significant
         *    architecture change for DataTables and will almost certainly break
         *    backwards compatibility with older installations. This is something that
         *    will be done in 2.0.
         */
        DataTable.models.oSettings = {
            /**
             * Primary features of DataTables and their enablement state.
             *  @namespace
             */
            "oFeatures": {
        
                /**
                 * Flag to say if DataTables should automatically try to calculate the
                 * optimum table and columns widths (true) or not (false).
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type boolean
                 */
                "bAutoWidth": null,
        
                /**
                 * Delay the creation of TR and TD elements until they are actually
                 * needed by a driven page draw. This can give a significant speed
                 * increase for Ajax source and Javascript source data, but makes no
                 * difference at all for DOM and server-side processing tables.
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type boolean
                 */
                "bDeferRender": null,
        
                /**
                 * Enable filtering on the table or not. Note that if this is disabled
                 * then there is no filtering at all on the table, including fnFilter.
                 * To just remove the filtering input use sDom and remove the 'f' option.
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type boolean
                 */
                "bFilter": null,
        
                /**
                 * Table information element (the 'Showing x of y records' div) enable
                 * flag.
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type boolean
                 */
                "bInfo": null,
        
                /**
                 * Present a user control allowing the end user to change the page size
                 * when pagination is enabled.
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type boolean
                 */
                "bLengthChange": null,
        
                /**
                 * Pagination enabled or not. Note that if this is disabled then length
                 * changing must also be disabled.
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type boolean
                 */
                "bPaginate": null,
        
                /**
                 * Processing indicator enable flag whenever DataTables is enacting a
                 * user request - typically an Ajax request for server-side processing.
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type boolean
                 */
                "bProcessing": null,
        
                /**
                 * Server-side processing enabled flag - when enabled DataTables will
                 * get all data from the server for every draw - there is no filtering,
                 * sorting or paging done on the client-side.
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type boolean
                 */
                "bServerSide": null,
        
                /**
                 * Sorting enablement flag.
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type boolean
                 */
                "bSort": null,
        
                /**
                 * Multi-column sorting
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type boolean
                 */
                "bSortMulti": null,
        
                /**
                 * Apply a class to the columns which are being sorted to provide a
                 * visual highlight or not. This can slow things down when enabled since
                 * there is a lot of DOM interaction.
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type boolean
                 */
                "bSortClasses": null,
        
                /**
                 * State saving enablement flag.
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type boolean
                 */
                "bStateSave": null
            },
        
        
            /**
             * Scrolling settings for a table.
             *  @namespace
             */
            "oScroll": {
                /**
                 * When the table is shorter in height than sScrollY, collapse the
                 * table container down to the height of the table (when true).
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type boolean
                 */
                "bCollapse": null,
        
                /**
                 * Width of the scrollbar for the web-browser's platform. Calculated
                 * during table initialisation.
                 *  @type int
                 *  @default 0
                 */
                "iBarWidth": 0,
        
                /**
                 * Viewport width for horizontal scrolling. Horizontal scrolling is
                 * disabled if an empty string.
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type string
                 */
                "sX": null,
        
                /**
                 * Width to expand the table to when using x-scrolling. Typically you
                 * should not need to use this.
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type string
                 *  @deprecated
                 */
                "sXInner": null,
        
                /**
                 * Viewport height for vertical scrolling. Vertical scrolling is disabled
                 * if an empty string.
                 * Note that this parameter will be set by the initialisation routine. To
                 * set a default use {@link DataTable.defaults}.
                 *  @type string
                 */
                "sY": null
            },
        
            /**
             * Language information for the table.
             *  @namespace
             *  @extends DataTable.defaults.oLanguage
             */
            "oLanguage": {
                /**
                 * Information callback function. See
                 * {@link DataTable.defaults.fnInfoCallback}
                 *  @type function
                 *  @default null
                 */
                "fnInfoCallback": null
            },
        
            /**
             * Browser support parameters
             *  @namespace
             */
            "oBrowser": {
                /**
                 * Indicate if the browser incorrectly calculates width:100% inside a
                 * scrolling element (IE6/7)
                 *  @type boolean
                 *  @default false
                 */
                "bScrollOversize": false,
        
                /**
                 * Determine if the vertical scrollbar is on the right or left of the
                 * scrolling container - needed for rtl language layout, although not
                 * all browsers move the scrollbar (Safari).
                 *  @type boolean
                 *  @default false
                 */
                "bScrollbarLeft": false,
        
                /**
                 * Flag for if `getBoundingClientRect` is fully supported or not
                 *  @type boolean
                 *  @default false
                 */
                "bBounding": false,
        
                /**
                 * Browser scrollbar width
                 *  @type integer
                 *  @default 0
                 */
                "barWidth": 0
            },
        
        
            "ajax": null,
        
        
            /**
             * Array referencing the nodes which are used for the features. The
             * parameters of this object match what is allowed by sDom - i.e.
             *   <ul>
             *     <li>'l' - Length changing</li>
             *     <li>'f' - Filtering input</li>
             *     <li>'t' - The table!</li>
             *     <li>'i' - Information</li>
             *     <li>'p' - Pagination</li>
             *     <li>'r' - pRocessing</li>
             *   </ul>
             *  @type array
             *  @default []
             */
            "aanFeatures": [],
        
            /**
             * Store data information - see {@link DataTable.models.oRow} for detailed
             * information.
             *  @type array
             *  @default []
             */
            "aoData": [],
        
            /**
             * Array of indexes which are in the current display (after filtering etc)
             *  @type array
             *  @default []
             */
            "aiDisplay": [],
        
            /**
             * Array of indexes for display - no filtering
             *  @type array
             *  @default []
             */
            "aiDisplayMaster": [],
        
            /**
             * Map of row ids to data indexes
             *  @type object
             *  @default {}
             */
            "aIds": {},
        
            /**
             * Store information about each column that is in use
             *  @type array
             *  @default []
             */
            "aoColumns": [],
        
            /**
             * Store information about the table's header
             *  @type array
             *  @default []
             */
            "aoHeader": [],
        
            /**
             * Store information about the table's footer
             *  @type array
             *  @default []
             */
            "aoFooter": [],
        
            /**
             * Store the applied global search information in case we want to force a
             * research or compare the old search to a new one.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @namespace
             *  @extends DataTable.models.oSearch
             */
            "oPreviousSearch": {},
        
            /**
             * Store the applied search for each column - see
             * {@link DataTable.models.oSearch} for the format that is used for the
             * filtering information for each column.
             *  @type array
             *  @default []
             */
            "aoPreSearchCols": [],
        
            /**
             * Sorting that is applied to the table. Note that the inner arrays are
             * used in the following manner:
             * <ul>
             *   <li>Index 0 - column number</li>
             *   <li>Index 1 - current sorting direction</li>
             * </ul>
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type array
             *  @todo These inner arrays should really be objects
             */
            "aaSorting": null,
        
            /**
             * Sorting that is always applied to the table (i.e. prefixed in front of
             * aaSorting).
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type array
             *  @default []
             */
            "aaSortingFixed": [],
        
            /**
             * Classes to use for the striping of a table.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type array
             *  @default []
             */
            "asStripeClasses": null,
        
            /**
             * If restoring a table - we should restore its striping classes as well
             *  @type array
             *  @default []
             */
            "asDestroyStripes": [],
        
            /**
             * If restoring a table - we should restore its width
             *  @type int
             *  @default 0
             */
            "sDestroyWidth": 0,
        
            /**
             * Callback functions array for every time a row is inserted (i.e. on a draw).
             *  @type array
             *  @default []
             */
            "aoRowCallback": [],
        
            /**
             * Callback functions for the header on each draw.
             *  @type array
             *  @default []
             */
            "aoHeaderCallback": [],
        
            /**
             * Callback function for the footer on each draw.
             *  @type array
             *  @default []
             */
            "aoFooterCallback": [],
        
            /**
             * Array of callback functions for draw callback functions
             *  @type array
             *  @default []
             */
            "aoDrawCallback": [],
        
            /**
             * Array of callback functions for row created function
             *  @type array
             *  @default []
             */
            "aoRowCreatedCallback": [],
        
            /**
             * Callback functions for just before the table is redrawn. A return of
             * false will be used to cancel the draw.
             *  @type array
             *  @default []
             */
            "aoPreDrawCallback": [],
        
            /**
             * Callback functions for when the table has been initialised.
             *  @type array
             *  @default []
             */
            "aoInitComplete": [],
        
        
            /**
             * Callbacks for modifying the settings to be stored for state saving, prior to
             * saving state.
             *  @type array
             *  @default []
             */
            "aoStateSaveParams": [],
        
            /**
             * Callbacks for modifying the settings that have been stored for state saving
             * prior to using the stored values to restore the state.
             *  @type array
             *  @default []
             */
            "aoStateLoadParams": [],
        
            /**
             * Callbacks for operating on the settings object once the saved state has been
             * loaded
             *  @type array
             *  @default []
             */
            "aoStateLoaded": [],
        
            /**
             * Cache the table ID for quick access
             *  @type string
             *  @default <i>Empty string</i>
             */
            "sTableId": "",
        
            /**
             * The TABLE node for the main table
             *  @type node
             *  @default null
             */
            "nTable": null,
        
            /**
             * Permanent ref to the thead element
             *  @type node
             *  @default null
             */
            "nTHead": null,
        
            /**
             * Permanent ref to the tfoot element - if it exists
             *  @type node
             *  @default null
             */
            "nTFoot": null,
        
            /**
             * Permanent ref to the tbody element
             *  @type node
             *  @default null
             */
            "nTBody": null,
        
            /**
             * Cache the wrapper node (contains all DataTables controlled elements)
             *  @type node
             *  @default null
             */
            "nTableWrapper": null,
        
            /**
             * Indicate if when using server-side processing the loading of data
             * should be deferred until the second draw.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             *  @default false
             */
            "bDeferLoading": false,
        
            /**
             * Indicate if all required information has been read in
             *  @type boolean
             *  @default false
             */
            "bInitialised": false,
        
            /**
             * Information about open rows. Each object in the array has the parameters
             * 'nTr' and 'nParent'
             *  @type array
             *  @default []
             */
            "aoOpenRows": [],
        
            /**
             * Dictate the positioning of DataTables' control elements - see
             * {@link DataTable.model.oInit.sDom}.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type string
             *  @default null
             */
            "sDom": null,
        
            /**
             * Search delay (in mS)
             *  @type integer
             *  @default null
             */
            "searchDelay": null,
        
            /**
             * Which type of pagination should be used.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type string
             *  @default two_button
             */
            "sPaginationType": "two_button",
        
            /**
             * The state duration (for `stateSave`) in seconds.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type int
             *  @default 0
             */
            "iStateDuration": 0,
        
            /**
             * Array of callback functions for state saving. Each array element is an
             * object with the following parameters:
             *   <ul>
             *     <li>function:fn - function to call. Takes two parameters, oSettings
             *       and the JSON string to save that has been thus far created. Returns
             *       a JSON string to be inserted into a json object
             *       (i.e. '"param": [ 0, 1, 2]')</li>
             *     <li>string:sName - name of callback</li>
             *   </ul>
             *  @type array
             *  @default []
             */
            "aoStateSave": [],
        
            /**
             * Array of callback functions for state loading. Each array element is an
             * object with the following parameters:
             *   <ul>
             *     <li>function:fn - function to call. Takes two parameters, oSettings
             *       and the object stored. May return false to cancel state loading</li>
             *     <li>string:sName - name of callback</li>
             *   </ul>
             *  @type array
             *  @default []
             */
            "aoStateLoad": [],
        
            /**
             * State that was saved. Useful for back reference
             *  @type object
             *  @default null
             */
            "oSavedState": null,
        
            /**
             * State that was loaded. Useful for back reference
             *  @type object
             *  @default null
             */
            "oLoadedState": null,
        
            /**
             * Source url for AJAX data for the table.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type string
             *  @default null
             */
            "sAjaxSource": null,
        
            /**
             * Property from a given object from which to read the table data from. This
             * can be an empty string (when not server-side processing), in which case
             * it is  assumed an an array is given directly.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type string
             */
            "sAjaxDataProp": null,
        
            /**
             * The last jQuery XHR object that was used for server-side data gathering.
             * This can be used for working with the XHR information in one of the
             * callbacks
             *  @type object
             *  @default null
             */
            "jqXHR": null,
        
            /**
             * JSON returned from the server in the last Ajax request
             *  @type object
             *  @default undefined
             */
            "json": undefined,
        
            /**
             * Data submitted as part of the last Ajax request
             *  @type object
             *  @default undefined
             */
            "oAjaxData": undefined,
        
            /**
             * Function to get the server-side data.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type function
             */
            "fnServerData": null,
        
            /**
             * Functions which are called prior to sending an Ajax request so extra
             * parameters can easily be sent to the server
             *  @type array
             *  @default []
             */
            "aoServerParams": [],
        
            /**
             * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
             * required).
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type string
             */
            "sServerMethod": null,
        
            /**
             * Format numbers for display.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type function
             */
            "fnFormatNumber": null,
        
            /**
             * List of options that can be used for the user selectable length menu.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type array
             *  @default []
             */
            "aLengthMenu": null,
        
            /**
             * Counter for the draws that the table does. Also used as a tracker for
             * server-side processing
             *  @type int
             *  @default 0
             */
            "iDraw": 0,
        
            /**
             * Indicate if a redraw is being done - useful for Ajax
             *  @type boolean
             *  @default false
             */
            "bDrawing": false,
        
            /**
             * Draw index (iDraw) of the last error when parsing the returned data
             *  @type int
             *  @default -1
             */
            "iDrawError": -1,
        
            /**
             * Paging display length
             *  @type int
             *  @default 10
             */
            "_iDisplayLength": 10,
        
            /**
             * Paging start point - aiDisplay index
             *  @type int
             *  @default 0
             */
            "_iDisplayStart": 0,
        
            /**
             * Server-side processing - number of records in the result set
             * (i.e. before filtering), Use fnRecordsTotal rather than
             * this property to get the value of the number of records, regardless of
             * the server-side processing setting.
             *  @type int
             *  @default 0
             *  @private
             */
            "_iRecordsTotal": 0,
        
            /**
             * Server-side processing - number of records in the current display set
             * (i.e. after filtering). Use fnRecordsDisplay rather than
             * this property to get the value of the number of records, regardless of
             * the server-side processing setting.
             *  @type boolean
             *  @default 0
             *  @private
             */
            "_iRecordsDisplay": 0,
        
            /**
             * The classes to use for the table
             *  @type object
             *  @default {}
             */
            "oClasses": {},
        
            /**
             * Flag attached to the settings object so you can check in the draw
             * callback if filtering has been done in the draw. Deprecated in favour of
             * events.
             *  @type boolean
             *  @default false
             *  @deprecated
             */
            "bFiltered": false,
        
            /**
             * Flag attached to the settings object so you can check in the draw
             * callback if sorting has been done in the draw. Deprecated in favour of
             * events.
             *  @type boolean
             *  @default false
             *  @deprecated
             */
            "bSorted": false,
        
            /**
             * Indicate that if multiple rows are in the header and there is more than
             * one unique cell per column, if the top one (true) or bottom one (false)
             * should be used for sorting / title by DataTables.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             */
            "bSortCellsTop": null,
        
            /**
             * Initialisation object that is used for the table
             *  @type object
             *  @default null
             */
            "oInit": null,
        
            /**
             * Destroy callback functions - for plug-ins to attach themselves to the
             * destroy so they can clean up markup and events.
             *  @type array
             *  @default []
             */
            "aoDestroyCallback": [],
        
        
            /**
             * Get the number of records in the current record set, before filtering
             *  @type function
             */
            "fnRecordsTotal": function ()
            {
                return _fnDataSource( this ) == 'ssp' ?
                    this._iRecordsTotal * 1 :
                    this.aiDisplayMaster.length;
            },
        
            /**
             * Get the number of records in the current record set, after filtering
             *  @type function
             */
            "fnRecordsDisplay": function ()
            {
                return _fnDataSource( this ) == 'ssp' ?
                    this._iRecordsDisplay * 1 :
                    this.aiDisplay.length;
            },
        
            /**
             * Get the display end point - aiDisplay index
             *  @type function
             */
            "fnDisplayEnd": function ()
            {
                var
                    len      = this._iDisplayLength,
                    start    = this._iDisplayStart,
                    calc     = start + len,
                    records  = this.aiDisplay.length,
                    features = this.oFeatures,
                    paginate = features.bPaginate;
        
                if ( features.bServerSide ) {
                    return paginate === false || len === -1 ?
                        start + records :
                        Math.min( start+len, this._iRecordsDisplay );
                }
                else {
                    return ! paginate || calc>records || len===-1 ?
                        records :
                        calc;
                }
            },
        
            /**
             * The DataTables object for this table
             *  @type object
             *  @default null
             */
            "oInstance": null,
        
            /**
             * Unique identifier for each instance of the DataTables object. If there
             * is an ID on the table node, then it takes that value, otherwise an
             * incrementing internal counter is used.
             *  @type string
             *  @default null
             */
            "sInstance": null,
        
            /**
             * tabindex attribute value that is added to DataTables control elements, allowing
             * keyboard navigation of the table and its controls.
             */
            "iTabIndex": 0,
        
            /**
             * DIV container for the footer scrolling table if scrolling
             */
            "nScrollHead": null,
        
            /**
             * DIV container for the footer scrolling table if scrolling
             */
            "nScrollFoot": null,
        
            /**
             * Last applied sort
             *  @type array
             *  @default []
             */
            "aLastSort": [],
        
            /**
             * Stored plug-in instances
             *  @type object
             *  @default {}
             */
            "oPlugins": {},
        
            /**
             * Function used to get a row's id from the row's data
             *  @type function
             *  @default null
             */
            "rowIdFn": null,
        
            /**
             * Data location where to store a row's id
             *  @type string
             *  @default null
             */
            "rowId": null
        };
        
        /**
         * Extension object for DataTables that is used to provide all extension
         * options.
         *
         * Note that the `DataTable.ext` object is available through
         * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
         * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
         *  @namespace
         *  @extends DataTable.models.ext
         */
        
        
        /**
         * DataTables extensions
         * 
         * This namespace acts as a collection area for plug-ins that can be used to
         * extend DataTables capabilities. Indeed many of the build in methods
         * use this method to provide their own capabilities (sorting methods for
         * example).
         *
         * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
         * reasons
         *
         *  @namespace
         */
        DataTable.ext = _ext = {
            /**
             * Buttons. For use with the Buttons extension for DataTables. This is
             * defined here so other extensions can define buttons regardless of load
             * order. It is _not_ used by DataTables core.
             *
             *  @type object
             *  @default {}
             */
            buttons: {},
        
        
            /**
             * Element class names
             *
             *  @type object
             *  @default {}
             */
            classes: {},
        
        
            /**
             * DataTables build type (expanded by the download builder)
             *
             *  @type string
             */
            builder: "-source-",
        
        
            /**
             * Error reporting.
             * 
             * How should DataTables report an error. Can take the value 'alert',
             * 'throw', 'none' or a function.
             *
             *  @type string|function
             *  @default alert
             */
            errMode: "alert",
        
        
            /**
             * Feature plug-ins.
             * 
             * This is an array of objects which describe the feature plug-ins that are
             * available to DataTables. These feature plug-ins are then available for
             * use through the `dom` initialisation option.
             * 
             * Each feature plug-in is described by an object which must have the
             * following properties:
             * 
             * * `fnInit` - function that is used to initialise the plug-in,
             * * `cFeature` - a character so the feature can be enabled by the `dom`
             *   instillation option. This is case sensitive.
             *
             * The `fnInit` function has the following input parameters:
             *
             * 1. `{object}` DataTables settings object: see
             *    {@link DataTable.models.oSettings}
             *
             * And the following return is expected:
             * 
             * * {node|null} The element which contains your feature. Note that the
             *   return may also be void if your plug-in does not require to inject any
             *   DOM elements into DataTables control (`dom`) - for example this might
             *   be useful when developing a plug-in which allows table control via
             *   keyboard entry
             *
             *  @type array
             *
             *  @example
             *    $.fn.dataTable.ext.features.push( {
             *      "fnInit": function( oSettings ) {
             *        return new TableTools( { "oDTSettings": oSettings } );
             *      },
             *      "cFeature": "T"
             *    } );
             */
            feature: [],
        
        
            /**
             * Row searching.
             * 
             * This method of searching is complimentary to the default type based
             * searching, and a lot more comprehensive as it allows you complete control
             * over the searching logic. Each element in this array is a function
             * (parameters described below) that is called for every row in the table,
             * and your logic decides if it should be included in the searching data set
             * or not.
             *
             * Searching functions have the following input parameters:
             *
             * 1. `{object}` DataTables settings object: see
             *    {@link DataTable.models.oSettings}
             * 2. `{array|object}` Data for the row to be processed (same as the
             *    original format that was passed in as the data source, or an array
             *    from a DOM data source
             * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
             *    can be useful to retrieve the `TR` element if you need DOM interaction.
             *
             * And the following return is expected:
             *
             * * {boolean} Include the row in the searched result set (true) or not
             *   (false)
             *
             * Note that as with the main search ability in DataTables, technically this
             * is "filtering", since it is subtractive. However, for consistency in
             * naming we call it searching here.
             *
             *  @type array
             *  @default []
             *
             *  @example
             *    // The following example shows custom search being applied to the
             *    // fourth column (i.e. the data[3] index) based on two input values
             *    // from the end-user, matching the data in a certain range.
             *    $.fn.dataTable.ext.search.push(
             *      function( settings, data, dataIndex ) {
             *        var min = document.getElementById('min').value * 1;
             *        var max = document.getElementById('max').value * 1;
             *        var version = data[3] == "-" ? 0 : data[3]*1;
             *
             *        if ( min == "" && max == "" ) {
             *          return true;
             *        }
             *        else if ( min == "" && version < max ) {
             *          return true;
             *        }
             *        else if ( min < version && "" == max ) {
             *          return true;
             *        }
             *        else if ( min < version && version < max ) {
             *          return true;
             *        }
             *        return false;
             *      }
             *    );
             */
            search: [],
        
        
            /**
             * Selector extensions
             *
             * The `selector` option can be used to extend the options available for the
             * selector modifier options (`selector-modifier` object data type) that
             * each of the three built in selector types offer (row, column and cell +
             * their plural counterparts). For example the Select extension uses this
             * mechanism to provide an option to select only rows, columns and cells
             * that have been marked as selected by the end user (`{selected: true}`),
             * which can be used in conjunction with the existing built in selector
             * options.
             *
             * Each property is an array to which functions can be pushed. The functions
             * take three attributes:
             *
             * * Settings object for the host table
             * * Options object (`selector-modifier` object type)
             * * Array of selected item indexes
             *
             * The return is an array of the resulting item indexes after the custom
             * selector has been applied.
             *
             *  @type object
             */
            selector: {
                cell: [],
                column: [],
                row: []
            },
        
        
            /**
             * Internal functions, exposed for used in plug-ins.
             * 
             * Please note that you should not need to use the internal methods for
             * anything other than a plug-in (and even then, try to avoid if possible).
             * The internal function may change between releases.
             *
             *  @type object
             *  @default {}
             */
            internal: {},
        
        
            /**
             * Legacy configuration options. Enable and disable legacy options that
             * are available in DataTables.
             *
             *  @type object
             */
            legacy: {
                /**
                 * Enable / disable DataTables 1.9 compatible server-side processing
                 * requests
                 *
                 *  @type boolean
                 *  @default null
                 */
                ajax: null
            },
        
        
            /**
             * Pagination plug-in methods.
             * 
             * Each entry in this object is a function and defines which buttons should
             * be shown by the pagination rendering method that is used for the table:
             * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
             * buttons are displayed in the document, while the functions here tell it
             * what buttons to display. This is done by returning an array of button
             * descriptions (what each button will do).
             *
             * Pagination types (the four built in options and any additional plug-in
             * options defined here) can be used through the `paginationType`
             * initialisation parameter.
             *
             * The functions defined take two parameters:
             *
             * 1. `{int} page` The current page index
             * 2. `{int} pages` The number of pages in the table
             *
             * Each function is expected to return an array where each element of the
             * array can be one of:
             *
             * * `first` - Jump to first page when activated
             * * `last` - Jump to last page when activated
             * * `previous` - Show previous page when activated
             * * `next` - Show next page when activated
             * * `{int}` - Show page of the index given
             * * `{array}` - A nested array containing the above elements to add a
             *   containing 'DIV' element (might be useful for styling).
             *
             * Note that DataTables v1.9- used this object slightly differently whereby
             * an object with two functions would be defined for each plug-in. That
             * ability is still supported by DataTables 1.10+ to provide backwards
             * compatibility, but this option of use is now decremented and no longer
             * documented in DataTables 1.10+.
             *
             *  @type object
             *  @default {}
             *
             *  @example
             *    // Show previous, next and current page buttons only
             *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
             *      return [ 'previous', page, 'next' ];
             *    };
             */
            pager: {},
        
        
            renderer: {
                pageButton: {},
                header: {}
            },
        
        
            /**
             * Ordering plug-ins - custom data source
             * 
             * The extension options for ordering of data available here is complimentary
             * to the default type based ordering that DataTables typically uses. It
             * allows much greater control over the the data that is being used to
             * order a column, but is necessarily therefore more complex.
             * 
             * This type of ordering is useful if you want to do ordering based on data
             * live from the DOM (for example the contents of an 'input' element) rather
             * than just the static string that DataTables knows of.
             * 
             * The way these plug-ins work is that you create an array of the values you
             * wish to be ordering for the column in question and then return that
             * array. The data in the array much be in the index order of the rows in
             * the table (not the currently ordering order!). Which order data gathering
             * function is run here depends on the `dt-init columns.orderDataType`
             * parameter that is used for the column (if any).
             *
             * The functions defined take two parameters:
             *
             * 1. `{object}` DataTables settings object: see
             *    {@link DataTable.models.oSettings}
             * 2. `{int}` Target column index
             *
             * Each function is expected to return an array:
             *
             * * `{array}` Data for the column to be ordering upon
             *
             *  @type array
             *
             *  @example
             *    // Ordering using `input` node values
             *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
             *    {
             *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
             *        return $('input', td).val();
             *      } );
             *    }
             */
            order: {},
        
        
            /**
             * Type based plug-ins.
             *
             * Each column in DataTables has a type assigned to it, either by automatic
             * detection or by direct assignment using the `type` option for the column.
             * The type of a column will effect how it is ordering and search (plug-ins
             * can also make use of the column type if required).
             *
             * @namespace
             */
            type: {
                /**
                 * Type detection functions.
                 *
                 * The functions defined in this object are used to automatically detect
                 * a column's type, making initialisation of DataTables super easy, even
                 * when complex data is in the table.
                 *
                 * The functions defined take two parameters:
                 *
                 *  1. `{*}` Data from the column cell to be analysed
                 *  2. `{settings}` DataTables settings object. This can be used to
                 *     perform context specific type detection - for example detection
                 *     based on language settings such as using a comma for a decimal
                 *     place. Generally speaking the options from the settings will not
                 *     be required
                 *
                 * Each function is expected to return:
                 *
                 * * `{string|null}` Data type detected, or null if unknown (and thus
                 *   pass it on to the other type detection functions.
                 *
                 *  @type array
                 *
                 *  @example
                 *    // Currency type detection plug-in:
                 *    $.fn.dataTable.ext.type.detect.push(
                 *      function ( data, settings ) {
                 *        // Check the numeric part
                 *        if ( ! data.substring(1).match(/[0-9]/) ) {
                 *          return null;
                 *        }
                 *
                 *        // Check prefixed by currency
                 *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
                 *          return 'currency';
                 *        }
                 *        return null;
                 *      }
                 *    );
                 */
                detect: [],
        
        
                /**
                 * Type based search formatting.
                 *
                 * The type based searching functions can be used to pre-format the
                 * data to be search on. For example, it can be used to strip HTML
                 * tags or to de-format telephone numbers for numeric only searching.
                 *
                 * Note that is a search is not defined for a column of a given type,
                 * no search formatting will be performed.
                 * 
                 * Pre-processing of searching data plug-ins - When you assign the sType
                 * for a column (or have it automatically detected for you by DataTables
                 * or a type detection plug-in), you will typically be using this for
                 * custom sorting, but it can also be used to provide custom searching
                 * by allowing you to pre-processing the data and returning the data in
                 * the format that should be searched upon. This is done by adding
                 * functions this object with a parameter name which matches the sType
                 * for that target column. This is the corollary of <i>afnSortData</i>
                 * for searching data.
                 *
                 * The functions defined take a single parameter:
                 *
                 *  1. `{*}` Data from the column cell to be prepared for searching
                 *
                 * Each function is expected to return:
                 *
                 * * `{string|null}` Formatted string that will be used for the searching.
                 *
                 *  @type object
                 *  @default {}
                 *
                 *  @example
                 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
                 *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
                 *    }
                 */
                search: {},
        
        
                /**
                 * Type based ordering.
                 *
                 * The column type tells DataTables what ordering to apply to the table
                 * when a column is sorted upon. The order for each type that is defined,
                 * is defined by the functions available in this object.
                 *
                 * Each ordering option can be described by three properties added to
                 * this object:
                 *
                 * * `{type}-pre` - Pre-formatting function
                 * * `{type}-asc` - Ascending order function
                 * * `{type}-desc` - Descending order function
                 *
                 * All three can be used together, only `{type}-pre` or only
                 * `{type}-asc` and `{type}-desc` together. It is generally recommended
                 * that only `{type}-pre` is used, as this provides the optimal
                 * implementation in terms of speed, although the others are provided
                 * for compatibility with existing Javascript sort functions.
                 *
                 * `{type}-pre`: Functions defined take a single parameter:
                 *
                 *  1. `{*}` Data from the column cell to be prepared for ordering
                 *
                 * And return:
                 *
                 * * `{*}` Data to be sorted upon
                 *
                 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
                 * functions, taking two parameters:
                 *
                 *  1. `{*}` Data to compare to the second parameter
                 *  2. `{*}` Data to compare to the first parameter
                 *
                 * And returning:
                 *
                 * * `{*}` Ordering match: <0 if first parameter should be sorted lower
                 *   than the second parameter, ===0 if the two parameters are equal and
                 *   >0 if the first parameter should be sorted height than the second
                 *   parameter.
                 * 
                 *  @type object
                 *  @default {}
                 *
                 *  @example
                 *    // Numeric ordering of formatted numbers with a pre-formatter
                 *    $.extend( $.fn.dataTable.ext.type.order, {
                 *      "string-pre": function(x) {
                 *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
                 *        return parseFloat( a );
                 *      }
                 *    } );
                 *
                 *  @example
                 *    // Case-sensitive string ordering, with no pre-formatting method
                 *    $.extend( $.fn.dataTable.ext.order, {
                 *      "string-case-asc": function(x,y) {
                 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
                 *      },
                 *      "string-case-desc": function(x,y) {
                 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
                 *      }
                 *    } );
                 */
                order: {}
            },
        
            /**
             * Unique DataTables instance counter
             *
             * @type int
             * @private
             */
            _unique: 0,
        
        
            //
            // Depreciated
            // The following properties are retained for backwards compatibility only.
            // The should not be used in new projects and will be removed in a future
            // version
            //
        
            /**
             * Version check function.
             *  @type function
             *  @depreciated Since 1.10
             */
            fnVersionCheck: DataTable.fnVersionCheck,
        
        
            /**
             * Index for what 'this' index API functions should use
             *  @type int
             *  @deprecated Since v1.10
             */
            iApiIndex: 0,
        
        
            /**
             * jQuery UI class container
             *  @type object
             *  @deprecated Since v1.10
             */
            oJUIClasses: {},
        
        
            /**
             * Software version
             *  @type string
             *  @deprecated Since v1.10
             */
            sVersion: DataTable.version
        };
        
        
        //
        // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
        //
        $.extend( _ext, {
            afnFiltering: _ext.search,
            aTypes:       _ext.type.detect,
            ofnSearch:    _ext.type.search,
            oSort:        _ext.type.order,
            afnSortData:  _ext.order,
            aoFeatures:   _ext.feature,
            oApi:         _ext.internal,
            oStdClasses:  _ext.classes,
            oPagination:  _ext.pager
        } );
        
        
        $.extend( DataTable.ext.classes, {
            "sTable": "dataTable",
            "sNoFooter": "no-footer",
        
            /* Paging buttons */
            "sPageButton": "paginate_button",
            "sPageButtonActive": "current",
            "sPageButtonDisabled": "disabled",
        
            /* Striping classes */
            "sStripeOdd": "odd",
            "sStripeEven": "even",
        
            /* Empty row */
            "sRowEmpty": "dataTables_empty",
        
            /* Features */
            "sWrapper": "dataTables_wrapper",
            "sFilter": "dataTables_filter",
            "sInfo": "dataTables_info",
            "sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
            "sLength": "dataTables_length",
            "sProcessing": "dataTables_processing",
        
            /* Sorting */
            "sSortAsc": "sorting_asc",
            "sSortDesc": "sorting_desc",
            "sSortable": "sorting", /* Sortable in both directions */
            "sSortableAsc": "sorting_desc_disabled",
            "sSortableDesc": "sorting_asc_disabled",
            "sSortableNone": "sorting_disabled",
            "sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */
        
            /* Filtering */
            "sFilterInput": "",
        
            /* Page length */
            "sLengthSelect": "",
        
            /* Scrolling */
            "sScrollWrapper": "dataTables_scroll",
            "sScrollHead": "dataTables_scrollHead",
            "sScrollHeadInner": "dataTables_scrollHeadInner",
            "sScrollBody": "dataTables_scrollBody",
            "sScrollFoot": "dataTables_scrollFoot",
            "sScrollFootInner": "dataTables_scrollFootInner",
        
            /* Misc */
            "sHeaderTH": "",
            "sFooterTH": "",
        
            // Deprecated
            "sSortJUIAsc": "",
            "sSortJUIDesc": "",
            "sSortJUI": "",
            "sSortJUIAscAllowed": "",
            "sSortJUIDescAllowed": "",
            "sSortJUIWrapper": "",
            "sSortIcon": "",
            "sJUIHeader": "",
            "sJUIFooter": ""
        } );
        
        
        var extPagination = DataTable.ext.pager;
        
        function _numbers ( page, pages ) {
            var
                numbers = [],
                buttons = extPagination.numbers_length,
                half = Math.floor( buttons / 2 ),
                i = 1;
        
            if ( pages <= buttons ) {
                numbers = _range( 0, pages );
            }
            else if ( page <= half ) {
                numbers = _range( 0, buttons-2 );
                numbers.push( 'ellipsis' );
                numbers.push( pages-1 );
            }
            else if ( page >= pages - 1 - half ) {
                numbers = _range( pages-(buttons-2), pages );
                numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6
                numbers.splice( 0, 0, 0 );
            }
            else {
                numbers = _range( page-half+2, page+half-1 );
                numbers.push( 'ellipsis' );
                numbers.push( pages-1 );
                numbers.splice( 0, 0, 'ellipsis' );
                numbers.splice( 0, 0, 0 );
            }
        
            numbers.DT_el = 'span';
            return numbers;
        }
        
        
        $.extend( extPagination, {
            simple: function ( page, pages ) {
                return [ 'previous', 'next' ];
            },
        
            full: function ( page, pages ) {
                return [  'first', 'previous', 'next', 'last' ];
            },
        
            numbers: function ( page, pages ) {
                return [ _numbers(page, pages) ];
            },
        
            simple_numbers: function ( page, pages ) {
                return [ 'previous', _numbers(page, pages), 'next' ];
            },
        
            full_numbers: function ( page, pages ) {
                return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];
            },
            
            first_last_numbers: function (page, pages) {
                 return ['first', _numbers(page, pages), 'last'];
             },
        
            // For testing and plug-ins to use
            _numbers: _numbers,
        
            // Number of number buttons (including ellipsis) to show. _Must be odd!_
            numbers_length: 7
        } );
        
        
        $.extend( true, DataTable.ext.renderer, {
            pageButton: {
                _: function ( settings, host, idx, buttons, page, pages ) {
                    var classes = settings.oClasses;
                    var lang = settings.oLanguage.oPaginate;
                    var aria = settings.oLanguage.oAria.paginate || {};
                    var btnDisplay, btnClass;
        
                    var attach = function( container, buttons ) {
                        var i, ien, node, button;
                        var disabledClass = classes.sPageButtonDisabled;
                        var clickHandler = function ( e ) {
                            _fnPageChange( settings, e.data.action, true );
                        };
        
                        for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
                            button = buttons[i];
        
                            if ( Array.isArray( button ) ) {
                                var inner = $( '<'+(button.DT_el || 'div')+'/>' )
                                    .appendTo( container );
                                attach( inner, button );
                            }
                            else {
                                var disabled = false;
        
                                btnDisplay = null;
                                btnClass = button;
        
                                switch ( button ) {
                                    case 'ellipsis':
                                        container.append('<span class="ellipsis">&#x2026;</span>');
                                        break;
        
                                    case 'first':
                                        btnDisplay = lang.sFirst;
        
                                        if ( page === 0 ) {
                                            disabled = true;
                                        }
                                        break;
        
                                    case 'previous':
                                        btnDisplay = lang.sPrevious;
        
                                        if ( page === 0 ) {
                                            disabled = true;
                                        }
                                        break;
        
                                    case 'next':
                                        btnDisplay = lang.sNext;
        
                                        if ( pages === 0 || page === pages-1 ) {
                                            disabled = true;
                                        }
                                        break;
        
                                    case 'last':
                                        btnDisplay = lang.sLast;
        
                                        if ( pages === 0 || page === pages-1 ) {
                                            disabled = true;
                                        }
                                        break;
        
                                    default:
                                        btnDisplay = settings.fnFormatNumber( button + 1 );
                                        btnClass = page === button ?
                                            classes.sPageButtonActive : '';
                                        break;
                                }
        
                                if ( btnDisplay !== null ) {
                                    var tag = settings.oInit.pagingTag || 'a';
        
                                    if (disabled) {
                                        btnClass += ' ' + disabledClass;
                                    }
        
                                    node = $('<'+tag+'>', {
                                            'class': classes.sPageButton+' '+btnClass,
                                            'aria-controls': settings.sTableId,
                                            'aria-disabled': disabled ? 'true' : null,
                                            'aria-label': aria[ button ],
                                            'role': 'link',
                                            'aria-current': btnClass === classes.sPageButtonActive ? 'page' : null,
                                            'data-dt-idx': button,
                                            'tabindex': disabled ? -1 : settings.iTabIndex,
                                            'id': idx === 0 && typeof button === 'string' ?
                                                settings.sTableId +'_'+ button :
                                                null
                                        } )
                                        .html( btnDisplay )
                                        .appendTo( container );
        
                                    _fnBindAction(
                                        node, {action: button}, clickHandler
                                    );
                                }
                            }
                        }
                    };
        
                    // IE9 throws an 'unknown error' if document.activeElement is used
                    // inside an iframe or frame. Try / catch the error. Not good for
                    // accessibility, but neither are frames.
                    var activeEl;
        
                    try {
                        // Because this approach is destroying and recreating the paging
                        // elements, focus is lost on the select button which is bad for
                        // accessibility. So we want to restore focus once the draw has
                        // completed
                        activeEl = $(host).find(document.activeElement).data('dt-idx');
                    }
                    catch (e) {}
        
                    attach( $(host).empty(), buttons );
        
                    if ( activeEl !== undefined ) {
                        $(host).find( '[data-dt-idx='+activeEl+']' ).trigger('focus');
                    }
                }
            }
        } );
        
        
        
        // Built in type detection. See model.ext.aTypes for information about
        // what is required from this methods.
        $.extend( DataTable.ext.type.detect, [
            // Plain numbers - first since V8 detects some plain numbers as dates
            // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
            function ( d, settings )
            {
                var decimal = settings.oLanguage.sDecimal;
                return _isNumber( d, decimal ) ? 'num'+decimal : null;
            },
        
            // Dates (only those recognised by the browser's Date.parse)
            function ( d, settings )
            {
                // V8 tries _very_ hard to make a string passed into `Date.parse()`
                // valid, so we need to use a regex to restrict date formats. Use a
                // plug-in for anything other than ISO8601 style strings
                if ( d && !(d instanceof Date) && ! _re_date.test(d) ) {
                    return null;
                }
                var parsed = Date.parse(d);
                return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;
            },
        
            // Formatted numbers
            function ( d, settings )
            {
                var decimal = settings.oLanguage.sDecimal;
                return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;
            },
        
            // HTML numeric
            function ( d, settings )
            {
                var decimal = settings.oLanguage.sDecimal;
                return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;
            },
        
            // HTML numeric, formatted
            function ( d, settings )
            {
                var decimal = settings.oLanguage.sDecimal;
                return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;
            },
        
            // HTML (this is strict checking - there must be html)
            function ( d, settings )
            {
                return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?
                    'html' : null;
            }
        ] );
        
        
        
        // Filter formatting functions. See model.ext.ofnSearch for information about
        // what is required from these methods.
        // 
        // Note that additional search methods are added for the html numbers and
        // html formatted numbers by `_addNumericSort()` when we know what the decimal
        // place is
        
        
        $.extend( DataTable.ext.type.search, {
            html: function ( data ) {
                return _empty(data) ?
                    data :
                    typeof data === 'string' ?
                        data
                            .replace( _re_new_lines, " " )
                            .replace( _re_html, "" ) :
                        '';
            },
        
            string: function ( data ) {
                return _empty(data) ?
                    data :
                    typeof data === 'string' ?
                        data.replace( _re_new_lines, " " ) :
                        data;
            }
        } );
        
        
        
        var __numericReplace = function ( d, decimalPlace, re1, re2 ) {
            if ( d !== 0 && (!d || d === '-') ) {
                return -Infinity;
            }
            
            var type = typeof d;
        
            if (type === 'number' || type === 'bigint') {
                return d;
            }
        
            // If a decimal place other than `.` is used, it needs to be given to the
            // function so we can detect it and replace with a `.` which is the only
            // decimal place Javascript recognises - it is not locale aware.
            if ( decimalPlace ) {
                d = _numToDecimal( d, decimalPlace );
            }
        
            if ( d.replace ) {
                if ( re1 ) {
                    d = d.replace( re1, '' );
                }
        
                if ( re2 ) {
                    d = d.replace( re2, '' );
                }
            }
        
            return d * 1;
        };
        
        
        // Add the numeric 'deformatting' functions for sorting and search. This is done
        // in a function to provide an easy ability for the language options to add
        // additional methods if a non-period decimal place is used.
        function _addNumericSort ( decimalPlace ) {
            $.each(
                {
                    // Plain numbers
                    "num": function ( d ) {
                        return __numericReplace( d, decimalPlace );
                    },
        
                    // Formatted numbers
                    "num-fmt": function ( d ) {
                        return __numericReplace( d, decimalPlace, _re_formatted_numeric );
                    },
        
                    // HTML numeric
                    "html-num": function ( d ) {
                        return __numericReplace( d, decimalPlace, _re_html );
                    },
        
                    // HTML numeric, formatted
                    "html-num-fmt": function ( d ) {
                        return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );
                    }
                },
                function ( key, fn ) {
                    // Add the ordering method
                    _ext.type.order[ key+decimalPlace+'-pre' ] = fn;
        
                    // For HTML types add a search formatter that will strip the HTML
                    if ( key.match(/^html\-/) ) {
                        _ext.type.search[ key+decimalPlace ] = _ext.type.search.html;
                    }
                }
            );
        }
        
        
        // Default sort methods
        $.extend( _ext.type.order, {
            // Dates
            "date-pre": function ( d ) {
                var ts = Date.parse( d );
                return isNaN(ts) ? -Infinity : ts;
            },
        
            // html
            "html-pre": function ( a ) {
                return _empty(a) ?
                    '' :
                    a.replace ?
                        a.replace( /<.*?>/g, "" ).toLowerCase() :
                        a+'';
            },
        
            // string
            "string-pre": function ( a ) {
                // This is a little complex, but faster than always calling toString,
                // https://jsperf.com/tostring-v-check
                return _empty(a) ?
                    '' :
                    typeof a === 'string' ?
                        a.toLowerCase() :
                        ! a.toString ?
                            '' :
                            a.toString();
            },
        
            // string-asc and -desc are retained only for compatibility with the old
            // sort methods
            "string-asc": function ( x, y ) {
                return ((x < y) ? -1 : ((x > y) ? 1 : 0));
            },
        
            "string-desc": function ( x, y ) {
                return ((x < y) ? 1 : ((x > y) ? -1 : 0));
            }
        } );
        
        
        // Numeric sorting types - order doesn't matter here
        _addNumericSort( '' );
        
        
        $.extend( true, DataTable.ext.renderer, {
            header: {
                _: function ( settings, cell, column, classes ) {
                    // No additional mark-up required
                    // Attach a sort listener to update on sort - note that using the
                    // `DT` namespace will allow the event to be removed automatically
                    // on destroy, while the `dt` namespaced event is the one we are
                    // listening for
                    $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
                        if ( settings !== ctx ) { // need to check this this is the host
                            return;               // table, not a nested one
                        }
        
                        var colIdx = column.idx;
        
                        cell
                            .removeClass(
                                classes.sSortAsc +' '+
                                classes.sSortDesc
                            )
                            .addClass( columns[ colIdx ] == 'asc' ?
                                classes.sSortAsc : columns[ colIdx ] == 'desc' ?
                                    classes.sSortDesc :
                                    column.sSortingClass
                            );
                    } );
                },
        
                jqueryui: function ( settings, cell, column, classes ) {
                    $('<div/>')
                        .addClass( classes.sSortJUIWrapper )
                        .append( cell.contents() )
                        .append( $('<span/>')
                            .addClass( classes.sSortIcon+' '+column.sSortingClassJUI )
                        )
                        .appendTo( cell );
        
                    // Attach a sort listener to update on sort
                    $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
                        if ( settings !== ctx ) {
                            return;
                        }
        
                        var colIdx = column.idx;
        
                        cell
                            .removeClass( classes.sSortAsc +" "+classes.sSortDesc )
                            .addClass( columns[ colIdx ] == 'asc' ?
                                classes.sSortAsc : columns[ colIdx ] == 'desc' ?
                                    classes.sSortDesc :
                                    column.sSortingClass
                            );
        
                        cell
                            .find( 'span.'+classes.sSortIcon )
                            .removeClass(
                                classes.sSortJUIAsc +" "+
                                classes.sSortJUIDesc +" "+
                                classes.sSortJUI +" "+
                                classes.sSortJUIAscAllowed +" "+
                                classes.sSortJUIDescAllowed
                            )
                            .addClass( columns[ colIdx ] == 'asc' ?
                                classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?
                                    classes.sSortJUIDesc :
                                    column.sSortingClassJUI
                            );
                    } );
                }
            }
        } );
        
        /*
         * Public helper functions. These aren't used internally by DataTables, or
         * called by any of the options passed into DataTables, but they can be used
         * externally by developers working with DataTables. They are helper functions
         * to make working with DataTables a little bit easier.
         */
        
        var __htmlEscapeEntities = function ( d ) {
            if (Array.isArray(d)) {
                d = d.join(',');
            }
        
            return typeof d === 'string' ?
                d
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;') :
                d;
        };
        
        // Common logic for moment, luxon or a date action
        function __mld( dt, momentFn, luxonFn, dateFn, arg1 ) {
            if (window.moment) {
                return dt[momentFn]( arg1 );
            }
            else if (window.luxon) {
                return dt[luxonFn]( arg1 );
            }
            
            return dateFn ? dt[dateFn]( arg1 ) : dt;
        }
        
        
        var __mlWarning = false;
        function __mldObj (d, format, locale) {
            var dt;
        
            if (window.moment) {
                dt = window.moment.utc( d, format, locale, true );
        
                if (! dt.isValid()) {
                    return null;
                }
            }
            else if (window.luxon) {
                dt = format && typeof d === 'string'
                    ? window.luxon.DateTime.fromFormat( d, format )
                    : window.luxon.DateTime.fromISO( d );
        
                if (! dt.isValid) {
                    return null;
                }
        
                dt.setLocale(locale);
            }
            else if (! format) {
                // No format given, must be ISO
                dt = new Date(d);
            }
            else {
                if (! __mlWarning) {
                    alert('DataTables warning: Formatted date without Moment.js or Luxon - https://datatables.net/tn/17');
                }
        
                __mlWarning = true;
            }
        
            return dt;
        }
        
        // Wrapper for date, datetime and time which all operate the same way with the exception of
        // the output string for auto locale support
        function __mlHelper (localeString) {
            return function ( from, to, locale, def ) {
                // Luxon and Moment support
                // Argument shifting
                if ( arguments.length === 0 ) {
                    locale = 'en';
                    to = null; // means toLocaleString
                    from = null; // means iso8601
                }
                else if ( arguments.length === 1 ) {
                    locale = 'en';
                    to = from;
                    from = null;
                }
                else if ( arguments.length === 2 ) {
                    locale = to;
                    to = from;
                    from = null;
                }
        
                var typeName = 'datetime-' + to;
        
                // Add type detection and sorting specific to this date format - we need to be able to identify
                // date type columns as such, rather than as numbers in extensions. Hence the need for this.
                if (! DataTable.ext.type.order[typeName]) {
                    // The renderer will give the value to type detect as the type!
                    DataTable.ext.type.detect.unshift(function (d) {
                        return d === typeName ? typeName : false;
                    });
        
                    // The renderer gives us Moment, Luxon or Date obects for the sorting, all of which have a
                    // `valueOf` which gives milliseconds epoch
                    DataTable.ext.type.order[typeName + '-asc'] = function (a, b) {
                        var x = a.valueOf();
                        var y = b.valueOf();
        
                        return x === y
                            ? 0
                            : x < y
                                ? -1
                                : 1;
                    }
        
                    DataTable.ext.type.order[typeName + '-desc'] = function (a, b) {
                        var x = a.valueOf();
                        var y = b.valueOf();
        
                        return x === y
                            ? 0
                            : x > y
                                ? -1
                                : 1;
                    }
                }
            
                return function ( d, type ) {
                    // Allow for a default value
                    if (d === null || d === undefined) {
                        if (def === '--now') {
                            // We treat everything as UTC further down, so no changes are
                            // made, as such need to get the local date / time as if it were
                            // UTC
                            var local = new Date();
                            d = new Date( Date.UTC(
                                local.getFullYear(), local.getMonth(), local.getDate(),
                                local.getHours(), local.getMinutes(), local.getSeconds()
                            ) );
                        }
                        else {
                            d = '';
                        }
                    }
        
                    if (type === 'type') {
                        // Typing uses the type name for fast matching
                        return typeName;
                    }
        
                    if (d === '') {
                        return type !== 'sort'
                            ? ''
                            : __mldObj('0000-01-01 00:00:00', null, locale);
                    }
        
                    // Shortcut. If `from` and `to` are the same, we are using the renderer to
                    // format for ordering, not display - its already in the display format.
                    if ( to !== null && from === to && type !== 'sort' && type !== 'type' && ! (d instanceof Date) ) {
                        return d;
                    }
        
                    var dt = __mldObj(d, from, locale);
        
                    if (dt === null) {
                        return d;
                    }
        
                    if (type === 'sort') {
                        return dt;
                    }
                    
                    var formatted = to === null
                        ? __mld(dt, 'toDate', 'toJSDate', '')[localeString]()
                        : __mld(dt, 'format', 'toFormat', 'toISOString', to);
        
                    // XSS protection
                    return type === 'display' ?
                        __htmlEscapeEntities( formatted ) :
                        formatted;
                };
            }
        }
        
        // Based on locale, determine standard number formatting
        // Fallback for legacy browsers is US English
        var __thousands = ',';
        var __decimal = '.';
        
        if (window.Intl !== undefined) {
            try {
                var num = new Intl.NumberFormat().formatToParts(100000.1);
            
                for (var i=0 ; i<num.length ; i++) {
                    if (num[i].type === 'group') {
                        __thousands = num[i].value;
                    }
                    else if (num[i].type === 'decimal') {
                        __decimal = num[i].value;
                    }
                }
            }
            catch (e) {
                // noop
            }
        }
        
        // Formatted date time detection - use by declaring the formats you are going to use
        DataTable.datetime = function ( format, locale ) {
            var typeName = 'datetime-detect-' + format;
        
            if (! locale) {
                locale = 'en';
            }
        
            if (! DataTable.ext.type.order[typeName]) {
                DataTable.ext.type.detect.unshift(function (d) {
                    var dt = __mldObj(d, format, locale);
                    return d === '' || dt ? typeName : false;
                });
        
                DataTable.ext.type.order[typeName + '-pre'] = function (d) {
                    return __mldObj(d, format, locale) || 0;
                }
            }
        }
        
        /**
         * Helpers for `columns.render`.
         *
         * The options defined here can be used with the `columns.render` initialisation
         * option to provide a display renderer. The following functions are defined:
         *
         * * `number` - Will format numeric data (defined by `columns.data`) for
         *   display, retaining the original unformatted data for sorting and filtering.
         *   It takes 5 parameters:
         *   * `string` - Thousands grouping separator
         *   * `string` - Decimal point indicator
         *   * `integer` - Number of decimal points to show
         *   * `string` (optional) - Prefix.
         *   * `string` (optional) - Postfix (/suffix).
         * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
         *   parameters.
         *
         * @example
         *   // Column definition using the number renderer
         *   {
         *     data: "salary",
         *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
         *   }
         *
         * @namespace
         */
        DataTable.render = {
            date: __mlHelper('toLocaleDateString'),
            datetime: __mlHelper('toLocaleString'),
            time: __mlHelper('toLocaleTimeString'),
            number: function ( thousands, decimal, precision, prefix, postfix ) {
                // Auto locale detection
                if (thousands === null || thousands === undefined) {
                    thousands = __thousands;
                }
        
                if (decimal === null || decimal === undefined) {
                    decimal = __decimal;
                }
        
                return {
                    display: function ( d ) {
                        if ( typeof d !== 'number' && typeof d !== 'string' ) {
                            return d;
                        }
        
                        if (d === '' || d === null) {
                            return d;
                        }
        
                        var negative = d < 0 ? '-' : '';
                        var flo = parseFloat( d );
        
                        // If NaN then there isn't much formatting that we can do - just
                        // return immediately, escaping any HTML (this was supposed to
                        // be a number after all)
                        if ( isNaN( flo ) ) {
                            return __htmlEscapeEntities( d );
                        }
        
                        flo = flo.toFixed( precision );
                        d = Math.abs( flo );
        
                        var intPart = parseInt( d, 10 );
                        var floatPart = precision ?
                            decimal+(d - intPart).toFixed( precision ).substring( 2 ):
                            '';
        
                        // If zero, then can't have a negative prefix
                        if (intPart === 0 && parseFloat(floatPart) === 0) {
                            negative = '';
                        }
        
                        return negative + (prefix||'') +
                            intPart.toString().replace(
                                /\B(?=(\d{3})+(?!\d))/g, thousands
                            ) +
                            floatPart +
                            (postfix||'');
                    }
                };
            },
        
            text: function () {
                return {
                    display: __htmlEscapeEntities,
                    filter: __htmlEscapeEntities
                };
            }
        };
        
        
        /*
         * This is really a good bit rubbish this method of exposing the internal methods
         * publicly... - To be fixed in 2.0 using methods on the prototype
         */
        
        
        /**
         * Create a wrapper function for exporting an internal functions to an external API.
         *  @param {string} fn API function name
         *  @returns {function} wrapped function
         *  @memberof DataTable#internal
         */
        function _fnExternApiFunc (fn)
        {
            return function() {
                var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(
                    Array.prototype.slice.call(arguments)
                );
                return DataTable.ext.internal[fn].apply( this, args );
            };
        }
        
        
        /**
         * Reference to internal functions for use by plug-in developers. Note that
         * these methods are references to internal functions and are considered to be
         * private. If you use these methods, be aware that they are liable to change
         * between versions.
         *  @namespace
         */
        $.extend( DataTable.ext.internal, {
            _fnExternApiFunc: _fnExternApiFunc,
            _fnBuildAjax: _fnBuildAjax,
            _fnAjaxUpdate: _fnAjaxUpdate,
            _fnAjaxParameters: _fnAjaxParameters,
            _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
            _fnAjaxDataSrc: _fnAjaxDataSrc,
            _fnAddColumn: _fnAddColumn,
            _fnColumnOptions: _fnColumnOptions,
            _fnAdjustColumnSizing: _fnAdjustColumnSizing,
            _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
            _fnColumnIndexToVisible: _fnColumnIndexToVisible,
            _fnVisbleColumns: _fnVisbleColumns,
            _fnGetColumns: _fnGetColumns,
            _fnColumnTypes: _fnColumnTypes,
            _fnApplyColumnDefs: _fnApplyColumnDefs,
            _fnHungarianMap: _fnHungarianMap,
            _fnCamelToHungarian: _fnCamelToHungarian,
            _fnLanguageCompat: _fnLanguageCompat,
            _fnBrowserDetect: _fnBrowserDetect,
            _fnAddData: _fnAddData,
            _fnAddTr: _fnAddTr,
            _fnNodeToDataIndex: _fnNodeToDataIndex,
            _fnNodeToColumnIndex: _fnNodeToColumnIndex,
            _fnGetCellData: _fnGetCellData,
            _fnSetCellData: _fnSetCellData,
            _fnSplitObjNotation: _fnSplitObjNotation,
            _fnGetObjectDataFn: _fnGetObjectDataFn,
            _fnSetObjectDataFn: _fnSetObjectDataFn,
            _fnGetDataMaster: _fnGetDataMaster,
            _fnClearTable: _fnClearTable,
            _fnDeleteIndex: _fnDeleteIndex,
            _fnInvalidate: _fnInvalidate,
            _fnGetRowElements: _fnGetRowElements,
            _fnCreateTr: _fnCreateTr,
            _fnBuildHead: _fnBuildHead,
            _fnDrawHead: _fnDrawHead,
            _fnDraw: _fnDraw,
            _fnReDraw: _fnReDraw,
            _fnAddOptionsHtml: _fnAddOptionsHtml,
            _fnDetectHeader: _fnDetectHeader,
            _fnGetUniqueThs: _fnGetUniqueThs,
            _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
            _fnFilterComplete: _fnFilterComplete,
            _fnFilterCustom: _fnFilterCustom,
            _fnFilterColumn: _fnFilterColumn,
            _fnFilter: _fnFilter,
            _fnFilterCreateSearch: _fnFilterCreateSearch,
            _fnEscapeRegex: _fnEscapeRegex,
            _fnFilterData: _fnFilterData,
            _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
            _fnUpdateInfo: _fnUpdateInfo,
            _fnInfoMacros: _fnInfoMacros,
            _fnInitialise: _fnInitialise,
            _fnInitComplete: _fnInitComplete,
            _fnLengthChange: _fnLengthChange,
            _fnFeatureHtmlLength: _fnFeatureHtmlLength,
            _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
            _fnPageChange: _fnPageChange,
            _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
            _fnProcessingDisplay: _fnProcessingDisplay,
            _fnFeatureHtmlTable: _fnFeatureHtmlTable,
            _fnScrollDraw: _fnScrollDraw,
            _fnApplyToChildren: _fnApplyToChildren,
            _fnCalculateColumnWidths: _fnCalculateColumnWidths,
            _fnThrottle: _fnThrottle,
            _fnConvertToWidth: _fnConvertToWidth,
            _fnGetWidestNode: _fnGetWidestNode,
            _fnGetMaxLenString: _fnGetMaxLenString,
            _fnStringToCss: _fnStringToCss,
            _fnSortFlatten: _fnSortFlatten,
            _fnSort: _fnSort,
            _fnSortAria: _fnSortAria,
            _fnSortListener: _fnSortListener,
            _fnSortAttachListener: _fnSortAttachListener,
            _fnSortingClasses: _fnSortingClasses,
            _fnSortData: _fnSortData,
            _fnSaveState: _fnSaveState,
            _fnLoadState: _fnLoadState,
            _fnImplementState: _fnImplementState,
            _fnSettingsFromNode: _fnSettingsFromNode,
            _fnLog: _fnLog,
            _fnMap: _fnMap,
            _fnBindAction: _fnBindAction,
            _fnCallbackReg: _fnCallbackReg,
            _fnCallbackFire: _fnCallbackFire,
            _fnLengthOverflow: _fnLengthOverflow,
            _fnRenderer: _fnRenderer,
            _fnDataSource: _fnDataSource,
            _fnRowAttributes: _fnRowAttributes,
            _fnExtend: _fnExtend,
            _fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant
                                            // in 1.10, so this dead-end function is
                                            // added to prevent errors
        } );
        
        
        // jQuery access
        $.fn.dataTable = DataTable;
        
        // Provide access to the host jQuery object (circular reference)
        DataTable.$ = $;
        
        // Legacy aliases
        $.fn.dataTableSettings = DataTable.settings;
        $.fn.dataTableExt = DataTable.ext;
        
        // With a capital `D` we return a DataTables API instance rather than a
        // jQuery object
        $.fn.DataTable = function ( opts ) {
            return $(this).dataTable( opts ).api();
        };
        
        // All properties that are available to $.fn.dataTable should also be
        // available on $.fn.DataTable
        $.each( DataTable, function ( prop, val ) {
            $.fn.DataTable[ prop ] = val;
        } );
    
        return DataTable;
    }));
    
    },{"jquery":416}],405:[function(require,module,exports){
    /**
     * Input Length Warning
     */
    
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _jquery = require('jquery');
    
    var _jquery2 = _interopRequireDefault(_jquery);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var InputLength = function () {
    
      /**
       * @constructor
       */
      function InputLength($html) {
        _classCallCheck(this, InputLength);
    
        this.$html = $html, this.baseClass = 'inputLength';
        this.labelClass = 'inputLength__label';
        this.okClass = 'inputLength--ok';
        this.warnClass = 'inputLength--warn';
        this.stopClass = 'inputLength--stop';
        this.warnThreshold = 70;
      }
    
      /**
       * Initialise behaviour on target element
       */
    
    
      _createClass(InputLength, [{
        key: 'init',
        value: function init() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    
          var _self = this;
    
          // If no selector is passed, we'll presume someone is attempting to implement this and failing
          if (typeof options.targetSelector === 'undefined') {
            throw new Error('Attempting to initialise input length warning but no selector has been provided');
          }
    
          // Find the elements needing the warning
          var targets = this.$html.find(options.targetSelector);
    
          // If no targets match the target selector, fail silently
          if (!targets.length) {
            return false;
          }
    
          // Handle any supplied options
          if (typeof options.baseClass != 'undefined') {
            _self.baseClass = options.baseClass;
          }
    
          if (typeof options.baseClass != 'undefined') {
            _self.baseClass = options.baseClass;
          }
    
          if (typeof options.labelClass != 'undefined') {
            _self.labelClass = options.labelClass;
          }
    
          if (typeof options.okClass != 'undefined') {
            _self.okClass = options.okClass;
          }
    
          if (typeof options.warnClass != 'undefined') {
            _self.warnClass = options.warnClass;
          }
    
          if (typeof options.stopClass != 'undefined') {
            _self.stopClass = options.stopClass;
          }
    
          if (typeof options.warnThreshold != 'undefined') {
            _self.warnThreshold = options.warnThreshold;
          }
    
          targets.each(function () {
            _self.setInputLengthWarning(this);
          });
        }
    
        /**
         * 
         * @param {element} target A textarea instance
         */
    
      }, {
        key: 'setInputLengthWarning',
        value: function setInputLengthWarning(target) {
          var _self = this,
              $target = (0, _jquery2.default)(target),
              maxLength = target.getAttribute('maxlength'),
              ariaDescribedby = target.getAttribute('aria-describedby') ? target.getAttribute('aria-describedby') + ' ' : '',
              messageContainer = document.createElement('span'),
              guid = 'guid-' + Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000;
    
          // Proceed only if we have a maxlength,
          if (maxLength === null) {
            return;
          }
    
          // Mark up the generated content with supplied options
          messageContainer.setAttribute('id', guid);
          messageContainer.setAttribute('aria-live', 'polite');
          messageContainer.classList.add(_self.baseClass);
    
          $target.attr('aria-describedby', ariaDescribedby + guid);
          $target.after(messageContainer);
    
          // Trigger the initial population of the message
          _self.updateRemaining(target, maxLength, messageContainer);
    
          // set up events
          (0, _jquery2.default)(target).on('input', function () {
            _self.updateRemaining(target, maxLength, messageContainer);
          });
        }
    
        /**
         * 
         * @param {element} target the input we're dealing with
         * @param {integer} maxLength the current max length of the target
         * @param {element} messageContainer element to populate with the message 
         */
    
      }, {
        key: 'updateRemaining',
        value: function updateRemaining(target, maxLength, messageContainer) {
          var _self = this,
              curLength = target.value.length,
              percentUsed = curLength / maxLength * 100,
              count = void 0,
              countLabel = void 0,
              countLabelPlural = void 0,
              countLabelDescription = void 0;
    
          // Set status classes based on configurable thresholds
          if (percentUsed === 100) {
            messageContainer.classList.add(_self.stopClass);
            messageContainer.classList.remove(_self.warnClass, _self.okClass);
          } else if (percentUsed > _self.warnThreshold) {
            messageContainer.classList.add(_self.warnClass);
            messageContainer.classList.remove(_self.okClass, _self.stopClass);
          } else {
            messageContainer.classList.add(_self.okClass);
            messageContainer.classList.remove(_self.warnClass, _self.stopClass);
          }
    
          // construct the message label
          count = maxLength - curLength;
          countLabelPlural = count === 1 ? '' : 's';
          countLabelDescription = curLength === 0 ? 'allowed' : 'left';
    
          countLabel = '<span class="' + _self.labelClass + '">' + count + '</span> character' + countLabelPlural;
          messageContainer.innerHTML = countLabel + ' ' + countLabelDescription;
        }
      }]);
    
      return InputLength;
    }();
    
    module.exports = InputLength;
    
    },{"jquery":416}],406:[function(require,module,exports){
    /*!
     * The Final Countdown for jQuery v2.2.0 (http://hilios.github.io/jQuery.countdown/)
     * Copyright (c) 2016 Edson Hilios
     * 
     * Permission is hereby granted, free of charge, to any person obtaining a copy of
     * this software and associated documentation files (the "Software"), to deal in
     * the Software without restriction, including without limitation the rights to
     * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
     * the Software, and to permit persons to whom the Software is furnished to do so,
     * subject to the following conditions:
     * 
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     * 
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     */
    (function(factory) {
        "use strict";
        if (typeof define === "function" && define.amd) {
            define([ "jquery" ], factory);
        } else {
            factory(jQuery);
        }
    })(function($) {
        "use strict";
        var instances = [], matchers = [], defaultOptions = {
            precision: 100,
            elapse: false,
            defer: false
        };
        matchers.push(/^[0-9]*$/.source);
        matchers.push(/([0-9]{1,2}\/){2}[0-9]{4}( [0-9]{1,2}(:[0-9]{2}){2})?/.source);
        matchers.push(/[0-9]{4}([\/\-][0-9]{1,2}){2}( [0-9]{1,2}(:[0-9]{2}){2})?/.source);
        matchers = new RegExp(matchers.join("|"));
        function parseDateString(dateString) {
            if (dateString instanceof Date) {
                return dateString;
            }
            if (String(dateString).match(matchers)) {
                if (String(dateString).match(/^[0-9]*$/)) {
                    dateString = Number(dateString);
                }
                if (String(dateString).match(/\-/)) {
                    dateString = String(dateString).replace(/\-/g, "/");
                }
                return new Date(dateString);
            } else {
                throw new Error("Couldn't cast `" + dateString + "` to a date object.");
            }
        }
        var DIRECTIVE_KEY_MAP = {
            Y: "years",
            m: "months",
            n: "daysToMonth",
            d: "daysToWeek",
            w: "weeks",
            W: "weeksToMonth",
            H: "hours",
            M: "minutes",
            S: "seconds",
            D: "totalDays",
            I: "totalHours",
            N: "totalMinutes",
            T: "totalSeconds"
        };
        function escapedRegExp(str) {
            var sanitize = str.toString().replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
            return new RegExp(sanitize);
        }
        function strftime(offsetObject) {
            return function(format) {
                var directives = format.match(/%(-|!)?[A-Z]{1}(:[^;]+;)?/gi);
                if (directives) {
                    for (var i = 0, len = directives.length; i < len; ++i) {
                        var directive = directives[i].match(/%(-|!)?([a-zA-Z]{1})(:[^;]+;)?/), regexp = escapedRegExp(directive[0]), modifier = directive[1] || "", plural = directive[3] || "", value = null;
                        directive = directive[2];
                        if (DIRECTIVE_KEY_MAP.hasOwnProperty(directive)) {
                            value = DIRECTIVE_KEY_MAP[directive];
                            value = Number(offsetObject[value]);
                        }
                        if (value !== null) {
                            if (modifier === "!") {
                                value = pluralize(plural, value);
                            }
                            if (modifier === "") {
                                if (value < 10) {
                                    value = "0" + value.toString();
                                }
                            }
                            format = format.replace(regexp, value.toString());
                        }
                    }
                }
                format = format.replace(/%%/, "%");
                return format;
            };
        }
        function pluralize(format, count) {
            var plural = "s", singular = "";
            if (format) {
                format = format.replace(/(:|;|\s)/gi, "").split(/\,/);
                if (format.length === 1) {
                    plural = format[0];
                } else {
                    singular = format[0];
                    plural = format[1];
                }
            }
            if (Math.abs(count) > 1) {
                return plural;
            } else {
                return singular;
            }
        }
        var Countdown = function(el, finalDate, options) {
            this.el = el;
            this.$el = $(el);
            this.interval = null;
            this.offset = {};
            this.options = $.extend({}, defaultOptions);
            this.instanceNumber = instances.length;
            instances.push(this);
            this.$el.data("countdown-instance", this.instanceNumber);
            if (options) {
                if (typeof options === "function") {
                    this.$el.on("update.countdown", options);
                    this.$el.on("stoped.countdown", options);
                    this.$el.on("finish.countdown", options);
                } else {
                    this.options = $.extend({}, defaultOptions, options);
                }
            }
            this.setFinalDate(finalDate);
            if (this.options.defer === false) {
                this.start();
            }
        };
        $.extend(Countdown.prototype, {
            start: function() {
                if (this.interval !== null) {
                    clearInterval(this.interval);
                }
                var self = this;
                this.update();
                this.interval = setInterval(function() {
                    self.update.call(self);
                }, this.options.precision);
            },
            stop: function() {
                clearInterval(this.interval);
                this.interval = null;
                this.dispatchEvent("stoped");
            },
            toggle: function() {
                if (this.interval) {
                    this.stop();
                } else {
                    this.start();
                }
            },
            pause: function() {
                this.stop();
            },
            resume: function() {
                this.start();
            },
            remove: function() {
                this.stop.call(this);
                instances[this.instanceNumber] = null;
                delete this.$el.data().countdownInstance;
            },
            setFinalDate: function(value) {
                this.finalDate = parseDateString(value);
            },
            update: function() {
                if (this.$el.closest("html").length === 0) {
                    this.remove();
                    return;
                }
                var hasEventsAttached = $._data(this.el, "events") !== undefined, now = new Date(), newTotalSecsLeft;
                newTotalSecsLeft = this.finalDate.getTime() - now.getTime();
                newTotalSecsLeft = Math.ceil(newTotalSecsLeft / 1e3);
                newTotalSecsLeft = !this.options.elapse && newTotalSecsLeft < 0 ? 0 : Math.abs(newTotalSecsLeft);
                if (this.totalSecsLeft === newTotalSecsLeft || !hasEventsAttached) {
                    return;
                } else {
                    this.totalSecsLeft = newTotalSecsLeft;
                }
                this.elapsed = now >= this.finalDate;
                this.offset = {
                    seconds: this.totalSecsLeft % 60,
                    minutes: Math.floor(this.totalSecsLeft / 60) % 60,
                    hours: Math.floor(this.totalSecsLeft / 60 / 60) % 24,
                    days: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
                    daysToWeek: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
                    daysToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 % 30.4368),
                    weeks: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7),
                    weeksToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7) % 4,
                    months: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 30.4368),
                    years: Math.abs(this.finalDate.getFullYear() - now.getFullYear()),
                    totalDays: Math.floor(this.totalSecsLeft / 60 / 60 / 24),
                    totalHours: Math.floor(this.totalSecsLeft / 60 / 60),
                    totalMinutes: Math.floor(this.totalSecsLeft / 60),
                    totalSeconds: this.totalSecsLeft
                };
                if (!this.options.elapse && this.totalSecsLeft === 0) {
                    this.stop();
                    this.dispatchEvent("finish");
                } else {
                    this.dispatchEvent("update");
                }
            },
            dispatchEvent: function(eventName) {
                var event = $.Event(eventName + ".countdown");
                event.finalDate = this.finalDate;
                event.elapsed = this.elapsed;
                event.offset = $.extend({}, this.offset);
                event.strftime = strftime(this.offset);
                this.$el.trigger(event);
            }
        });
        $.fn.countdown = function() {
            var argumentsArray = Array.prototype.slice.call(arguments, 0);
            return this.each(function() {
                var instanceNumber = $(this).data("countdown-instance");
                if (instanceNumber !== undefined) {
                    var instance = instances[instanceNumber], method = argumentsArray[0];
                    if (Countdown.prototype.hasOwnProperty(method)) {
                        instance[method].apply(instance, argumentsArray.slice(1));
                    } else if (String(method).match(/^[$A-Z_][0-9A-Z_$]*$/i) === null) {
                        instance.setFinalDate.call(instance, method);
                        instance.start();
                    } else {
                        $.error("Method %s does not exist on jQuery.countdown".replace(/\%s/gi, method));
                    }
                } else {
                    new Countdown(this, argumentsArray[0], argumentsArray[1]);
                }
            });
        };
    });
    },{}],407:[function(require,module,exports){
    /*!
     * jQuery Placeholder Plugin v2.3.1
     * https://github.com/mathiasbynens/jquery-placeholder
     *
     * Copyright 2011, 2015 Mathias Bynens
     * Released under the MIT license
     */
    (function(factory) {
        if (typeof define === 'function' && define.amd) {
            // AMD
            define(['jquery'], factory);
        } else if (typeof module === 'object' && module.exports) {
            factory(require('jquery'));
        } else {
            // Browser globals
            factory(jQuery);
        }
    }(function($) {
    
        /****
         * Allows plugin behavior simulation in modern browsers for easier debugging. 
         * When setting to true, use attribute "placeholder-x" rather than the usual "placeholder" in your inputs/textareas 
         * i.e. <input type="text" placeholder-x="my placeholder text" />
         */
        var debugMode = false; 
    
        // Opera Mini v7 doesn't support placeholder although its DOM seems to indicate so
        var isOperaMini = Object.prototype.toString.call(window.operamini) === '[object OperaMini]';
        var isInputSupported = 'placeholder' in document.createElement('input') && !isOperaMini && !debugMode;
        var isTextareaSupported = 'placeholder' in document.createElement('textarea') && !isOperaMini && !debugMode;
        var valHooks = $.valHooks;
        var propHooks = $.propHooks;
        var hooks;
        var placeholder;
        var settings = {};
    
        if (isInputSupported && isTextareaSupported) {
    
            placeholder = $.fn.placeholder = function() {
                return this;
            };
    
            placeholder.input = true;
            placeholder.textarea = true;
    
        } else {
    
            placeholder = $.fn.placeholder = function(options) {
    
                var defaults = {customClass: 'placeholder'};
                settings = $.extend({}, defaults, options);
    
                return this.filter((isInputSupported ? 'textarea' : ':input') + '[' + (debugMode ? 'placeholder-x' : 'placeholder') + ']')
                    .not('.'+settings.customClass)
                    .not(':radio, :checkbox, [type=hidden]')
                    .bind({
                        'focus.placeholder': clearPlaceholder,
                        'blur.placeholder': setPlaceholder
                    })
                    .data('placeholder-enabled', true)
                    .trigger('blur.placeholder');
            };
    
            placeholder.input = isInputSupported;
            placeholder.textarea = isTextareaSupported;
    
            hooks = {
                'get': function(element) {
    
                    var $element = $(element);
                    var $passwordInput = $element.data('placeholder-password');
    
                    if ($passwordInput) {
                        return $passwordInput[0].value;
                    }
    
                    return $element.data('placeholder-enabled') && $element.hasClass(settings.customClass) ? '' : element.value;
                },
                'set': function(element, value) {
    
                    var $element = $(element);
                    var $replacement;
                    var $passwordInput;
    
                    if (value !== '') {
    
                        $replacement = $element.data('placeholder-textinput');
                        $passwordInput = $element.data('placeholder-password');
    
                        if ($replacement) {
                            clearPlaceholder.call($replacement[0], true, value) || (element.value = value);
                            $replacement[0].value = value;
    
                        } else if ($passwordInput) {
                            clearPlaceholder.call(element, true, value) || ($passwordInput[0].value = value);
                            element.value = value;
                        }
                    }
    
                    if (!$element.data('placeholder-enabled')) {
                        element.value = value;
                        return $element;
                    }
    
                    if (value === '') {
                        
                        element.value = value;
                        
                        // Setting the placeholder causes problems if the element continues to have focus.
                        if (element != safeActiveElement()) {
                            // We can't use `triggerHandler` here because of dummy text/password inputs :(
                            setPlaceholder.call(element);
                        }
    
                    } else {
                        
                        if ($element.hasClass(settings.customClass)) {
                            clearPlaceholder.call(element);
                        }
    
                        element.value = value;
                    }
                    // `set` can not return `undefined`; see http://jsapi.info/jquery/1.7.1/val#L2363
                    return $element;
                }
            };
    
            if (!isInputSupported) {
                valHooks.input = hooks;
                propHooks.value = hooks;
            }
    
            if (!isTextareaSupported) {
                valHooks.textarea = hooks;
                propHooks.value = hooks;
            }
    
            $(function() {
                // Look for forms
                $(document).delegate('form', 'submit.placeholder', function() {
                    
                    // Clear the placeholder values so they don't get submitted
                    var $inputs = $('.'+settings.customClass, this).each(function() {
                        clearPlaceholder.call(this, true, '');
                    });
    
                    setTimeout(function() {
                        $inputs.each(setPlaceholder);
                    }, 10);
                });
            });
    
            // Clear placeholder values upon page reload
            $(window).bind('beforeunload.placeholder', function() {
    
                var clearPlaceholders = true;
    
                try {
                    // Prevent IE javascript:void(0) anchors from causing cleared values
                    if (document.activeElement.toString() === 'javascript:void(0)') {
                        clearPlaceholders = false;
                    }
                } catch (exception) { }
    
                if (clearPlaceholders) {
                    $('.'+settings.customClass).each(function() {
                        this.value = '';
                    });
                }
            });
        }
    
        function args(elem) {
            // Return an object of element attributes
            var newAttrs = {};
            var rinlinejQuery = /^jQuery\d+$/;
    
            $.each(elem.attributes, function(i, attr) {
                if (attr.specified && !rinlinejQuery.test(attr.name)) {
                    newAttrs[attr.name] = attr.value;
                }
            });
    
            return newAttrs;
        }
    
        function clearPlaceholder(event, value) {
            
            var input = this;
            var $input = $(this);
            
            if (input.value === $input.attr((debugMode ? 'placeholder-x' : 'placeholder')) && $input.hasClass(settings.customClass)) {
                
                input.value = '';
                $input.removeClass(settings.customClass);
    
                if ($input.data('placeholder-password')) {
    
                    $input = $input.hide().nextAll('input[type="password"]:first').show().attr('id', $input.removeAttr('id').data('placeholder-id'));
                    
                    // If `clearPlaceholder` was called from `$.valHooks.input.set`
                    if (event === true) {
                        $input[0].value = value;
    
                        return value;
                    }
    
                    $input.focus();
    
                } else {
                    input == safeActiveElement() && input.select();
                }
            }
        }
    
        function setPlaceholder(event) {
            var $replacement;
            var input = this;
            var $input = $(this);
            var id = input.id;
    
            // If the placeholder is activated, triggering blur event (`$input.trigger('blur')`) should do nothing.
            if (event && event.type === 'blur' && $input.hasClass(settings.customClass)) {
                return;
            }
    
            if (input.value === '') {
                if (input.type === 'password') {
                    if (!$input.data('placeholder-textinput')) {
                        
                        try {
                            $replacement = $input.clone().prop({ 'type': 'text' });
                        } catch(e) {
                            $replacement = $('<input>').attr($.extend(args(this), { 'type': 'text' }));
                        }
    
                        $replacement
                            .removeAttr('name')
                            .data({
                                'placeholder-enabled': true,
                                'placeholder-password': $input,
                                'placeholder-id': id
                            })
                            .bind('focus.placeholder', clearPlaceholder);
    
                        $input
                            .data({
                                'placeholder-textinput': $replacement,
                                'placeholder-id': id
                            })
                            .before($replacement);
                    }
    
                    input.value = '';
                    $input = $input.removeAttr('id').hide().prevAll('input[type="text"]:first').attr('id', $input.data('placeholder-id')).show();
    
                } else {
                    
                    var $passwordInput = $input.data('placeholder-password');
    
                    if ($passwordInput) {
                        $passwordInput[0].value = '';
                        $input.attr('id', $input.data('placeholder-id')).show().nextAll('input[type="password"]:last').hide().removeAttr('id');
                    }
                }
    
                $input.addClass(settings.customClass);
                $input[0].value = $input.attr((debugMode ? 'placeholder-x' : 'placeholder'));
    
            } else {
                $input.removeClass(settings.customClass);
            }
        }
    
        function safeActiveElement() {
            // Avoid IE9 `document.activeElement` of death
            try {
                return document.activeElement;
            } catch (exception) {}
        }
    }));
    
    },{"jquery":416}],408:[function(require,module,exports){
    // Sticky Plugin v1.0.4 for jQuery
    // =============
    // Author: Anthony Garand
    // Improvements by German M. Bravo (Kronuz) and Ruud Kamphuis (ruudk)
    // Improvements by Leonardo C. Daronco (daronco)
    // Created: 02/14/2011
    // Date: 07/20/2015
    // Website: http://stickyjs.com/
    // Description: Makes an element on the page stick on the screen as you scroll
    //              It will only set the 'top' and 'position' of your element, you
    //              might need to adjust the width in some cases.
    
    (function (factory) {
        if (typeof define === 'function' && define.amd) {
            // AMD. Register as an anonymous module.
            define(['jquery'], factory);
        } else if (typeof module === 'object' && module.exports) {
            // Node/CommonJS
            module.exports = factory(require('jquery'));
        } else {
            // Browser globals
            factory(jQuery);
        }
    }(function ($) {
        var slice = Array.prototype.slice; // save ref to original slice()
        var splice = Array.prototype.splice; // save ref to original slice()
    
      var defaults = {
          topSpacing: 0,
          bottomSpacing: 0,
          className: 'is-sticky',
          wrapperClassName: 'sticky-wrapper',
          center: false,
          getWidthFrom: '',
          widthFromWrapper: true, // works only when .getWidthFrom is empty
          responsiveWidth: false,
          zIndex: 'auto'
        },
        $window = $(window),
        $document = $(document),
        sticked = [],
        windowHeight = $window.height(),
        scroller = function() {
          var scrollTop = $window.scrollTop(),
            documentHeight = $document.height(),
            dwh = documentHeight - windowHeight,
            extra = (scrollTop > dwh) ? dwh - scrollTop : 0;
    
          for (var i = 0, l = sticked.length; i < l; i++) {
            var s = sticked[i],
              elementTop = s.stickyWrapper.offset().top,
              etse = elementTop - s.topSpacing - extra;
    
            //update height in case of dynamic content
            s.stickyWrapper.css('height', s.stickyElement.outerHeight());
    
            if (scrollTop <= etse) {
              if (s.currentTop !== null) {
                s.stickyElement
                  .css({
                    'width': '',
                    'position': '',
                    'top': '',
                    'z-index': ''
                  });
                s.stickyElement.parent().removeClass(s.className);
                s.stickyElement.trigger('sticky-end', [s]);
                s.currentTop = null;
              }
            }
            else {
              var newTop = documentHeight - s.stickyElement.outerHeight()
                - s.topSpacing - s.bottomSpacing - scrollTop - extra;
              if (newTop < 0) {
                newTop = newTop + s.topSpacing;
              } else {
                newTop = s.topSpacing;
              }
              if (s.currentTop !== newTop) {
                var newWidth;
                if (s.getWidthFrom) {
                    newWidth = $(s.getWidthFrom).width() || null;
                } else if (s.widthFromWrapper) {
                    newWidth = s.stickyWrapper.width();
                }
                if (newWidth == null) {
                    newWidth = s.stickyElement.width();
                }
                s.stickyElement
                  .css('width', newWidth)
                  .css('position', 'fixed')
                  .css('top', newTop)
                  .css('z-index', s.zIndex);
    
                s.stickyElement.parent().addClass(s.className);
    
                if (s.currentTop === null) {
                  s.stickyElement.trigger('sticky-start', [s]);
                } else {
                  // sticky is started but it have to be repositioned
                  s.stickyElement.trigger('sticky-update', [s]);
                }
    
                if (s.currentTop === s.topSpacing && s.currentTop > newTop || s.currentTop === null && newTop < s.topSpacing) {
                  // just reached bottom || just started to stick but bottom is already reached
                  s.stickyElement.trigger('sticky-bottom-reached', [s]);
                } else if(s.currentTop !== null && newTop === s.topSpacing && s.currentTop < newTop) {
                  // sticky is started && sticked at topSpacing && overflowing from top just finished
                  s.stickyElement.trigger('sticky-bottom-unreached', [s]);
                }
    
                s.currentTop = newTop;
              }
    
              // Check if sticky has reached end of container and stop sticking
              var stickyWrapperContainer = s.stickyWrapper.parent();
              var unstick = (s.stickyElement.offset().top + s.stickyElement.outerHeight() >= stickyWrapperContainer.offset().top + stickyWrapperContainer.outerHeight()) && (s.stickyElement.offset().top <= s.topSpacing);
    
              if( unstick ) {
                s.stickyElement
                  .css('position', 'absolute')
                  .css('top', '')
                  .css('bottom', 0)
                  .css('z-index', '');
              } else {
                s.stickyElement
                  .css('position', 'fixed')
                  .css('top', newTop)
                  .css('bottom', '')
                  .css('z-index', s.zIndex);
              }
            }
          }
        },
        resizer = function() {
          windowHeight = $window.height();
    
          for (var i = 0, l = sticked.length; i < l; i++) {
            var s = sticked[i];
            var newWidth = null;
            if (s.getWidthFrom) {
                if (s.responsiveWidth) {
                    newWidth = $(s.getWidthFrom).width();
                }
            } else if(s.widthFromWrapper) {
                newWidth = s.stickyWrapper.width();
            }
            if (newWidth != null) {
                s.stickyElement.css('width', newWidth);
            }
          }
        },
        methods = {
          init: function(options) {
            var o = $.extend({}, defaults, options);
            return this.each(function() {
              var stickyElement = $(this);
    
              var stickyId = stickyElement.attr('id');
              var wrapperId = stickyId ? stickyId + '-' + defaults.wrapperClassName : defaults.wrapperClassName;
              var wrapper = $('<div></div>')
                .attr('id', wrapperId)
                .addClass(o.wrapperClassName);
    
              stickyElement.wrapAll(wrapper);
    
              var stickyWrapper = stickyElement.parent();
    
              if (o.center) {
                stickyWrapper.css({width:stickyElement.outerWidth(),marginLeft:"auto",marginRight:"auto"});
              }
    
              if (stickyElement.css("float") === "right") {
                stickyElement.css({"float":"none"}).parent().css({"float":"right"});
              }
    
              o.stickyElement = stickyElement;
              o.stickyWrapper = stickyWrapper;
              o.currentTop    = null;
    
              sticked.push(o);
    
              methods.setWrapperHeight(this);
              methods.setupChangeListeners(this);
            });
          },
    
          setWrapperHeight: function(stickyElement) {
            var element = $(stickyElement);
            var stickyWrapper = element.parent();
            if (stickyWrapper) {
              stickyWrapper.css('height', element.outerHeight());
            }
          },
    
          setupChangeListeners: function(stickyElement) {
            if (window.MutationObserver) {
              var mutationObserver = new window.MutationObserver(function(mutations) {
                if (mutations[0].addedNodes.length || mutations[0].removedNodes.length) {
                  methods.setWrapperHeight(stickyElement);
                }
              });
              mutationObserver.observe(stickyElement, {subtree: true, childList: true});
            } else {
              stickyElement.addEventListener('DOMNodeInserted', function() {
                methods.setWrapperHeight(stickyElement);
              }, false);
              stickyElement.addEventListener('DOMNodeRemoved', function() {
                methods.setWrapperHeight(stickyElement);
              }, false);
            }
          },
          update: scroller,
          unstick: function(options) {
            return this.each(function() {
              var that = this;
              var unstickyElement = $(that);
    
              var removeIdx = -1;
              var i = sticked.length;
              while (i-- > 0) {
                if (sticked[i].stickyElement.get(0) === that) {
                    splice.call(sticked,i,1);
                    removeIdx = i;
                }
              }
              if(removeIdx !== -1) {
                unstickyElement.unwrap();
                unstickyElement
                  .css({
                    'width': '',
                    'position': '',
                    'top': '',
                    'float': '',
                    'z-index': ''
                  })
                ;
              }
            });
          }
        };
    
      // should be more efficient than using $window.scroll(scroller) and $window.resize(resizer):
      if (window.addEventListener) {
        window.addEventListener('scroll', scroller, false);
        window.addEventListener('resize', resizer, false);
      } else if (window.attachEvent) {
        window.attachEvent('onscroll', scroller);
        window.attachEvent('onresize', resizer);
      }
    
      $.fn.sticky = function(method) {
        if (methods[method]) {
          return methods[method].apply(this, slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method ) {
          return methods.init.apply( this, arguments );
        } else {
          $.error('Method ' + method + ' does not exist on jQuery.sticky');
        }
      };
    
      $.fn.unstick = function(method) {
        if (methods[method]) {
          return methods[method].apply(this, slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method ) {
          return methods.unstick.apply( this, arguments );
        } else {
          $.error('Method ' + method + ' does not exist on jQuery.sticky');
        }
      };
      $(function() {
        setTimeout(scroller, 0);
      });
    }));
    
    },{"jquery":416}],409:[function(require,module,exports){
    /*!
     * jQuery UI :data 1.13.3
     * https://jqueryui.com
     *
     * Copyright OpenJS Foundation and other contributors
     * Released under the MIT license.
     * https://jquery.org/license
     */
    
    //>>label: :data Selector
    //>>group: Core
    //>>description: Selects elements which have data stored under the specified key.
    //>>docs: https://api.jqueryui.com/data-selector/
    
    ( function( factory ) {
        "use strict";
    
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define( [ "jquery", "./version" ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    } )( function( $ ) {
    "use strict";
    
    return $.extend( $.expr.pseudos, {
        data: $.expr.createPseudo ?
            $.expr.createPseudo( function( dataName ) {
                return function( elem ) {
                    return !!$.data( elem, dataName );
                };
            } ) :
    
            // Support: jQuery <1.8
            function( elem, i, match ) {
                return !!$.data( elem, match[ 3 ] );
            }
    } );
    } );
    
    },{}],410:[function(require,module,exports){
    /*!
     * jQuery UI Disable Selection 1.13.3
     * https://jqueryui.com
     *
     * Copyright OpenJS Foundation and other contributors
     * Released under the MIT license.
     * https://jquery.org/license
     */
    
    //>>label: disableSelection
    //>>group: Core
    //>>description: Disable selection of text content within the set of matched elements.
    //>>docs: https://api.jqueryui.com/disableSelection/
    
    // This file is deprecated
    ( function( factory ) {
        "use strict";
    
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define( [ "jquery", "./version" ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    } )( function( $ ) {
    "use strict";
    
    return $.fn.extend( {
        disableSelection: ( function() {
            var eventType = "onselectstart" in document.createElement( "div" ) ?
                "selectstart" :
                "mousedown";
    
            return function() {
                return this.on( eventType + ".ui-disableSelection", function( event ) {
                    event.preventDefault();
                } );
            };
        } )(),
    
        enableSelection: function() {
            return this.off( ".ui-disableSelection" );
        }
    } );
    
    } );
    
    },{}],411:[function(require,module,exports){
    /*!
     * jQuery UI Scroll Parent 1.13.3
     * https://jqueryui.com
     *
     * Copyright OpenJS Foundation and other contributors
     * Released under the MIT license.
     * https://jquery.org/license
     */
    
    //>>label: scrollParent
    //>>group: Core
    //>>description: Get the closest ancestor element that is scrollable.
    //>>docs: https://api.jqueryui.com/scrollParent/
    
    ( function( factory ) {
        "use strict";
    
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define( [ "jquery", "./version" ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    } )( function( $ ) {
    "use strict";
    
    return $.fn.scrollParent = function( includeHidden ) {
        var position = this.css( "position" ),
            excludeStaticParent = position === "absolute",
            overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
            scrollParent = this.parents().filter( function() {
                var parent = $( this );
                if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
                    return false;
                }
                return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) +
                    parent.css( "overflow-x" ) );
            } ).eq( 0 );
    
        return position === "fixed" || !scrollParent.length ?
            $( this[ 0 ].ownerDocument || document ) :
            scrollParent;
    };
    
    } );
    
    },{}],412:[function(require,module,exports){
    /*!
     * jQuery UI Widget 1.13.3
     * https://jqueryui.com
     *
     * Copyright OpenJS Foundation and other contributors
     * Released under the MIT license.
     * https://jquery.org/license
     */
    
    //>>label: Widget
    //>>group: Core
    //>>description: Provides a factory for creating stateful widgets with a common API.
    //>>docs: https://api.jqueryui.com/jQuery.widget/
    //>>demos: https://jqueryui.com/widget/
    
    ( function( factory ) {
        "use strict";
    
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define( [ "jquery", "./version" ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    } )( function( $ ) {
    "use strict";
    
    var widgetUuid = 0;
    var widgetHasOwnProperty = Array.prototype.hasOwnProperty;
    var widgetSlice = Array.prototype.slice;
    
    $.cleanData = ( function( orig ) {
        return function( elems ) {
            var events, elem, i;
            for ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {
    
                // Only trigger remove when necessary to save time
                events = $._data( elem, "events" );
                if ( events && events.remove ) {
                    $( elem ).triggerHandler( "remove" );
                }
            }
            orig( elems );
        };
    } )( $.cleanData );
    
    $.widget = function( name, base, prototype ) {
        var existingConstructor, constructor, basePrototype;
    
        // ProxiedPrototype allows the provided prototype to remain unmodified
        // so that it can be used as a mixin for multiple widgets (#8876)
        var proxiedPrototype = {};
    
        var namespace = name.split( "." )[ 0 ];
        name = name.split( "." )[ 1 ];
        var fullName = namespace + "-" + name;
    
        if ( !prototype ) {
            prototype = base;
            base = $.Widget;
        }
    
        if ( Array.isArray( prototype ) ) {
            prototype = $.extend.apply( null, [ {} ].concat( prototype ) );
        }
    
        // Create selector for plugin
        $.expr.pseudos[ fullName.toLowerCase() ] = function( elem ) {
            return !!$.data( elem, fullName );
        };
    
        $[ namespace ] = $[ namespace ] || {};
        existingConstructor = $[ namespace ][ name ];
        constructor = $[ namespace ][ name ] = function( options, element ) {
    
            // Allow instantiation without "new" keyword
            if ( !this || !this._createWidget ) {
                return new constructor( options, element );
            }
    
            // Allow instantiation without initializing for simple inheritance
            // must use "new" keyword (the code above always passes args)
            if ( arguments.length ) {
                this._createWidget( options, element );
            }
        };
    
        // Extend with the existing constructor to carry over any static properties
        $.extend( constructor, existingConstructor, {
            version: prototype.version,
    
            // Copy the object used to create the prototype in case we need to
            // redefine the widget later
            _proto: $.extend( {}, prototype ),
    
            // Track widgets that inherit from this widget in case this widget is
            // redefined after a widget inherits from it
            _childConstructors: []
        } );
    
        basePrototype = new base();
    
        // We need to make the options hash a property directly on the new instance
        // otherwise we'll modify the options hash on the prototype that we're
        // inheriting from
        basePrototype.options = $.widget.extend( {}, basePrototype.options );
        $.each( prototype, function( prop, value ) {
            if ( typeof value !== "function" ) {
                proxiedPrototype[ prop ] = value;
                return;
            }
            proxiedPrototype[ prop ] = ( function() {
                function _super() {
                    return base.prototype[ prop ].apply( this, arguments );
                }
    
                function _superApply( args ) {
                    return base.prototype[ prop ].apply( this, args );
                }
    
                return function() {
                    var __super = this._super;
                    var __superApply = this._superApply;
                    var returnValue;
    
                    this._super = _super;
                    this._superApply = _superApply;
    
                    returnValue = value.apply( this, arguments );
    
                    this._super = __super;
                    this._superApply = __superApply;
    
                    return returnValue;
                };
            } )();
        } );
        constructor.prototype = $.widget.extend( basePrototype, {
    
            // TODO: remove support for widgetEventPrefix
            // always use the name + a colon as the prefix, e.g., draggable:start
            // don't prefix for widgets that aren't DOM-based
            widgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name
        }, proxiedPrototype, {
            constructor: constructor,
            namespace: namespace,
            widgetName: name,
            widgetFullName: fullName
        } );
    
        // If this widget is being redefined then we need to find all widgets that
        // are inheriting from it and redefine all of them so that they inherit from
        // the new version of this widget. We're essentially trying to replace one
        // level in the prototype chain.
        if ( existingConstructor ) {
            $.each( existingConstructor._childConstructors, function( i, child ) {
                var childPrototype = child.prototype;
    
                // Redefine the child widget using the same prototype that was
                // originally used, but inherit from the new version of the base
                $.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor,
                    child._proto );
            } );
    
            // Remove the list of existing child constructors from the old constructor
            // so the old child constructors can be garbage collected
            delete existingConstructor._childConstructors;
        } else {
            base._childConstructors.push( constructor );
        }
    
        $.widget.bridge( name, constructor );
    
        return constructor;
    };
    
    $.widget.extend = function( target ) {
        var input = widgetSlice.call( arguments, 1 );
        var inputIndex = 0;
        var inputLength = input.length;
        var key;
        var value;
    
        for ( ; inputIndex < inputLength; inputIndex++ ) {
            for ( key in input[ inputIndex ] ) {
                value = input[ inputIndex ][ key ];
                if ( widgetHasOwnProperty.call( input[ inputIndex ], key ) && value !== undefined ) {
    
                    // Clone objects
                    if ( $.isPlainObject( value ) ) {
                        target[ key ] = $.isPlainObject( target[ key ] ) ?
                            $.widget.extend( {}, target[ key ], value ) :
    
                            // Don't extend strings, arrays, etc. with objects
                            $.widget.extend( {}, value );
    
                    // Copy everything else by reference
                    } else {
                        target[ key ] = value;
                    }
                }
            }
        }
        return target;
    };
    
    $.widget.bridge = function( name, object ) {
        var fullName = object.prototype.widgetFullName || name;
        $.fn[ name ] = function( options ) {
            var isMethodCall = typeof options === "string";
            var args = widgetSlice.call( arguments, 1 );
            var returnValue = this;
    
            if ( isMethodCall ) {
    
                // If this is an empty collection, we need to have the instance method
                // return undefined instead of the jQuery instance
                if ( !this.length && options === "instance" ) {
                    returnValue = undefined;
                } else {
                    this.each( function() {
                        var methodValue;
                        var instance = $.data( this, fullName );
    
                        if ( options === "instance" ) {
                            returnValue = instance;
                            return false;
                        }
    
                        if ( !instance ) {
                            return $.error( "cannot call methods on " + name +
                                " prior to initialization; " +
                                "attempted to call method '" + options + "'" );
                        }
    
                        if ( typeof instance[ options ] !== "function" ||
                            options.charAt( 0 ) === "_" ) {
                            return $.error( "no such method '" + options + "' for " + name +
                                " widget instance" );
                        }
    
                        methodValue = instance[ options ].apply( instance, args );
    
                        if ( methodValue !== instance && methodValue !== undefined ) {
                            returnValue = methodValue && methodValue.jquery ?
                                returnValue.pushStack( methodValue.get() ) :
                                methodValue;
                            return false;
                        }
                    } );
                }
            } else {
    
                // Allow multiple hashes to be passed on init
                if ( args.length ) {
                    options = $.widget.extend.apply( null, [ options ].concat( args ) );
                }
    
                this.each( function() {
                    var instance = $.data( this, fullName );
                    if ( instance ) {
                        instance.option( options || {} );
                        if ( instance._init ) {
                            instance._init();
                        }
                    } else {
                        $.data( this, fullName, new object( options, this ) );
                    }
                } );
            }
    
            return returnValue;
        };
    };
    
    $.Widget = function( /* options, element */ ) {};
    $.Widget._childConstructors = [];
    
    $.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        defaultElement: "<div>",
    
        options: {
            classes: {},
            disabled: false,
    
            // Callbacks
            create: null
        },
    
        _createWidget: function( options, element ) {
            element = $( element || this.defaultElement || this )[ 0 ];
            this.element = $( element );
            this.uuid = widgetUuid++;
            this.eventNamespace = "." + this.widgetName + this.uuid;
    
            this.bindings = $();
            this.hoverable = $();
            this.focusable = $();
            this.classesElementLookup = {};
    
            if ( element !== this ) {
                $.data( element, this.widgetFullName, this );
                this._on( true, this.element, {
                    remove: function( event ) {
                        if ( event.target === element ) {
                            this.destroy();
                        }
                    }
                } );
                this.document = $( element.style ?
    
                    // Element within the document
                    element.ownerDocument :
    
                    // Element is window or document
                    element.document || element );
                this.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );
            }
    
            this.options = $.widget.extend( {},
                this.options,
                this._getCreateOptions(),
                options );
    
            this._create();
    
            if ( this.options.disabled ) {
                this._setOptionDisabled( this.options.disabled );
            }
    
            this._trigger( "create", null, this._getCreateEventData() );
            this._init();
        },
    
        _getCreateOptions: function() {
            return {};
        },
    
        _getCreateEventData: $.noop,
    
        _create: $.noop,
    
        _init: $.noop,
    
        destroy: function() {
            var that = this;
    
            this._destroy();
            $.each( this.classesElementLookup, function( key, value ) {
                that._removeClass( value, key );
            } );
    
            // We can probably remove the unbind calls in 2.0
            // all event bindings should go through this._on()
            this.element
                .off( this.eventNamespace )
                .removeData( this.widgetFullName );
            this.widget()
                .off( this.eventNamespace )
                .removeAttr( "aria-disabled" );
    
            // Clean up events and states
            this.bindings.off( this.eventNamespace );
        },
    
        _destroy: $.noop,
    
        widget: function() {
            return this.element;
        },
    
        option: function( key, value ) {
            var options = key;
            var parts;
            var curOption;
            var i;
    
            if ( arguments.length === 0 ) {
    
                // Don't return a reference to the internal hash
                return $.widget.extend( {}, this.options );
            }
    
            if ( typeof key === "string" ) {
    
                // Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
                options = {};
                parts = key.split( "." );
                key = parts.shift();
                if ( parts.length ) {
                    curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
                    for ( i = 0; i < parts.length - 1; i++ ) {
                        curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
                        curOption = curOption[ parts[ i ] ];
                    }
                    key = parts.pop();
                    if ( arguments.length === 1 ) {
                        return curOption[ key ] === undefined ? null : curOption[ key ];
                    }
                    curOption[ key ] = value;
                } else {
                    if ( arguments.length === 1 ) {
                        return this.options[ key ] === undefined ? null : this.options[ key ];
                    }
                    options[ key ] = value;
                }
            }
    
            this._setOptions( options );
    
            return this;
        },
    
        _setOptions: function( options ) {
            var key;
    
            for ( key in options ) {
                this._setOption( key, options[ key ] );
            }
    
            return this;
        },
    
        _setOption: function( key, value ) {
            if ( key === "classes" ) {
                this._setOptionClasses( value );
            }
    
            this.options[ key ] = value;
    
            if ( key === "disabled" ) {
                this._setOptionDisabled( value );
            }
    
            return this;
        },
    
        _setOptionClasses: function( value ) {
            var classKey, elements, currentElements;
    
            for ( classKey in value ) {
                currentElements = this.classesElementLookup[ classKey ];
                if ( value[ classKey ] === this.options.classes[ classKey ] ||
                        !currentElements ||
                        !currentElements.length ) {
                    continue;
                }
    
                // We are doing this to create a new jQuery object because the _removeClass() call
                // on the next line is going to destroy the reference to the current elements being
                // tracked. We need to save a copy of this collection so that we can add the new classes
                // below.
                elements = $( currentElements.get() );
                this._removeClass( currentElements, classKey );
    
                // We don't use _addClass() here, because that uses this.options.classes
                // for generating the string of classes. We want to use the value passed in from
                // _setOption(), this is the new value of the classes option which was passed to
                // _setOption(). We pass this value directly to _classes().
                elements.addClass( this._classes( {
                    element: elements,
                    keys: classKey,
                    classes: value,
                    add: true
                } ) );
            }
        },
    
        _setOptionDisabled: function( value ) {
            this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null, !!value );
    
            // If the widget is becoming disabled, then nothing is interactive
            if ( value ) {
                this._removeClass( this.hoverable, null, "ui-state-hover" );
                this._removeClass( this.focusable, null, "ui-state-focus" );
            }
        },
    
        enable: function() {
            return this._setOptions( { disabled: false } );
        },
    
        disable: function() {
            return this._setOptions( { disabled: true } );
        },
    
        _classes: function( options ) {
            var full = [];
            var that = this;
    
            options = $.extend( {
                element: this.element,
                classes: this.options.classes || {}
            }, options );
    
            function bindRemoveEvent() {
                var nodesToBind = [];
    
                options.element.each( function( _, element ) {
                    var isTracked = $.map( that.classesElementLookup, function( elements ) {
                        return elements;
                    } )
                        .some( function( elements ) {
                            return elements.is( element );
                        } );
    
                    if ( !isTracked ) {
                        nodesToBind.push( element );
                    }
                } );
    
                that._on( $( nodesToBind ), {
                    remove: "_untrackClassesElement"
                } );
            }
    
            function processClassString( classes, checkOption ) {
                var current, i;
                for ( i = 0; i < classes.length; i++ ) {
                    current = that.classesElementLookup[ classes[ i ] ] || $();
                    if ( options.add ) {
                        bindRemoveEvent();
                        current = $( $.uniqueSort( current.get().concat( options.element.get() ) ) );
                    } else {
                        current = $( current.not( options.element ).get() );
                    }
                    that.classesElementLookup[ classes[ i ] ] = current;
                    full.push( classes[ i ] );
                    if ( checkOption && options.classes[ classes[ i ] ] ) {
                        full.push( options.classes[ classes[ i ] ] );
                    }
                }
            }
    
            if ( options.keys ) {
                processClassString( options.keys.match( /\S+/g ) || [], true );
            }
            if ( options.extra ) {
                processClassString( options.extra.match( /\S+/g ) || [] );
            }
    
            return full.join( " " );
        },
    
        _untrackClassesElement: function( event ) {
            var that = this;
            $.each( that.classesElementLookup, function( key, value ) {
                if ( $.inArray( event.target, value ) !== -1 ) {
                    that.classesElementLookup[ key ] = $( value.not( event.target ).get() );
                }
            } );
    
            this._off( $( event.target ) );
        },
    
        _removeClass: function( element, keys, extra ) {
            return this._toggleClass( element, keys, extra, false );
        },
    
        _addClass: function( element, keys, extra ) {
            return this._toggleClass( element, keys, extra, true );
        },
    
        _toggleClass: function( element, keys, extra, add ) {
            add = ( typeof add === "boolean" ) ? add : extra;
            var shift = ( typeof element === "string" || element === null ),
                options = {
                    extra: shift ? keys : extra,
                    keys: shift ? element : keys,
                    element: shift ? this.element : element,
                    add: add
                };
            options.element.toggleClass( this._classes( options ), add );
            return this;
        },
    
        _on: function( suppressDisabledCheck, element, handlers ) {
            var delegateElement;
            var instance = this;
    
            // No suppressDisabledCheck flag, shuffle arguments
            if ( typeof suppressDisabledCheck !== "boolean" ) {
                handlers = element;
                element = suppressDisabledCheck;
                suppressDisabledCheck = false;
            }
    
            // No element argument, shuffle and use this.element
            if ( !handlers ) {
                handlers = element;
                element = this.element;
                delegateElement = this.widget();
            } else {
                element = delegateElement = $( element );
                this.bindings = this.bindings.add( element );
            }
    
            $.each( handlers, function( event, handler ) {
                function handlerProxy() {
    
                    // Allow widgets to customize the disabled handling
                    // - disabled as an array instead of boolean
                    // - disabled class as method for disabling individual parts
                    if ( !suppressDisabledCheck &&
                            ( instance.options.disabled === true ||
                            $( this ).hasClass( "ui-state-disabled" ) ) ) {
                        return;
                    }
                    return ( typeof handler === "string" ? instance[ handler ] : handler )
                        .apply( instance, arguments );
                }
    
                // Copy the guid so direct unbinding works
                if ( typeof handler !== "string" ) {
                    handlerProxy.guid = handler.guid =
                        handler.guid || handlerProxy.guid || $.guid++;
                }
    
                var match = event.match( /^([\w:-]*)\s*(.*)$/ );
                var eventName = match[ 1 ] + instance.eventNamespace;
                var selector = match[ 2 ];
    
                if ( selector ) {
                    delegateElement.on( eventName, selector, handlerProxy );
                } else {
                    element.on( eventName, handlerProxy );
                }
            } );
        },
    
        _off: function( element, eventName ) {
            eventName = ( eventName || "" ).split( " " ).join( this.eventNamespace + " " ) +
                this.eventNamespace;
            element.off( eventName );
    
            // Clear the stack to avoid memory leaks (#10056)
            this.bindings = $( this.bindings.not( element ).get() );
            this.focusable = $( this.focusable.not( element ).get() );
            this.hoverable = $( this.hoverable.not( element ).get() );
        },
    
        _delay: function( handler, delay ) {
            function handlerProxy() {
                return ( typeof handler === "string" ? instance[ handler ] : handler )
                    .apply( instance, arguments );
            }
            var instance = this;
            return setTimeout( handlerProxy, delay || 0 );
        },
    
        _hoverable: function( element ) {
            this.hoverable = this.hoverable.add( element );
            this._on( element, {
                mouseenter: function( event ) {
                    this._addClass( $( event.currentTarget ), null, "ui-state-hover" );
                },
                mouseleave: function( event ) {
                    this._removeClass( $( event.currentTarget ), null, "ui-state-hover" );
                }
            } );
        },
    
        _focusable: function( element ) {
            this.focusable = this.focusable.add( element );
            this._on( element, {
                focusin: function( event ) {
                    this._addClass( $( event.currentTarget ), null, "ui-state-focus" );
                },
                focusout: function( event ) {
                    this._removeClass( $( event.currentTarget ), null, "ui-state-focus" );
                }
            } );
        },
    
        _trigger: function( type, event, data ) {
            var prop, orig;
            var callback = this.options[ type ];
    
            data = data || {};
            event = $.Event( event );
            event.type = ( type === this.widgetEventPrefix ?
                type :
                this.widgetEventPrefix + type ).toLowerCase();
    
            // The original event may come from any element
            // so we need to reset the target on the new event
            event.target = this.element[ 0 ];
    
            // Copy original event properties over to the new event
            orig = event.originalEvent;
            if ( orig ) {
                for ( prop in orig ) {
                    if ( !( prop in event ) ) {
                        event[ prop ] = orig[ prop ];
                    }
                }
            }
    
            this.element.trigger( event, data );
            return !( typeof callback === "function" &&
                callback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||
                event.isDefaultPrevented() );
        }
    };
    
    $.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
        $.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
            if ( typeof options === "string" ) {
                options = { effect: options };
            }
    
            var hasOptions;
            var effectName = !options ?
                method :
                options === true || typeof options === "number" ?
                    defaultEffect :
                    options.effect || defaultEffect;
    
            options = options || {};
            if ( typeof options === "number" ) {
                options = { duration: options };
            } else if ( options === true ) {
                options = {};
            }
    
            hasOptions = !$.isEmptyObject( options );
            options.complete = callback;
    
            if ( options.delay ) {
                element.delay( options.delay );
            }
    
            if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
                element[ method ]( options );
            } else if ( effectName !== method && element[ effectName ] ) {
                element[ effectName ]( options.duration, options.easing, callback );
            } else {
                element.queue( function( next ) {
                    $( this )[ method ]();
                    if ( callback ) {
                        callback.call( element[ 0 ] );
                    }
                    next();
                } );
            }
        };
    } );
    
    return $.widget;
    
    } );
    
    },{}],413:[function(require,module,exports){
    /* eslint-disable max-len, camelcase */
    /*!
     * jQuery UI Datepicker 1.13.3
     * https://jqueryui.com
     *
     * Copyright OpenJS Foundation and other contributors
     * Released under the MIT license.
     * https://jquery.org/license
     */
    
    //>>label: Datepicker
    //>>group: Widgets
    //>>description: Displays a calendar from an input or inline for selecting dates.
    //>>docs: https://api.jqueryui.com/datepicker/
    //>>demos: https://jqueryui.com/datepicker/
    //>>css.structure: ../../themes/base/core.css
    //>>css.structure: ../../themes/base/datepicker.css
    //>>css.theme: ../../themes/base/theme.css
    
    ( function( factory ) {
        "use strict";
    
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define( [
                "jquery",
                "../version",
                "../keycode"
            ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    } )( function( $ ) {
    "use strict";
    
    $.extend( $.ui, { datepicker: { version: "1.13.3" } } );
    
    var datepicker_instActive;
    
    function datepicker_getZindex( elem ) {
        var position, value;
        while ( elem.length && elem[ 0 ] !== document ) {
    
            // Ignore z-index if position is set to a value where z-index is ignored by the browser
            // This makes behavior of this function consistent across browsers
            // WebKit always returns auto if the element is positioned
            position = elem.css( "position" );
            if ( position === "absolute" || position === "relative" || position === "fixed" ) {
    
                // IE returns 0 when zIndex is not specified
                // other browsers return a string
                // we ignore the case of nested elements with an explicit value of 0
                // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
                value = parseInt( elem.css( "zIndex" ), 10 );
                if ( !isNaN( value ) && value !== 0 ) {
                    return value;
                }
            }
            elem = elem.parent();
        }
    
        return 0;
    }
    
    /* Date picker manager.
       Use the singleton instance of this class, $.datepicker, to interact with the date picker.
       Settings for (groups of) date pickers are maintained in an instance object,
       allowing multiple different settings on the same page. */
    
    function Datepicker() {
        this._curInst = null; // The current instance in use
        this._keyEvent = false; // If the last event was a key event
        this._disabledInputs = []; // List of date picker inputs that have been disabled
        this._datepickerShowing = false; // True if the popup picker is showing , false if not
        this._inDialog = false; // True if showing within a "dialog", false if not
        this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
        this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
        this._appendClass = "ui-datepicker-append"; // The name of the append marker class
        this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
        this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
        this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
        this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
        this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
        this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
        this.regional = []; // Available regional settings, indexed by language code
        this.regional[ "" ] = { // Default regional settings
            closeText: "Done", // Display text for close link
            prevText: "Prev", // Display text for previous month link
            nextText: "Next", // Display text for next month link
            currentText: "Today", // Display text for current month link
            monthNames: [ "January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December" ], // Names of months for drop-down and formatting
            monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ], // For formatting
            dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ], // For formatting
            dayNamesShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ], // For formatting
            dayNamesMin: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ], // Column headings for days starting at Sunday
            weekHeader: "Wk", // Column header for week of the year
            dateFormat: "mm/dd/yy", // See format options on parseDate
            firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
            isRTL: false, // True if right-to-left language, false if left-to-right
            showMonthAfterYear: false, // True if the year select precedes month, false for month then year
            yearSuffix: "", // Additional text to append to the year in the month headers,
            selectMonthLabel: "Select month", // Invisible label for month selector
            selectYearLabel: "Select year" // Invisible label for year selector
        };
        this._defaults = { // Global defaults for all the date picker instances
            showOn: "focus", // "focus" for popup on focus,
                // "button" for trigger button, or "both" for either
            showAnim: "fadeIn", // Name of jQuery animation for popup
            showOptions: {}, // Options for enhanced animations
            defaultDate: null, // Used when field is blank: actual date,
                // +/-number for offset from today, null for today
            appendText: "", // Display text following the input box, e.g. showing the format
            buttonText: "...", // Text for trigger button
            buttonImage: "", // URL for trigger button image
            buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
            hideIfNoPrevNext: false, // True to hide next/previous month links
                // if not applicable, false to just disable them
            navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
            gotoCurrent: false, // True if today link goes back to current selection instead
            changeMonth: false, // True if month can be selected directly, false if only prev/next
            changeYear: false, // True if year can be selected directly, false if only prev/next
            yearRange: "c-10:c+10", // Range of years to display in drop-down,
                // either relative to today's year (-nn:+nn), relative to currently displayed year
                // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
            showOtherMonths: false, // True to show dates in other months, false to leave blank
            selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
            showWeek: false, // True to show week of the year, false to not show it
            calculateWeek: this.iso8601Week, // How to calculate the week of the year,
                // takes a Date and returns the number of the week for it
            shortYearCutoff: "+10", // Short year values < this are in the current century,
                // > this are in the previous century,
                // string value starting with "+" for current year + value
            minDate: null, // The earliest selectable date, or null for no limit
            maxDate: null, // The latest selectable date, or null for no limit
            duration: "fast", // Duration of display/closure
            beforeShowDay: null, // Function that takes a date and returns an array with
                // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
                // [2] = cell title (optional), e.g. $.datepicker.noWeekends
            beforeShow: null, // Function that takes an input field and
                // returns a set of custom settings for the date picker
            onSelect: null, // Define a callback function when a date is selected
            onChangeMonthYear: null, // Define a callback function when the month or year is changed
            onClose: null, // Define a callback function when the datepicker is closed
            onUpdateDatepicker: null, // Define a callback function when the datepicker is updated
            numberOfMonths: 1, // Number of months to show at a time
            showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
            stepMonths: 1, // Number of months to step back/forward
            stepBigMonths: 12, // Number of months to step back/forward for the big links
            altField: "", // Selector for an alternate field to store selected dates into
            altFormat: "", // The date format to use for the alternate field
            constrainInput: true, // The input is constrained by the current date format
            showButtonPanel: false, // True to show button panel, false to not show it
            autoSize: false, // True to size the input for the date format, false to leave as is
            disabled: false // The initial disabled state
        };
        $.extend( this._defaults, this.regional[ "" ] );
        this.regional.en = $.extend( true, {}, this.regional[ "" ] );
        this.regional[ "en-US" ] = $.extend( true, {}, this.regional.en );
        this.dpDiv = datepicker_bindHover( $( "<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>" ) );
    }
    
    $.extend( Datepicker.prototype, {
    
        /* Class name added to elements to indicate already configured with a date picker. */
        markerClassName: "hasDatepicker",
    
        //Keep track of the maximum number of rows displayed (see #7043)
        maxRows: 4,
    
        // TODO rename to "widget" when switching to widget factory
        _widgetDatepicker: function() {
            return this.dpDiv;
        },
    
        /* Override the default settings for all instances of the date picker.
         * @param  settings  object - the new settings to use as defaults (anonymous object)
         * @return the manager object
         */
        setDefaults: function( settings ) {
            datepicker_extendRemove( this._defaults, settings || {} );
            return this;
        },
    
        /* Attach the date picker to a jQuery selection.
         * @param  target	element - the target input field or division or span
         * @param  settings  object - the new settings to use for this date picker instance (anonymous)
         */
        _attachDatepicker: function( target, settings ) {
            var nodeName, inline, inst;
            nodeName = target.nodeName.toLowerCase();
            inline = ( nodeName === "div" || nodeName === "span" );
            if ( !target.id ) {
                this.uuid += 1;
                target.id = "dp" + this.uuid;
            }
            inst = this._newInst( $( target ), inline );
            inst.settings = $.extend( {}, settings || {} );
            if ( nodeName === "input" ) {
                this._connectDatepicker( target, inst );
            } else if ( inline ) {
                this._inlineDatepicker( target, inst );
            }
        },
    
        /* Create a new instance object. */
        _newInst: function( target, inline ) {
            var id = target[ 0 ].id.replace( /([^A-Za-z0-9_\-])/g, "\\\\$1" ); // escape jQuery meta chars
            return { id: id, input: target, // associated target
                selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
                drawMonth: 0, drawYear: 0, // month being drawn
                inline: inline, // is datepicker inline or not
                dpDiv: ( !inline ? this.dpDiv : // presentation div
                datepicker_bindHover( $( "<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>" ) ) ) };
        },
    
        /* Attach the date picker to an input field. */
        _connectDatepicker: function( target, inst ) {
            var input = $( target );
            inst.append = $( [] );
            inst.trigger = $( [] );
            if ( input.hasClass( this.markerClassName ) ) {
                return;
            }
            this._attachments( input, inst );
            input.addClass( this.markerClassName ).on( "keydown", this._doKeyDown ).
                on( "keypress", this._doKeyPress ).on( "keyup", this._doKeyUp );
            this._autoSize( inst );
            $.data( target, "datepicker", inst );
    
            //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
            if ( inst.settings.disabled ) {
                this._disableDatepicker( target );
            }
        },
    
        /* Make attachments based on settings. */
        _attachments: function( input, inst ) {
            var showOn, buttonText, buttonImage,
                appendText = this._get( inst, "appendText" ),
                isRTL = this._get( inst, "isRTL" );
    
            if ( inst.append ) {
                inst.append.remove();
            }
            if ( appendText ) {
                inst.append = $( "<span>" )
                    .addClass( this._appendClass )
                    .text( appendText );
                input[ isRTL ? "before" : "after" ]( inst.append );
            }
    
            input.off( "focus", this._showDatepicker );
    
            if ( inst.trigger ) {
                inst.trigger.remove();
            }
    
            showOn = this._get( inst, "showOn" );
            if ( showOn === "focus" || showOn === "both" ) { // pop-up date picker when in the marked field
                input.on( "focus", this._showDatepicker );
            }
            if ( showOn === "button" || showOn === "both" ) { // pop-up date picker when button clicked
                buttonText = this._get( inst, "buttonText" );
                buttonImage = this._get( inst, "buttonImage" );
    
                if ( this._get( inst, "buttonImageOnly" ) ) {
                    inst.trigger = $( "<img>" )
                        .addClass( this._triggerClass )
                        .attr( {
                            src: buttonImage,
                            alt: buttonText,
                            title: buttonText
                        } );
                } else {
                    inst.trigger = $( "<button type='button'>" )
                        .addClass( this._triggerClass );
                    if ( buttonImage ) {
                        inst.trigger.html(
                            $( "<img>" )
                                .attr( {
                                    src: buttonImage,
                                    alt: buttonText,
                                    title: buttonText
                                } )
                        );
                    } else {
                        inst.trigger.text( buttonText );
                    }
                }
    
                input[ isRTL ? "before" : "after" ]( inst.trigger );
                inst.trigger.on( "click", function() {
                    if ( $.datepicker._datepickerShowing && $.datepicker._lastInput === input[ 0 ] ) {
                        $.datepicker._hideDatepicker();
                    } else if ( $.datepicker._datepickerShowing && $.datepicker._lastInput !== input[ 0 ] ) {
                        $.datepicker._hideDatepicker();
                        $.datepicker._showDatepicker( input[ 0 ] );
                    } else {
                        $.datepicker._showDatepicker( input[ 0 ] );
                    }
                    return false;
                } );
            }
        },
    
        /* Apply the maximum length for the date format. */
        _autoSize: function( inst ) {
            if ( this._get( inst, "autoSize" ) && !inst.inline ) {
                var findMax, max, maxI, i,
                    date = new Date( 2009, 12 - 1, 20 ), // Ensure double digits
                    dateFormat = this._get( inst, "dateFormat" );
    
                if ( dateFormat.match( /[DM]/ ) ) {
                    findMax = function( names ) {
                        max = 0;
                        maxI = 0;
                        for ( i = 0; i < names.length; i++ ) {
                            if ( names[ i ].length > max ) {
                                max = names[ i ].length;
                                maxI = i;
                            }
                        }
                        return maxI;
                    };
                    date.setMonth( findMax( this._get( inst, ( dateFormat.match( /MM/ ) ?
                        "monthNames" : "monthNamesShort" ) ) ) );
                    date.setDate( findMax( this._get( inst, ( dateFormat.match( /DD/ ) ?
                        "dayNames" : "dayNamesShort" ) ) ) + 20 - date.getDay() );
                }
                inst.input.attr( "size", this._formatDate( inst, date ).length );
            }
        },
    
        /* Attach an inline date picker to a div. */
        _inlineDatepicker: function( target, inst ) {
            var divSpan = $( target );
            if ( divSpan.hasClass( this.markerClassName ) ) {
                return;
            }
            divSpan.addClass( this.markerClassName ).append( inst.dpDiv );
            $.data( target, "datepicker", inst );
            this._setDate( inst, this._getDefaultDate( inst ), true );
            this._updateDatepicker( inst );
            this._updateAlternate( inst );
    
            //If disabled option is true, disable the datepicker before showing it (see ticket #5665)
            if ( inst.settings.disabled ) {
                this._disableDatepicker( target );
            }
    
            // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
            // https://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
            inst.dpDiv.css( "display", "block" );
        },
    
        /* Pop-up the date picker in a "dialog" box.
         * @param  input element - ignored
         * @param  date	string or Date - the initial date to display
         * @param  onSelect  function - the function to call when a date is selected
         * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
         * @param  pos int[2] - coordinates for the dialog's position within the screen or
         *					event - with x/y coordinates or
         *					leave empty for default (screen centre)
         * @return the manager object
         */
        _dialogDatepicker: function( input, date, onSelect, settings, pos ) {
            var id, browserWidth, browserHeight, scrollX, scrollY,
                inst = this._dialogInst; // internal instance
    
            if ( !inst ) {
                this.uuid += 1;
                id = "dp" + this.uuid;
                this._dialogInput = $( "<input type='text' id='" + id +
                    "' style='position: absolute; top: -100px; width: 0px;'/>" );
                this._dialogInput.on( "keydown", this._doKeyDown );
                $( "body" ).append( this._dialogInput );
                inst = this._dialogInst = this._newInst( this._dialogInput, false );
                inst.settings = {};
                $.data( this._dialogInput[ 0 ], "datepicker", inst );
            }
            datepicker_extendRemove( inst.settings, settings || {} );
            date = ( date && date.constructor === Date ? this._formatDate( inst, date ) : date );
            this._dialogInput.val( date );
    
            this._pos = ( pos ? ( pos.length ? pos : [ pos.pageX, pos.pageY ] ) : null );
            if ( !this._pos ) {
                browserWidth = document.documentElement.clientWidth;
                browserHeight = document.documentElement.clientHeight;
                scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                this._pos = // should use actual width/height below
                    [ ( browserWidth / 2 ) - 100 + scrollX, ( browserHeight / 2 ) - 150 + scrollY ];
            }
    
            // Move input on screen for focus, but hidden behind dialog
            this._dialogInput.css( "left", ( this._pos[ 0 ] + 20 ) + "px" ).css( "top", this._pos[ 1 ] + "px" );
            inst.settings.onSelect = onSelect;
            this._inDialog = true;
            this.dpDiv.addClass( this._dialogClass );
            this._showDatepicker( this._dialogInput[ 0 ] );
            if ( $.blockUI ) {
                $.blockUI( this.dpDiv );
            }
            $.data( this._dialogInput[ 0 ], "datepicker", inst );
            return this;
        },
    
        /* Detach a datepicker from its control.
         * @param  target	element - the target input field or division or span
         */
        _destroyDatepicker: function( target ) {
            var nodeName,
                $target = $( target ),
                inst = $.data( target, "datepicker" );
    
            if ( !$target.hasClass( this.markerClassName ) ) {
                return;
            }
    
            nodeName = target.nodeName.toLowerCase();
            $.removeData( target, "datepicker" );
            if ( nodeName === "input" ) {
                inst.append.remove();
                inst.trigger.remove();
                $target.removeClass( this.markerClassName ).
                    off( "focus", this._showDatepicker ).
                    off( "keydown", this._doKeyDown ).
                    off( "keypress", this._doKeyPress ).
                    off( "keyup", this._doKeyUp );
            } else if ( nodeName === "div" || nodeName === "span" ) {
                $target.removeClass( this.markerClassName ).empty();
            }
    
            if ( datepicker_instActive === inst ) {
                datepicker_instActive = null;
                this._curInst = null;
            }
        },
    
        /* Enable the date picker to a jQuery selection.
         * @param  target	element - the target input field or division or span
         */
        _enableDatepicker: function( target ) {
            var nodeName, inline,
                $target = $( target ),
                inst = $.data( target, "datepicker" );
    
            if ( !$target.hasClass( this.markerClassName ) ) {
                return;
            }
    
            nodeName = target.nodeName.toLowerCase();
            if ( nodeName === "input" ) {
                target.disabled = false;
                inst.trigger.filter( "button" ).
                    each( function() {
                        this.disabled = false;
                    } ).end().
                    filter( "img" ).css( { opacity: "1.0", cursor: "" } );
            } else if ( nodeName === "div" || nodeName === "span" ) {
                inline = $target.children( "." + this._inlineClass );
                inline.children().removeClass( "ui-state-disabled" );
                inline.find( "select.ui-datepicker-month, select.ui-datepicker-year" ).
                    prop( "disabled", false );
            }
            this._disabledInputs = $.map( this._disabledInputs,
    
                // Delete entry
                function( value ) {
                    return ( value === target ? null : value );
                } );
        },
    
        /* Disable the date picker to a jQuery selection.
         * @param  target	element - the target input field or division or span
         */
        _disableDatepicker: function( target ) {
            var nodeName, inline,
                $target = $( target ),
                inst = $.data( target, "datepicker" );
    
            if ( !$target.hasClass( this.markerClassName ) ) {
                return;
            }
    
            nodeName = target.nodeName.toLowerCase();
            if ( nodeName === "input" ) {
                target.disabled = true;
                inst.trigger.filter( "button" ).
                    each( function() {
                        this.disabled = true;
                    } ).end().
                    filter( "img" ).css( { opacity: "0.5", cursor: "default" } );
            } else if ( nodeName === "div" || nodeName === "span" ) {
                inline = $target.children( "." + this._inlineClass );
                inline.children().addClass( "ui-state-disabled" );
                inline.find( "select.ui-datepicker-month, select.ui-datepicker-year" ).
                    prop( "disabled", true );
            }
            this._disabledInputs = $.map( this._disabledInputs,
    
                // Delete entry
                function( value ) {
                    return ( value === target ? null : value );
                } );
            this._disabledInputs[ this._disabledInputs.length ] = target;
        },
    
        /* Is the first field in a jQuery collection disabled as a datepicker?
         * @param  target	element - the target input field or division or span
         * @return boolean - true if disabled, false if enabled
         */
        _isDisabledDatepicker: function( target ) {
            if ( !target ) {
                return false;
            }
            for ( var i = 0; i < this._disabledInputs.length; i++ ) {
                if ( this._disabledInputs[ i ] === target ) {
                    return true;
                }
            }
            return false;
        },
    
        /* Retrieve the instance data for the target control.
         * @param  target  element - the target input field or division or span
         * @return  object - the associated instance data
         * @throws  error if a jQuery problem getting data
         */
        _getInst: function( target ) {
            try {
                return $.data( target, "datepicker" );
            } catch ( err ) {
                throw "Missing instance data for this datepicker";
            }
        },
    
        /* Update or retrieve the settings for a date picker attached to an input field or division.
         * @param  target  element - the target input field or division or span
         * @param  name	object - the new settings to update or
         *				string - the name of the setting to change or retrieve,
         *				when retrieving also "all" for all instance settings or
         *				"defaults" for all global defaults
         * @param  value   any - the new value for the setting
         *				(omit if above is an object or to retrieve a value)
         */
        _optionDatepicker: function( target, name, value ) {
            var settings, date, minDate, maxDate,
                inst = this._getInst( target );
    
            if ( arguments.length === 2 && typeof name === "string" ) {
                return ( name === "defaults" ? $.extend( {}, $.datepicker._defaults ) :
                    ( inst ? ( name === "all" ? $.extend( {}, inst.settings ) :
                    this._get( inst, name ) ) : null ) );
            }
    
            settings = name || {};
            if ( typeof name === "string" ) {
                settings = {};
                settings[ name ] = value;
            }
    
            if ( inst ) {
                if ( this._curInst === inst ) {
                    this._hideDatepicker();
                }
    
                date = this._getDateDatepicker( target, true );
                minDate = this._getMinMaxDate( inst, "min" );
                maxDate = this._getMinMaxDate( inst, "max" );
                datepicker_extendRemove( inst.settings, settings );
    
                // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
                if ( minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined ) {
                    inst.settings.minDate = this._formatDate( inst, minDate );
                }
                if ( maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined ) {
                    inst.settings.maxDate = this._formatDate( inst, maxDate );
                }
                if ( "disabled" in settings ) {
                    if ( settings.disabled ) {
                        this._disableDatepicker( target );
                    } else {
                        this._enableDatepicker( target );
                    }
                }
                this._attachments( $( target ), inst );
                this._autoSize( inst );
                this._setDate( inst, date );
                this._updateAlternate( inst );
                this._updateDatepicker( inst );
            }
        },
    
        // Change method deprecated
        _changeDatepicker: function( target, name, value ) {
            this._optionDatepicker( target, name, value );
        },
    
        /* Redraw the date picker attached to an input field or division.
         * @param  target  element - the target input field or division or span
         */
        _refreshDatepicker: function( target ) {
            var inst = this._getInst( target );
            if ( inst ) {
                this._updateDatepicker( inst );
            }
        },
    
        /* Set the dates for a jQuery selection.
         * @param  target element - the target input field or division or span
         * @param  date	Date - the new date
         */
        _setDateDatepicker: function( target, date ) {
            var inst = this._getInst( target );
            if ( inst ) {
                this._setDate( inst, date );
                this._updateDatepicker( inst );
                this._updateAlternate( inst );
            }
        },
    
        /* Get the date(s) for the first entry in a jQuery selection.
         * @param  target element - the target input field or division or span
         * @param  noDefault boolean - true if no default date is to be used
         * @return Date - the current date
         */
        _getDateDatepicker: function( target, noDefault ) {
            var inst = this._getInst( target );
            if ( inst && !inst.inline ) {
                this._setDateFromField( inst, noDefault );
            }
            return ( inst ? this._getDate( inst ) : null );
        },
    
        /* Handle keystrokes. */
        _doKeyDown: function( event ) {
            var onSelect, dateStr, sel,
                inst = $.datepicker._getInst( event.target ),
                handled = true,
                isRTL = inst.dpDiv.is( ".ui-datepicker-rtl" );
    
            inst._keyEvent = true;
            if ( $.datepicker._datepickerShowing ) {
                switch ( event.keyCode ) {
                    case 9: $.datepicker._hideDatepicker();
                            handled = false;
                            break; // hide on tab out
                    case 13: sel = $( "td." + $.datepicker._dayOverClass + ":not(." +
                                        $.datepicker._currentClass + ")", inst.dpDiv );
                            if ( sel[ 0 ] ) {
                                $.datepicker._selectDay( event.target, inst.selectedMonth, inst.selectedYear, sel[ 0 ] );
                            }
    
                            onSelect = $.datepicker._get( inst, "onSelect" );
                            if ( onSelect ) {
                                dateStr = $.datepicker._formatDate( inst );
    
                                // Trigger custom callback
                                onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );
                            } else {
                                $.datepicker._hideDatepicker();
                            }
    
                            return false; // don't submit the form
                    case 27: $.datepicker._hideDatepicker();
                            break; // hide on escape
                    case 33: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
                                -$.datepicker._get( inst, "stepBigMonths" ) :
                                -$.datepicker._get( inst, "stepMonths" ) ), "M" );
                            break; // previous month/year on page up/+ ctrl
                    case 34: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
                                +$.datepicker._get( inst, "stepBigMonths" ) :
                                +$.datepicker._get( inst, "stepMonths" ) ), "M" );
                            break; // next month/year on page down/+ ctrl
                    case 35: if ( event.ctrlKey || event.metaKey ) {
                                $.datepicker._clearDate( event.target );
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break; // clear on ctrl or command +end
                    case 36: if ( event.ctrlKey || event.metaKey ) {
                                $.datepicker._gotoToday( event.target );
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break; // current on ctrl or command +home
                    case 37: if ( event.ctrlKey || event.metaKey ) {
                                $.datepicker._adjustDate( event.target, ( isRTL ? +1 : -1 ), "D" );
                            }
                            handled = event.ctrlKey || event.metaKey;
    
                            // -1 day on ctrl or command +left
                            if ( event.originalEvent.altKey ) {
                                $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
                                    -$.datepicker._get( inst, "stepBigMonths" ) :
                                    -$.datepicker._get( inst, "stepMonths" ) ), "M" );
                            }
    
                            // next month/year on alt +left on Mac
                            break;
                    case 38: if ( event.ctrlKey || event.metaKey ) {
                                $.datepicker._adjustDate( event.target, -7, "D" );
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break; // -1 week on ctrl or command +up
                    case 39: if ( event.ctrlKey || event.metaKey ) {
                                $.datepicker._adjustDate( event.target, ( isRTL ? -1 : +1 ), "D" );
                            }
                            handled = event.ctrlKey || event.metaKey;
    
                            // +1 day on ctrl or command +right
                            if ( event.originalEvent.altKey ) {
                                $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
                                    +$.datepicker._get( inst, "stepBigMonths" ) :
                                    +$.datepicker._get( inst, "stepMonths" ) ), "M" );
                            }
    
                            // next month/year on alt +right
                            break;
                    case 40: if ( event.ctrlKey || event.metaKey ) {
                                $.datepicker._adjustDate( event.target, +7, "D" );
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break; // +1 week on ctrl or command +down
                    default: handled = false;
                }
            } else if ( event.keyCode === 36 && event.ctrlKey ) { // display the date picker on ctrl+home
                $.datepicker._showDatepicker( this );
            } else {
                handled = false;
            }
    
            if ( handled ) {
                event.preventDefault();
                event.stopPropagation();
            }
        },
    
        /* Filter entered characters - based on date format. */
        _doKeyPress: function( event ) {
            var chars, chr,
                inst = $.datepicker._getInst( event.target );
    
            if ( $.datepicker._get( inst, "constrainInput" ) ) {
                chars = $.datepicker._possibleChars( $.datepicker._get( inst, "dateFormat" ) );
                chr = String.fromCharCode( event.charCode == null ? event.keyCode : event.charCode );
                return event.ctrlKey || event.metaKey || ( chr < " " || !chars || chars.indexOf( chr ) > -1 );
            }
        },
    
        /* Synchronise manual entry and field/alternate field. */
        _doKeyUp: function( event ) {
            var date,
                inst = $.datepicker._getInst( event.target );
    
            if ( inst.input.val() !== inst.lastVal ) {
                try {
                    date = $.datepicker.parseDate( $.datepicker._get( inst, "dateFormat" ),
                        ( inst.input ? inst.input.val() : null ),
                        $.datepicker._getFormatConfig( inst ) );
    
                    if ( date ) { // only if valid
                        $.datepicker._setDateFromField( inst );
                        $.datepicker._updateAlternate( inst );
                        $.datepicker._updateDatepicker( inst );
                    }
                } catch ( err ) {
                }
            }
            return true;
        },
    
        /* Pop-up the date picker for a given input field.
         * If false returned from beforeShow event handler do not show.
         * @param  input  element - the input field attached to the date picker or
         *					event - if triggered by focus
         */
        _showDatepicker: function( input ) {
            input = input.target || input;
            if ( input.nodeName.toLowerCase() !== "input" ) { // find from button/image trigger
                input = $( "input", input.parentNode )[ 0 ];
            }
    
            if ( $.datepicker._isDisabledDatepicker( input ) || $.datepicker._lastInput === input ) { // already here
                return;
            }
    
            var inst, beforeShow, beforeShowSettings, isFixed,
                offset, showAnim, duration;
    
            inst = $.datepicker._getInst( input );
            if ( $.datepicker._curInst && $.datepicker._curInst !== inst ) {
                $.datepicker._curInst.dpDiv.stop( true, true );
                if ( inst && $.datepicker._datepickerShowing ) {
                    $.datepicker._hideDatepicker( $.datepicker._curInst.input[ 0 ] );
                }
            }
    
            beforeShow = $.datepicker._get( inst, "beforeShow" );
            beforeShowSettings = beforeShow ? beforeShow.apply( input, [ input, inst ] ) : {};
            if ( beforeShowSettings === false ) {
                return;
            }
            datepicker_extendRemove( inst.settings, beforeShowSettings );
    
            inst.lastVal = null;
            $.datepicker._lastInput = input;
            $.datepicker._setDateFromField( inst );
    
            if ( $.datepicker._inDialog ) { // hide cursor
                input.value = "";
            }
            if ( !$.datepicker._pos ) { // position below input
                $.datepicker._pos = $.datepicker._findPos( input );
                $.datepicker._pos[ 1 ] += input.offsetHeight; // add the height
            }
    
            isFixed = false;
            $( input ).parents().each( function() {
                isFixed |= $( this ).css( "position" ) === "fixed";
                return !isFixed;
            } );
    
            offset = { left: $.datepicker._pos[ 0 ], top: $.datepicker._pos[ 1 ] };
            $.datepicker._pos = null;
    
            //to avoid flashes on Firefox
            inst.dpDiv.empty();
    
            // determine sizing offscreen
            inst.dpDiv.css( { position: "absolute", display: "block", top: "-1000px" } );
            $.datepicker._updateDatepicker( inst );
    
            // fix width for dynamic number of date pickers
            // and adjust position before showing
            offset = $.datepicker._checkOffset( inst, offset, isFixed );
            inst.dpDiv.css( { position: ( $.datepicker._inDialog && $.blockUI ?
                "static" : ( isFixed ? "fixed" : "absolute" ) ), display: "none",
                left: offset.left + "px", top: offset.top + "px" } );
    
            if ( !inst.inline ) {
                showAnim = $.datepicker._get( inst, "showAnim" );
                duration = $.datepicker._get( inst, "duration" );
                inst.dpDiv.css( "z-index", datepicker_getZindex( $( input ) ) + 1 );
                $.datepicker._datepickerShowing = true;
    
                if ( $.effects && $.effects.effect[ showAnim ] ) {
                    inst.dpDiv.show( showAnim, $.datepicker._get( inst, "showOptions" ), duration );
                } else {
                    inst.dpDiv[ showAnim || "show" ]( showAnim ? duration : null );
                }
    
                if ( $.datepicker._shouldFocusInput( inst ) ) {
                    inst.input.trigger( "focus" );
                }
    
                $.datepicker._curInst = inst;
            }
        },
    
        /* Generate the date picker content. */
        _updateDatepicker: function( inst ) {
            this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
            datepicker_instActive = inst; // for delegate hover events
            inst.dpDiv.empty().append( this._generateHTML( inst ) );
            this._attachHandlers( inst );
    
            var origyearshtml,
                numMonths = this._getNumberOfMonths( inst ),
                cols = numMonths[ 1 ],
                width = 17,
                activeCell = inst.dpDiv.find( "." + this._dayOverClass + " a" ),
                onUpdateDatepicker = $.datepicker._get( inst, "onUpdateDatepicker" );
    
            if ( activeCell.length > 0 ) {
                datepicker_handleMouseover.apply( activeCell.get( 0 ) );
            }
    
            inst.dpDiv.removeClass( "ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4" ).width( "" );
            if ( cols > 1 ) {
                inst.dpDiv.addClass( "ui-datepicker-multi-" + cols ).css( "width", ( width * cols ) + "em" );
            }
            inst.dpDiv[ ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ? "add" : "remove" ) +
                "Class" ]( "ui-datepicker-multi" );
            inst.dpDiv[ ( this._get( inst, "isRTL" ) ? "add" : "remove" ) +
                "Class" ]( "ui-datepicker-rtl" );
    
            if ( inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
                inst.input.trigger( "focus" );
            }
    
            // Deffered render of the years select (to avoid flashes on Firefox)
            if ( inst.yearshtml ) {
                origyearshtml = inst.yearshtml;
                setTimeout( function() {
    
                    //assure that inst.yearshtml didn't change.
                    if ( origyearshtml === inst.yearshtml && inst.yearshtml ) {
                        inst.dpDiv.find( "select.ui-datepicker-year" ).first().replaceWith( inst.yearshtml );
                    }
                    origyearshtml = inst.yearshtml = null;
                }, 0 );
            }
    
            if ( onUpdateDatepicker ) {
                onUpdateDatepicker.apply( ( inst.input ? inst.input[ 0 ] : null ), [ inst ] );
            }
        },
    
        // #6694 - don't focus the input if it's already focused
        // this breaks the change event in IE
        // Support: IE and jQuery <1.9
        _shouldFocusInput: function( inst ) {
            return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
        },
    
        /* Check positioning to remain on screen. */
        _checkOffset: function( inst, offset, isFixed ) {
            var dpWidth = inst.dpDiv.outerWidth(),
                dpHeight = inst.dpDiv.outerHeight(),
                inputWidth = inst.input ? inst.input.outerWidth() : 0,
                inputHeight = inst.input ? inst.input.outerHeight() : 0,
                viewWidth = document.documentElement.clientWidth + ( isFixed ? 0 : $( document ).scrollLeft() ),
                viewHeight = document.documentElement.clientHeight + ( isFixed ? 0 : $( document ).scrollTop() );
    
            offset.left -= ( this._get( inst, "isRTL" ) ? ( dpWidth - inputWidth ) : 0 );
            offset.left -= ( isFixed && offset.left === inst.input.offset().left ) ? $( document ).scrollLeft() : 0;
            offset.top -= ( isFixed && offset.top === ( inst.input.offset().top + inputHeight ) ) ? $( document ).scrollTop() : 0;
    
            // Now check if datepicker is showing outside window viewport - move to a better place if so.
            offset.left -= Math.min( offset.left, ( offset.left + dpWidth > viewWidth && viewWidth > dpWidth ) ?
                Math.abs( offset.left + dpWidth - viewWidth ) : 0 );
            offset.top -= Math.min( offset.top, ( offset.top + dpHeight > viewHeight && viewHeight > dpHeight ) ?
                Math.abs( dpHeight + inputHeight ) : 0 );
    
            return offset;
        },
    
        /* Find an object's position on the screen. */
        _findPos: function( obj ) {
            var position,
                inst = this._getInst( obj ),
                isRTL = this._get( inst, "isRTL" );
    
            while ( obj && ( obj.type === "hidden" || obj.nodeType !== 1 || $.expr.pseudos.hidden( obj ) ) ) {
                obj = obj[ isRTL ? "previousSibling" : "nextSibling" ];
            }
    
            position = $( obj ).offset();
            return [ position.left, position.top ];
        },
    
        /* Hide the date picker from view.
         * @param  input  element - the input field attached to the date picker
         */
        _hideDatepicker: function( input ) {
            var showAnim, duration, postProcess, onClose,
                inst = this._curInst;
    
            if ( !inst || ( input && inst !== $.data( input, "datepicker" ) ) ) {
                return;
            }
    
            if ( this._datepickerShowing ) {
                showAnim = this._get( inst, "showAnim" );
                duration = this._get( inst, "duration" );
                postProcess = function() {
                    $.datepicker._tidyDialog( inst );
                };
    
                // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
                if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
                    inst.dpDiv.hide( showAnim, $.datepicker._get( inst, "showOptions" ), duration, postProcess );
                } else {
                    inst.dpDiv[ ( showAnim === "slideDown" ? "slideUp" :
                        ( showAnim === "fadeIn" ? "fadeOut" : "hide" ) ) ]( ( showAnim ? duration : null ), postProcess );
                }
    
                if ( !showAnim ) {
                    postProcess();
                }
                this._datepickerShowing = false;
    
                onClose = this._get( inst, "onClose" );
                if ( onClose ) {
                    onClose.apply( ( inst.input ? inst.input[ 0 ] : null ), [ ( inst.input ? inst.input.val() : "" ), inst ] );
                }
    
                this._lastInput = null;
                if ( this._inDialog ) {
                    this._dialogInput.css( { position: "absolute", left: "0", top: "-100px" } );
                    if ( $.blockUI ) {
                        $.unblockUI();
                        $( "body" ).append( this.dpDiv );
                    }
                }
                this._inDialog = false;
            }
        },
    
        /* Tidy up after a dialog display. */
        _tidyDialog: function( inst ) {
            inst.dpDiv.removeClass( this._dialogClass ).off( ".ui-datepicker-calendar" );
        },
    
        /* Close date picker if clicked elsewhere. */
        _checkExternalClick: function( event ) {
            if ( !$.datepicker._curInst ) {
                return;
            }
    
            var $target = $( event.target ),
                inst = $.datepicker._getInst( $target[ 0 ] );
    
            if ( ( ( $target[ 0 ].id !== $.datepicker._mainDivId &&
                    $target.parents( "#" + $.datepicker._mainDivId ).length === 0 &&
                    !$target.hasClass( $.datepicker.markerClassName ) &&
                    !$target.closest( "." + $.datepicker._triggerClass ).length &&
                    $.datepicker._datepickerShowing && !( $.datepicker._inDialog && $.blockUI ) ) ) ||
                ( $target.hasClass( $.datepicker.markerClassName ) && $.datepicker._curInst !== inst ) ) {
                    $.datepicker._hideDatepicker();
            }
        },
    
        /* Adjust one of the date sub-fields. */
        _adjustDate: function( id, offset, period ) {
            var target = $( id ),
                inst = this._getInst( target[ 0 ] );
    
            if ( this._isDisabledDatepicker( target[ 0 ] ) ) {
                return;
            }
            this._adjustInstDate( inst, offset, period );
            this._updateDatepicker( inst );
        },
    
        /* Action for current link. */
        _gotoToday: function( id ) {
            var date,
                target = $( id ),
                inst = this._getInst( target[ 0 ] );
    
            if ( this._get( inst, "gotoCurrent" ) && inst.currentDay ) {
                inst.selectedDay = inst.currentDay;
                inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                inst.drawYear = inst.selectedYear = inst.currentYear;
            } else {
                date = new Date();
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear();
            }
            this._notifyChange( inst );
            this._adjustDate( target );
        },
    
        /* Action for selecting a new month/year. */
        _selectMonthYear: function( id, select, period ) {
            var target = $( id ),
                inst = this._getInst( target[ 0 ] );
    
            inst[ "selected" + ( period === "M" ? "Month" : "Year" ) ] =
            inst[ "draw" + ( period === "M" ? "Month" : "Year" ) ] =
                parseInt( select.options[ select.selectedIndex ].value, 10 );
    
            this._notifyChange( inst );
            this._adjustDate( target );
        },
    
        /* Action for selecting a day. */
        _selectDay: function( id, month, year, td ) {
            var inst,
                target = $( id );
    
            if ( $( td ).hasClass( this._unselectableClass ) || this._isDisabledDatepicker( target[ 0 ] ) ) {
                return;
            }
    
            inst = this._getInst( target[ 0 ] );
            inst.selectedDay = inst.currentDay = parseInt( $( "a", td ).attr( "data-date" ) );
            inst.selectedMonth = inst.currentMonth = month;
            inst.selectedYear = inst.currentYear = year;
            this._selectDate( id, this._formatDate( inst,
                inst.currentDay, inst.currentMonth, inst.currentYear ) );
        },
    
        /* Erase the input field and hide the date picker. */
        _clearDate: function( id ) {
            var target = $( id );
            this._selectDate( target, "" );
        },
    
        /* Update the input field with the selected date. */
        _selectDate: function( id, dateStr ) {
            var onSelect,
                target = $( id ),
                inst = this._getInst( target[ 0 ] );
    
            dateStr = ( dateStr != null ? dateStr : this._formatDate( inst ) );
            if ( inst.input ) {
                inst.input.val( dateStr );
            }
            this._updateAlternate( inst );
    
            onSelect = this._get( inst, "onSelect" );
            if ( onSelect ) {
                onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );  // trigger custom callback
            } else if ( inst.input ) {
                inst.input.trigger( "change" ); // fire the change event
            }
    
            if ( inst.inline ) {
                this._updateDatepicker( inst );
            } else {
                this._hideDatepicker();
                this._lastInput = inst.input[ 0 ];
                if ( typeof( inst.input[ 0 ] ) !== "object" ) {
                    inst.input.trigger( "focus" ); // restore focus
                }
                this._lastInput = null;
            }
        },
    
        /* Update any alternate field to synchronise with the main field. */
        _updateAlternate: function( inst ) {
            var altFormat, date, dateStr,
                altField = this._get( inst, "altField" );
    
            if ( altField ) { // update alternate field too
                altFormat = this._get( inst, "altFormat" ) || this._get( inst, "dateFormat" );
                date = this._getDate( inst );
                dateStr = this.formatDate( altFormat, date, this._getFormatConfig( inst ) );
                $( document ).find( altField ).val( dateStr );
            }
        },
    
        /* Set as beforeShowDay function to prevent selection of weekends.
         * @param  date  Date - the date to customise
         * @return [boolean, string] - is this date selectable?, what is its CSS class?
         */
        noWeekends: function( date ) {
            var day = date.getDay();
            return [ ( day > 0 && day < 6 ), "" ];
        },
    
        /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
         * @param  date  Date - the date to get the week for
         * @return  number - the number of the week within the year that contains this date
         */
        iso8601Week: function( date ) {
            var time,
                checkDate = new Date( date.getTime() );
    
            // Find Thursday of this week starting on Monday
            checkDate.setDate( checkDate.getDate() + 4 - ( checkDate.getDay() || 7 ) );
    
            time = checkDate.getTime();
            checkDate.setMonth( 0 ); // Compare with Jan 1
            checkDate.setDate( 1 );
            return Math.floor( Math.round( ( time - checkDate ) / 86400000 ) / 7 ) + 1;
        },
    
        /* Parse a string value into a date object.
         * See formatDate below for the possible formats.
         *
         * @param  format string - the expected format of the date
         * @param  value string - the date in the above format
         * @param  settings Object - attributes include:
         *					shortYearCutoff  number - the cutoff year for determining the century (optional)
         *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
         *					dayNames		string[7] - names of the days from Sunday (optional)
         *					monthNamesShort string[12] - abbreviated names of the months (optional)
         *					monthNames		string[12] - names of the months (optional)
         * @return  Date - the extracted date value or null if value is blank
         */
        parseDate: function( format, value, settings ) {
            if ( format == null || value == null ) {
                throw "Invalid arguments";
            }
    
            value = ( typeof value === "object" ? value.toString() : value + "" );
            if ( value === "" ) {
                return null;
            }
    
            var iFormat, dim, extra,
                iValue = 0,
                shortYearCutoffTemp = ( settings ? settings.shortYearCutoff : null ) || this._defaults.shortYearCutoff,
                shortYearCutoff = ( typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
                    new Date().getFullYear() % 100 + parseInt( shortYearCutoffTemp, 10 ) ),
                dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,
                dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,
                monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,
                monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,
                year = -1,
                month = -1,
                day = -1,
                doy = -1,
                literal = false,
                date,
    
                // Check whether a format character is doubled
                lookAhead = function( match ) {
                    var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
                    if ( matches ) {
                        iFormat++;
                    }
                    return matches;
                },
    
                // Extract a number from the string value
                getNumber = function( match ) {
                    var isDoubled = lookAhead( match ),
                        size = ( match === "@" ? 14 : ( match === "!" ? 20 :
                        ( match === "y" && isDoubled ? 4 : ( match === "o" ? 3 : 2 ) ) ) ),
                        minSize = ( match === "y" ? size : 1 ),
                        digits = new RegExp( "^\\d{" + minSize + "," + size + "}" ),
                        num = value.substring( iValue ).match( digits );
                    if ( !num ) {
                        throw "Missing number at position " + iValue;
                    }
                    iValue += num[ 0 ].length;
                    return parseInt( num[ 0 ], 10 );
                },
    
                // Extract a name from the string value and convert to an index
                getName = function( match, shortNames, longNames ) {
                    var index = -1,
                        names = $.map( lookAhead( match ) ? longNames : shortNames, function( v, k ) {
                            return [ [ k, v ] ];
                        } ).sort( function( a, b ) {
                            return -( a[ 1 ].length - b[ 1 ].length );
                        } );
    
                    $.each( names, function( i, pair ) {
                        var name = pair[ 1 ];
                        if ( value.substr( iValue, name.length ).toLowerCase() === name.toLowerCase() ) {
                            index = pair[ 0 ];
                            iValue += name.length;
                            return false;
                        }
                    } );
                    if ( index !== -1 ) {
                        return index + 1;
                    } else {
                        throw "Unknown name at position " + iValue;
                    }
                },
    
                // Confirm that a literal character matches the string value
                checkLiteral = function() {
                    if ( value.charAt( iValue ) !== format.charAt( iFormat ) ) {
                        throw "Unexpected literal at position " + iValue;
                    }
                    iValue++;
                };
    
            for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
                if ( literal ) {
                    if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
                        literal = false;
                    } else {
                        checkLiteral();
                    }
                } else {
                    switch ( format.charAt( iFormat ) ) {
                        case "d":
                            day = getNumber( "d" );
                            break;
                        case "D":
                            getName( "D", dayNamesShort, dayNames );
                            break;
                        case "o":
                            doy = getNumber( "o" );
                            break;
                        case "m":
                            month = getNumber( "m" );
                            break;
                        case "M":
                            month = getName( "M", monthNamesShort, monthNames );
                            break;
                        case "y":
                            year = getNumber( "y" );
                            break;
                        case "@":
                            date = new Date( getNumber( "@" ) );
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case "!":
                            date = new Date( ( getNumber( "!" ) - this._ticksTo1970 ) / 10000 );
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case "'":
                            if ( lookAhead( "'" ) ) {
                                checkLiteral();
                            } else {
                                literal = true;
                            }
                            break;
                        default:
                            checkLiteral();
                    }
                }
            }
    
            if ( iValue < value.length ) {
                extra = value.substr( iValue );
                if ( !/^\s+/.test( extra ) ) {
                    throw "Extra/unparsed characters found in date: " + extra;
                }
            }
    
            if ( year === -1 ) {
                year = new Date().getFullYear();
            } else if ( year < 100 ) {
                year += new Date().getFullYear() - new Date().getFullYear() % 100 +
                    ( year <= shortYearCutoff ? 0 : -100 );
            }
    
            if ( doy > -1 ) {
                month = 1;
                day = doy;
                do {
                    dim = this._getDaysInMonth( year, month - 1 );
                    if ( day <= dim ) {
                        break;
                    }
                    month++;
                    day -= dim;
                } while ( true );
            }
    
            date = this._daylightSavingAdjust( new Date( year, month - 1, day ) );
            if ( date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day ) {
                throw "Invalid date"; // E.g. 31/02/00
            }
            return date;
        },
    
        /* Standard date formats. */
        ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
        COOKIE: "D, dd M yy",
        ISO_8601: "yy-mm-dd",
        RFC_822: "D, d M y",
        RFC_850: "DD, dd-M-y",
        RFC_1036: "D, d M y",
        RFC_1123: "D, d M yy",
        RFC_2822: "D, d M yy",
        RSS: "D, d M y", // RFC 822
        TICKS: "!",
        TIMESTAMP: "@",
        W3C: "yy-mm-dd", // ISO 8601
    
        _ticksTo1970: ( ( ( 1970 - 1 ) * 365 + Math.floor( 1970 / 4 ) - Math.floor( 1970 / 100 ) +
            Math.floor( 1970 / 400 ) ) * 24 * 60 * 60 * 10000000 ),
    
        /* Format a date object into a string value.
         * The format can be combinations of the following:
         * d  - day of month (no leading zero)
         * dd - day of month (two digit)
         * o  - day of year (no leading zeros)
         * oo - day of year (three digit)
         * D  - day name short
         * DD - day name long
         * m  - month of year (no leading zero)
         * mm - month of year (two digit)
         * M  - month name short
         * MM - month name long
         * y  - year (two digit)
         * yy - year (four digit)
         * @ - Unix timestamp (ms since 01/01/1970)
         * ! - Windows ticks (100ns since 01/01/0001)
         * "..." - literal text
         * '' - single quote
         *
         * @param  format string - the desired format of the date
         * @param  date Date - the date value to format
         * @param  settings Object - attributes include:
         *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
         *					dayNames		string[7] - names of the days from Sunday (optional)
         *					monthNamesShort string[12] - abbreviated names of the months (optional)
         *					monthNames		string[12] - names of the months (optional)
         * @return  string - the date in the above format
         */
        formatDate: function( format, date, settings ) {
            if ( !date ) {
                return "";
            }
    
            var iFormat,
                dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,
                dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,
                monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,
                monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,
    
                // Check whether a format character is doubled
                lookAhead = function( match ) {
                    var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
                    if ( matches ) {
                        iFormat++;
                    }
                    return matches;
                },
    
                // Format a number, with leading zero if necessary
                formatNumber = function( match, value, len ) {
                    var num = "" + value;
                    if ( lookAhead( match ) ) {
                        while ( num.length < len ) {
                            num = "0" + num;
                        }
                    }
                    return num;
                },
    
                // Format a name, short or long as requested
                formatName = function( match, value, shortNames, longNames ) {
                    return ( lookAhead( match ) ? longNames[ value ] : shortNames[ value ] );
                },
                output = "",
                literal = false;
    
            if ( date ) {
                for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
                    if ( literal ) {
                        if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
                            literal = false;
                        } else {
                            output += format.charAt( iFormat );
                        }
                    } else {
                        switch ( format.charAt( iFormat ) ) {
                            case "d":
                                output += formatNumber( "d", date.getDate(), 2 );
                                break;
                            case "D":
                                output += formatName( "D", date.getDay(), dayNamesShort, dayNames );
                                break;
                            case "o":
                                output += formatNumber( "o",
                                    Math.round( ( new Date( date.getFullYear(), date.getMonth(), date.getDate() ).getTime() - new Date( date.getFullYear(), 0, 0 ).getTime() ) / 86400000 ), 3 );
                                break;
                            case "m":
                                output += formatNumber( "m", date.getMonth() + 1, 2 );
                                break;
                            case "M":
                                output += formatName( "M", date.getMonth(), monthNamesShort, monthNames );
                                break;
                            case "y":
                                output += ( lookAhead( "y" ) ? date.getFullYear() :
                                    ( date.getFullYear() % 100 < 10 ? "0" : "" ) + date.getFullYear() % 100 );
                                break;
                            case "@":
                                output += date.getTime();
                                break;
                            case "!":
                                output += date.getTime() * 10000 + this._ticksTo1970;
                                break;
                            case "'":
                                if ( lookAhead( "'" ) ) {
                                    output += "'";
                                } else {
                                    literal = true;
                                }
                                break;
                            default:
                                output += format.charAt( iFormat );
                        }
                    }
                }
            }
            return output;
        },
    
        /* Extract all possible characters from the date format. */
        _possibleChars: function( format ) {
            var iFormat,
                chars = "",
                literal = false,
    
                // Check whether a format character is doubled
                lookAhead = function( match ) {
                    var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
                    if ( matches ) {
                        iFormat++;
                    }
                    return matches;
                };
    
            for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
                if ( literal ) {
                    if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
                        literal = false;
                    } else {
                        chars += format.charAt( iFormat );
                    }
                } else {
                    switch ( format.charAt( iFormat ) ) {
                        case "d": case "m": case "y": case "@":
                            chars += "0123456789";
                            break;
                        case "D": case "M":
                            return null; // Accept anything
                        case "'":
                            if ( lookAhead( "'" ) ) {
                                chars += "'";
                            } else {
                                literal = true;
                            }
                            break;
                        default:
                            chars += format.charAt( iFormat );
                    }
                }
            }
            return chars;
        },
    
        /* Get a setting value, defaulting if necessary. */
        _get: function( inst, name ) {
            return inst.settings[ name ] !== undefined ?
                inst.settings[ name ] : this._defaults[ name ];
        },
    
        /* Parse existing date and initialise date picker. */
        _setDateFromField: function( inst, noDefault ) {
            if ( inst.input.val() === inst.lastVal ) {
                return;
            }
    
            var dateFormat = this._get( inst, "dateFormat" ),
                dates = inst.lastVal = inst.input ? inst.input.val() : null,
                defaultDate = this._getDefaultDate( inst ),
                date = defaultDate,
                settings = this._getFormatConfig( inst );
    
            try {
                date = this.parseDate( dateFormat, dates, settings ) || defaultDate;
            } catch ( event ) {
                dates = ( noDefault ? "" : dates );
            }
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            inst.currentDay = ( dates ? date.getDate() : 0 );
            inst.currentMonth = ( dates ? date.getMonth() : 0 );
            inst.currentYear = ( dates ? date.getFullYear() : 0 );
            this._adjustInstDate( inst );
        },
    
        /* Retrieve the default date shown on opening. */
        _getDefaultDate: function( inst ) {
            return this._restrictMinMax( inst,
                this._determineDate( inst, this._get( inst, "defaultDate" ), new Date() ) );
        },
    
        /* A date may be specified as an exact value or a relative one. */
        _determineDate: function( inst, date, defaultDate ) {
            var offsetNumeric = function( offset ) {
                    var date = new Date();
                    date.setDate( date.getDate() + offset );
                    return date;
                },
                offsetString = function( offset ) {
                    try {
                        return $.datepicker.parseDate( $.datepicker._get( inst, "dateFormat" ),
                            offset, $.datepicker._getFormatConfig( inst ) );
                    } catch ( e ) {
    
                        // Ignore
                    }
    
                    var date = ( offset.toLowerCase().match( /^c/ ) ?
                        $.datepicker._getDate( inst ) : null ) || new Date(),
                        year = date.getFullYear(),
                        month = date.getMonth(),
                        day = date.getDate(),
                        pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
                        matches = pattern.exec( offset );
    
                    while ( matches ) {
                        switch ( matches[ 2 ] || "d" ) {
                            case "d" : case "D" :
                                day += parseInt( matches[ 1 ], 10 ); break;
                            case "w" : case "W" :
                                day += parseInt( matches[ 1 ], 10 ) * 7; break;
                            case "m" : case "M" :
                                month += parseInt( matches[ 1 ], 10 );
                                day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );
                                break;
                            case "y": case "Y" :
                                year += parseInt( matches[ 1 ], 10 );
                                day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );
                                break;
                        }
                        matches = pattern.exec( offset );
                    }
                    return new Date( year, month, day );
                },
                newDate = ( date == null || date === "" ? defaultDate : ( typeof date === "string" ? offsetString( date ) :
                    ( typeof date === "number" ? ( isNaN( date ) ? defaultDate : offsetNumeric( date ) ) : new Date( date.getTime() ) ) ) );
    
            newDate = ( newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate );
            if ( newDate ) {
                newDate.setHours( 0 );
                newDate.setMinutes( 0 );
                newDate.setSeconds( 0 );
                newDate.setMilliseconds( 0 );
            }
            return this._daylightSavingAdjust( newDate );
        },
    
        /* Handle switch to/from daylight saving.
         * Hours may be non-zero on daylight saving cut-over:
         * > 12 when midnight changeover, but then cannot generate
         * midnight datetime, so jump to 1AM, otherwise reset.
         * @param  date  (Date) the date to check
         * @return  (Date) the corrected date
         */
        _daylightSavingAdjust: function( date ) {
            if ( !date ) {
                return null;
            }
            date.setHours( date.getHours() > 12 ? date.getHours() + 2 : 0 );
            return date;
        },
    
        /* Set the date(s) directly. */
        _setDate: function( inst, date, noChange ) {
            var clear = !date,
                origMonth = inst.selectedMonth,
                origYear = inst.selectedYear,
                newDate = this._restrictMinMax( inst, this._determineDate( inst, date, new Date() ) );
    
            inst.selectedDay = inst.currentDay = newDate.getDate();
            inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
            if ( ( origMonth !== inst.selectedMonth || origYear !== inst.selectedYear ) && !noChange ) {
                this._notifyChange( inst );
            }
            this._adjustInstDate( inst );
            if ( inst.input ) {
                inst.input.val( clear ? "" : this._formatDate( inst ) );
            }
        },
    
        /* Retrieve the date(s) directly. */
        _getDate: function( inst ) {
            var startDate = ( !inst.currentYear || ( inst.input && inst.input.val() === "" ) ? null :
                this._daylightSavingAdjust( new Date(
                inst.currentYear, inst.currentMonth, inst.currentDay ) ) );
                return startDate;
        },
    
        /* Attach the onxxx handlers.  These are declared statically so
         * they work with static code transformers like Caja.
         */
        _attachHandlers: function( inst ) {
            var stepMonths = this._get( inst, "stepMonths" ),
                id = "#" + inst.id.replace( /\\\\/g, "\\" );
            inst.dpDiv.find( "[data-handler]" ).map( function() {
                var handler = {
                    prev: function() {
                        $.datepicker._adjustDate( id, -stepMonths, "M" );
                    },
                    next: function() {
                        $.datepicker._adjustDate( id, +stepMonths, "M" );
                    },
                    hide: function() {
                        $.datepicker._hideDatepicker();
                    },
                    today: function() {
                        $.datepicker._gotoToday( id );
                    },
                    selectDay: function() {
                        $.datepicker._selectDay( id, +this.getAttribute( "data-month" ), +this.getAttribute( "data-year" ), this );
                        return false;
                    },
                    selectMonth: function() {
                        $.datepicker._selectMonthYear( id, this, "M" );
                        return false;
                    },
                    selectYear: function() {
                        $.datepicker._selectMonthYear( id, this, "Y" );
                        return false;
                    }
                };
                $( this ).on( this.getAttribute( "data-event" ), handler[ this.getAttribute( "data-handler" ) ] );
            } );
        },
    
        /* Generate the HTML for the current state of the date picker. */
        _generateHTML: function( inst ) {
            var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
                controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
                monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
                selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
                cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
                printDate, dRow, tbody, daySettings, otherMonth, unselectable,
                tempDate = new Date(),
                today = this._daylightSavingAdjust(
                    new Date( tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate() ) ), // clear time
                isRTL = this._get( inst, "isRTL" ),
                showButtonPanel = this._get( inst, "showButtonPanel" ),
                hideIfNoPrevNext = this._get( inst, "hideIfNoPrevNext" ),
                navigationAsDateFormat = this._get( inst, "navigationAsDateFormat" ),
                numMonths = this._getNumberOfMonths( inst ),
                showCurrentAtPos = this._get( inst, "showCurrentAtPos" ),
                stepMonths = this._get( inst, "stepMonths" ),
                isMultiMonth = ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ),
                currentDate = this._daylightSavingAdjust( ( !inst.currentDay ? new Date( 9999, 9, 9 ) :
                    new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) ),
                minDate = this._getMinMaxDate( inst, "min" ),
                maxDate = this._getMinMaxDate( inst, "max" ),
                drawMonth = inst.drawMonth - showCurrentAtPos,
                drawYear = inst.drawYear;
    
            if ( drawMonth < 0 ) {
                drawMonth += 12;
                drawYear--;
            }
            if ( maxDate ) {
                maxDraw = this._daylightSavingAdjust( new Date( maxDate.getFullYear(),
                    maxDate.getMonth() - ( numMonths[ 0 ] * numMonths[ 1 ] ) + 1, maxDate.getDate() ) );
                maxDraw = ( minDate && maxDraw < minDate ? minDate : maxDraw );
                while ( this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 ) ) > maxDraw ) {
                    drawMonth--;
                    if ( drawMonth < 0 ) {
                        drawMonth = 11;
                        drawYear--;
                    }
                }
            }
            inst.drawMonth = drawMonth;
            inst.drawYear = drawYear;
    
            prevText = this._get( inst, "prevText" );
            prevText = ( !navigationAsDateFormat ? prevText : this.formatDate( prevText,
                this._daylightSavingAdjust( new Date( drawYear, drawMonth - stepMonths, 1 ) ),
                this._getFormatConfig( inst ) ) );
    
            if ( this._canAdjustMonth( inst, -1, drawYear, drawMonth ) ) {
                prev = $( "<a>" )
                    .attr( {
                        "class": "ui-datepicker-prev ui-corner-all",
                        "data-handler": "prev",
                        "data-event": "click",
                        title: prevText
                    } )
                    .append(
                        $( "<span>" )
                            .addClass( "ui-icon ui-icon-circle-triangle-" +
                                ( isRTL ? "e" : "w" ) )
                            .text( prevText )
                    )[ 0 ].outerHTML;
            } else if ( hideIfNoPrevNext ) {
                prev = "";
            } else {
                prev = $( "<a>" )
                    .attr( {
                        "class": "ui-datepicker-prev ui-corner-all ui-state-disabled",
                        title: prevText
                    } )
                    .append(
                        $( "<span>" )
                            .addClass( "ui-icon ui-icon-circle-triangle-" +
                                ( isRTL ? "e" : "w" ) )
                            .text( prevText )
                    )[ 0 ].outerHTML;
            }
    
            nextText = this._get( inst, "nextText" );
            nextText = ( !navigationAsDateFormat ? nextText : this.formatDate( nextText,
                this._daylightSavingAdjust( new Date( drawYear, drawMonth + stepMonths, 1 ) ),
                this._getFormatConfig( inst ) ) );
    
            if ( this._canAdjustMonth( inst, +1, drawYear, drawMonth ) ) {
                next = $( "<a>" )
                    .attr( {
                        "class": "ui-datepicker-next ui-corner-all",
                        "data-handler": "next",
                        "data-event": "click",
                        title: nextText
                    } )
                    .append(
                        $( "<span>" )
                            .addClass( "ui-icon ui-icon-circle-triangle-" +
                                ( isRTL ? "w" : "e" ) )
                            .text( nextText )
                    )[ 0 ].outerHTML;
            } else if ( hideIfNoPrevNext ) {
                next = "";
            } else {
                next = $( "<a>" )
                    .attr( {
                        "class": "ui-datepicker-next ui-corner-all ui-state-disabled",
                        title: nextText
                    } )
                    .append(
                        $( "<span>" )
                            .attr( "class", "ui-icon ui-icon-circle-triangle-" +
                                ( isRTL ? "w" : "e" ) )
                            .text( nextText )
                    )[ 0 ].outerHTML;
            }
    
            currentText = this._get( inst, "currentText" );
            gotoDate = ( this._get( inst, "gotoCurrent" ) && inst.currentDay ? currentDate : today );
            currentText = ( !navigationAsDateFormat ? currentText :
                this.formatDate( currentText, gotoDate, this._getFormatConfig( inst ) ) );
    
            controls = "";
            if ( !inst.inline ) {
                controls = $( "<button>" )
                    .attr( {
                        type: "button",
                        "class": "ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all",
                        "data-handler": "hide",
                        "data-event": "click"
                    } )
                    .text( this._get( inst, "closeText" ) )[ 0 ].outerHTML;
            }
    
            buttonPanel = "";
            if ( showButtonPanel ) {
                buttonPanel = $( "<div class='ui-datepicker-buttonpane ui-widget-content'>" )
                    .append( isRTL ? controls : "" )
                    .append( this._isInRange( inst, gotoDate ) ?
                        $( "<button>" )
                            .attr( {
                                type: "button",
                                "class": "ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all",
                                "data-handler": "today",
                                "data-event": "click"
                            } )
                            .text( currentText ) :
                        "" )
                    .append( isRTL ? "" : controls )[ 0 ].outerHTML;
            }
    
            firstDay = parseInt( this._get( inst, "firstDay" ), 10 );
            firstDay = ( isNaN( firstDay ) ? 0 : firstDay );
    
            showWeek = this._get( inst, "showWeek" );
            dayNames = this._get( inst, "dayNames" );
            dayNamesMin = this._get( inst, "dayNamesMin" );
            monthNames = this._get( inst, "monthNames" );
            monthNamesShort = this._get( inst, "monthNamesShort" );
            beforeShowDay = this._get( inst, "beforeShowDay" );
            showOtherMonths = this._get( inst, "showOtherMonths" );
            selectOtherMonths = this._get( inst, "selectOtherMonths" );
            defaultDate = this._getDefaultDate( inst );
            html = "";
    
            for ( row = 0; row < numMonths[ 0 ]; row++ ) {
                group = "";
                this.maxRows = 4;
                for ( col = 0; col < numMonths[ 1 ]; col++ ) {
                    selectedDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, inst.selectedDay ) );
                    cornerClass = " ui-corner-all";
                    calender = "";
                    if ( isMultiMonth ) {
                        calender += "<div class='ui-datepicker-group";
                        if ( numMonths[ 1 ] > 1 ) {
                            switch ( col ) {
                                case 0: calender += " ui-datepicker-group-first";
                                    cornerClass = " ui-corner-" + ( isRTL ? "right" : "left" ); break;
                                case numMonths[ 1 ] - 1: calender += " ui-datepicker-group-last";
                                    cornerClass = " ui-corner-" + ( isRTL ? "left" : "right" ); break;
                                default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
                            }
                        }
                        calender += "'>";
                    }
                    calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
                        ( /all|left/.test( cornerClass ) && row === 0 ? ( isRTL ? next : prev ) : "" ) +
                        ( /all|right/.test( cornerClass ) && row === 0 ? ( isRTL ? prev : next ) : "" ) +
                        this._generateMonthYearHeader( inst, drawMonth, drawYear, minDate, maxDate,
                        row > 0 || col > 0, monthNames, monthNamesShort ) + // draw month headers
                        "</div><table class='ui-datepicker-calendar'><thead>" +
                        "<tr>";
                    thead = ( showWeek ? "<th class='ui-datepicker-week-col'>" + this._get( inst, "weekHeader" ) + "</th>" : "" );
                    for ( dow = 0; dow < 7; dow++ ) { // days of the week
                        day = ( dow + firstDay ) % 7;
                        thead += "<th scope='col'" + ( ( dow + firstDay + 6 ) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "" ) + ">" +
                            "<span title='" + dayNames[ day ] + "'>" + dayNamesMin[ day ] + "</span></th>";
                    }
                    calender += thead + "</tr></thead><tbody>";
                    daysInMonth = this._getDaysInMonth( drawYear, drawMonth );
                    if ( drawYear === inst.selectedYear && drawMonth === inst.selectedMonth ) {
                        inst.selectedDay = Math.min( inst.selectedDay, daysInMonth );
                    }
                    leadDays = ( this._getFirstDayOfMonth( drawYear, drawMonth ) - firstDay + 7 ) % 7;
                    curRows = Math.ceil( ( leadDays + daysInMonth ) / 7 ); // calculate the number of rows to generate
                    numRows = ( isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows ); //If multiple months, use the higher number of rows (see #7043)
                    this.maxRows = numRows;
                    printDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 - leadDays ) );
                    for ( dRow = 0; dRow < numRows; dRow++ ) { // create date picker rows
                        calender += "<tr>";
                        tbody = ( !showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
                            this._get( inst, "calculateWeek" )( printDate ) + "</td>" );
                        for ( dow = 0; dow < 7; dow++ ) { // create date picker days
                            daySettings = ( beforeShowDay ?
                                beforeShowDay.apply( ( inst.input ? inst.input[ 0 ] : null ), [ printDate ] ) : [ true, "" ] );
                            otherMonth = ( printDate.getMonth() !== drawMonth );
                            unselectable = ( otherMonth && !selectOtherMonths ) || !daySettings[ 0 ] ||
                                ( minDate && printDate < minDate ) || ( maxDate && printDate > maxDate );
                            tbody += "<td class='" +
                                ( ( dow + firstDay + 6 ) % 7 >= 5 ? " ui-datepicker-week-end" : "" ) + // highlight weekends
                                ( otherMonth ? " ui-datepicker-other-month" : "" ) + // highlight days from other months
                                ( ( printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent ) || // user pressed key
                                ( defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ) ?
    
                                // or defaultDate is current printedDate and defaultDate is selectedDate
                                " " + this._dayOverClass : "" ) + // highlight selected day
                                ( unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "" ) +  // highlight unselectable days
                                ( otherMonth && !showOtherMonths ? "" : " " + daySettings[ 1 ] + // highlight custom dates
                                ( printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "" ) + // highlight selected day
                                ( printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "" ) ) + "'" + // highlight today (if different)
                                ( ( !otherMonth || showOtherMonths ) && daySettings[ 2 ] ? " title='" + daySettings[ 2 ].replace( /'/g, "&#39;" ) + "'" : "" ) + // cell title
                                ( unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'" ) + ">" + // actions
                                ( otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
                                ( unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
                                ( printDate.getTime() === today.getTime() ? " ui-state-highlight" : "" ) +
                                ( printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "" ) + // highlight selected day
                                ( otherMonth ? " ui-priority-secondary" : "" ) + // distinguish dates from other months
                                "' href='#' aria-current='" + ( printDate.getTime() === currentDate.getTime() ? "true" : "false" ) + // mark date as selected for screen reader
                                "' data-date='" + printDate.getDate() + // store date as data
                                "'>" + printDate.getDate() + "</a>" ) ) + "</td>"; // display selectable date
                            printDate.setDate( printDate.getDate() + 1 );
                            printDate = this._daylightSavingAdjust( printDate );
                        }
                        calender += tbody + "</tr>";
                    }
                    drawMonth++;
                    if ( drawMonth > 11 ) {
                        drawMonth = 0;
                        drawYear++;
                    }
                    calender += "</tbody></table>" + ( isMultiMonth ? "</div>" +
                                ( ( numMonths[ 0 ] > 0 && col === numMonths[ 1 ] - 1 ) ? "<div class='ui-datepicker-row-break'></div>" : "" ) : "" );
                    group += calender;
                }
                html += group;
            }
            html += buttonPanel;
            inst._keyEvent = false;
            return html;
        },
    
        /* Generate the month and year header. */
        _generateMonthYearHeader: function( inst, drawMonth, drawYear, minDate, maxDate,
                secondary, monthNames, monthNamesShort ) {
    
            var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
                changeMonth = this._get( inst, "changeMonth" ),
                changeYear = this._get( inst, "changeYear" ),
                showMonthAfterYear = this._get( inst, "showMonthAfterYear" ),
                selectMonthLabel = this._get( inst, "selectMonthLabel" ),
                selectYearLabel = this._get( inst, "selectYearLabel" ),
                html = "<div class='ui-datepicker-title'>",
                monthHtml = "";
    
            // Month selection
            if ( secondary || !changeMonth ) {
                monthHtml += "<span class='ui-datepicker-month'>" + monthNames[ drawMonth ] + "</span>";
            } else {
                inMinYear = ( minDate && minDate.getFullYear() === drawYear );
                inMaxYear = ( maxDate && maxDate.getFullYear() === drawYear );
                monthHtml += "<select class='ui-datepicker-month' aria-label='" + selectMonthLabel + "' data-handler='selectMonth' data-event='change'>";
                for ( month = 0; month < 12; month++ ) {
                    if ( ( !inMinYear || month >= minDate.getMonth() ) && ( !inMaxYear || month <= maxDate.getMonth() ) ) {
                        monthHtml += "<option value='" + month + "'" +
                            ( month === drawMonth ? " selected='selected'" : "" ) +
                            ">" + monthNamesShort[ month ] + "</option>";
                    }
                }
                monthHtml += "</select>";
            }
    
            if ( !showMonthAfterYear ) {
                html += monthHtml + ( secondary || !( changeMonth && changeYear ) ? "&#xa0;" : "" );
            }
    
            // Year selection
            if ( !inst.yearshtml ) {
                inst.yearshtml = "";
                if ( secondary || !changeYear ) {
                    html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
                } else {
    
                    // determine range of years to display
                    years = this._get( inst, "yearRange" ).split( ":" );
                    thisYear = new Date().getFullYear();
                    determineYear = function( value ) {
                        var year = ( value.match( /c[+\-].*/ ) ? drawYear + parseInt( value.substring( 1 ), 10 ) :
                            ( value.match( /[+\-].*/ ) ? thisYear + parseInt( value, 10 ) :
                            parseInt( value, 10 ) ) );
                        return ( isNaN( year ) ? thisYear : year );
                    };
                    year = determineYear( years[ 0 ] );
                    endYear = Math.max( year, determineYear( years[ 1 ] || "" ) );
                    year = ( minDate ? Math.max( year, minDate.getFullYear() ) : year );
                    endYear = ( maxDate ? Math.min( endYear, maxDate.getFullYear() ) : endYear );
                    inst.yearshtml += "<select class='ui-datepicker-year' aria-label='" + selectYearLabel + "' data-handler='selectYear' data-event='change'>";
                    for ( ; year <= endYear; year++ ) {
                        inst.yearshtml += "<option value='" + year + "'" +
                            ( year === drawYear ? " selected='selected'" : "" ) +
                            ">" + year + "</option>";
                    }
                    inst.yearshtml += "</select>";
    
                    html += inst.yearshtml;
                    inst.yearshtml = null;
                }
            }
    
            html += this._get( inst, "yearSuffix" );
            if ( showMonthAfterYear ) {
                html += ( secondary || !( changeMonth && changeYear ) ? "&#xa0;" : "" ) + monthHtml;
            }
            html += "</div>"; // Close datepicker_header
            return html;
        },
    
        /* Adjust one of the date sub-fields. */
        _adjustInstDate: function( inst, offset, period ) {
            var year = inst.selectedYear + ( period === "Y" ? offset : 0 ),
                month = inst.selectedMonth + ( period === "M" ? offset : 0 ),
                day = Math.min( inst.selectedDay, this._getDaysInMonth( year, month ) ) + ( period === "D" ? offset : 0 ),
                date = this._restrictMinMax( inst, this._daylightSavingAdjust( new Date( year, month, day ) ) );
    
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            if ( period === "M" || period === "Y" ) {
                this._notifyChange( inst );
            }
        },
    
        /* Ensure a date is within any min/max bounds. */
        _restrictMinMax: function( inst, date ) {
            var minDate = this._getMinMaxDate( inst, "min" ),
                maxDate = this._getMinMaxDate( inst, "max" ),
                newDate = ( minDate && date < minDate ? minDate : date );
            return ( maxDate && newDate > maxDate ? maxDate : newDate );
        },
    
        /* Notify change of month/year. */
        _notifyChange: function( inst ) {
            var onChange = this._get( inst, "onChangeMonthYear" );
            if ( onChange ) {
                onChange.apply( ( inst.input ? inst.input[ 0 ] : null ),
                    [ inst.selectedYear, inst.selectedMonth + 1, inst ] );
            }
        },
    
        /* Determine the number of months to show. */
        _getNumberOfMonths: function( inst ) {
            var numMonths = this._get( inst, "numberOfMonths" );
            return ( numMonths == null ? [ 1, 1 ] : ( typeof numMonths === "number" ? [ 1, numMonths ] : numMonths ) );
        },
    
        /* Determine the current maximum date - ensure no time components are set. */
        _getMinMaxDate: function( inst, minMax ) {
            return this._determineDate( inst, this._get( inst, minMax + "Date" ), null );
        },
    
        /* Find the number of days in a given month. */
        _getDaysInMonth: function( year, month ) {
            return 32 - this._daylightSavingAdjust( new Date( year, month, 32 ) ).getDate();
        },
    
        /* Find the day of the week of the first of a month. */
        _getFirstDayOfMonth: function( year, month ) {
            return new Date( year, month, 1 ).getDay();
        },
    
        /* Determines if we should allow a "next/prev" month display change. */
        _canAdjustMonth: function( inst, offset, curYear, curMonth ) {
            var numMonths = this._getNumberOfMonths( inst ),
                date = this._daylightSavingAdjust( new Date( curYear,
                curMonth + ( offset < 0 ? offset : numMonths[ 0 ] * numMonths[ 1 ] ), 1 ) );
    
            if ( offset < 0 ) {
                date.setDate( this._getDaysInMonth( date.getFullYear(), date.getMonth() ) );
            }
            return this._isInRange( inst, date );
        },
    
        /* Is the given date in the accepted range? */
        _isInRange: function( inst, date ) {
            var yearSplit, currentYear,
                minDate = this._getMinMaxDate( inst, "min" ),
                maxDate = this._getMinMaxDate( inst, "max" ),
                minYear = null,
                maxYear = null,
                years = this._get( inst, "yearRange" );
                if ( years ) {
                    yearSplit = years.split( ":" );
                    currentYear = new Date().getFullYear();
                    minYear = parseInt( yearSplit[ 0 ], 10 );
                    maxYear = parseInt( yearSplit[ 1 ], 10 );
                    if ( yearSplit[ 0 ].match( /[+\-].*/ ) ) {
                        minYear += currentYear;
                    }
                    if ( yearSplit[ 1 ].match( /[+\-].*/ ) ) {
                        maxYear += currentYear;
                    }
                }
    
            return ( ( !minDate || date.getTime() >= minDate.getTime() ) &&
                ( !maxDate || date.getTime() <= maxDate.getTime() ) &&
                ( !minYear || date.getFullYear() >= minYear ) &&
                ( !maxYear || date.getFullYear() <= maxYear ) );
        },
    
        /* Provide the configuration settings for formatting/parsing. */
        _getFormatConfig: function( inst ) {
            var shortYearCutoff = this._get( inst, "shortYearCutoff" );
            shortYearCutoff = ( typeof shortYearCutoff !== "string" ? shortYearCutoff :
                new Date().getFullYear() % 100 + parseInt( shortYearCutoff, 10 ) );
            return { shortYearCutoff: shortYearCutoff,
                dayNamesShort: this._get( inst, "dayNamesShort" ), dayNames: this._get( inst, "dayNames" ),
                monthNamesShort: this._get( inst, "monthNamesShort" ), monthNames: this._get( inst, "monthNames" ) };
        },
    
        /* Format the given date for display. */
        _formatDate: function( inst, day, month, year ) {
            if ( !day ) {
                inst.currentDay = inst.selectedDay;
                inst.currentMonth = inst.selectedMonth;
                inst.currentYear = inst.selectedYear;
            }
            var date = ( day ? ( typeof day === "object" ? day :
                this._daylightSavingAdjust( new Date( year, month, day ) ) ) :
                this._daylightSavingAdjust( new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) );
            return this.formatDate( this._get( inst, "dateFormat" ), date, this._getFormatConfig( inst ) );
        }
    } );
    
    /*
     * Bind hover events for datepicker elements.
     * Done via delegate so the binding only occurs once in the lifetime of the parent div.
     * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
     */
    function datepicker_bindHover( dpDiv ) {
        var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
        return dpDiv.on( "mouseout", selector, function() {
                $( this ).removeClass( "ui-state-hover" );
                if ( this.className.indexOf( "ui-datepicker-prev" ) !== -1 ) {
                    $( this ).removeClass( "ui-datepicker-prev-hover" );
                }
                if ( this.className.indexOf( "ui-datepicker-next" ) !== -1 ) {
                    $( this ).removeClass( "ui-datepicker-next-hover" );
                }
            } )
            .on( "mouseover", selector, datepicker_handleMouseover );
    }
    
    function datepicker_handleMouseover() {
        if ( !$.datepicker._isDisabledDatepicker( datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[ 0 ] : datepicker_instActive.input[ 0 ] ) ) {
            $( this ).parents( ".ui-datepicker-calendar" ).find( "a" ).removeClass( "ui-state-hover" );
            $( this ).addClass( "ui-state-hover" );
            if ( this.className.indexOf( "ui-datepicker-prev" ) !== -1 ) {
                $( this ).addClass( "ui-datepicker-prev-hover" );
            }
            if ( this.className.indexOf( "ui-datepicker-next" ) !== -1 ) {
                $( this ).addClass( "ui-datepicker-next-hover" );
            }
        }
    }
    
    /* jQuery extend now ignores nulls! */
    function datepicker_extendRemove( target, props ) {
        $.extend( target, props );
        for ( var name in props ) {
            if ( props[ name ] == null ) {
                target[ name ] = props[ name ];
            }
        }
        return target;
    }
    
    /* Invoke the datepicker functionality.
       @param  options  string - a command, optionally followed by additional parameters or
                        Object - settings for attaching new datepicker functionality
       @return  jQuery object */
    $.fn.datepicker = function( options ) {
    
        /* Verify an empty collection wasn't passed - Fixes #6976 */
        if ( !this.length ) {
            return this;
        }
    
        /* Initialise the date picker. */
        if ( !$.datepicker.initialized ) {
            $( document ).on( "mousedown", $.datepicker._checkExternalClick );
            $.datepicker.initialized = true;
        }
    
        /* Append datepicker main container to body if not exist. */
        if ( $( "#" + $.datepicker._mainDivId ).length === 0 ) {
            $( "body" ).append( $.datepicker.dpDiv );
        }
    
        var otherArgs = Array.prototype.slice.call( arguments, 1 );
        if ( typeof options === "string" && ( options === "isDisabled" || options === "getDate" || options === "widget" ) ) {
            return $.datepicker[ "_" + options + "Datepicker" ].
                apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );
        }
        if ( options === "option" && arguments.length === 2 && typeof arguments[ 1 ] === "string" ) {
            return $.datepicker[ "_" + options + "Datepicker" ].
                apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );
        }
        return this.each( function() {
            if ( typeof options === "string" ) {
                $.datepicker[ "_" + options + "Datepicker" ]
                    .apply( $.datepicker, [ this ].concat( otherArgs ) );
            } else {
                $.datepicker._attachDatepicker( this, options );
            }
        } );
    };
    
    $.datepicker = new Datepicker(); // singleton instance
    $.datepicker.initialized = false;
    $.datepicker.uuid = new Date().getTime();
    $.datepicker.version = "1.13.3";
    
    return $.datepicker;
    
    } );
    
    },{}],414:[function(require,module,exports){
    /*!
     * jQuery UI Mouse 1.13.3
     * https://jqueryui.com
     *
     * Copyright OpenJS Foundation and other contributors
     * Released under the MIT license.
     * https://jquery.org/license
     */
    
    //>>label: Mouse
    //>>group: Widgets
    //>>description: Abstracts mouse-based interactions to assist in creating certain widgets.
    //>>docs: https://api.jqueryui.com/mouse/
    
    ( function( factory ) {
        "use strict";
    
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define( [
                "jquery",
                "../ie",
                "../version",
                "../widget"
            ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    } )( function( $ ) {
    "use strict";
    
    var mouseHandled = false;
    $( document ).on( "mouseup", function() {
        mouseHandled = false;
    } );
    
    return $.widget( "ui.mouse", {
        version: "1.13.3",
        options: {
            cancel: "input, textarea, button, select, option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function() {
            var that = this;
    
            this.element
                .on( "mousedown." + this.widgetName, function( event ) {
                    return that._mouseDown( event );
                } )
                .on( "click." + this.widgetName, function( event ) {
                    if ( true === $.data( event.target, that.widgetName + ".preventClickEvent" ) ) {
                        $.removeData( event.target, that.widgetName + ".preventClickEvent" );
                        event.stopImmediatePropagation();
                        return false;
                    }
                } );
    
            this.started = false;
        },
    
        // TODO: make sure destroying one instance of mouse doesn't mess with
        // other instances of mouse
        _mouseDestroy: function() {
            this.element.off( "." + this.widgetName );
            if ( this._mouseMoveDelegate ) {
                this.document
                    .off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
                    .off( "mouseup." + this.widgetName, this._mouseUpDelegate );
            }
        },
    
        _mouseDown: function( event ) {
    
            // don't let more than one widget handle mouseStart
            if ( mouseHandled ) {
                return;
            }
    
            this._mouseMoved = false;
    
            // We may have missed mouseup (out of window)
            if ( this._mouseStarted ) {
                this._mouseUp( event );
            }
    
            this._mouseDownEvent = event;
    
            var that = this,
                btnIsLeft = ( event.which === 1 ),
    
                // event.target.nodeName works around a bug in IE 8 with
                // disabled inputs (#7620)
                elIsCancel = ( typeof this.options.cancel === "string" && event.target.nodeName ?
                    $( event.target ).closest( this.options.cancel ).length : false );
            if ( !btnIsLeft || elIsCancel || !this._mouseCapture( event ) ) {
                return true;
            }
    
            this.mouseDelayMet = !this.options.delay;
            if ( !this.mouseDelayMet ) {
                this._mouseDelayTimer = setTimeout( function() {
                    that.mouseDelayMet = true;
                }, this.options.delay );
            }
    
            if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
                this._mouseStarted = ( this._mouseStart( event ) !== false );
                if ( !this._mouseStarted ) {
                    event.preventDefault();
                    return true;
                }
            }
    
            // Click event may never have fired (Gecko & Opera)
            if ( true === $.data( event.target, this.widgetName + ".preventClickEvent" ) ) {
                $.removeData( event.target, this.widgetName + ".preventClickEvent" );
            }
    
            // These delegates are required to keep context
            this._mouseMoveDelegate = function( event ) {
                return that._mouseMove( event );
            };
            this._mouseUpDelegate = function( event ) {
                return that._mouseUp( event );
            };
    
            this.document
                .on( "mousemove." + this.widgetName, this._mouseMoveDelegate )
                .on( "mouseup." + this.widgetName, this._mouseUpDelegate );
    
            event.preventDefault();
    
            mouseHandled = true;
            return true;
        },
    
        _mouseMove: function( event ) {
    
            // Only check for mouseups outside the document if you've moved inside the document
            // at least once. This prevents the firing of mouseup in the case of IE<9, which will
            // fire a mousemove event if content is placed under the cursor. See #7778
            // Support: IE <9
            if ( this._mouseMoved ) {
    
                // IE mouseup check - mouseup happened when mouse was out of window
                if ( $.ui.ie && ( !document.documentMode || document.documentMode < 9 ) &&
                        !event.button ) {
                    return this._mouseUp( event );
    
                // Iframe mouseup check - mouseup occurred in another document
                } else if ( !event.which ) {
    
                    // Support: Safari <=8 - 9
                    // Safari sets which to 0 if you press any of the following keys
                    // during a drag (#14461)
                    if ( event.originalEvent.altKey || event.originalEvent.ctrlKey ||
                            event.originalEvent.metaKey || event.originalEvent.shiftKey ) {
                        this.ignoreMissingWhich = true;
                    } else if ( !this.ignoreMissingWhich ) {
                        return this._mouseUp( event );
                    }
                }
            }
    
            if ( event.which || event.button ) {
                this._mouseMoved = true;
            }
    
            if ( this._mouseStarted ) {
                this._mouseDrag( event );
                return event.preventDefault();
            }
    
            if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
                this._mouseStarted =
                    ( this._mouseStart( this._mouseDownEvent, event ) !== false );
                if ( this._mouseStarted ) {
                    this._mouseDrag( event );
                } else {
                    this._mouseUp( event );
                }
            }
    
            return !this._mouseStarted;
        },
    
        _mouseUp: function( event ) {
            this.document
                .off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
                .off( "mouseup." + this.widgetName, this._mouseUpDelegate );
    
            if ( this._mouseStarted ) {
                this._mouseStarted = false;
    
                if ( event.target === this._mouseDownEvent.target ) {
                    $.data( event.target, this.widgetName + ".preventClickEvent", true );
                }
    
                this._mouseStop( event );
            }
    
            if ( this._mouseDelayTimer ) {
                clearTimeout( this._mouseDelayTimer );
                delete this._mouseDelayTimer;
            }
    
            this.ignoreMissingWhich = false;
            mouseHandled = false;
            event.preventDefault();
        },
    
        _mouseDistanceMet: function( event ) {
            return ( Math.max(
                    Math.abs( this._mouseDownEvent.pageX - event.pageX ),
                    Math.abs( this._mouseDownEvent.pageY - event.pageY )
                ) >= this.options.distance
            );
        },
    
        _mouseDelayMet: function( /* event */ ) {
            return this.mouseDelayMet;
        },
    
        // These are placeholder methods, to be overriden by extending plugin
        _mouseStart: function( /* event */ ) {},
        _mouseDrag: function( /* event */ ) {},
        _mouseStop: function( /* event */ ) {},
        _mouseCapture: function( /* event */ ) {
            return true;
        }
    } );
    
    } );
    
    },{}],415:[function(require,module,exports){
    /*!
     * jQuery UI Sortable 1.13.3
     * https://jqueryui.com
     *
     * Copyright OpenJS Foundation and other contributors
     * Released under the MIT license.
     * https://jquery.org/license
     */
    
    //>>label: Sortable
    //>>group: Interactions
    //>>description: Enables items in a list to be sorted using the mouse.
    //>>docs: https://api.jqueryui.com/sortable/
    //>>demos: https://jqueryui.com/sortable/
    //>>css.structure: ../../themes/base/sortable.css
    
    ( function( factory ) {
        "use strict";
    
        if ( typeof define === "function" && define.amd ) {
    
            // AMD. Register as an anonymous module.
            define( [
                "jquery",
                "./mouse",
                "../data",
                "../ie",
                "../scroll-parent",
                "../version",
                "../widget"
            ], factory );
        } else {
    
            // Browser globals
            factory( jQuery );
        }
    } )( function( $ ) {
    "use strict";
    
    return $.widget( "ui.sortable", $.ui.mouse, {
        version: "1.13.3",
        widgetEventPrefix: "sort",
        ready: false,
        options: {
            appendTo: "parent",
            axis: false,
            connectWith: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            dropOnEmpty: true,
            forcePlaceholderSize: false,
            forceHelperSize: false,
            grid: false,
            handle: false,
            helper: "original",
            items: "> *",
            opacity: false,
            placeholder: false,
            revert: false,
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            scope: "default",
            tolerance: "intersect",
            zIndex: 1000,
    
            // Callbacks
            activate: null,
            beforeStop: null,
            change: null,
            deactivate: null,
            out: null,
            over: null,
            receive: null,
            remove: null,
            sort: null,
            start: null,
            stop: null,
            update: null
        },
    
        _isOverAxis: function( x, reference, size ) {
            return ( x >= reference ) && ( x < ( reference + size ) );
        },
    
        _isFloating: function( item ) {
            return ( /left|right/ ).test( item.css( "float" ) ) ||
                ( /inline|table-cell/ ).test( item.css( "display" ) );
        },
    
        _create: function() {
            this.containerCache = {};
            this._addClass( "ui-sortable" );
    
            //Get the items
            this.refresh();
    
            //Let's determine the parent's offset
            this.offset = this.element.offset();
    
            //Initialize mouse events for interaction
            this._mouseInit();
    
            this._setHandleClassName();
    
            //We're ready to go
            this.ready = true;
    
        },
    
        _setOption: function( key, value ) {
            this._super( key, value );
    
            if ( key === "handle" ) {
                this._setHandleClassName();
            }
        },
    
        _setHandleClassName: function() {
            var that = this;
            this._removeClass( this.element.find( ".ui-sortable-handle" ), "ui-sortable-handle" );
            $.each( this.items, function() {
                that._addClass(
                    this.instance.options.handle ?
                        this.item.find( this.instance.options.handle ) :
                        this.item,
                    "ui-sortable-handle"
                );
            } );
        },
    
        _destroy: function() {
            this._mouseDestroy();
    
            for ( var i = this.items.length - 1; i >= 0; i-- ) {
                this.items[ i ].item.removeData( this.widgetName + "-item" );
            }
    
            return this;
        },
    
        _mouseCapture: function( event, overrideHandle ) {
            var currentItem = null,
                validHandle = false,
                that = this;
    
            if ( this.reverting ) {
                return false;
            }
    
            if ( this.options.disabled || this.options.type === "static" ) {
                return false;
            }
    
            //We have to refresh the items data once first
            this._refreshItems( event );
    
            //Find out if the clicked node (or one of its parents) is a actual item in this.items
            $( event.target ).parents().each( function() {
                if ( $.data( this, that.widgetName + "-item" ) === that ) {
                    currentItem = $( this );
                    return false;
                }
            } );
            if ( $.data( event.target, that.widgetName + "-item" ) === that ) {
                currentItem = $( event.target );
            }
    
            if ( !currentItem ) {
                return false;
            }
            if ( this.options.handle && !overrideHandle ) {
                $( this.options.handle, currentItem ).find( "*" ).addBack().each( function() {
                    if ( this === event.target ) {
                        validHandle = true;
                    }
                } );
                if ( !validHandle ) {
                    return false;
                }
            }
    
            this.currentItem = currentItem;
            this._removeCurrentsFromItems();
            return true;
    
        },
    
        _mouseStart: function( event, overrideHandle, noActivation ) {
    
            var i, body,
                o = this.options;
    
            this.currentContainer = this;
    
            //We only need to call refreshPositions, because the refreshItems call has been moved to
            // mouseCapture
            this.refreshPositions();
    
            //Prepare the dragged items parent
            this.appendTo = $( o.appendTo !== "parent" ?
                    o.appendTo :
                    this.currentItem.parent() );
    
            //Create and append the visible helper
            this.helper = this._createHelper( event );
    
            //Cache the helper size
            this._cacheHelperProportions();
    
            /*
             * - Position generation -
             * This block generates everything position related - it's the core of draggables.
             */
    
            //Cache the margins of the original element
            this._cacheMargins();
    
            //The element's absolute position on the page minus margins
            this.offset = this.currentItem.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
    
            $.extend( this.offset, {
                click: { //Where the click happened, relative to the element
                    left: event.pageX - this.offset.left,
                    top: event.pageY - this.offset.top
                },
    
                // This is a relative to absolute position minus the actual position calculation -
                // only used for relative positioned helper
                relative: this._getRelativeOffset()
            } );
    
            // After we get the helper offset, but before we get the parent offset we can
            // change the helper's position to absolute
            // TODO: Still need to figure out a way to make relative sorting possible
            this.helper.css( "position", "absolute" );
            this.cssPosition = this.helper.css( "position" );
    
            //Adjust the mouse offset relative to the helper if "cursorAt" is supplied
            if ( o.cursorAt ) {
                this._adjustOffsetFromHelper( o.cursorAt );
            }
    
            //Cache the former DOM position
            this.domPosition = {
                prev: this.currentItem.prev()[ 0 ],
                parent: this.currentItem.parent()[ 0 ]
            };
    
            // If the helper is not the original, hide the original so it's not playing any role during
            // the drag, won't cause anything bad this way
            if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
                this.currentItem.hide();
            }
    
            //Create the placeholder
            this._createPlaceholder();
    
            //Get the next scrolling parent
            this.scrollParent = this.placeholder.scrollParent();
    
            $.extend( this.offset, {
                parent: this._getParentOffset()
            } );
    
            //Set a containment if given in the options
            if ( o.containment ) {
                this._setContainment();
            }
    
            if ( o.cursor && o.cursor !== "auto" ) { // cursor option
                body = this.document.find( "body" );
    
                // Support: IE
                this.storedCursor = body.css( "cursor" );
                body.css( "cursor", o.cursor );
    
                this.storedStylesheet =
                    $( "<style>*{ cursor: " + o.cursor + " !important; }</style>" ).appendTo( body );
            }
    
            // We need to make sure to grab the zIndex before setting the
            // opacity, because setting the opacity to anything lower than 1
            // causes the zIndex to change from "auto" to 0.
            if ( o.zIndex ) { // zIndex option
                if ( this.helper.css( "zIndex" ) ) {
                    this._storedZIndex = this.helper.css( "zIndex" );
                }
                this.helper.css( "zIndex", o.zIndex );
            }
    
            if ( o.opacity ) { // opacity option
                if ( this.helper.css( "opacity" ) ) {
                    this._storedOpacity = this.helper.css( "opacity" );
                }
                this.helper.css( "opacity", o.opacity );
            }
    
            //Prepare scrolling
            if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
                    this.scrollParent[ 0 ].tagName !== "HTML" ) {
                this.overflowOffset = this.scrollParent.offset();
            }
    
            //Call callbacks
            this._trigger( "start", event, this._uiHash() );
    
            //Recache the helper size
            if ( !this._preserveHelperProportions ) {
                this._cacheHelperProportions();
            }
    
            //Post "activate" events to possible containers
            if ( !noActivation ) {
                for ( i = this.containers.length - 1; i >= 0; i-- ) {
                    this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
                }
            }
    
            //Prepare possible droppables
            if ( $.ui.ddmanager ) {
                $.ui.ddmanager.current = this;
            }
    
            if ( $.ui.ddmanager && !o.dropBehaviour ) {
                $.ui.ddmanager.prepareOffsets( this, event );
            }
    
            this.dragging = true;
    
            this._addClass( this.helper, "ui-sortable-helper" );
    
            //Move the helper, if needed
            if ( !this.helper.parent().is( this.appendTo ) ) {
                this.helper.detach().appendTo( this.appendTo );
    
                //Update position
                this.offset.parent = this._getParentOffset();
            }
    
            //Generate the original position
            this.position = this.originalPosition = this._generatePosition( event );
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
            this.lastPositionAbs = this.positionAbs = this._convertPositionTo( "absolute" );
    
            this._mouseDrag( event );
    
            return true;
    
        },
    
        _scroll: function( event ) {
            var o = this.options,
                scrolled = false;
    
            if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
                    this.scrollParent[ 0 ].tagName !== "HTML" ) {
    
                if ( ( this.overflowOffset.top + this.scrollParent[ 0 ].offsetHeight ) -
                        event.pageY < o.scrollSensitivity ) {
                    this.scrollParent[ 0 ].scrollTop =
                        scrolled = this.scrollParent[ 0 ].scrollTop + o.scrollSpeed;
                } else if ( event.pageY - this.overflowOffset.top < o.scrollSensitivity ) {
                    this.scrollParent[ 0 ].scrollTop =
                        scrolled = this.scrollParent[ 0 ].scrollTop - o.scrollSpeed;
                }
    
                if ( ( this.overflowOffset.left + this.scrollParent[ 0 ].offsetWidth ) -
                        event.pageX < o.scrollSensitivity ) {
                    this.scrollParent[ 0 ].scrollLeft = scrolled =
                        this.scrollParent[ 0 ].scrollLeft + o.scrollSpeed;
                } else if ( event.pageX - this.overflowOffset.left < o.scrollSensitivity ) {
                    this.scrollParent[ 0 ].scrollLeft = scrolled =
                        this.scrollParent[ 0 ].scrollLeft - o.scrollSpeed;
                }
    
            } else {
    
                if ( event.pageY - this.document.scrollTop() < o.scrollSensitivity ) {
                    scrolled = this.document.scrollTop( this.document.scrollTop() - o.scrollSpeed );
                } else if ( this.window.height() - ( event.pageY - this.document.scrollTop() ) <
                        o.scrollSensitivity ) {
                    scrolled = this.document.scrollTop( this.document.scrollTop() + o.scrollSpeed );
                }
    
                if ( event.pageX - this.document.scrollLeft() < o.scrollSensitivity ) {
                    scrolled = this.document.scrollLeft(
                        this.document.scrollLeft() - o.scrollSpeed
                    );
                } else if ( this.window.width() - ( event.pageX - this.document.scrollLeft() ) <
                        o.scrollSensitivity ) {
                    scrolled = this.document.scrollLeft(
                        this.document.scrollLeft() + o.scrollSpeed
                    );
                }
    
            }
    
            return scrolled;
        },
    
        _mouseDrag: function( event ) {
            var i, item, itemElement, intersection,
                o = this.options;
    
            //Compute the helpers position
            this.position = this._generatePosition( event );
            this.positionAbs = this._convertPositionTo( "absolute" );
    
            //Set the helper position
            if ( !this.options.axis || this.options.axis !== "y" ) {
                this.helper[ 0 ].style.left = this.position.left + "px";
            }
            if ( !this.options.axis || this.options.axis !== "x" ) {
                this.helper[ 0 ].style.top = this.position.top + "px";
            }
    
            //Do scrolling
            if ( o.scroll ) {
                if ( this._scroll( event ) !== false ) {
    
                    //Update item positions used in position checks
                    this._refreshItemPositions( true );
    
                    if ( $.ui.ddmanager && !o.dropBehaviour ) {
                        $.ui.ddmanager.prepareOffsets( this, event );
                    }
                }
            }
    
            this.dragDirection = {
                vertical: this._getDragVerticalDirection(),
                horizontal: this._getDragHorizontalDirection()
            };
    
            //Rearrange
            for ( i = this.items.length - 1; i >= 0; i-- ) {
    
                //Cache variables and intersection, continue if no intersection
                item = this.items[ i ];
                itemElement = item.item[ 0 ];
                intersection = this._intersectsWithPointer( item );
                if ( !intersection ) {
                    continue;
                }
    
                // Only put the placeholder inside the current Container, skip all
                // items from other containers. This works because when moving
                // an item from one container to another the
                // currentContainer is switched before the placeholder is moved.
                //
                // Without this, moving items in "sub-sortables" can cause
                // the placeholder to jitter between the outer and inner container.
                if ( item.instance !== this.currentContainer ) {
                    continue;
                }
    
                // Cannot intersect with itself
                // no useless actions that have been done before
                // no action if the item moved is the parent of the item checked
                if ( itemElement !== this.currentItem[ 0 ] &&
                    this.placeholder[ intersection === 1 ?
                    "next" : "prev" ]()[ 0 ] !== itemElement &&
                    !$.contains( this.placeholder[ 0 ], itemElement ) &&
                    ( this.options.type === "semi-dynamic" ?
                        !$.contains( this.element[ 0 ], itemElement ) :
                        true
                    )
                ) {
    
                    this.direction = intersection === 1 ? "down" : "up";
    
                    if ( this.options.tolerance === "pointer" ||
                            this._intersectsWithSides( item ) ) {
                        this._rearrange( event, item );
                    } else {
                        break;
                    }
    
                    this._trigger( "change", event, this._uiHash() );
                    break;
                }
            }
    
            //Post events to containers
            this._contactContainers( event );
    
            //Interconnect with droppables
            if ( $.ui.ddmanager ) {
                $.ui.ddmanager.drag( this, event );
            }
    
            //Call callbacks
            this._trigger( "sort", event, this._uiHash() );
    
            this.lastPositionAbs = this.positionAbs;
            return false;
    
        },
    
        _mouseStop: function( event, noPropagation ) {
    
            if ( !event ) {
                return;
            }
    
            //If we are using droppables, inform the manager about the drop
            if ( $.ui.ddmanager && !this.options.dropBehaviour ) {
                $.ui.ddmanager.drop( this, event );
            }
    
            if ( this.options.revert ) {
                var that = this,
                    cur = this.placeholder.offset(),
                    axis = this.options.axis,
                    animation = {};
    
                if ( !axis || axis === "x" ) {
                    animation.left = cur.left - this.offset.parent.left - this.margins.left +
                        ( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
                            0 :
                            this.offsetParent[ 0 ].scrollLeft
                        );
                }
                if ( !axis || axis === "y" ) {
                    animation.top = cur.top - this.offset.parent.top - this.margins.top +
                        ( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
                            0 :
                            this.offsetParent[ 0 ].scrollTop
                        );
                }
                this.reverting = true;
                $( this.helper ).animate(
                    animation,
                    parseInt( this.options.revert, 10 ) || 500,
                    function() {
                        that._clear( event );
                    }
                );
            } else {
                this._clear( event, noPropagation );
            }
    
            return false;
    
        },
    
        cancel: function() {
    
            if ( this.dragging ) {
    
                this._mouseUp( new $.Event( "mouseup", { target: null } ) );
    
                if ( this.options.helper === "original" ) {
                    this.currentItem.css( this._storedCSS );
                    this._removeClass( this.currentItem, "ui-sortable-helper" );
                } else {
                    this.currentItem.show();
                }
    
                //Post deactivating events to containers
                for ( var i = this.containers.length - 1; i >= 0; i-- ) {
                    this.containers[ i ]._trigger( "deactivate", null, this._uiHash( this ) );
                    if ( this.containers[ i ].containerCache.over ) {
                        this.containers[ i ]._trigger( "out", null, this._uiHash( this ) );
                        this.containers[ i ].containerCache.over = 0;
                    }
                }
    
            }
    
            if ( this.placeholder ) {
    
                //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
                // it unbinds ALL events from the original node!
                if ( this.placeholder[ 0 ].parentNode ) {
                    this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );
                }
                if ( this.options.helper !== "original" && this.helper &&
                        this.helper[ 0 ].parentNode ) {
                    this.helper.remove();
                }
    
                $.extend( this, {
                    helper: null,
                    dragging: false,
                    reverting: false,
                    _noFinalSort: null
                } );
    
                if ( this.domPosition.prev ) {
                    $( this.domPosition.prev ).after( this.currentItem );
                } else {
                    $( this.domPosition.parent ).prepend( this.currentItem );
                }
            }
    
            return this;
    
        },
    
        serialize: function( o ) {
    
            var items = this._getItemsAsjQuery( o && o.connected ),
                str = [];
            o = o || {};
    
            $( items ).each( function() {
                var res = ( $( o.item || this ).attr( o.attribute || "id" ) || "" )
                    .match( o.expression || ( /(.+)[\-=_](.+)/ ) );
                if ( res ) {
                    str.push(
                        ( o.key || res[ 1 ] + "[]" ) +
                        "=" + ( o.key && o.expression ? res[ 1 ] : res[ 2 ] ) );
                }
            } );
    
            if ( !str.length && o.key ) {
                str.push( o.key + "=" );
            }
    
            return str.join( "&" );
    
        },
    
        toArray: function( o ) {
    
            var items = this._getItemsAsjQuery( o && o.connected ),
                ret = [];
    
            o = o || {};
    
            items.each( function() {
                ret.push( $( o.item || this ).attr( o.attribute || "id" ) || "" );
            } );
            return ret;
    
        },
    
        /* Be careful with the following core functions */
        _intersectsWith: function( item ) {
    
            var x1 = this.positionAbs.left,
                x2 = x1 + this.helperProportions.width,
                y1 = this.positionAbs.top,
                y2 = y1 + this.helperProportions.height,
                l = item.left,
                r = l + item.width,
                t = item.top,
                b = t + item.height,
                dyClick = this.offset.click.top,
                dxClick = this.offset.click.left,
                isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t &&
                    ( y1 + dyClick ) < b ),
                isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l &&
                    ( x1 + dxClick ) < r ),
                isOverElement = isOverElementHeight && isOverElementWidth;
    
            if ( this.options.tolerance === "pointer" ||
                this.options.forcePointerForContainers ||
                ( this.options.tolerance !== "pointer" &&
                    this.helperProportions[ this.floating ? "width" : "height" ] >
                    item[ this.floating ? "width" : "height" ] )
            ) {
                return isOverElement;
            } else {
    
                return ( l < x1 + ( this.helperProportions.width / 2 ) && // Right Half
                    x2 - ( this.helperProportions.width / 2 ) < r && // Left Half
                    t < y1 + ( this.helperProportions.height / 2 ) && // Bottom Half
                    y2 - ( this.helperProportions.height / 2 ) < b ); // Top Half
    
            }
        },
    
        _intersectsWithPointer: function( item ) {
            var verticalDirection, horizontalDirection,
                isOverElementHeight = ( this.options.axis === "x" ) ||
                    this._isOverAxis(
                        this.positionAbs.top + this.offset.click.top, item.top, item.height ),
                isOverElementWidth = ( this.options.axis === "y" ) ||
                    this._isOverAxis(
                        this.positionAbs.left + this.offset.click.left, item.left, item.width ),
                isOverElement = isOverElementHeight && isOverElementWidth;
    
            if ( !isOverElement ) {
                return false;
            }
    
            verticalDirection = this.dragDirection.vertical;
            horizontalDirection = this.dragDirection.horizontal;
    
            return this.floating ?
                ( ( horizontalDirection === "right" || verticalDirection === "down" ) ? 2 : 1 ) :
                ( verticalDirection && ( verticalDirection === "down" ? 2 : 1 ) );
    
        },
    
        _intersectsWithSides: function( item ) {
    
            var isOverBottomHalf = this._isOverAxis( this.positionAbs.top +
                    this.offset.click.top, item.top + ( item.height / 2 ), item.height ),
                isOverRightHalf = this._isOverAxis( this.positionAbs.left +
                    this.offset.click.left, item.left + ( item.width / 2 ), item.width ),
                verticalDirection = this.dragDirection.vertical,
                horizontalDirection = this.dragDirection.horizontal;
    
            if ( this.floating && horizontalDirection ) {
                return ( ( horizontalDirection === "right" && isOverRightHalf ) ||
                    ( horizontalDirection === "left" && !isOverRightHalf ) );
            } else {
                return verticalDirection && ( ( verticalDirection === "down" && isOverBottomHalf ) ||
                    ( verticalDirection === "up" && !isOverBottomHalf ) );
            }
    
        },
    
        _getDragVerticalDirection: function() {
            var delta = this.positionAbs.top - this.lastPositionAbs.top;
            return delta !== 0 && ( delta > 0 ? "down" : "up" );
        },
    
        _getDragHorizontalDirection: function() {
            var delta = this.positionAbs.left - this.lastPositionAbs.left;
            return delta !== 0 && ( delta > 0 ? "right" : "left" );
        },
    
        refresh: function( event ) {
            this._refreshItems( event );
            this._setHandleClassName();
            this.refreshPositions();
            return this;
        },
    
        _connectWith: function() {
            var options = this.options;
            return options.connectWith.constructor === String ?
                [ options.connectWith ] :
                options.connectWith;
        },
    
        _getItemsAsjQuery: function( connected ) {
    
            var i, j, cur, inst,
                items = [],
                queries = [],
                connectWith = this._connectWith();
    
            if ( connectWith && connected ) {
                for ( i = connectWith.length - 1; i >= 0; i-- ) {
                    cur = $( connectWith[ i ], this.document[ 0 ] );
                    for ( j = cur.length - 1; j >= 0; j-- ) {
                        inst = $.data( cur[ j ], this.widgetFullName );
                        if ( inst && inst !== this && !inst.options.disabled ) {
                            queries.push( [ typeof inst.options.items === "function" ?
                                inst.options.items.call( inst.element ) :
                                $( inst.options.items, inst.element )
                                    .not( ".ui-sortable-helper" )
                                    .not( ".ui-sortable-placeholder" ), inst ] );
                        }
                    }
                }
            }
    
            queries.push( [ typeof this.options.items === "function" ?
                this.options.items
                    .call( this.element, null, { options: this.options, item: this.currentItem } ) :
                $( this.options.items, this.element )
                    .not( ".ui-sortable-helper" )
                    .not( ".ui-sortable-placeholder" ), this ] );
    
            function addItems() {
                items.push( this );
            }
            for ( i = queries.length - 1; i >= 0; i-- ) {
                queries[ i ][ 0 ].each( addItems );
            }
    
            return $( items );
    
        },
    
        _removeCurrentsFromItems: function() {
    
            var list = this.currentItem.find( ":data(" + this.widgetName + "-item)" );
    
            this.items = $.grep( this.items, function( item ) {
                for ( var j = 0; j < list.length; j++ ) {
                    if ( list[ j ] === item.item[ 0 ] ) {
                        return false;
                    }
                }
                return true;
            } );
    
        },
    
        _refreshItems: function( event ) {
    
            this.items = [];
            this.containers = [ this ];
    
            var i, j, cur, inst, targetData, _queries, item, queriesLength,
                items = this.items,
                queries = [ [ typeof this.options.items === "function" ?
                    this.options.items.call( this.element[ 0 ], event, { item: this.currentItem } ) :
                    $( this.options.items, this.element ), this ] ],
                connectWith = this._connectWith();
    
            //Shouldn't be run the first time through due to massive slow-down
            if ( connectWith && this.ready ) {
                for ( i = connectWith.length - 1; i >= 0; i-- ) {
                    cur = $( connectWith[ i ], this.document[ 0 ] );
                    for ( j = cur.length - 1; j >= 0; j-- ) {
                        inst = $.data( cur[ j ], this.widgetFullName );
                        if ( inst && inst !== this && !inst.options.disabled ) {
                            queries.push( [ typeof inst.options.items === "function" ?
                                inst.options.items
                                    .call( inst.element[ 0 ], event, { item: this.currentItem } ) :
                                $( inst.options.items, inst.element ), inst ] );
                            this.containers.push( inst );
                        }
                    }
                }
            }
    
            for ( i = queries.length - 1; i >= 0; i-- ) {
                targetData = queries[ i ][ 1 ];
                _queries = queries[ i ][ 0 ];
    
                for ( j = 0, queriesLength = _queries.length; j < queriesLength; j++ ) {
                    item = $( _queries[ j ] );
    
                    // Data for target checking (mouse manager)
                    item.data( this.widgetName + "-item", targetData );
    
                    items.push( {
                        item: item,
                        instance: targetData,
                        width: 0, height: 0,
                        left: 0, top: 0
                    } );
                }
            }
    
        },
    
        _refreshItemPositions: function( fast ) {
            var i, item, t, p;
    
            for ( i = this.items.length - 1; i >= 0; i-- ) {
                item = this.items[ i ];
    
                //We ignore calculating positions of all connected containers when we're not over them
                if ( this.currentContainer && item.instance !== this.currentContainer &&
                        item.item[ 0 ] !== this.currentItem[ 0 ] ) {
                    continue;
                }
    
                t = this.options.toleranceElement ?
                    $( this.options.toleranceElement, item.item ) :
                    item.item;
    
                if ( !fast ) {
                    item.width = t.outerWidth();
                    item.height = t.outerHeight();
                }
    
                p = t.offset();
                item.left = p.left;
                item.top = p.top;
            }
        },
    
        refreshPositions: function( fast ) {
    
            // Determine whether items are being displayed horizontally
            this.floating = this.items.length ?
                this.options.axis === "x" || this._isFloating( this.items[ 0 ].item ) :
                false;
    
            // This has to be redone because due to the item being moved out/into the offsetParent,
            // the offsetParent's position will change
            if ( this.offsetParent && this.helper ) {
                this.offset.parent = this._getParentOffset();
            }
    
            this._refreshItemPositions( fast );
    
            var i, p;
    
            if ( this.options.custom && this.options.custom.refreshContainers ) {
                this.options.custom.refreshContainers.call( this );
            } else {
                for ( i = this.containers.length - 1; i >= 0; i-- ) {
                    p = this.containers[ i ].element.offset();
                    this.containers[ i ].containerCache.left = p.left;
                    this.containers[ i ].containerCache.top = p.top;
                    this.containers[ i ].containerCache.width =
                        this.containers[ i ].element.outerWidth();
                    this.containers[ i ].containerCache.height =
                        this.containers[ i ].element.outerHeight();
                }
            }
    
            return this;
        },
    
        _createPlaceholder: function( that ) {
            that = that || this;
            var className, nodeName,
                o = that.options;
    
            if ( !o.placeholder || o.placeholder.constructor === String ) {
                className = o.placeholder;
                nodeName = that.currentItem[ 0 ].nodeName.toLowerCase();
                o.placeholder = {
                    element: function() {
    
                        var element = $( "<" + nodeName + ">", that.document[ 0 ] );
    
                        that._addClass( element, "ui-sortable-placeholder",
                                className || that.currentItem[ 0 ].className )
                            ._removeClass( element, "ui-sortable-helper" );
    
                        if ( nodeName === "tbody" ) {
                            that._createTrPlaceholder(
                                that.currentItem.find( "tr" ).eq( 0 ),
                                $( "<tr>", that.document[ 0 ] ).appendTo( element )
                            );
                        } else if ( nodeName === "tr" ) {
                            that._createTrPlaceholder( that.currentItem, element );
                        } else if ( nodeName === "img" ) {
                            element.attr( "src", that.currentItem.attr( "src" ) );
                        }
    
                        if ( !className ) {
                            element.css( "visibility", "hidden" );
                        }
    
                        return element;
                    },
                    update: function( container, p ) {
    
                        // 1. If a className is set as 'placeholder option, we don't force sizes -
                        // the class is responsible for that
                        // 2. The option 'forcePlaceholderSize can be enabled to force it even if a
                        // class name is specified
                        if ( className && !o.forcePlaceholderSize ) {
                            return;
                        }
    
                        // If the element doesn't have a actual height or width by itself (without
                        // styles coming from a stylesheet), it receives the inline height and width
                        // from the dragged item. Or, if it's a tbody or tr, it's going to have a height
                        // anyway since we're populating them with <td>s above, but they're unlikely to
                        // be the correct height on their own if the row heights are dynamic, so we'll
                        // always assign the height of the dragged item given forcePlaceholderSize
                        // is true.
                        if ( !p.height() || ( o.forcePlaceholderSize &&
                                ( nodeName === "tbody" || nodeName === "tr" ) ) ) {
                            p.height(
                                that.currentItem.innerHeight() -
                                parseInt( that.currentItem.css( "paddingTop" ) || 0, 10 ) -
                                parseInt( that.currentItem.css( "paddingBottom" ) || 0, 10 ) );
                        }
                        if ( !p.width() ) {
                            p.width(
                                that.currentItem.innerWidth() -
                                parseInt( that.currentItem.css( "paddingLeft" ) || 0, 10 ) -
                                parseInt( that.currentItem.css( "paddingRight" ) || 0, 10 ) );
                        }
                    }
                };
            }
    
            //Create the placeholder
            that.placeholder = $( o.placeholder.element.call( that.element, that.currentItem ) );
    
            //Append it after the actual current item
            that.currentItem.after( that.placeholder );
    
            //Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
            o.placeholder.update( that, that.placeholder );
    
        },
    
        _createTrPlaceholder: function( sourceTr, targetTr ) {
            var that = this;
    
            sourceTr.children().each( function() {
                $( "<td>&#160;</td>", that.document[ 0 ] )
                    .attr( "colspan", $( this ).attr( "colspan" ) || 1 )
                    .appendTo( targetTr );
            } );
        },
    
        _contactContainers: function( event ) {
            var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom,
                floating, axis,
                innermostContainer = null,
                innermostIndex = null;
    
            // Get innermost container that intersects with item
            for ( i = this.containers.length - 1; i >= 0; i-- ) {
    
                // Never consider a container that's located within the item itself
                if ( $.contains( this.currentItem[ 0 ], this.containers[ i ].element[ 0 ] ) ) {
                    continue;
                }
    
                if ( this._intersectsWith( this.containers[ i ].containerCache ) ) {
    
                    // If we've already found a container and it's more "inner" than this, then continue
                    if ( innermostContainer &&
                            $.contains(
                                this.containers[ i ].element[ 0 ],
                                innermostContainer.element[ 0 ] ) ) {
                        continue;
                    }
    
                    innermostContainer = this.containers[ i ];
                    innermostIndex = i;
    
                } else {
    
                    // container doesn't intersect. trigger "out" event if necessary
                    if ( this.containers[ i ].containerCache.over ) {
                        this.containers[ i ]._trigger( "out", event, this._uiHash( this ) );
                        this.containers[ i ].containerCache.over = 0;
                    }
                }
    
            }
    
            // If no intersecting containers found, return
            if ( !innermostContainer ) {
                return;
            }
    
            // Move the item into the container if it's not there already
            if ( this.containers.length === 1 ) {
                if ( !this.containers[ innermostIndex ].containerCache.over ) {
                    this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
                    this.containers[ innermostIndex ].containerCache.over = 1;
                }
            } else {
    
                // When entering a new container, we will find the item with the least distance and
                // append our item near it
                dist = 10000;
                itemWithLeastDistance = null;
                floating = innermostContainer.floating || this._isFloating( this.currentItem );
                posProperty = floating ? "left" : "top";
                sizeProperty = floating ? "width" : "height";
                axis = floating ? "pageX" : "pageY";
    
                for ( j = this.items.length - 1; j >= 0; j-- ) {
                    if ( !$.contains(
                            this.containers[ innermostIndex ].element[ 0 ], this.items[ j ].item[ 0 ] )
                    ) {
                        continue;
                    }
                    if ( this.items[ j ].item[ 0 ] === this.currentItem[ 0 ] ) {
                        continue;
                    }
    
                    cur = this.items[ j ].item.offset()[ posProperty ];
                    nearBottom = false;
                    if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {
                        nearBottom = true;
                    }
    
                    if ( Math.abs( event[ axis ] - cur ) < dist ) {
                        dist = Math.abs( event[ axis ] - cur );
                        itemWithLeastDistance = this.items[ j ];
                        this.direction = nearBottom ? "up" : "down";
                    }
                }
    
                //Check if dropOnEmpty is enabled
                if ( !itemWithLeastDistance && !this.options.dropOnEmpty ) {
                    return;
                }
    
                if ( this.currentContainer === this.containers[ innermostIndex ] ) {
                    if ( !this.currentContainer.containerCache.over ) {
                        this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash() );
                        this.currentContainer.containerCache.over = 1;
                    }
                    return;
                }
    
                if ( itemWithLeastDistance ) {
                    this._rearrange( event, itemWithLeastDistance, null, true );
                } else {
                    this._rearrange( event, null, this.containers[ innermostIndex ].element, true );
                }
                this._trigger( "change", event, this._uiHash() );
                this.containers[ innermostIndex ]._trigger( "change", event, this._uiHash( this ) );
                this.currentContainer = this.containers[ innermostIndex ];
    
                //Update the placeholder
                this.options.placeholder.update( this.currentContainer, this.placeholder );
    
                //Update scrollParent
                this.scrollParent = this.placeholder.scrollParent();
    
                //Update overflowOffset
                if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
                        this.scrollParent[ 0 ].tagName !== "HTML" ) {
                    this.overflowOffset = this.scrollParent.offset();
                }
    
                this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
                this.containers[ innermostIndex ].containerCache.over = 1;
            }
    
        },
    
        _createHelper: function( event ) {
    
            var o = this.options,
                helper = typeof o.helper === "function" ?
                    $( o.helper.apply( this.element[ 0 ], [ event, this.currentItem ] ) ) :
                    ( o.helper === "clone" ? this.currentItem.clone() : this.currentItem );
    
            //Add the helper to the DOM if that didn't happen already
            if ( !helper.parents( "body" ).length ) {
                this.appendTo[ 0 ].appendChild( helper[ 0 ] );
            }
    
            if ( helper[ 0 ] === this.currentItem[ 0 ] ) {
                this._storedCSS = {
                    width: this.currentItem[ 0 ].style.width,
                    height: this.currentItem[ 0 ].style.height,
                    position: this.currentItem.css( "position" ),
                    top: this.currentItem.css( "top" ),
                    left: this.currentItem.css( "left" )
                };
            }
    
            if ( !helper[ 0 ].style.width || o.forceHelperSize ) {
                helper.width( this.currentItem.width() );
            }
            if ( !helper[ 0 ].style.height || o.forceHelperSize ) {
                helper.height( this.currentItem.height() );
            }
    
            return helper;
    
        },
    
        _adjustOffsetFromHelper: function( obj ) {
            if ( typeof obj === "string" ) {
                obj = obj.split( " " );
            }
            if ( Array.isArray( obj ) ) {
                obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };
            }
            if ( "left" in obj ) {
                this.offset.click.left = obj.left + this.margins.left;
            }
            if ( "right" in obj ) {
                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
            }
            if ( "top" in obj ) {
                this.offset.click.top = obj.top + this.margins.top;
            }
            if ( "bottom" in obj ) {
                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
            }
        },
    
        _getParentOffset: function() {
    
            //Get the offsetParent and cache its position
            this.offsetParent = this.helper.offsetParent();
            var po = this.offsetParent.offset();
    
            // This is a special case where we need to modify a offset calculated on start, since the
            // following happened:
            // 1. The position of the helper is absolute, so it's position is calculated based on the
            // next positioned parent
            // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
            // the document, which means that the scroll is included in the initial calculation of the
            // offset of the parent, and never recalculated upon drag
            if ( this.cssPosition === "absolute" && this.scrollParent[ 0 ] !== this.document[ 0 ] &&
                    $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop();
            }
    
            // This needs to be actually done for all browsers, since pageX/pageY includes this
            // information with an ugly IE fix
            if ( this.offsetParent[ 0 ] === this.document[ 0 ].body ||
                    ( this.offsetParent[ 0 ].tagName &&
                    this.offsetParent[ 0 ].tagName.toLowerCase() === "html" && $.ui.ie ) ) {
                po = { top: 0, left: 0 };
            }
    
            return {
                top: po.top + ( parseInt( this.offsetParent.css( "borderTopWidth" ), 10 ) || 0 ),
                left: po.left + ( parseInt( this.offsetParent.css( "borderLeftWidth" ), 10 ) || 0 )
            };
    
        },
    
        _getRelativeOffset: function() {
    
            if ( this.cssPosition === "relative" ) {
                var p = this.currentItem.position();
                return {
                    top: p.top - ( parseInt( this.helper.css( "top" ), 10 ) || 0 ) +
                        this.scrollParent.scrollTop(),
                    left: p.left - ( parseInt( this.helper.css( "left" ), 10 ) || 0 ) +
                        this.scrollParent.scrollLeft()
                };
            } else {
                return { top: 0, left: 0 };
            }
    
        },
    
        _cacheMargins: function() {
            this.margins = {
                left: ( parseInt( this.currentItem.css( "marginLeft" ), 10 ) || 0 ),
                top: ( parseInt( this.currentItem.css( "marginTop" ), 10 ) || 0 )
            };
        },
    
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            };
        },
    
        _setContainment: function() {
    
            var ce, co, over,
                o = this.options;
            if ( o.containment === "parent" ) {
                o.containment = this.helper[ 0 ].parentNode;
            }
            if ( o.containment === "document" || o.containment === "window" ) {
                this.containment = [
                    0 - this.offset.relative.left - this.offset.parent.left,
                    0 - this.offset.relative.top - this.offset.parent.top,
                    o.containment === "document" ?
                        this.document.width() :
                        this.window.width() - this.helperProportions.width - this.margins.left,
                    ( o.containment === "document" ?
                        ( this.document.height() || document.body.parentNode.scrollHeight ) :
                        this.window.height() || this.document[ 0 ].body.parentNode.scrollHeight
                    ) - this.helperProportions.height - this.margins.top
                ];
            }
    
            if ( !( /^(document|window|parent)$/ ).test( o.containment ) ) {
                ce = $( o.containment )[ 0 ];
                co = $( o.containment ).offset();
                over = ( $( ce ).css( "overflow" ) !== "hidden" );
    
                this.containment = [
                    co.left + ( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) +
                        ( parseInt( $( ce ).css( "paddingLeft" ), 10 ) || 0 ) - this.margins.left,
                    co.top + ( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) +
                        ( parseInt( $( ce ).css( "paddingTop" ), 10 ) || 0 ) - this.margins.top,
                    co.left + ( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
                        ( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) -
                        ( parseInt( $( ce ).css( "paddingRight" ), 10 ) || 0 ) -
                        this.helperProportions.width - this.margins.left,
                    co.top + ( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
                        ( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) -
                        ( parseInt( $( ce ).css( "paddingBottom" ), 10 ) || 0 ) -
                        this.helperProportions.height - this.margins.top
                ];
            }
    
        },
    
        _convertPositionTo: function( d, pos ) {
    
            if ( !pos ) {
                pos = this.position;
            }
            var mod = d === "absolute" ? 1 : -1,
                scroll = this.cssPosition === "absolute" &&
                    !( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
                    $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
                        this.offsetParent :
                        this.scrollParent,
                scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );
    
            return {
                top: (
    
                    // The absolute mouse position
                    pos.top	+
    
                    // Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.relative.top * mod +
    
                    // The offsetParent's offset without borders (offset + border)
                    this.offset.parent.top * mod -
                    ( ( this.cssPosition === "fixed" ?
                        -this.scrollParent.scrollTop() :
                        ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod )
                ),
                left: (
    
                    // The absolute mouse position
                    pos.left +
    
                    // Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.relative.left * mod +
    
                    // The offsetParent's offset without borders (offset + border)
                    this.offset.parent.left * mod	-
                    ( ( this.cssPosition === "fixed" ?
                        -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 :
                        scroll.scrollLeft() ) * mod )
                )
            };
    
        },
    
        _generatePosition: function( event ) {
    
            var top, left,
                o = this.options,
                pageX = event.pageX,
                pageY = event.pageY,
                scroll = this.cssPosition === "absolute" &&
                    !( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
                    $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
                        this.offsetParent :
                        this.scrollParent,
                    scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );
    
            // This is another very weird special case that only happens for relative elements:
            // 1. If the css position is relative
            // 2. and the scroll parent is the document or similar to the offset parent
            // we have to refresh the relative offset during the scroll so there are no jumps
            if ( this.cssPosition === "relative" && !( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
                    this.scrollParent[ 0 ] !== this.offsetParent[ 0 ] ) ) {
                this.offset.relative = this._getRelativeOffset();
            }
    
            /*
             * - Position constraining -
             * Constrain the position to a mix of grid, containment.
             */
    
            if ( this.originalPosition ) { //If we are not dragging yet, we won't check for options
    
                if ( this.containment ) {
                    if ( event.pageX - this.offset.click.left < this.containment[ 0 ] ) {
                        pageX = this.containment[ 0 ] + this.offset.click.left;
                    }
                    if ( event.pageY - this.offset.click.top < this.containment[ 1 ] ) {
                        pageY = this.containment[ 1 ] + this.offset.click.top;
                    }
                    if ( event.pageX - this.offset.click.left > this.containment[ 2 ] ) {
                        pageX = this.containment[ 2 ] + this.offset.click.left;
                    }
                    if ( event.pageY - this.offset.click.top > this.containment[ 3 ] ) {
                        pageY = this.containment[ 3 ] + this.offset.click.top;
                    }
                }
    
                if ( o.grid ) {
                    top = this.originalPageY + Math.round( ( pageY - this.originalPageY ) /
                        o.grid[ 1 ] ) * o.grid[ 1 ];
                    pageY = this.containment ?
                        ( ( top - this.offset.click.top >= this.containment[ 1 ] &&
                            top - this.offset.click.top <= this.containment[ 3 ] ) ?
                                top :
                                ( ( top - this.offset.click.top >= this.containment[ 1 ] ) ?
                                    top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) :
                                    top;
    
                    left = this.originalPageX + Math.round( ( pageX - this.originalPageX ) /
                        o.grid[ 0 ] ) * o.grid[ 0 ];
                    pageX = this.containment ?
                        ( ( left - this.offset.click.left >= this.containment[ 0 ] &&
                            left - this.offset.click.left <= this.containment[ 2 ] ) ?
                                left :
                                ( ( left - this.offset.click.left >= this.containment[ 0 ] ) ?
                                    left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) :
                                    left;
                }
    
            }
    
            return {
                top: (
    
                    // The absolute mouse position
                    pageY -
    
                    // Click offset (relative to the element)
                    this.offset.click.top -
    
                    // Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.relative.top -
    
                    // The offsetParent's offset without borders (offset + border)
                    this.offset.parent.top +
                    ( ( this.cssPosition === "fixed" ?
                        -this.scrollParent.scrollTop() :
                        ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) )
                ),
                left: (
    
                    // The absolute mouse position
                    pageX -
    
                    // Click offset (relative to the element)
                    this.offset.click.left -
    
                    // Only for relative positioned nodes: Relative offset from element to offset parent
                    this.offset.relative.left -
    
                    // The offsetParent's offset without borders (offset + border)
                    this.offset.parent.left +
                    ( ( this.cssPosition === "fixed" ?
                        -this.scrollParent.scrollLeft() :
                        scrollIsRootNode ? 0 : scroll.scrollLeft() ) )
                )
            };
    
        },
    
        _rearrange: function( event, i, a, hardRefresh ) {
    
            if ( a ) {
                a[ 0 ].appendChild( this.placeholder[ 0 ] );
            } else {
                i.item[ 0 ].parentNode.insertBefore( this.placeholder[ 0 ],
                    ( this.direction === "down" ? i.item[ 0 ] : i.item[ 0 ].nextSibling ) );
            }
    
            //Various things done here to improve the performance:
            // 1. we create a setTimeout, that calls refreshPositions
            // 2. on the instance, we have a counter variable, that get's higher after every append
            // 3. on the local scope, we copy the counter variable, and check in the timeout,
            // if it's still the same
            // 4. this lets only the last addition to the timeout stack through
            this.counter = this.counter ? ++this.counter : 1;
            var counter = this.counter;
    
            this._delay( function() {
                if ( counter === this.counter ) {
    
                    //Precompute after each DOM insertion, NOT on mousemove
                    this.refreshPositions( !hardRefresh );
                }
            } );
    
        },
    
        _clear: function( event, noPropagation ) {
    
            this.reverting = false;
    
            // We delay all events that have to be triggered to after the point where the placeholder
            // has been removed and everything else normalized again
            var i,
                delayedTriggers = [];
    
            // We first have to update the dom position of the actual currentItem
            // Note: don't do it if the current item is already removed (by a user), or it gets
            // reappended (see #4088)
            if ( !this._noFinalSort && this.currentItem.parent().length ) {
                this.placeholder.before( this.currentItem );
            }
            this._noFinalSort = null;
    
            if ( this.helper[ 0 ] === this.currentItem[ 0 ] ) {
                for ( i in this._storedCSS ) {
                    if ( this._storedCSS[ i ] === "auto" || this._storedCSS[ i ] === "static" ) {
                        this._storedCSS[ i ] = "";
                    }
                }
                this.currentItem.css( this._storedCSS );
                this._removeClass( this.currentItem, "ui-sortable-helper" );
            } else {
                this.currentItem.show();
            }
    
            if ( this.fromOutside && !noPropagation ) {
                delayedTriggers.push( function( event ) {
                    this._trigger( "receive", event, this._uiHash( this.fromOutside ) );
                } );
            }
            if ( ( this.fromOutside ||
                    this.domPosition.prev !==
                    this.currentItem.prev().not( ".ui-sortable-helper" )[ 0 ] ||
                    this.domPosition.parent !== this.currentItem.parent()[ 0 ] ) && !noPropagation ) {
    
                // Trigger update callback if the DOM position has changed
                delayedTriggers.push( function( event ) {
                    this._trigger( "update", event, this._uiHash() );
                } );
            }
    
            // Check if the items Container has Changed and trigger appropriate
            // events.
            if ( this !== this.currentContainer ) {
                if ( !noPropagation ) {
                    delayedTriggers.push( function( event ) {
                        this._trigger( "remove", event, this._uiHash() );
                    } );
                    delayedTriggers.push( ( function( c ) {
                        return function( event ) {
                            c._trigger( "receive", event, this._uiHash( this ) );
                        };
                    } ).call( this, this.currentContainer ) );
                    delayedTriggers.push( ( function( c ) {
                        return function( event ) {
                            c._trigger( "update", event, this._uiHash( this ) );
                        };
                    } ).call( this, this.currentContainer ) );
                }
            }
    
            //Post events to containers
            function delayEvent( type, instance, container ) {
                return function( event ) {
                    container._trigger( type, event, instance._uiHash( instance ) );
                };
            }
            for ( i = this.containers.length - 1; i >= 0; i-- ) {
                if ( !noPropagation ) {
                    delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
                }
                if ( this.containers[ i ].containerCache.over ) {
                    delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
                    this.containers[ i ].containerCache.over = 0;
                }
            }
    
            //Do what was originally in plugins
            if ( this.storedCursor ) {
                this.document.find( "body" ).css( "cursor", this.storedCursor );
                this.storedStylesheet.remove();
            }
            if ( this._storedOpacity ) {
                this.helper.css( "opacity", this._storedOpacity );
            }
            if ( this._storedZIndex ) {
                this.helper.css( "zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex );
            }
    
            this.dragging = false;
    
            if ( !noPropagation ) {
                this._trigger( "beforeStop", event, this._uiHash() );
            }
    
            //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
            // it unbinds ALL events from the original node!
            this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );
    
            if ( !this.cancelHelperRemoval ) {
                if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
                    this.helper.remove();
                }
                this.helper = null;
            }
    
            if ( !noPropagation ) {
                for ( i = 0; i < delayedTriggers.length; i++ ) {
    
                    // Trigger all delayed events
                    delayedTriggers[ i ].call( this, event );
                }
                this._trigger( "stop", event, this._uiHash() );
            }
    
            this.fromOutside = false;
            return !this.cancelHelperRemoval;
    
        },
    
        _trigger: function() {
            if ( $.Widget.prototype._trigger.apply( this, arguments ) === false ) {
                this.cancel();
            }
        },
    
        _uiHash: function( _inst ) {
            var inst = _inst || this;
            return {
                helper: inst.helper,
                placeholder: inst.placeholder || $( [] ),
                position: inst.position,
                originalPosition: inst.originalPosition,
                offset: inst.positionAbs,
                item: inst.currentItem,
                sender: _inst ? _inst.element : null
            };
        }
    
    } );
    
    } );
    
    },{}],416:[function(require,module,exports){
    /*!
     * jQuery JavaScript Library v3.7.1
     * https://jquery.com/
     *
     * Copyright OpenJS Foundation and other contributors
     * Released under the MIT license
     * https://jquery.org/license
     *
     * Date: 2023-08-28T13:37Z
     */
    ( function( global, factory ) {
    
        "use strict";
    
        if ( typeof module === "object" && typeof module.exports === "object" ) {
    
            // For CommonJS and CommonJS-like environments where a proper `window`
            // is present, execute the factory and get jQuery.
            // For environments that do not have a `window` with a `document`
            // (such as Node.js), expose a factory as module.exports.
            // This accentuates the need for the creation of a real `window`.
            // e.g. var jQuery = require("jquery")(window);
            // See ticket trac-14549 for more info.
            module.exports = global.document ?
                factory( global, true ) :
                function( w ) {
                    if ( !w.document ) {
                        throw new Error( "jQuery requires a window with a document" );
                    }
                    return factory( w );
                };
        } else {
            factory( global );
        }
    
    // Pass this if window is not defined yet
    } )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
    
    // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
    // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
    // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
    // enough that all such attempts are guarded in a try block.
    "use strict";
    
    var arr = [];
    
    var getProto = Object.getPrototypeOf;
    
    var slice = arr.slice;
    
    var flat = arr.flat ? function( array ) {
        return arr.flat.call( array );
    } : function( array ) {
        return arr.concat.apply( [], array );
    };
    
    
    var push = arr.push;
    
    var indexOf = arr.indexOf;
    
    var class2type = {};
    
    var toString = class2type.toString;
    
    var hasOwn = class2type.hasOwnProperty;
    
    var fnToString = hasOwn.toString;
    
    var ObjectFunctionString = fnToString.call( Object );
    
    var support = {};
    
    var isFunction = function isFunction( obj ) {
    
            // Support: Chrome <=57, Firefox <=52
            // In some browsers, typeof returns "function" for HTML <object> elements
            // (i.e., `typeof document.createElement( "object" ) === "function"`).
            // We don't want to classify *any* DOM node as a function.
            // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
            // Plus for old WebKit, typeof returns "function" for HTML collections
            // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
            return typeof obj === "function" && typeof obj.nodeType !== "number" &&
                typeof obj.item !== "function";
        };
    
    
    var isWindow = function isWindow( obj ) {
            return obj != null && obj === obj.window;
        };
    
    
    var document = window.document;
    
    
    
        var preservedScriptAttributes = {
            type: true,
            src: true,
            nonce: true,
            noModule: true
        };
    
        function DOMEval( code, node, doc ) {
            doc = doc || document;
    
            var i, val,
                script = doc.createElement( "script" );
    
            script.text = code;
            if ( node ) {
                for ( i in preservedScriptAttributes ) {
    
                    // Support: Firefox 64+, Edge 18+
                    // Some browsers don't support the "nonce" property on scripts.
                    // On the other hand, just using `getAttribute` is not enough as
                    // the `nonce` attribute is reset to an empty string whenever it
                    // becomes browsing-context connected.
                    // See https://github.com/whatwg/html/issues/2369
                    // See https://html.spec.whatwg.org/#nonce-attributes
                    // The `node.getAttribute` check was added for the sake of
                    // `jQuery.globalEval` so that it can fake a nonce-containing node
                    // via an object.
                    val = node[ i ] || node.getAttribute && node.getAttribute( i );
                    if ( val ) {
                        script.setAttribute( i, val );
                    }
                }
            }
            doc.head.appendChild( script ).parentNode.removeChild( script );
        }
    
    
    function toType( obj ) {
        if ( obj == null ) {
            return obj + "";
        }
    
        // Support: Android <=2.3 only (functionish RegExp)
        return typeof obj === "object" || typeof obj === "function" ?
            class2type[ toString.call( obj ) ] || "object" :
            typeof obj;
    }
    /* global Symbol */
    // Defining this global in .eslintrc.json would create a danger of using the global
    // unguarded in another place, it seems safer to define global only for this module
    
    
    
    var version = "3.7.1",
    
        rhtmlSuffix = /HTML$/i,
    
        // Define a local copy of jQuery
        jQuery = function( selector, context ) {
    
            // The jQuery object is actually just the init constructor 'enhanced'
            // Need init if jQuery is called (just allow error to be thrown if not included)
            return new jQuery.fn.init( selector, context );
        };
    
    jQuery.fn = jQuery.prototype = {
    
        // The current version of jQuery being used
        jquery: version,
    
        constructor: jQuery,
    
        // The default length of a jQuery object is 0
        length: 0,
    
        toArray: function() {
            return slice.call( this );
        },
    
        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function( num ) {
    
            // Return all the elements in a clean array
            if ( num == null ) {
                return slice.call( this );
            }
    
            // Return just the one element from the set
            return num < 0 ? this[ num + this.length ] : this[ num ];
        },
    
        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function( elems ) {
    
            // Build a new jQuery matched element set
            var ret = jQuery.merge( this.constructor(), elems );
    
            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;
    
            // Return the newly-formed element set
            return ret;
        },
    
        // Execute a callback for every element in the matched set.
        each: function( callback ) {
            return jQuery.each( this, callback );
        },
    
        map: function( callback ) {
            return this.pushStack( jQuery.map( this, function( elem, i ) {
                return callback.call( elem, i, elem );
            } ) );
        },
    
        slice: function() {
            return this.pushStack( slice.apply( this, arguments ) );
        },
    
        first: function() {
            return this.eq( 0 );
        },
    
        last: function() {
            return this.eq( -1 );
        },
    
        even: function() {
            return this.pushStack( jQuery.grep( this, function( _elem, i ) {
                return ( i + 1 ) % 2;
            } ) );
        },
    
        odd: function() {
            return this.pushStack( jQuery.grep( this, function( _elem, i ) {
                return i % 2;
            } ) );
        },
    
        eq: function( i ) {
            var len = this.length,
                j = +i + ( i < 0 ? len : 0 );
            return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
        },
    
        end: function() {
            return this.prevObject || this.constructor();
        },
    
        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };
    
    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone,
            target = arguments[ 0 ] || {},
            i = 1,
            length = arguments.length,
            deep = false;
    
        // Handle a deep copy situation
        if ( typeof target === "boolean" ) {
            deep = target;
    
            // Skip the boolean and the target
            target = arguments[ i ] || {};
            i++;
        }
    
        // Handle case when target is a string or something (possible in deep copy)
        if ( typeof target !== "object" && !isFunction( target ) ) {
            target = {};
        }
    
        // Extend jQuery itself if only one argument is passed
        if ( i === length ) {
            target = this;
            i--;
        }
    
        for ( ; i < length; i++ ) {
    
            // Only deal with non-null/undefined values
            if ( ( options = arguments[ i ] ) != null ) {
    
                // Extend the base object
                for ( name in options ) {
                    copy = options[ name ];
    
                    // Prevent Object.prototype pollution
                    // Prevent never-ending loop
                    if ( name === "__proto__" || target === copy ) {
                        continue;
                    }
    
                    // Recurse if we're merging plain objects or arrays
                    if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
                        ( copyIsArray = Array.isArray( copy ) ) ) ) {
                        src = target[ name ];
    
                        // Ensure proper type for the source value
                        if ( copyIsArray && !Array.isArray( src ) ) {
                            clone = [];
                        } else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
                            clone = {};
                        } else {
                            clone = src;
                        }
                        copyIsArray = false;
    
                        // Never move original objects, clone them
                        target[ name ] = jQuery.extend( deep, clone, copy );
    
                    // Don't bring in undefined values
                    } else if ( copy !== undefined ) {
                        target[ name ] = copy;
                    }
                }
            }
        }
    
        // Return the modified object
        return target;
    };
    
    jQuery.extend( {
    
        // Unique for each copy of jQuery on the page
        expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
    
        // Assume jQuery is ready without the ready module
        isReady: true,
    
        error: function( msg ) {
            throw new Error( msg );
        },
    
        noop: function() {},
    
        isPlainObject: function( obj ) {
            var proto, Ctor;
    
            // Detect obvious negatives
            // Use toString instead of jQuery.type to catch host objects
            if ( !obj || toString.call( obj ) !== "[object Object]" ) {
                return false;
            }
    
            proto = getProto( obj );
    
            // Objects with no prototype (e.g., `Object.create( null )`) are plain
            if ( !proto ) {
                return true;
            }
    
            // Objects with prototype are plain iff they were constructed by a global Object function
            Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
            return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
        },
    
        isEmptyObject: function( obj ) {
            var name;
    
            for ( name in obj ) {
                return false;
            }
            return true;
        },
    
        // Evaluates a script in a provided context; falls back to the global one
        // if not specified.
        globalEval: function( code, options, doc ) {
            DOMEval( code, { nonce: options && options.nonce }, doc );
        },
    
        each: function( obj, callback ) {
            var length, i = 0;
    
            if ( isArrayLike( obj ) ) {
                length = obj.length;
                for ( ; i < length; i++ ) {
                    if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
                        break;
                    }
                }
            } else {
                for ( i in obj ) {
                    if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
                        break;
                    }
                }
            }
    
            return obj;
        },
    
    
        // Retrieve the text value of an array of DOM nodes
        text: function( elem ) {
            var node,
                ret = "",
                i = 0,
                nodeType = elem.nodeType;
    
            if ( !nodeType ) {
    
                // If no nodeType, this is expected to be an array
                while ( ( node = elem[ i++ ] ) ) {
    
                    // Do not traverse comment nodes
                    ret += jQuery.text( node );
                }
            }
            if ( nodeType === 1 || nodeType === 11 ) {
                return elem.textContent;
            }
            if ( nodeType === 9 ) {
                return elem.documentElement.textContent;
            }
            if ( nodeType === 3 || nodeType === 4 ) {
                return elem.nodeValue;
            }
    
            // Do not include comment or processing instruction nodes
    
            return ret;
        },
    
        // results is for internal usage only
        makeArray: function( arr, results ) {
            var ret = results || [];
    
            if ( arr != null ) {
                if ( isArrayLike( Object( arr ) ) ) {
                    jQuery.merge( ret,
                        typeof arr === "string" ?
                            [ arr ] : arr
                    );
                } else {
                    push.call( ret, arr );
                }
            }
    
            return ret;
        },
    
        inArray: function( elem, arr, i ) {
            return arr == null ? -1 : indexOf.call( arr, elem, i );
        },
    
        isXMLDoc: function( elem ) {
            var namespace = elem && elem.namespaceURI,
                docElem = elem && ( elem.ownerDocument || elem ).documentElement;
    
            // Assume HTML when documentElement doesn't yet exist, such as inside
            // document fragments.
            return !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || "HTML" );
        },
    
        // Support: Android <=4.0 only, PhantomJS 1 only
        // push.apply(_, arraylike) throws on ancient WebKit
        merge: function( first, second ) {
            var len = +second.length,
                j = 0,
                i = first.length;
    
            for ( ; j < len; j++ ) {
                first[ i++ ] = second[ j ];
            }
    
            first.length = i;
    
            return first;
        },
    
        grep: function( elems, callback, invert ) {
            var callbackInverse,
                matches = [],
                i = 0,
                length = elems.length,
                callbackExpect = !invert;
    
            // Go through the array, only saving the items
            // that pass the validator function
            for ( ; i < length; i++ ) {
                callbackInverse = !callback( elems[ i ], i );
                if ( callbackInverse !== callbackExpect ) {
                    matches.push( elems[ i ] );
                }
            }
    
            return matches;
        },
    
        // arg is for internal usage only
        map: function( elems, callback, arg ) {
            var length, value,
                i = 0,
                ret = [];
    
            // Go through the array, translating each of the items to their new values
            if ( isArrayLike( elems ) ) {
                length = elems.length;
                for ( ; i < length; i++ ) {
                    value = callback( elems[ i ], i, arg );
    
                    if ( value != null ) {
                        ret.push( value );
                    }
                }
    
            // Go through every key on the object,
            } else {
                for ( i in elems ) {
                    value = callback( elems[ i ], i, arg );
    
                    if ( value != null ) {
                        ret.push( value );
                    }
                }
            }
    
            // Flatten any nested arrays
            return flat( ret );
        },
    
        // A global GUID counter for objects
        guid: 1,
    
        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support
    } );
    
    if ( typeof Symbol === "function" ) {
        jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
    }
    
    // Populate the class2type map
    jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
        function( _i, name ) {
            class2type[ "[object " + name + "]" ] = name.toLowerCase();
        } );
    
    function isArrayLike( obj ) {
    
        // Support: real iOS 8.2 only (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = !!obj && "length" in obj && obj.length,
            type = toType( obj );
    
        if ( isFunction( obj ) || isWindow( obj ) ) {
            return false;
        }
    
        return type === "array" || length === 0 ||
            typeof length === "number" && length > 0 && ( length - 1 ) in obj;
    }
    
    
    function nodeName( elem, name ) {
    
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    
    }
    var pop = arr.pop;
    
    
    var sort = arr.sort;
    
    
    var splice = arr.splice;
    
    
    var whitespace = "[\\x20\\t\\r\\n\\f]";
    
    
    var rtrimCSS = new RegExp(
        "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
        "g"
    );
    
    
    
    
    // Note: an element does not contain itself
    jQuery.contains = function( a, b ) {
        var bup = b && b.parentNode;
    
        return a === bup || !!( bup && bup.nodeType === 1 && (
    
            // Support: IE 9 - 11+
            // IE doesn't have `contains` on SVG.
            a.contains ?
                a.contains( bup ) :
                a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
        ) );
    };
    
    
    
    
    // CSS string/identifier serialization
    // https://drafts.csswg.org/cssom/#common-serializing-idioms
    var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;
    
    function fcssescape( ch, asCodePoint ) {
        if ( asCodePoint ) {
    
            // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
            if ( ch === "\0" ) {
                return "\uFFFD";
            }
    
            // Control characters and (dependent upon position) numbers get escaped as code points
            return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
        }
    
        // Other potentially-special ASCII characters get backslash-escaped
        return "\\" + ch;
    }
    
    jQuery.escapeSelector = function( sel ) {
        return ( sel + "" ).replace( rcssescape, fcssescape );
    };
    
    
    
    
    var preferredDoc = document,
        pushNative = push;
    
    ( function() {
    
    var i,
        Expr,
        outermostContext,
        sortInput,
        hasDuplicate,
        push = pushNative,
    
        // Local document vars
        document,
        documentElement,
        documentIsHTML,
        rbuggyQSA,
        matches,
    
        // Instance-specific data
        expando = jQuery.expando,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        nonnativeSelectorCache = createCache(),
        sortOrder = function( a, b ) {
            if ( a === b ) {
                hasDuplicate = true;
            }
            return 0;
        },
    
        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|" +
            "loop|multiple|open|readonly|required|scoped",
    
        // Regular expressions
    
        // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
        identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
            "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
    
        // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors
        attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
    
            // Operator (capture 2)
            "*([*^$|!~]?=)" + whitespace +
    
            // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
            "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
            whitespace + "*\\]",
    
        pseudos = ":(" + identifier + ")(?:\\((" +
    
            // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
            // 1. quoted (capture 3; capture 4 or capture 5)
            "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
    
            // 2. simple (capture 6)
            "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
    
            // 3. anything else (capture 2)
            ".*" +
            ")\\)|)",
    
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rwhitespace = new RegExp( whitespace + "+", "g" ),
    
        rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
        rleadingCombinator = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" +
            whitespace + "*" ),
        rdescend = new RegExp( whitespace + "|>" ),
    
        rpseudo = new RegExp( pseudos ),
        ridentifier = new RegExp( "^" + identifier + "$" ),
    
        matchExpr = {
            ID: new RegExp( "^#(" + identifier + ")" ),
            CLASS: new RegExp( "^\\.(" + identifier + ")" ),
            TAG: new RegExp( "^(" + identifier + "|[*])" ),
            ATTR: new RegExp( "^" + attributes ),
            PSEUDO: new RegExp( "^" + pseudos ),
            CHILD: new RegExp(
                "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
                    whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
                    whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
            bool: new RegExp( "^(?:" + booleans + ")$", "i" ),
    
            // For use in libraries implementing .is()
            // We use this for POS matching in `select`
            needsContext: new RegExp( "^" + whitespace +
                "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
                "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
        },
    
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
    
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
    
        rsibling = /[+~]/,
    
        // CSS escapes
        // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace +
            "?|\\\\([^\\r\\n\\f])", "g" ),
        funescape = function( escape, nonHex ) {
            var high = "0x" + escape.slice( 1 ) - 0x10000;
    
            if ( nonHex ) {
    
                // Strip the backslash prefix from a non-hex escape sequence
                return nonHex;
            }
    
            // Replace a hexadecimal escape sequence with the encoded Unicode code point
            // Support: IE <=11+
            // For values outside the Basic Multilingual Plane (BMP), manually construct a
            // surrogate pair
            return high < 0 ?
                String.fromCharCode( high + 0x10000 ) :
                String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
        },
    
        // Used for iframes; see `setDocument`.
        // Support: IE 9 - 11+, Edge 12 - 18+
        // Removing the function wrapper causes a "Permission Denied"
        // error in IE/Edge.
        unloadHandler = function() {
            setDocument();
        },
    
        inDisabledFieldset = addCombinator(
            function( elem ) {
                return elem.disabled === true && nodeName( elem, "fieldset" );
            },
            { dir: "parentNode", next: "legend" }
        );
    
    // Support: IE <=9 only
    // Accessing document.activeElement can throw unexpectedly
    // https://bugs.jquery.com/ticket/13393
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch ( err ) { }
    }
    
    // Optimize for push.apply( _, NodeList )
    try {
        push.apply(
            ( arr = slice.call( preferredDoc.childNodes ) ),
            preferredDoc.childNodes
        );
    
        // Support: Android <=4.0
        // Detect silently failing push.apply
        // eslint-disable-next-line no-unused-expressions
        arr[ preferredDoc.childNodes.length ].nodeType;
    } catch ( e ) {
        push = {
            apply: function( target, els ) {
                pushNative.apply( target, slice.call( els ) );
            },
            call: function( target ) {
                pushNative.apply( target, slice.call( arguments, 1 ) );
            }
        };
    }
    
    function find( selector, context, results, seed ) {
        var m, i, elem, nid, match, groups, newSelector,
            newContext = context && context.ownerDocument,
    
            // nodeType defaults to 9, since context defaults to document
            nodeType = context ? context.nodeType : 9;
    
        results = results || [];
    
        // Return early from calls with invalid selector or context
        if ( typeof selector !== "string" || !selector ||
            nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
    
            return results;
        }
    
        // Try to shortcut find operations (as opposed to filters) in HTML documents
        if ( !seed ) {
            setDocument( context );
            context = context || document;
    
            if ( documentIsHTML ) {
    
                // If the selector is sufficiently simple, try using a "get*By*" DOM method
                // (excepting DocumentFragment context, where the methods don't exist)
                if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {
    
                    // ID selector
                    if ( ( m = match[ 1 ] ) ) {
    
                        // Document context
                        if ( nodeType === 9 ) {
                            if ( ( elem = context.getElementById( m ) ) ) {
    
                                // Support: IE 9 only
                                // getElementById can match elements by name instead of ID
                                if ( elem.id === m ) {
                                    push.call( results, elem );
                                    return results;
                                }
                            } else {
                                return results;
                            }
    
                        // Element context
                        } else {
    
                            // Support: IE 9 only
                            // getElementById can match elements by name instead of ID
                            if ( newContext && ( elem = newContext.getElementById( m ) ) &&
                                find.contains( context, elem ) &&
                                elem.id === m ) {
    
                                push.call( results, elem );
                                return results;
                            }
                        }
    
                    // Type selector
                    } else if ( match[ 2 ] ) {
                        push.apply( results, context.getElementsByTagName( selector ) );
                        return results;
    
                    // Class selector
                    } else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {
                        push.apply( results, context.getElementsByClassName( m ) );
                        return results;
                    }
                }
    
                // Take advantage of querySelectorAll
                if ( !nonnativeSelectorCache[ selector + " " ] &&
                    ( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {
    
                    newSelector = selector;
                    newContext = context;
    
                    // qSA considers elements outside a scoping root when evaluating child or
                    // descendant combinators, which is not what we want.
                    // In such cases, we work around the behavior by prefixing every selector in the
                    // list with an ID selector referencing the scope context.
                    // The technique has to be used as well when a leading combinator is used
                    // as such selectors are not recognized by querySelectorAll.
                    // Thanks to Andrew Dupont for this technique.
                    if ( nodeType === 1 &&
                        ( rdescend.test( selector ) || rleadingCombinator.test( selector ) ) ) {
    
                        // Expand context for sibling selectors
                        newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
                            context;
    
                        // We can use :scope instead of the ID hack if the browser
                        // supports it & if we're not changing the context.
                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when
                        // strict-comparing two documents; shallow comparisons work.
                        // eslint-disable-next-line eqeqeq
                        if ( newContext != context || !support.scope ) {
    
                            // Capture the context ID, setting it first if necessary
                            if ( ( nid = context.getAttribute( "id" ) ) ) {
                                nid = jQuery.escapeSelector( nid );
                            } else {
                                context.setAttribute( "id", ( nid = expando ) );
                            }
                        }
    
                        // Prefix every selector in the list
                        groups = tokenize( selector );
                        i = groups.length;
                        while ( i-- ) {
                            groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
                                toSelector( groups[ i ] );
                        }
                        newSelector = groups.join( "," );
                    }
    
                    try {
                        push.apply( results,
                            newContext.querySelectorAll( newSelector )
                        );
                        return results;
                    } catch ( qsaError ) {
                        nonnativeSelectorCache( selector, true );
                    } finally {
                        if ( nid === expando ) {
                            context.removeAttribute( "id" );
                        }
                    }
                }
            }
        }
    
        // All others
        return select( selector.replace( rtrimCSS, "$1" ), context, results, seed );
    }
    
    /**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */
    function createCache() {
        var keys = [];
    
        function cache( key, value ) {
    
            // Use (key + " ") to avoid collision with native prototype properties
            // (see https://github.com/jquery/sizzle/issues/157)
            if ( keys.push( key + " " ) > Expr.cacheLength ) {
    
                // Only keep the most recent entries
                delete cache[ keys.shift() ];
            }
            return ( cache[ key + " " ] = value );
        }
        return cache;
    }
    
    /**
     * Mark a function for special use by jQuery selector module
     * @param {Function} fn The function to mark
     */
    function markFunction( fn ) {
        fn[ expando ] = true;
        return fn;
    }
    
    /**
     * Support testing using an element
     * @param {Function} fn Passed the created element and returns a boolean result
     */
    function assert( fn ) {
        var el = document.createElement( "fieldset" );
    
        try {
            return !!fn( el );
        } catch ( e ) {
            return false;
        } finally {
    
            // Remove from its parent by default
            if ( el.parentNode ) {
                el.parentNode.removeChild( el );
            }
    
            // release memory in IE
            el = null;
        }
    }
    
    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */
    function createInputPseudo( type ) {
        return function( elem ) {
            return nodeName( elem, "input" ) && elem.type === type;
        };
    }
    
    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */
    function createButtonPseudo( type ) {
        return function( elem ) {
            return ( nodeName( elem, "input" ) || nodeName( elem, "button" ) ) &&
                elem.type === type;
        };
    }
    
    /**
     * Returns a function to use in pseudos for :enabled/:disabled
     * @param {Boolean} disabled true for :disabled; false for :enabled
     */
    function createDisabledPseudo( disabled ) {
    
        // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
        return function( elem ) {
    
            // Only certain elements can match :enabled or :disabled
            // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
            // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
            if ( "form" in elem ) {
    
                // Check for inherited disabledness on relevant non-disabled elements:
                // * listed form-associated elements in a disabled fieldset
                //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
                //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
                // * option elements in a disabled optgroup
                //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
                // All such elements have a "form" property.
                if ( elem.parentNode && elem.disabled === false ) {
    
                    // Option elements defer to a parent optgroup if present
                    if ( "label" in elem ) {
                        if ( "label" in elem.parentNode ) {
                            return elem.parentNode.disabled === disabled;
                        } else {
                            return elem.disabled === disabled;
                        }
                    }
    
                    // Support: IE 6 - 11+
                    // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                    return elem.isDisabled === disabled ||
    
                        // Where there is no isDisabled, check manually
                        elem.isDisabled !== !disabled &&
                            inDisabledFieldset( elem ) === disabled;
                }
    
                return elem.disabled === disabled;
    
            // Try to winnow out elements that can't be disabled before trusting the disabled property.
            // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
            // even exist on them, let alone have a boolean value.
            } else if ( "label" in elem ) {
                return elem.disabled === disabled;
            }
    
            // Remaining elements are neither :enabled nor :disabled
            return false;
        };
    }
    
    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */
    function createPositionalPseudo( fn ) {
        return markFunction( function( argument ) {
            argument = +argument;
            return markFunction( function( seed, matches ) {
                var j,
                    matchIndexes = fn( [], seed.length, argument ),
                    i = matchIndexes.length;
    
                // Match elements found at the specified indexes
                while ( i-- ) {
                    if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
                        seed[ j ] = !( matches[ j ] = seed[ j ] );
                    }
                }
            } );
        } );
    }
    
    /**
     * Checks a node for validity as a jQuery selector context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */
    function testContext( context ) {
        return context && typeof context.getElementsByTagName !== "undefined" && context;
    }
    
    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [node] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */
    function setDocument( node ) {
        var subWindow,
            doc = node ? node.ownerDocument || node : preferredDoc;
    
        // Return early if doc is invalid or already selected
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
            return document;
        }
    
        // Update global variables
        document = doc;
        documentElement = document.documentElement;
        documentIsHTML = !jQuery.isXMLDoc( document );
    
        // Support: iOS 7 only, IE 9 - 11+
        // Older browsers didn't support unprefixed `matches`.
        matches = documentElement.matches ||
            documentElement.webkitMatchesSelector ||
            documentElement.msMatchesSelector;
    
        // Support: IE 9 - 11+, Edge 12 - 18+
        // Accessing iframe documents after unload throws "permission denied" errors
        // (see trac-13936).
        // Limit the fix to IE & Edge Legacy; despite Edge 15+ implementing `matches`,
        // all IE 9+ and Edge Legacy versions implement `msMatchesSelector` as well.
        if ( documentElement.msMatchesSelector &&
    
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            preferredDoc != document &&
            ( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {
    
            // Support: IE 9 - 11+, Edge 12 - 18+
            subWindow.addEventListener( "unload", unloadHandler );
        }
    
        // Support: IE <10
        // Check if getElementById returns elements by name
        // The broken getElementById methods don't pick up programmatically-set names,
        // so use a roundabout getElementsByName test
        support.getById = assert( function( el ) {
            documentElement.appendChild( el ).id = jQuery.expando;
            return !document.getElementsByName ||
                !document.getElementsByName( jQuery.expando ).length;
        } );
    
        // Support: IE 9 only
        // Check to see if it's possible to do matchesSelector
        // on a disconnected node.
        support.disconnectedMatch = assert( function( el ) {
            return matches.call( el, "*" );
        } );
    
        // Support: IE 9 - 11+, Edge 12 - 18+
        // IE/Edge don't support the :scope pseudo-class.
        support.scope = assert( function() {
            return document.querySelectorAll( ":scope" );
        } );
    
        // Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only
        // Make sure the `:has()` argument is parsed unforgivingly.
        // We include `*` in the test to detect buggy implementations that are
        // _selectively_ forgiving (specifically when the list includes at least
        // one valid selector).
        // Note that we treat complete lack of support for `:has()` as if it were
        // spec-compliant support, which is fine because use of `:has()` in such
        // environments will fail in the qSA path and fall back to jQuery traversal
        // anyway.
        support.cssHas = assert( function() {
            try {
                document.querySelector( ":has(*,:jqfake)" );
                return false;
            } catch ( e ) {
                return true;
            }
        } );
    
        // ID filter and find
        if ( support.getById ) {
            Expr.filter.ID = function( id ) {
                var attrId = id.replace( runescape, funescape );
                return function( elem ) {
                    return elem.getAttribute( "id" ) === attrId;
                };
            };
            Expr.find.ID = function( id, context ) {
                if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
                    var elem = context.getElementById( id );
                    return elem ? [ elem ] : [];
                }
            };
        } else {
            Expr.filter.ID =  function( id ) {
                var attrId = id.replace( runescape, funescape );
                return function( elem ) {
                    var node = typeof elem.getAttributeNode !== "undefined" &&
                        elem.getAttributeNode( "id" );
                    return node && node.value === attrId;
                };
            };
    
            // Support: IE 6 - 7 only
            // getElementById is not reliable as a find shortcut
            Expr.find.ID = function( id, context ) {
                if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
                    var node, i, elems,
                        elem = context.getElementById( id );
    
                    if ( elem ) {
    
                        // Verify the id attribute
                        node = elem.getAttributeNode( "id" );
                        if ( node && node.value === id ) {
                            return [ elem ];
                        }
    
                        // Fall back on getElementsByName
                        elems = context.getElementsByName( id );
                        i = 0;
                        while ( ( elem = elems[ i++ ] ) ) {
                            node = elem.getAttributeNode( "id" );
                            if ( node && node.value === id ) {
                                return [ elem ];
                            }
                        }
                    }
    
                    return [];
                }
            };
        }
    
        // Tag
        Expr.find.TAG = function( tag, context ) {
            if ( typeof context.getElementsByTagName !== "undefined" ) {
                return context.getElementsByTagName( tag );
    
            // DocumentFragment nodes don't have gEBTN
            } else {
                return context.querySelectorAll( tag );
            }
        };
    
        // Class
        Expr.find.CLASS = function( className, context ) {
            if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
                return context.getElementsByClassName( className );
            }
        };
    
        /* QSA/matchesSelector
        ---------------------------------------------------------------------- */
    
        // QSA and matchesSelector support
    
        rbuggyQSA = [];
    
        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert( function( el ) {
    
            var input;
    
            documentElement.appendChild( el ).innerHTML =
                "<a id='" + expando + "' href='' disabled='disabled'></a>" +
                "<select id='" + expando + "-\r\\' disabled='disabled'>" +
                "<option selected=''></option></select>";
    
            // Support: iOS <=7 - 8 only
            // Boolean attributes and "value" are not treated correctly in some XML documents
            if ( !el.querySelectorAll( "[selected]" ).length ) {
                rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
            }
    
            // Support: iOS <=7 - 8 only
            if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
                rbuggyQSA.push( "~=" );
            }
    
            // Support: iOS 8 only
            // https://bugs.webkit.org/show_bug.cgi?id=136851
            // In-page `selector#id sibling-combinator selector` fails
            if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
                rbuggyQSA.push( ".#.+[+~]" );
            }
    
            // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
            // In some of the document kinds, these selectors wouldn't work natively.
            // This is probably OK but for backwards compatibility we want to maintain
            // handling them through jQuery traversal in jQuery 3.x.
            if ( !el.querySelectorAll( ":checked" ).length ) {
                rbuggyQSA.push( ":checked" );
            }
    
            // Support: Windows 8 Native Apps
            // The type and name attributes are restricted during .innerHTML assignment
            input = document.createElement( "input" );
            input.setAttribute( "type", "hidden" );
            el.appendChild( input ).setAttribute( "name", "D" );
    
            // Support: IE 9 - 11+
            // IE's :disabled selector does not pick up the children of disabled fieldsets
            // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
            // In some of the document kinds, these selectors wouldn't work natively.
            // This is probably OK but for backwards compatibility we want to maintain
            // handling them through jQuery traversal in jQuery 3.x.
            documentElement.appendChild( el ).disabled = true;
            if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
                rbuggyQSA.push( ":enabled", ":disabled" );
            }
    
            // Support: IE 11+, Edge 15 - 18+
            // IE 11/Edge don't find elements on a `[name='']` query in some cases.
            // Adding a temporary attribute to the document before the selection works
            // around the issue.
            // Interestingly, IE 10 & older don't seem to have the issue.
            input = document.createElement( "input" );
            input.setAttribute( "name", "" );
            el.appendChild( input );
            if ( !el.querySelectorAll( "[name='']" ).length ) {
                rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
                    whitespace + "*(?:''|\"\")" );
            }
        } );
    
        if ( !support.cssHas ) {
    
            // Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
            // Our regular `try-catch` mechanism fails to detect natively-unsupported
            // pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)
            // in browsers that parse the `:has()` argument as a forgiving selector list.
            // https://drafts.csswg.org/selectors/#relational now requires the argument
            // to be parsed unforgivingly, but browsers have not yet fully adjusted.
            rbuggyQSA.push( ":has" );
        }
    
        rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
    
        /* Sorting
        ---------------------------------------------------------------------- */
    
        // Document order sorting
        sortOrder = function( a, b ) {
    
            // Flag for duplicate removal
            if ( a === b ) {
                hasDuplicate = true;
                return 0;
            }
    
            // Sort on method existence if only one input has compareDocumentPosition
            var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
            if ( compare ) {
                return compare;
            }
    
            // Calculate position if both inputs belong to the same document
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
                a.compareDocumentPosition( b ) :
    
                // Otherwise we know they are disconnected
                1;
    
            // Disconnected nodes
            if ( compare & 1 ||
                ( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {
    
                // Choose the first element that is related to our preferred document
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if ( a === document || a.ownerDocument == preferredDoc &&
                    find.contains( preferredDoc, a ) ) {
                    return -1;
                }
    
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if ( b === document || b.ownerDocument == preferredDoc &&
                    find.contains( preferredDoc, b ) ) {
                    return 1;
                }
    
                // Maintain original order
                return sortInput ?
                    ( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
                    0;
            }
    
            return compare & 4 ? -1 : 1;
        };
    
        return document;
    }
    
    find.matches = function( expr, elements ) {
        return find( expr, null, null, elements );
    };
    
    find.matchesSelector = function( elem, expr ) {
        setDocument( elem );
    
        if ( documentIsHTML &&
            !nonnativeSelectorCache[ expr + " " ] &&
            ( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {
    
            try {
                var ret = matches.call( elem, expr );
    
                // IE 9's matchesSelector returns false on disconnected nodes
                if ( ret || support.disconnectedMatch ||
    
                        // As well, disconnected nodes are said to be in a document
                        // fragment in IE 9
                        elem.document && elem.document.nodeType !== 11 ) {
                    return ret;
                }
            } catch ( e ) {
                nonnativeSelectorCache( expr, true );
            }
        }
    
        return find( expr, document, null, [ elem ] ).length > 0;
    };
    
    find.contains = function( context, elem ) {
    
        // Set document vars if needed
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if ( ( context.ownerDocument || context ) != document ) {
            setDocument( context );
        }
        return jQuery.contains( context, elem );
    };
    
    
    find.attr = function( elem, name ) {
    
        // Set document vars if needed
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if ( ( elem.ownerDocument || elem ) != document ) {
            setDocument( elem );
        }
    
        var fn = Expr.attrHandle[ name.toLowerCase() ],
    
            // Don't get fooled by Object.prototype properties (see trac-13807)
            val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
                fn( elem, name, !documentIsHTML ) :
                undefined;
    
        if ( val !== undefined ) {
            return val;
        }
    
        return elem.getAttribute( name );
    };
    
    find.error = function( msg ) {
        throw new Error( "Syntax error, unrecognized expression: " + msg );
    };
    
    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */
    jQuery.uniqueSort = function( results ) {
        var elem,
            duplicates = [],
            j = 0,
            i = 0;
    
        // Unless we *know* we can detect duplicates, assume their presence
        //
        // Support: Android <=4.0+
        // Testing for detecting duplicates is unpredictable so instead assume we can't
        // depend on duplicate detection in all browsers without a stable sort.
        hasDuplicate = !support.sortStable;
        sortInput = !support.sortStable && slice.call( results, 0 );
        sort.call( results, sortOrder );
    
        if ( hasDuplicate ) {
            while ( ( elem = results[ i++ ] ) ) {
                if ( elem === results[ i ] ) {
                    j = duplicates.push( i );
                }
            }
            while ( j-- ) {
                splice.call( results, duplicates[ j ], 1 );
            }
        }
    
        // Clear input after sorting to release objects
        // See https://github.com/jquery/sizzle/pull/225
        sortInput = null;
    
        return results;
    };
    
    jQuery.fn.uniqueSort = function() {
        return this.pushStack( jQuery.uniqueSort( slice.apply( this ) ) );
    };
    
    Expr = jQuery.expr = {
    
        // Can be adjusted by the user
        cacheLength: 50,
    
        createPseudo: markFunction,
    
        match: matchExpr,
    
        attrHandle: {},
    
        find: {},
    
        relative: {
            ">": { dir: "parentNode", first: true },
            " ": { dir: "parentNode" },
            "+": { dir: "previousSibling", first: true },
            "~": { dir: "previousSibling" }
        },
    
        preFilter: {
            ATTR: function( match ) {
                match[ 1 ] = match[ 1 ].replace( runescape, funescape );
    
                // Move the given value to match[3] whether quoted or unquoted
                match[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || "" )
                    .replace( runescape, funescape );
    
                if ( match[ 2 ] === "~=" ) {
                    match[ 3 ] = " " + match[ 3 ] + " ";
                }
    
                return match.slice( 0, 4 );
            },
    
            CHILD: function( match ) {
    
                /* matches from matchExpr["CHILD"]
                    1 type (only|nth|...)
                    2 what (child|of-type)
                    3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                    4 xn-component of xn+y argument ([+-]?\d*n|)
                    5 sign of xn-component
                    6 x of xn-component
                    7 sign of y-component
                    8 y of y-component
                */
                match[ 1 ] = match[ 1 ].toLowerCase();
    
                if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {
    
                    // nth-* requires argument
                    if ( !match[ 3 ] ) {
                        find.error( match[ 0 ] );
                    }
    
                    // numeric x and y parameters for Expr.filter.CHILD
                    // remember that false/true cast respectively to 0/1
                    match[ 4 ] = +( match[ 4 ] ?
                        match[ 5 ] + ( match[ 6 ] || 1 ) :
                        2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" )
                    );
                    match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );
    
                // other types prohibit arguments
                } else if ( match[ 3 ] ) {
                    find.error( match[ 0 ] );
                }
    
                return match;
            },
    
            PSEUDO: function( match ) {
                var excess,
                    unquoted = !match[ 6 ] && match[ 2 ];
    
                if ( matchExpr.CHILD.test( match[ 0 ] ) ) {
                    return null;
                }
    
                // Accept quoted arguments as-is
                if ( match[ 3 ] ) {
                    match[ 2 ] = match[ 4 ] || match[ 5 ] || "";
    
                // Strip excess characters from unquoted arguments
                } else if ( unquoted && rpseudo.test( unquoted ) &&
    
                    // Get excess from tokenize (recursively)
                    ( excess = tokenize( unquoted, true ) ) &&
    
                    // advance to the next closing parenthesis
                    ( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {
    
                    // excess is a negative index
                    match[ 0 ] = match[ 0 ].slice( 0, excess );
                    match[ 2 ] = unquoted.slice( 0, excess );
                }
    
                // Return only captures needed by the pseudo filter method (type and argument)
                return match.slice( 0, 3 );
            }
        },
    
        filter: {
    
            TAG: function( nodeNameSelector ) {
                var expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
                return nodeNameSelector === "*" ?
                    function() {
                        return true;
                    } :
                    function( elem ) {
                        return nodeName( elem, expectedNodeName );
                    };
            },
    
            CLASS: function( className ) {
                var pattern = classCache[ className + " " ];
    
                return pattern ||
                    ( pattern = new RegExp( "(^|" + whitespace + ")" + className +
                        "(" + whitespace + "|$)" ) ) &&
                    classCache( className, function( elem ) {
                        return pattern.test(
                            typeof elem.className === "string" && elem.className ||
                                typeof elem.getAttribute !== "undefined" &&
                                    elem.getAttribute( "class" ) ||
                                ""
                        );
                    } );
            },
    
            ATTR: function( name, operator, check ) {
                return function( elem ) {
                    var result = find.attr( elem, name );
    
                    if ( result == null ) {
                        return operator === "!=";
                    }
                    if ( !operator ) {
                        return true;
                    }
    
                    result += "";
    
                    if ( operator === "=" ) {
                        return result === check;
                    }
                    if ( operator === "!=" ) {
                        return result !== check;
                    }
                    if ( operator === "^=" ) {
                        return check && result.indexOf( check ) === 0;
                    }
                    if ( operator === "*=" ) {
                        return check && result.indexOf( check ) > -1;
                    }
                    if ( operator === "$=" ) {
                        return check && result.slice( -check.length ) === check;
                    }
                    if ( operator === "~=" ) {
                        return ( " " + result.replace( rwhitespace, " " ) + " " )
                            .indexOf( check ) > -1;
                    }
                    if ( operator === "|=" ) {
                        return result === check || result.slice( 0, check.length + 1 ) === check + "-";
                    }
    
                    return false;
                };
            },
    
            CHILD: function( type, what, _argument, first, last ) {
                var simple = type.slice( 0, 3 ) !== "nth",
                    forward = type.slice( -4 ) !== "last",
                    ofType = what === "of-type";
    
                return first === 1 && last === 0 ?
    
                    // Shortcut for :nth-*(n)
                    function( elem ) {
                        return !!elem.parentNode;
                    } :
    
                    function( elem, _context, xml ) {
                        var cache, outerCache, node, nodeIndex, start,
                            dir = simple !== forward ? "nextSibling" : "previousSibling",
                            parent = elem.parentNode,
                            name = ofType && elem.nodeName.toLowerCase(),
                            useCache = !xml && !ofType,
                            diff = false;
    
                        if ( parent ) {
    
                            // :(first|last|only)-(child|of-type)
                            if ( simple ) {
                                while ( dir ) {
                                    node = elem;
                                    while ( ( node = node[ dir ] ) ) {
                                        if ( ofType ?
                                            nodeName( node, name ) :
                                            node.nodeType === 1 ) {
    
                                            return false;
                                        }
                                    }
    
                                    // Reverse direction for :only-* (if we haven't yet done so)
                                    start = dir = type === "only" && !start && "nextSibling";
                                }
                                return true;
                            }
    
                            start = [ forward ? parent.firstChild : parent.lastChild ];
    
                            // non-xml :nth-child(...) stores cache data on `parent`
                            if ( forward && useCache ) {
    
                                // Seek `elem` from a previously-cached index
                                outerCache = parent[ expando ] || ( parent[ expando ] = {} );
                                cache = outerCache[ type ] || [];
                                nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
                                diff = nodeIndex && cache[ 2 ];
                                node = nodeIndex && parent.childNodes[ nodeIndex ];
    
                                while ( ( node = ++nodeIndex && node && node[ dir ] ||
    
                                    // Fallback to seeking `elem` from the start
                                    ( diff = nodeIndex = 0 ) || start.pop() ) ) {
    
                                    // When found, cache indexes on `parent` and break
                                    if ( node.nodeType === 1 && ++diff && node === elem ) {
                                        outerCache[ type ] = [ dirruns, nodeIndex, diff ];
                                        break;
                                    }
                                }
    
                            } else {
    
                                // Use previously-cached element index if available
                                if ( useCache ) {
                                    outerCache = elem[ expando ] || ( elem[ expando ] = {} );
                                    cache = outerCache[ type ] || [];
                                    nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
                                    diff = nodeIndex;
                                }
    
                                // xml :nth-child(...)
                                // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                                if ( diff === false ) {
    
                                    // Use the same loop as above to seek `elem` from the start
                                    while ( ( node = ++nodeIndex && node && node[ dir ] ||
                                        ( diff = nodeIndex = 0 ) || start.pop() ) ) {
    
                                        if ( ( ofType ?
                                            nodeName( node, name ) :
                                            node.nodeType === 1 ) &&
                                            ++diff ) {
    
                                            // Cache the index of each encountered element
                                            if ( useCache ) {
                                                outerCache = node[ expando ] ||
                                                    ( node[ expando ] = {} );
                                                outerCache[ type ] = [ dirruns, diff ];
                                            }
    
                                            if ( node === elem ) {
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
    
                            // Incorporate the offset, then check against cycle size
                            diff -= last;
                            return diff === first || ( diff % first === 0 && diff / first >= 0 );
                        }
                    };
            },
    
            PSEUDO: function( pseudo, argument ) {
    
                // pseudo-class names are case-insensitive
                // https://www.w3.org/TR/selectors/#pseudo-classes
                // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                // Remember that setFilters inherits from pseudos
                var args,
                    fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
                        find.error( "unsupported pseudo: " + pseudo );
    
                // The user may use createPseudo to indicate that
                // arguments are needed to create the filter function
                // just as jQuery does
                if ( fn[ expando ] ) {
                    return fn( argument );
                }
    
                // But maintain support for old signatures
                if ( fn.length > 1 ) {
                    args = [ pseudo, pseudo, "", argument ];
                    return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
                        markFunction( function( seed, matches ) {
                            var idx,
                                matched = fn( seed, argument ),
                                i = matched.length;
                            while ( i-- ) {
                                idx = indexOf.call( seed, matched[ i ] );
                                seed[ idx ] = !( matches[ idx ] = matched[ i ] );
                            }
                        } ) :
                        function( elem ) {
                            return fn( elem, 0, args );
                        };
                }
    
                return fn;
            }
        },
    
        pseudos: {
    
            // Potentially complex pseudos
            not: markFunction( function( selector ) {
    
                // Trim the selector passed to compile
                // to avoid treating leading and trailing
                // spaces as combinators
                var input = [],
                    results = [],
                    matcher = compile( selector.replace( rtrimCSS, "$1" ) );
    
                return matcher[ expando ] ?
                    markFunction( function( seed, matches, _context, xml ) {
                        var elem,
                            unmatched = matcher( seed, null, xml, [] ),
                            i = seed.length;
    
                        // Match elements unmatched by `matcher`
                        while ( i-- ) {
                            if ( ( elem = unmatched[ i ] ) ) {
                                seed[ i ] = !( matches[ i ] = elem );
                            }
                        }
                    } ) :
                    function( elem, _context, xml ) {
                        input[ 0 ] = elem;
                        matcher( input, null, xml, results );
    
                        // Don't keep the element
                        // (see https://github.com/jquery/sizzle/issues/299)
                        input[ 0 ] = null;
                        return !results.pop();
                    };
            } ),
    
            has: markFunction( function( selector ) {
                return function( elem ) {
                    return find( selector, elem ).length > 0;
                };
            } ),
    
            contains: markFunction( function( text ) {
                text = text.replace( runescape, funescape );
                return function( elem ) {
                    return ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;
                };
            } ),
    
            // "Whether an element is represented by a :lang() selector
            // is based solely on the element's language value
            // being equal to the identifier C,
            // or beginning with the identifier C immediately followed by "-".
            // The matching of C against the element's language value is performed case-insensitively.
            // The identifier C does not have to be a valid language name."
            // https://www.w3.org/TR/selectors/#lang-pseudo
            lang: markFunction( function( lang ) {
    
                // lang value must be a valid identifier
                if ( !ridentifier.test( lang || "" ) ) {
                    find.error( "unsupported lang: " + lang );
                }
                lang = lang.replace( runescape, funescape ).toLowerCase();
                return function( elem ) {
                    var elemLang;
                    do {
                        if ( ( elemLang = documentIsHTML ?
                            elem.lang :
                            elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {
    
                            elemLang = elemLang.toLowerCase();
                            return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
                        }
                    } while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
                    return false;
                };
            } ),
    
            // Miscellaneous
            target: function( elem ) {
                var hash = window.location && window.location.hash;
                return hash && hash.slice( 1 ) === elem.id;
            },
    
            root: function( elem ) {
                return elem === documentElement;
            },
    
            focus: function( elem ) {
                return elem === safeActiveElement() &&
                    document.hasFocus() &&
                    !!( elem.type || elem.href || ~elem.tabIndex );
            },
    
            // Boolean properties
            enabled: createDisabledPseudo( false ),
            disabled: createDisabledPseudo( true ),
    
            checked: function( elem ) {
    
                // In CSS3, :checked should return both checked and selected elements
                // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                return ( nodeName( elem, "input" ) && !!elem.checked ) ||
                    ( nodeName( elem, "option" ) && !!elem.selected );
            },
    
            selected: function( elem ) {
    
                // Support: IE <=11+
                // Accessing the selectedIndex property
                // forces the browser to treat the default option as
                // selected when in an optgroup.
                if ( elem.parentNode ) {
                    // eslint-disable-next-line no-unused-expressions
                    elem.parentNode.selectedIndex;
                }
    
                return elem.selected === true;
            },
    
            // Contents
            empty: function( elem ) {
    
                // https://www.w3.org/TR/selectors/#empty-pseudo
                // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                //   but not by others (comment: 8; processing instruction: 7; etc.)
                // nodeType < 6 works because attributes (2) do not appear as children
                for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                    if ( elem.nodeType < 6 ) {
                        return false;
                    }
                }
                return true;
            },
    
            parent: function( elem ) {
                return !Expr.pseudos.empty( elem );
            },
    
            // Element/input types
            header: function( elem ) {
                return rheader.test( elem.nodeName );
            },
    
            input: function( elem ) {
                return rinputs.test( elem.nodeName );
            },
    
            button: function( elem ) {
                return nodeName( elem, "input" ) && elem.type === "button" ||
                    nodeName( elem, "button" );
            },
    
            text: function( elem ) {
                var attr;
                return nodeName( elem, "input" ) && elem.type === "text" &&
    
                    // Support: IE <10 only
                    // New HTML5 attribute values (e.g., "search") appear
                    // with elem.type === "text"
                    ( ( attr = elem.getAttribute( "type" ) ) == null ||
                        attr.toLowerCase() === "text" );
            },
    
            // Position-in-collection
            first: createPositionalPseudo( function() {
                return [ 0 ];
            } ),
    
            last: createPositionalPseudo( function( _matchIndexes, length ) {
                return [ length - 1 ];
            } ),
    
            eq: createPositionalPseudo( function( _matchIndexes, length, argument ) {
                return [ argument < 0 ? argument + length : argument ];
            } ),
    
            even: createPositionalPseudo( function( matchIndexes, length ) {
                var i = 0;
                for ( ; i < length; i += 2 ) {
                    matchIndexes.push( i );
                }
                return matchIndexes;
            } ),
    
            odd: createPositionalPseudo( function( matchIndexes, length ) {
                var i = 1;
                for ( ; i < length; i += 2 ) {
                    matchIndexes.push( i );
                }
                return matchIndexes;
            } ),
    
            lt: createPositionalPseudo( function( matchIndexes, length, argument ) {
                var i;
    
                if ( argument < 0 ) {
                    i = argument + length;
                } else if ( argument > length ) {
                    i = length;
                } else {
                    i = argument;
                }
    
                for ( ; --i >= 0; ) {
                    matchIndexes.push( i );
                }
                return matchIndexes;
            } ),
    
            gt: createPositionalPseudo( function( matchIndexes, length, argument ) {
                var i = argument < 0 ? argument + length : argument;
                for ( ; ++i < length; ) {
                    matchIndexes.push( i );
                }
                return matchIndexes;
            } )
        }
    };
    
    Expr.pseudos.nth = Expr.pseudos.eq;
    
    // Add button/input type pseudos
    for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
        Expr.pseudos[ i ] = createInputPseudo( i );
    }
    for ( i in { submit: true, reset: true } ) {
        Expr.pseudos[ i ] = createButtonPseudo( i );
    }
    
    // Easy API for creating new setFilters
    function setFilters() {}
    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();
    
    function tokenize( selector, parseOnly ) {
        var matched, match, tokens, type,
            soFar, groups, preFilters,
            cached = tokenCache[ selector + " " ];
    
        if ( cached ) {
            return parseOnly ? 0 : cached.slice( 0 );
        }
    
        soFar = selector;
        groups = [];
        preFilters = Expr.preFilter;
    
        while ( soFar ) {
    
            // Comma and first run
            if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
                if ( match ) {
    
                    // Don't consume trailing commas as valid
                    soFar = soFar.slice( match[ 0 ].length ) || soFar;
                }
                groups.push( ( tokens = [] ) );
            }
    
            matched = false;
    
            // Combinators
            if ( ( match = rleadingCombinator.exec( soFar ) ) ) {
                matched = match.shift();
                tokens.push( {
                    value: matched,
    
                    // Cast descendant combinators to space
                    type: match[ 0 ].replace( rtrimCSS, " " )
                } );
                soFar = soFar.slice( matched.length );
            }
    
            // Filters
            for ( type in Expr.filter ) {
                if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
                    ( match = preFilters[ type ]( match ) ) ) ) {
                    matched = match.shift();
                    tokens.push( {
                        value: matched,
                        type: type,
                        matches: match
                    } );
                    soFar = soFar.slice( matched.length );
                }
            }
    
            if ( !matched ) {
                break;
            }
        }
    
        // Return the length of the invalid excess
        // if we're just parsing
        // Otherwise, throw an error or return tokens
        if ( parseOnly ) {
            return soFar.length;
        }
    
        return soFar ?
            find.error( selector ) :
    
            // Cache the tokens
            tokenCache( selector, groups ).slice( 0 );
    }
    
    function toSelector( tokens ) {
        var i = 0,
            len = tokens.length,
            selector = "";
        for ( ; i < len; i++ ) {
            selector += tokens[ i ].value;
        }
        return selector;
    }
    
    function addCombinator( matcher, combinator, base ) {
        var dir = combinator.dir,
            skip = combinator.next,
            key = skip || dir,
            checkNonElements = base && key === "parentNode",
            doneName = done++;
    
        return combinator.first ?
    
            // Check against closest ancestor/preceding element
            function( elem, context, xml ) {
                while ( ( elem = elem[ dir ] ) ) {
                    if ( elem.nodeType === 1 || checkNonElements ) {
                        return matcher( elem, context, xml );
                    }
                }
                return false;
            } :
    
            // Check against all ancestor/preceding elements
            function( elem, context, xml ) {
                var oldCache, outerCache,
                    newCache = [ dirruns, doneName ];
    
                // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                if ( xml ) {
                    while ( ( elem = elem[ dir ] ) ) {
                        if ( elem.nodeType === 1 || checkNonElements ) {
                            if ( matcher( elem, context, xml ) ) {
                                return true;
                            }
                        }
                    }
                } else {
                    while ( ( elem = elem[ dir ] ) ) {
                        if ( elem.nodeType === 1 || checkNonElements ) {
                            outerCache = elem[ expando ] || ( elem[ expando ] = {} );
    
                            if ( skip && nodeName( elem, skip ) ) {
                                elem = elem[ dir ] || elem;
                            } else if ( ( oldCache = outerCache[ key ] ) &&
                                oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
    
                                // Assign to newCache so results back-propagate to previous elements
                                return ( newCache[ 2 ] = oldCache[ 2 ] );
                            } else {
    
                                // Reuse newcache so results back-propagate to previous elements
                                outerCache[ key ] = newCache;
    
                                // A match means we're done; a fail means we have to keep checking
                                if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
                                    return true;
                                }
                            }
                        }
                    }
                }
                return false;
            };
    }
    
    function elementMatcher( matchers ) {
        return matchers.length > 1 ?
            function( elem, context, xml ) {
                var i = matchers.length;
                while ( i-- ) {
                    if ( !matchers[ i ]( elem, context, xml ) ) {
                        return false;
                    }
                }
                return true;
            } :
            matchers[ 0 ];
    }
    
    function multipleContexts( selector, contexts, results ) {
        var i = 0,
            len = contexts.length;
        for ( ; i < len; i++ ) {
            find( selector, contexts[ i ], results );
        }
        return results;
    }
    
    function condense( unmatched, map, filter, context, xml ) {
        var elem,
            newUnmatched = [],
            i = 0,
            len = unmatched.length,
            mapped = map != null;
    
        for ( ; i < len; i++ ) {
            if ( ( elem = unmatched[ i ] ) ) {
                if ( !filter || filter( elem, context, xml ) ) {
                    newUnmatched.push( elem );
                    if ( mapped ) {
                        map.push( i );
                    }
                }
            }
        }
    
        return newUnmatched;
    }
    
    function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
        if ( postFilter && !postFilter[ expando ] ) {
            postFilter = setMatcher( postFilter );
        }
        if ( postFinder && !postFinder[ expando ] ) {
            postFinder = setMatcher( postFinder, postSelector );
        }
        return markFunction( function( seed, results, context, xml ) {
            var temp, i, elem, matcherOut,
                preMap = [],
                postMap = [],
                preexisting = results.length,
    
                // Get initial elements from seed or context
                elems = seed ||
                    multipleContexts( selector || "*",
                        context.nodeType ? [ context ] : context, [] ),
    
                // Prefilter to get matcher input, preserving a map for seed-results synchronization
                matcherIn = preFilter && ( seed || !selector ) ?
                    condense( elems, preMap, preFilter, context, xml ) :
                    elems;
    
            if ( matcher ) {
    
                // If we have a postFinder, or filtered seed, or non-seed postFilter
                // or preexisting results,
                matcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
    
                    // ...intermediate processing is necessary
                    [] :
    
                    // ...otherwise use results directly
                    results;
    
                // Find primary matches
                matcher( matcherIn, matcherOut, context, xml );
            } else {
                matcherOut = matcherIn;
            }
    
            // Apply postFilter
            if ( postFilter ) {
                temp = condense( matcherOut, postMap );
                postFilter( temp, [], context, xml );
    
                // Un-match failing elements by moving them back to matcherIn
                i = temp.length;
                while ( i-- ) {
                    if ( ( elem = temp[ i ] ) ) {
                        matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
                    }
                }
            }
    
            if ( seed ) {
                if ( postFinder || preFilter ) {
                    if ( postFinder ) {
    
                        // Get the final matcherOut by condensing this intermediate into postFinder contexts
                        temp = [];
                        i = matcherOut.length;
                        while ( i-- ) {
                            if ( ( elem = matcherOut[ i ] ) ) {
    
                                // Restore matcherIn since elem is not yet a final match
                                temp.push( ( matcherIn[ i ] = elem ) );
                            }
                        }
                        postFinder( null, ( matcherOut = [] ), temp, xml );
                    }
    
                    // Move matched elements from seed to results to keep them synchronized
                    i = matcherOut.length;
                    while ( i-- ) {
                        if ( ( elem = matcherOut[ i ] ) &&
                            ( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {
    
                            seed[ temp ] = !( results[ temp ] = elem );
                        }
                    }
                }
    
            // Add elements to results, through postFinder if defined
            } else {
                matcherOut = condense(
                    matcherOut === results ?
                        matcherOut.splice( preexisting, matcherOut.length ) :
                        matcherOut
                );
                if ( postFinder ) {
                    postFinder( null, results, matcherOut, xml );
                } else {
                    push.apply( results, matcherOut );
                }
            }
        } );
    }
    
    function matcherFromTokens( tokens ) {
        var checkContext, matcher, j,
            len = tokens.length,
            leadingRelative = Expr.relative[ tokens[ 0 ].type ],
            implicitRelative = leadingRelative || Expr.relative[ " " ],
            i = leadingRelative ? 1 : 0,
    
            // The foundational matcher ensures that elements are reachable from top-level context(s)
            matchContext = addCombinator( function( elem ) {
                return elem === checkContext;
            }, implicitRelative, true ),
            matchAnyContext = addCombinator( function( elem ) {
                return indexOf.call( checkContext, elem ) > -1;
            }, implicitRelative, true ),
            matchers = [ function( elem, context, xml ) {
    
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                var ret = ( !leadingRelative && ( xml || context != outermostContext ) ) || (
                    ( checkContext = context ).nodeType ?
                        matchContext( elem, context, xml ) :
                        matchAnyContext( elem, context, xml ) );
    
                // Avoid hanging onto element
                // (see https://github.com/jquery/sizzle/issues/299)
                checkContext = null;
                return ret;
            } ];
    
        for ( ; i < len; i++ ) {
            if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
                matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
            } else {
                matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );
    
                // Return special upon seeing a positional matcher
                if ( matcher[ expando ] ) {
    
                    // Find the next relative operator (if any) for proper handling
                    j = ++i;
                    for ( ; j < len; j++ ) {
                        if ( Expr.relative[ tokens[ j ].type ] ) {
                            break;
                        }
                    }
                    return setMatcher(
                        i > 1 && elementMatcher( matchers ),
                        i > 1 && toSelector(
    
                            // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                            tokens.slice( 0, i - 1 )
                                .concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
                        ).replace( rtrimCSS, "$1" ),
                        matcher,
                        i < j && matcherFromTokens( tokens.slice( i, j ) ),
                        j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
                        j < len && toSelector( tokens )
                    );
                }
                matchers.push( matcher );
            }
        }
    
        return elementMatcher( matchers );
    }
    
    function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
        var bySet = setMatchers.length > 0,
            byElement = elementMatchers.length > 0,
            superMatcher = function( seed, context, xml, results, outermost ) {
                var elem, j, matcher,
                    matchedCount = 0,
                    i = "0",
                    unmatched = seed && [],
                    setMatched = [],
                    contextBackup = outermostContext,
    
                    // We must always have either seed elements or outermost context
                    elems = seed || byElement && Expr.find.TAG( "*", outermost ),
    
                    // Use integer dirruns iff this is the outermost matcher
                    dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
                    len = elems.length;
    
                if ( outermost ) {
    
                    // Support: IE 11+, Edge 17 - 18+
                    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                    // two documents; shallow comparisons work.
                    // eslint-disable-next-line eqeqeq
                    outermostContext = context == document || context || outermost;
                }
    
                // Add elements passing elementMatchers directly to results
                // Support: iOS <=7 - 9 only
                // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching
                // elements by id. (see trac-14142)
                for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
                    if ( byElement && elem ) {
                        j = 0;
    
                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        // eslint-disable-next-line eqeqeq
                        if ( !context && elem.ownerDocument != document ) {
                            setDocument( elem );
                            xml = !documentIsHTML;
                        }
                        while ( ( matcher = elementMatchers[ j++ ] ) ) {
                            if ( matcher( elem, context || document, xml ) ) {
                                push.call( results, elem );
                                break;
                            }
                        }
                        if ( outermost ) {
                            dirruns = dirrunsUnique;
                        }
                    }
    
                    // Track unmatched elements for set filters
                    if ( bySet ) {
    
                        // They will have gone through all possible matchers
                        if ( ( elem = !matcher && elem ) ) {
                            matchedCount--;
                        }
    
                        // Lengthen the array for every element, matched or not
                        if ( seed ) {
                            unmatched.push( elem );
                        }
                    }
                }
    
                // `i` is now the count of elements visited above, and adding it to `matchedCount`
                // makes the latter nonnegative.
                matchedCount += i;
    
                // Apply set filters to unmatched elements
                // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                // no element matchers and no seed.
                // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                // numerically zero.
                if ( bySet && i !== matchedCount ) {
                    j = 0;
                    while ( ( matcher = setMatchers[ j++ ] ) ) {
                        matcher( unmatched, setMatched, context, xml );
                    }
    
                    if ( seed ) {
    
                        // Reintegrate element matches to eliminate the need for sorting
                        if ( matchedCount > 0 ) {
                            while ( i-- ) {
                                if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
                                    setMatched[ i ] = pop.call( results );
                                }
                            }
                        }
    
                        // Discard index placeholder values to get only actual matches
                        setMatched = condense( setMatched );
                    }
    
                    // Add matches to results
                    push.apply( results, setMatched );
    
                    // Seedless set matches succeeding multiple successful matchers stipulate sorting
                    if ( outermost && !seed && setMatched.length > 0 &&
                        ( matchedCount + setMatchers.length ) > 1 ) {
    
                        jQuery.uniqueSort( results );
                    }
                }
    
                // Override manipulation of globals by nested matchers
                if ( outermost ) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
    
                return unmatched;
            };
    
        return bySet ?
            markFunction( superMatcher ) :
            superMatcher;
    }
    
    function compile( selector, match /* Internal Use Only */ ) {
        var i,
            setMatchers = [],
            elementMatchers = [],
            cached = compilerCache[ selector + " " ];
    
        if ( !cached ) {
    
            // Generate a function of recursive functions that can be used to check each element
            if ( !match ) {
                match = tokenize( selector );
            }
            i = match.length;
            while ( i-- ) {
                cached = matcherFromTokens( match[ i ] );
                if ( cached[ expando ] ) {
                    setMatchers.push( cached );
                } else {
                    elementMatchers.push( cached );
                }
            }
    
            // Cache the compiled function
            cached = compilerCache( selector,
                matcherFromGroupMatchers( elementMatchers, setMatchers ) );
    
            // Save selector and tokenization
            cached.selector = selector;
        }
        return cached;
    }
    
    /**
     * A low-level selection function that works with jQuery's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with jQuery selector compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */
    function select( selector, context, results, seed ) {
        var i, tokens, token, type, find,
            compiled = typeof selector === "function" && selector,
            match = !seed && tokenize( ( selector = compiled.selector || selector ) );
    
        results = results || [];
    
        // Try to minimize operations if there is only one selector in the list and no seed
        // (the latter of which guarantees us context)
        if ( match.length === 1 ) {
    
            // Reduce context if the leading compound selector is an ID
            tokens = match[ 0 ] = match[ 0 ].slice( 0 );
            if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
                    context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {
    
                context = ( Expr.find.ID(
                    token.matches[ 0 ].replace( runescape, funescape ),
                    context
                ) || [] )[ 0 ];
                if ( !context ) {
                    return results;
    
                // Precompiled matchers will still verify ancestry, so step up a level
                } else if ( compiled ) {
                    context = context.parentNode;
                }
    
                selector = selector.slice( tokens.shift().value.length );
            }
    
            // Fetch a seed set for right-to-left matching
            i = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;
            while ( i-- ) {
                token = tokens[ i ];
    
                // Abort if we hit a combinator
                if ( Expr.relative[ ( type = token.type ) ] ) {
                    break;
                }
                if ( ( find = Expr.find[ type ] ) ) {
    
                    // Search, expanding context for leading sibling combinators
                    if ( ( seed = find(
                        token.matches[ 0 ].replace( runescape, funescape ),
                        rsibling.test( tokens[ 0 ].type ) &&
                            testContext( context.parentNode ) || context
                    ) ) ) {
    
                        // If seed is empty or no tokens remain, we can return early
                        tokens.splice( i, 1 );
                        selector = seed.length && toSelector( tokens );
                        if ( !selector ) {
                            push.apply( results, seed );
                            return results;
                        }
    
                        break;
                    }
                }
            }
        }
    
        // Compile and execute a filtering function if one is not provided
        // Provide `match` to avoid retokenization if we modified the selector above
        ( compiled || compile( selector, match ) )(
            seed,
            context,
            !documentIsHTML,
            results,
            !context || rsibling.test( selector ) && testContext( context.parentNode ) || context
        );
        return results;
    }
    
    // One-time assignments
    
    // Support: Android <=4.0 - 4.1+
    // Sort stability
    support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;
    
    // Initialize against the default document
    setDocument();
    
    // Support: Android <=4.0 - 4.1+
    // Detached nodes confoundingly follow *each other*
    support.sortDetached = assert( function( el ) {
    
        // Should return 1, but returns 4 (following)
        return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
    } );
    
    jQuery.find = find;
    
    // Deprecated
    jQuery.expr[ ":" ] = jQuery.expr.pseudos;
    jQuery.unique = jQuery.uniqueSort;
    
    // These have always been private, but they used to be documented as part of
    // Sizzle so let's maintain them for now for backwards compatibility purposes.
    find.compile = compile;
    find.select = select;
    find.setDocument = setDocument;
    find.tokenize = tokenize;
    
    find.escape = jQuery.escapeSelector;
    find.getText = jQuery.text;
    find.isXML = jQuery.isXMLDoc;
    find.selectors = jQuery.expr;
    find.support = jQuery.support;
    find.uniqueSort = jQuery.uniqueSort;
    
        /* eslint-enable */
    
    } )();
    
    
    var dir = function( elem, dir, until ) {
        var matched = [],
            truncate = until !== undefined;
    
        while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
            if ( elem.nodeType === 1 ) {
                if ( truncate && jQuery( elem ).is( until ) ) {
                    break;
                }
                matched.push( elem );
            }
        }
        return matched;
    };
    
    
    var siblings = function( n, elem ) {
        var matched = [];
    
        for ( ; n; n = n.nextSibling ) {
            if ( n.nodeType === 1 && n !== elem ) {
                matched.push( n );
            }
        }
    
        return matched;
    };
    
    
    var rneedsContext = jQuery.expr.match.needsContext;
    
    var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );
    
    
    
    // Implement the identical functionality for filter and not
    function winnow( elements, qualifier, not ) {
        if ( isFunction( qualifier ) ) {
            return jQuery.grep( elements, function( elem, i ) {
                return !!qualifier.call( elem, i, elem ) !== not;
            } );
        }
    
        // Single element
        if ( qualifier.nodeType ) {
            return jQuery.grep( elements, function( elem ) {
                return ( elem === qualifier ) !== not;
            } );
        }
    
        // Arraylike of elements (jQuery, arguments, Array)
        if ( typeof qualifier !== "string" ) {
            return jQuery.grep( elements, function( elem ) {
                return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
            } );
        }
    
        // Filtered directly for both simple and complex selectors
        return jQuery.filter( qualifier, elements, not );
    }
    
    jQuery.filter = function( expr, elems, not ) {
        var elem = elems[ 0 ];
    
        if ( not ) {
            expr = ":not(" + expr + ")";
        }
    
        if ( elems.length === 1 && elem.nodeType === 1 ) {
            return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
        }
    
        return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
            return elem.nodeType === 1;
        } ) );
    };
    
    jQuery.fn.extend( {
        find: function( selector ) {
            var i, ret,
                len = this.length,
                self = this;
    
            if ( typeof selector !== "string" ) {
                return this.pushStack( jQuery( selector ).filter( function() {
                    for ( i = 0; i < len; i++ ) {
                        if ( jQuery.contains( self[ i ], this ) ) {
                            return true;
                        }
                    }
                } ) );
            }
    
            ret = this.pushStack( [] );
    
            for ( i = 0; i < len; i++ ) {
                jQuery.find( selector, self[ i ], ret );
            }
    
            return len > 1 ? jQuery.uniqueSort( ret ) : ret;
        },
        filter: function( selector ) {
            return this.pushStack( winnow( this, selector || [], false ) );
        },
        not: function( selector ) {
            return this.pushStack( winnow( this, selector || [], true ) );
        },
        is: function( selector ) {
            return !!winnow(
                this,
    
                // If this is a positional/relative selector, check membership in the returned set
                // so $("p:first").is("p:last") won't return true for a doc with two "p".
                typeof selector === "string" && rneedsContext.test( selector ) ?
                    jQuery( selector ) :
                    selector || [],
                false
            ).length;
        }
    } );
    
    
    // Initialize a jQuery object
    
    
    // A central reference to the root jQuery(document)
    var rootjQuery,
    
        // A simple way to check for HTML strings
        // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
        // Strict HTML recognition (trac-11290: must start with <)
        // Shortcut simple #id case for speed
        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
    
        init = jQuery.fn.init = function( selector, context, root ) {
            var match, elem;
    
            // HANDLE: $(""), $(null), $(undefined), $(false)
            if ( !selector ) {
                return this;
            }
    
            // Method init() accepts an alternate rootjQuery
            // so migrate can support jQuery.sub (gh-2101)
            root = root || rootjQuery;
    
            // Handle HTML strings
            if ( typeof selector === "string" ) {
                if ( selector[ 0 ] === "<" &&
                    selector[ selector.length - 1 ] === ">" &&
                    selector.length >= 3 ) {
    
                    // Assume that strings that start and end with <> are HTML and skip the regex check
                    match = [ null, selector, null ];
    
                } else {
                    match = rquickExpr.exec( selector );
                }
    
                // Match html or make sure no context is specified for #id
                if ( match && ( match[ 1 ] || !context ) ) {
    
                    // HANDLE: $(html) -> $(array)
                    if ( match[ 1 ] ) {
                        context = context instanceof jQuery ? context[ 0 ] : context;
    
                        // Option to run scripts is true for back-compat
                        // Intentionally let the error be thrown if parseHTML is not present
                        jQuery.merge( this, jQuery.parseHTML(
                            match[ 1 ],
                            context && context.nodeType ? context.ownerDocument || context : document,
                            true
                        ) );
    
                        // HANDLE: $(html, props)
                        if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
                            for ( match in context ) {
    
                                // Properties of context are called as methods if possible
                                if ( isFunction( this[ match ] ) ) {
                                    this[ match ]( context[ match ] );
    
                                // ...and otherwise set as attributes
                                } else {
                                    this.attr( match, context[ match ] );
                                }
                            }
                        }
    
                        return this;
    
                    // HANDLE: $(#id)
                    } else {
                        elem = document.getElementById( match[ 2 ] );
    
                        if ( elem ) {
    
                            // Inject the element directly into the jQuery object
                            this[ 0 ] = elem;
                            this.length = 1;
                        }
                        return this;
                    }
    
                // HANDLE: $(expr, $(...))
                } else if ( !context || context.jquery ) {
                    return ( context || root ).find( selector );
    
                // HANDLE: $(expr, context)
                // (which is just equivalent to: $(context).find(expr)
                } else {
                    return this.constructor( context ).find( selector );
                }
    
            // HANDLE: $(DOMElement)
            } else if ( selector.nodeType ) {
                this[ 0 ] = selector;
                this.length = 1;
                return this;
    
            // HANDLE: $(function)
            // Shortcut for document ready
            } else if ( isFunction( selector ) ) {
                return root.ready !== undefined ?
                    root.ready( selector ) :
    
                    // Execute immediately if ready is not present
                    selector( jQuery );
            }
    
            return jQuery.makeArray( selector, this );
        };
    
    // Give the init function the jQuery prototype for later instantiation
    init.prototype = jQuery.fn;
    
    // Initialize central reference
    rootjQuery = jQuery( document );
    
    
    var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    
        // Methods guaranteed to produce a unique set when starting from a unique set
        guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
    
    jQuery.fn.extend( {
        has: function( target ) {
            var targets = jQuery( target, this ),
                l = targets.length;
    
            return this.filter( function() {
                var i = 0;
                for ( ; i < l; i++ ) {
                    if ( jQuery.contains( this, targets[ i ] ) ) {
                        return true;
                    }
                }
            } );
        },
    
        closest: function( selectors, context ) {
            var cur,
                i = 0,
                l = this.length,
                matched = [],
                targets = typeof selectors !== "string" && jQuery( selectors );
    
            // Positional selectors never match, since there's no _selection_ context
            if ( !rneedsContext.test( selectors ) ) {
                for ( ; i < l; i++ ) {
                    for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
    
                        // Always skip document fragments
                        if ( cur.nodeType < 11 && ( targets ?
                            targets.index( cur ) > -1 :
    
                            // Don't pass non-elements to jQuery#find
                            cur.nodeType === 1 &&
                                jQuery.find.matchesSelector( cur, selectors ) ) ) {
    
                            matched.push( cur );
                            break;
                        }
                    }
                }
            }
    
            return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
        },
    
        // Determine the position of an element within the set
        index: function( elem ) {
    
            // No argument, return index in parent
            if ( !elem ) {
                return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
            }
    
            // Index in selector
            if ( typeof elem === "string" ) {
                return indexOf.call( jQuery( elem ), this[ 0 ] );
            }
    
            // Locate the position of the desired element
            return indexOf.call( this,
    
                // If it receives a jQuery object, the first element is used
                elem.jquery ? elem[ 0 ] : elem
            );
        },
    
        add: function( selector, context ) {
            return this.pushStack(
                jQuery.uniqueSort(
                    jQuery.merge( this.get(), jQuery( selector, context ) )
                )
            );
        },
    
        addBack: function( selector ) {
            return this.add( selector == null ?
                this.prevObject : this.prevObject.filter( selector )
            );
        }
    } );
    
    function sibling( cur, dir ) {
        while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
        return cur;
    }
    
    jQuery.each( {
        parent: function( elem ) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function( elem ) {
            return dir( elem, "parentNode" );
        },
        parentsUntil: function( elem, _i, until ) {
            return dir( elem, "parentNode", until );
        },
        next: function( elem ) {
            return sibling( elem, "nextSibling" );
        },
        prev: function( elem ) {
            return sibling( elem, "previousSibling" );
        },
        nextAll: function( elem ) {
            return dir( elem, "nextSibling" );
        },
        prevAll: function( elem ) {
            return dir( elem, "previousSibling" );
        },
        nextUntil: function( elem, _i, until ) {
            return dir( elem, "nextSibling", until );
        },
        prevUntil: function( elem, _i, until ) {
            return dir( elem, "previousSibling", until );
        },
        siblings: function( elem ) {
            return siblings( ( elem.parentNode || {} ).firstChild, elem );
        },
        children: function( elem ) {
            return siblings( elem.firstChild );
        },
        contents: function( elem ) {
            if ( elem.contentDocument != null &&
    
                // Support: IE 11+
                // <object> elements with no `data` attribute has an object
                // `contentDocument` with a `null` prototype.
                getProto( elem.contentDocument ) ) {
    
                return elem.contentDocument;
            }
    
            // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
            // Treat the template element as a regular one in browsers that
            // don't support it.
            if ( nodeName( elem, "template" ) ) {
                elem = elem.content || elem;
            }
    
            return jQuery.merge( [], elem.childNodes );
        }
    }, function( name, fn ) {
        jQuery.fn[ name ] = function( until, selector ) {
            var matched = jQuery.map( this, fn, until );
    
            if ( name.slice( -5 ) !== "Until" ) {
                selector = until;
            }
    
            if ( selector && typeof selector === "string" ) {
                matched = jQuery.filter( selector, matched );
            }
    
            if ( this.length > 1 ) {
    
                // Remove duplicates
                if ( !guaranteedUnique[ name ] ) {
                    jQuery.uniqueSort( matched );
                }
    
                // Reverse order for parents* and prev-derivatives
                if ( rparentsprev.test( name ) ) {
                    matched.reverse();
                }
            }
    
            return this.pushStack( matched );
        };
    } );
    var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );
    
    
    
    // Convert String-formatted options into Object-formatted ones
    function createOptions( options ) {
        var object = {};
        jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
            object[ flag ] = true;
        } );
        return object;
    }
    
    /*
     * Create a callback list using the following parameters:
     *
     *	options: an optional list of space-separated options that will change how
     *			the callback list behaves or a more traditional option object
     *
     * By default a callback list will act like an event callback list and can be
     * "fired" multiple times.
     *
     * Possible options:
     *
     *	once:			will ensure the callback list can only be fired once (like a Deferred)
     *
     *	memory:			will keep track of previous values and will call any callback added
     *					after the list has been fired right away with the latest "memorized"
     *					values (like a Deferred)
     *
     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
     *
     *	stopOnFalse:	interrupt callings when a callback returns false
     *
     */
    jQuery.Callbacks = function( options ) {
    
        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ?
            createOptions( options ) :
            jQuery.extend( {}, options );
    
        var // Flag to know if list is currently firing
            firing,
    
            // Last fire value for non-forgettable lists
            memory,
    
            // Flag to know if list was already fired
            fired,
    
            // Flag to prevent firing
            locked,
    
            // Actual callback list
            list = [],
    
            // Queue of execution data for repeatable lists
            queue = [],
    
            // Index of currently firing callback (modified by add/remove as needed)
            firingIndex = -1,
    
            // Fire callbacks
            fire = function() {
    
                // Enforce single-firing
                locked = locked || options.once;
    
                // Execute callbacks for all pending executions,
                // respecting firingIndex overrides and runtime changes
                fired = firing = true;
                for ( ; queue.length; firingIndex = -1 ) {
                    memory = queue.shift();
                    while ( ++firingIndex < list.length ) {
    
                        // Run callback and check for early termination
                        if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
                            options.stopOnFalse ) {
    
                            // Jump to end and forget the data so .add doesn't re-fire
                            firingIndex = list.length;
                            memory = false;
                        }
                    }
                }
    
                // Forget the data if we're done with it
                if ( !options.memory ) {
                    memory = false;
                }
    
                firing = false;
    
                // Clean up if we're done firing for good
                if ( locked ) {
    
                    // Keep an empty list if we have data for future add calls
                    if ( memory ) {
                        list = [];
    
                    // Otherwise, this object is spent
                    } else {
                        list = "";
                    }
                }
            },
    
            // Actual Callbacks object
            self = {
    
                // Add a callback or a collection of callbacks to the list
                add: function() {
                    if ( list ) {
    
                        // If we have memory from a past run, we should fire after adding
                        if ( memory && !firing ) {
                            firingIndex = list.length - 1;
                            queue.push( memory );
                        }
    
                        ( function add( args ) {
                            jQuery.each( args, function( _, arg ) {
                                if ( isFunction( arg ) ) {
                                    if ( !options.unique || !self.has( arg ) ) {
                                        list.push( arg );
                                    }
                                } else if ( arg && arg.length && toType( arg ) !== "string" ) {
    
                                    // Inspect recursively
                                    add( arg );
                                }
                            } );
                        } )( arguments );
    
                        if ( memory && !firing ) {
                            fire();
                        }
                    }
                    return this;
                },
    
                // Remove a callback from the list
                remove: function() {
                    jQuery.each( arguments, function( _, arg ) {
                        var index;
                        while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
                            list.splice( index, 1 );
    
                            // Handle firing indexes
                            if ( index <= firingIndex ) {
                                firingIndex--;
                            }
                        }
                    } );
                    return this;
                },
    
                // Check if a given callback is in the list.
                // If no argument is given, return whether or not list has callbacks attached.
                has: function( fn ) {
                    return fn ?
                        jQuery.inArray( fn, list ) > -1 :
                        list.length > 0;
                },
    
                // Remove all callbacks from the list
                empty: function() {
                    if ( list ) {
                        list = [];
                    }
                    return this;
                },
    
                // Disable .fire and .add
                // Abort any current/pending executions
                // Clear all callbacks and values
                disable: function() {
                    locked = queue = [];
                    list = memory = "";
                    return this;
                },
                disabled: function() {
                    return !list;
                },
    
                // Disable .fire
                // Also disable .add unless we have memory (since it would have no effect)
                // Abort any pending executions
                lock: function() {
                    locked = queue = [];
                    if ( !memory && !firing ) {
                        list = memory = "";
                    }
                    return this;
                },
                locked: function() {
                    return !!locked;
                },
    
                // Call all callbacks with the given context and arguments
                fireWith: function( context, args ) {
                    if ( !locked ) {
                        args = args || [];
                        args = [ context, args.slice ? args.slice() : args ];
                        queue.push( args );
                        if ( !firing ) {
                            fire();
                        }
                    }
                    return this;
                },
    
                // Call all the callbacks with the given arguments
                fire: function() {
                    self.fireWith( this, arguments );
                    return this;
                },
    
                // To know if the callbacks have already been called at least once
                fired: function() {
                    return !!fired;
                }
            };
    
        return self;
    };
    
    
    function Identity( v ) {
        return v;
    }
    function Thrower( ex ) {
        throw ex;
    }
    
    function adoptValue( value, resolve, reject, noValue ) {
        var method;
    
        try {
    
            // Check for promise aspect first to privilege synchronous behavior
            if ( value && isFunction( ( method = value.promise ) ) ) {
                method.call( value ).done( resolve ).fail( reject );
    
            // Other thenables
            } else if ( value && isFunction( ( method = value.then ) ) ) {
                method.call( value, resolve, reject );
    
            // Other non-thenables
            } else {
    
                // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
                // * false: [ value ].slice( 0 ) => resolve( value )
                // * true: [ value ].slice( 1 ) => resolve()
                resolve.apply( undefined, [ value ].slice( noValue ) );
            }
    
        // For Promises/A+, convert exceptions into rejections
        // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
        // Deferred#then to conditionally suppress rejection.
        } catch ( value ) {
    
            // Support: Android 4.0 only
            // Strict mode functions invoked without .call/.apply get global-object context
            reject.apply( undefined, [ value ] );
        }
    }
    
    jQuery.extend( {
    
        Deferred: function( func ) {
            var tuples = [
    
                    // action, add listener, callbacks,
                    // ... .then handlers, argument index, [final state]
                    [ "notify", "progress", jQuery.Callbacks( "memory" ),
                        jQuery.Callbacks( "memory" ), 2 ],
                    [ "resolve", "done", jQuery.Callbacks( "once memory" ),
                        jQuery.Callbacks( "once memory" ), 0, "resolved" ],
                    [ "reject", "fail", jQuery.Callbacks( "once memory" ),
                        jQuery.Callbacks( "once memory" ), 1, "rejected" ]
                ],
                state = "pending",
                promise = {
                    state: function() {
                        return state;
                    },
                    always: function() {
                        deferred.done( arguments ).fail( arguments );
                        return this;
                    },
                    "catch": function( fn ) {
                        return promise.then( null, fn );
                    },
    
                    // Keep pipe for back-compat
                    pipe: function( /* fnDone, fnFail, fnProgress */ ) {
                        var fns = arguments;
    
                        return jQuery.Deferred( function( newDefer ) {
                            jQuery.each( tuples, function( _i, tuple ) {
    
                                // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                                var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];
    
                                // deferred.progress(function() { bind to newDefer or newDefer.notify })
                                // deferred.done(function() { bind to newDefer or newDefer.resolve })
                                // deferred.fail(function() { bind to newDefer or newDefer.reject })
                                deferred[ tuple[ 1 ] ]( function() {
                                    var returned = fn && fn.apply( this, arguments );
                                    if ( returned && isFunction( returned.promise ) ) {
                                        returned.promise()
                                            .progress( newDefer.notify )
                                            .done( newDefer.resolve )
                                            .fail( newDefer.reject );
                                    } else {
                                        newDefer[ tuple[ 0 ] + "With" ](
                                            this,
                                            fn ? [ returned ] : arguments
                                        );
                                    }
                                } );
                            } );
                            fns = null;
                        } ).promise();
                    },
                    then: function( onFulfilled, onRejected, onProgress ) {
                        var maxDepth = 0;
                        function resolve( depth, deferred, handler, special ) {
                            return function() {
                                var that = this,
                                    args = arguments,
                                    mightThrow = function() {
                                        var returned, then;
    
                                        // Support: Promises/A+ section 2.3.3.3.3
                                        // https://promisesaplus.com/#point-59
                                        // Ignore double-resolution attempts
                                        if ( depth < maxDepth ) {
                                            return;
                                        }
    
                                        returned = handler.apply( that, args );
    
                                        // Support: Promises/A+ section 2.3.1
                                        // https://promisesaplus.com/#point-48
                                        if ( returned === deferred.promise() ) {
                                            throw new TypeError( "Thenable self-resolution" );
                                        }
    
                                        // Support: Promises/A+ sections 2.3.3.1, 3.5
                                        // https://promisesaplus.com/#point-54
                                        // https://promisesaplus.com/#point-75
                                        // Retrieve `then` only once
                                        then = returned &&
    
                                            // Support: Promises/A+ section 2.3.4
                                            // https://promisesaplus.com/#point-64
                                            // Only check objects and functions for thenability
                                            ( typeof returned === "object" ||
                                                typeof returned === "function" ) &&
                                            returned.then;
    
                                        // Handle a returned thenable
                                        if ( isFunction( then ) ) {
    
                                            // Special processors (notify) just wait for resolution
                                            if ( special ) {
                                                then.call(
                                                    returned,
                                                    resolve( maxDepth, deferred, Identity, special ),
                                                    resolve( maxDepth, deferred, Thrower, special )
                                                );
    
                                            // Normal processors (resolve) also hook into progress
                                            } else {
    
                                                // ...and disregard older resolution values
                                                maxDepth++;
    
                                                then.call(
                                                    returned,
                                                    resolve( maxDepth, deferred, Identity, special ),
                                                    resolve( maxDepth, deferred, Thrower, special ),
                                                    resolve( maxDepth, deferred, Identity,
                                                        deferred.notifyWith )
                                                );
                                            }
    
                                        // Handle all other returned values
                                        } else {
    
                                            // Only substitute handlers pass on context
                                            // and multiple values (non-spec behavior)
                                            if ( handler !== Identity ) {
                                                that = undefined;
                                                args = [ returned ];
                                            }
    
                                            // Process the value(s)
                                            // Default process is resolve
                                            ( special || deferred.resolveWith )( that, args );
                                        }
                                    },
    
                                    // Only normal processors (resolve) catch and reject exceptions
                                    process = special ?
                                        mightThrow :
                                        function() {
                                            try {
                                                mightThrow();
                                            } catch ( e ) {
    
                                                if ( jQuery.Deferred.exceptionHook ) {
                                                    jQuery.Deferred.exceptionHook( e,
                                                        process.error );
                                                }
    
                                                // Support: Promises/A+ section 2.3.3.3.4.1
                                                // https://promisesaplus.com/#point-61
                                                // Ignore post-resolution exceptions
                                                if ( depth + 1 >= maxDepth ) {
    
                                                    // Only substitute handlers pass on context
                                                    // and multiple values (non-spec behavior)
                                                    if ( handler !== Thrower ) {
                                                        that = undefined;
                                                        args = [ e ];
                                                    }
    
                                                    deferred.rejectWith( that, args );
                                                }
                                            }
                                        };
    
                                // Support: Promises/A+ section 2.3.3.3.1
                                // https://promisesaplus.com/#point-57
                                // Re-resolve promises immediately to dodge false rejection from
                                // subsequent errors
                                if ( depth ) {
                                    process();
                                } else {
    
                                    // Call an optional hook to record the error, in case of exception
                                    // since it's otherwise lost when execution goes async
                                    if ( jQuery.Deferred.getErrorHook ) {
                                        process.error = jQuery.Deferred.getErrorHook();
    
                                    // The deprecated alias of the above. While the name suggests
                                    // returning the stack, not an error instance, jQuery just passes
                                    // it directly to `console.warn` so both will work; an instance
                                    // just better cooperates with source maps.
                                    } else if ( jQuery.Deferred.getStackHook ) {
                                        process.error = jQuery.Deferred.getStackHook();
                                    }
                                    window.setTimeout( process );
                                }
                            };
                        }
    
                        return jQuery.Deferred( function( newDefer ) {
    
                            // progress_handlers.add( ... )
                            tuples[ 0 ][ 3 ].add(
                                resolve(
                                    0,
                                    newDefer,
                                    isFunction( onProgress ) ?
                                        onProgress :
                                        Identity,
                                    newDefer.notifyWith
                                )
                            );
    
                            // fulfilled_handlers.add( ... )
                            tuples[ 1 ][ 3 ].add(
                                resolve(
                                    0,
                                    newDefer,
                                    isFunction( onFulfilled ) ?
                                        onFulfilled :
                                        Identity
                                )
                            );
    
                            // rejected_handlers.add( ... )
                            tuples[ 2 ][ 3 ].add(
                                resolve(
                                    0,
                                    newDefer,
                                    isFunction( onRejected ) ?
                                        onRejected :
                                        Thrower
                                )
                            );
                        } ).promise();
                    },
    
                    // Get a promise for this deferred
                    // If obj is provided, the promise aspect is added to the object
                    promise: function( obj ) {
                        return obj != null ? jQuery.extend( obj, promise ) : promise;
                    }
                },
                deferred = {};
    
            // Add list-specific methods
            jQuery.each( tuples, function( i, tuple ) {
                var list = tuple[ 2 ],
                    stateString = tuple[ 5 ];
    
                // promise.progress = list.add
                // promise.done = list.add
                // promise.fail = list.add
                promise[ tuple[ 1 ] ] = list.add;
    
                // Handle state
                if ( stateString ) {
                    list.add(
                        function() {
    
                            // state = "resolved" (i.e., fulfilled)
                            // state = "rejected"
                            state = stateString;
                        },
    
                        // rejected_callbacks.disable
                        // fulfilled_callbacks.disable
                        tuples[ 3 - i ][ 2 ].disable,
    
                        // rejected_handlers.disable
                        // fulfilled_handlers.disable
                        tuples[ 3 - i ][ 3 ].disable,
    
                        // progress_callbacks.lock
                        tuples[ 0 ][ 2 ].lock,
    
                        // progress_handlers.lock
                        tuples[ 0 ][ 3 ].lock
                    );
                }
    
                // progress_handlers.fire
                // fulfilled_handlers.fire
                // rejected_handlers.fire
                list.add( tuple[ 3 ].fire );
    
                // deferred.notify = function() { deferred.notifyWith(...) }
                // deferred.resolve = function() { deferred.resolveWith(...) }
                // deferred.reject = function() { deferred.rejectWith(...) }
                deferred[ tuple[ 0 ] ] = function() {
                    deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
                    return this;
                };
    
                // deferred.notifyWith = list.fireWith
                // deferred.resolveWith = list.fireWith
                // deferred.rejectWith = list.fireWith
                deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
            } );
    
            // Make the deferred a promise
            promise.promise( deferred );
    
            // Call given func if any
            if ( func ) {
                func.call( deferred, deferred );
            }
    
            // All done!
            return deferred;
        },
    
        // Deferred helper
        when: function( singleValue ) {
            var
    
                // count of uncompleted subordinates
                remaining = arguments.length,
    
                // count of unprocessed arguments
                i = remaining,
    
                // subordinate fulfillment data
                resolveContexts = Array( i ),
                resolveValues = slice.call( arguments ),
    
                // the primary Deferred
                primary = jQuery.Deferred(),
    
                // subordinate callback factory
                updateFunc = function( i ) {
                    return function( value ) {
                        resolveContexts[ i ] = this;
                        resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
                        if ( !( --remaining ) ) {
                            primary.resolveWith( resolveContexts, resolveValues );
                        }
                    };
                };
    
            // Single- and empty arguments are adopted like Promise.resolve
            if ( remaining <= 1 ) {
                adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
                    !remaining );
    
                // Use .then() to unwrap secondary thenables (cf. gh-3000)
                if ( primary.state() === "pending" ||
                    isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {
    
                    return primary.then();
                }
            }
    
            // Multiple arguments are aggregated like Promise.all array elements
            while ( i-- ) {
                adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
            }
    
            return primary.promise();
        }
    } );
    
    
    // These usually indicate a programmer mistake during development,
    // warn about them ASAP rather than swallowing them by default.
    var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    
    // If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error
    // captured before the async barrier to get the original error cause
    // which may otherwise be hidden.
    jQuery.Deferred.exceptionHook = function( error, asyncError ) {
    
        // Support: IE 8 - 9 only
        // Console exists when dev tools are open, which can happen at any time
        if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
            window.console.warn( "jQuery.Deferred exception: " + error.message,
                error.stack, asyncError );
        }
    };
    
    
    
    
    jQuery.readyException = function( error ) {
        window.setTimeout( function() {
            throw error;
        } );
    };
    
    
    
    
    // The deferred used on DOM ready
    var readyList = jQuery.Deferred();
    
    jQuery.fn.ready = function( fn ) {
    
        readyList
            .then( fn )
    
            // Wrap jQuery.readyException in a function so that the lookup
            // happens at the time of error handling instead of callback
            // registration.
            .catch( function( error ) {
                jQuery.readyException( error );
            } );
    
        return this;
    };
    
    jQuery.extend( {
    
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
    
        // A counter to track how many items to wait for before
        // the ready event fires. See trac-6781
        readyWait: 1,
    
        // Handle when the DOM is ready
        ready: function( wait ) {
    
            // Abort if there are pending holds or we're already ready
            if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
                return;
            }
    
            // Remember that the DOM is ready
            jQuery.isReady = true;
    
            // If a normal DOM Ready event fired, decrement, and wait if need be
            if ( wait !== true && --jQuery.readyWait > 0 ) {
                return;
            }
    
            // If there are functions bound, to execute
            readyList.resolveWith( document, [ jQuery ] );
        }
    } );
    
    jQuery.ready.then = readyList.then;
    
    // The ready event handler and self cleanup method
    function completed() {
        document.removeEventListener( "DOMContentLoaded", completed );
        window.removeEventListener( "load", completed );
        jQuery.ready();
    }
    
    // Catch cases where $(document).ready() is called
    // after the browser event has already occurred.
    // Support: IE <=9 - 10 only
    // Older IE sometimes signals "interactive" too soon
    if ( document.readyState === "complete" ||
        ( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
    
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        window.setTimeout( jQuery.ready );
    
    } else {
    
        // Use the handy event callback
        document.addEventListener( "DOMContentLoaded", completed );
    
        // A fallback to window.onload, that will always work
        window.addEventListener( "load", completed );
    }
    
    
    
    
    // Multifunctional method to get and set values of a collection
    // The value/s can optionally be executed if it's a function
    var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
        var i = 0,
            len = elems.length,
            bulk = key == null;
    
        // Sets many values
        if ( toType( key ) === "object" ) {
            chainable = true;
            for ( i in key ) {
                access( elems, fn, i, key[ i ], true, emptyGet, raw );
            }
    
        // Sets one value
        } else if ( value !== undefined ) {
            chainable = true;
    
            if ( !isFunction( value ) ) {
                raw = true;
            }
    
            if ( bulk ) {
    
                // Bulk operations run against the entire set
                if ( raw ) {
                    fn.call( elems, value );
                    fn = null;
    
                // ...except when executing function values
                } else {
                    bulk = fn;
                    fn = function( elem, _key, value ) {
                        return bulk.call( jQuery( elem ), value );
                    };
                }
            }
    
            if ( fn ) {
                for ( ; i < len; i++ ) {
                    fn(
                        elems[ i ], key, raw ?
                            value :
                            value.call( elems[ i ], i, fn( elems[ i ], key ) )
                    );
                }
            }
        }
    
        if ( chainable ) {
            return elems;
        }
    
        // Gets
        if ( bulk ) {
            return fn.call( elems );
        }
    
        return len ? fn( elems[ 0 ], key ) : emptyGet;
    };
    
    
    // Matches dashed string for camelizing
    var rmsPrefix = /^-ms-/,
        rdashAlpha = /-([a-z])/g;
    
    // Used by camelCase as callback to replace()
    function fcamelCase( _all, letter ) {
        return letter.toUpperCase();
    }
    
    // Convert dashed to camelCase; used by the css and data modules
    // Support: IE <=9 - 11, Edge 12 - 15
    // Microsoft forgot to hump their vendor prefix (trac-9572)
    function camelCase( string ) {
        return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
    }
    var acceptData = function( owner ) {
    
        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
    };
    
    
    
    
    function Data() {
        this.expando = jQuery.expando + Data.uid++;
    }
    
    Data.uid = 1;
    
    Data.prototype = {
    
        cache: function( owner ) {
    
            // Check if the owner object already has a cache
            var value = owner[ this.expando ];
    
            // If not, create one
            if ( !value ) {
                value = {};
    
                // We can accept data for non-element nodes in modern browsers,
                // but we should not, see trac-8335.
                // Always return an empty object.
                if ( acceptData( owner ) ) {
    
                    // If it is a node unlikely to be stringify-ed or looped over
                    // use plain assignment
                    if ( owner.nodeType ) {
                        owner[ this.expando ] = value;
    
                    // Otherwise secure it in a non-enumerable property
                    // configurable must be true to allow the property to be
                    // deleted when data is removed
                    } else {
                        Object.defineProperty( owner, this.expando, {
                            value: value,
                            configurable: true
                        } );
                    }
                }
            }
    
            return value;
        },
        set: function( owner, data, value ) {
            var prop,
                cache = this.cache( owner );
    
            // Handle: [ owner, key, value ] args
            // Always use camelCase key (gh-2257)
            if ( typeof data === "string" ) {
                cache[ camelCase( data ) ] = value;
    
            // Handle: [ owner, { properties } ] args
            } else {
    
                // Copy the properties one-by-one to the cache object
                for ( prop in data ) {
                    cache[ camelCase( prop ) ] = data[ prop ];
                }
            }
            return cache;
        },
        get: function( owner, key ) {
            return key === undefined ?
                this.cache( owner ) :
    
                // Always use camelCase key (gh-2257)
                owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
        },
        access: function( owner, key, value ) {
    
            // In cases where either:
            //
            //   1. No key was specified
            //   2. A string key was specified, but no value provided
            //
            // Take the "read" path and allow the get method to determine
            // which value to return, respectively either:
            //
            //   1. The entire cache object
            //   2. The data stored at the key
            //
            if ( key === undefined ||
                    ( ( key && typeof key === "string" ) && value === undefined ) ) {
    
                return this.get( owner, key );
            }
    
            // When the key is not a string, or both a key and value
            // are specified, set or extend (existing objects) with either:
            //
            //   1. An object of properties
            //   2. A key and value
            //
            this.set( owner, key, value );
    
            // Since the "set" path can have two possible entry points
            // return the expected data based on which path was taken[*]
            return value !== undefined ? value : key;
        },
        remove: function( owner, key ) {
            var i,
                cache = owner[ this.expando ];
    
            if ( cache === undefined ) {
                return;
            }
    
            if ( key !== undefined ) {
    
                // Support array or space separated string of keys
                if ( Array.isArray( key ) ) {
    
                    // If key is an array of keys...
                    // We always set camelCase keys, so remove that.
                    key = key.map( camelCase );
                } else {
                    key = camelCase( key );
    
                    // If a key with the spaces exists, use it.
                    // Otherwise, create an array by matching non-whitespace
                    key = key in cache ?
                        [ key ] :
                        ( key.match( rnothtmlwhite ) || [] );
                }
    
                i = key.length;
    
                while ( i-- ) {
                    delete cache[ key[ i ] ];
                }
            }
    
            // Remove the expando if there's no more data
            if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
    
                // Support: Chrome <=35 - 45
                // Webkit & Blink performance suffers when deleting properties
                // from DOM nodes, so set to undefined instead
                // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
                if ( owner.nodeType ) {
                    owner[ this.expando ] = undefined;
                } else {
                    delete owner[ this.expando ];
                }
            }
        },
        hasData: function( owner ) {
            var cache = owner[ this.expando ];
            return cache !== undefined && !jQuery.isEmptyObject( cache );
        }
    };
    var dataPriv = new Data();
    
    var dataUser = new Data();
    
    
    
    //	Implementation Summary
    //
    //	1. Enforce API surface and semantic compatibility with 1.9.x branch
    //	2. Improve the module's maintainability by reducing the storage
    //		paths to a single mechanism.
    //	3. Use the same single mechanism to support "private" and "user" data.
    //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
    //	5. Avoid exposing implementation details on user objects (eg. expando properties)
    //	6. Provide a clear path for implementation upgrade to WeakMap in 2014
    
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        rmultiDash = /[A-Z]/g;
    
    function getData( data ) {
        if ( data === "true" ) {
            return true;
        }
    
        if ( data === "false" ) {
            return false;
        }
    
        if ( data === "null" ) {
            return null;
        }
    
        // Only convert to a number if it doesn't change the string
        if ( data === +data + "" ) {
            return +data;
        }
    
        if ( rbrace.test( data ) ) {
            return JSON.parse( data );
        }
    
        return data;
    }
    
    function dataAttr( elem, key, data ) {
        var name;
    
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if ( data === undefined && elem.nodeType === 1 ) {
            name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
            data = elem.getAttribute( name );
    
            if ( typeof data === "string" ) {
                try {
                    data = getData( data );
                } catch ( e ) {}
    
                // Make sure we set the data so it isn't changed later
                dataUser.set( elem, key, data );
            } else {
                data = undefined;
            }
        }
        return data;
    }
    
    jQuery.extend( {
        hasData: function( elem ) {
            return dataUser.hasData( elem ) || dataPriv.hasData( elem );
        },
    
        data: function( elem, name, data ) {
            return dataUser.access( elem, name, data );
        },
    
        removeData: function( elem, name ) {
            dataUser.remove( elem, name );
        },
    
        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to dataPriv methods, these can be deprecated.
        _data: function( elem, name, data ) {
            return dataPriv.access( elem, name, data );
        },
    
        _removeData: function( elem, name ) {
            dataPriv.remove( elem, name );
        }
    } );
    
    jQuery.fn.extend( {
        data: function( key, value ) {
            var i, name, data,
                elem = this[ 0 ],
                attrs = elem && elem.attributes;
    
            // Gets all values
            if ( key === undefined ) {
                if ( this.length ) {
                    data = dataUser.get( elem );
    
                    if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
                        i = attrs.length;
                        while ( i-- ) {
    
                            // Support: IE 11 only
                            // The attrs elements can be null (trac-14894)
                            if ( attrs[ i ] ) {
                                name = attrs[ i ].name;
                                if ( name.indexOf( "data-" ) === 0 ) {
                                    name = camelCase( name.slice( 5 ) );
                                    dataAttr( elem, name, data[ name ] );
                                }
                            }
                        }
                        dataPriv.set( elem, "hasDataAttrs", true );
                    }
                }
    
                return data;
            }
    
            // Sets multiple values
            if ( typeof key === "object" ) {
                return this.each( function() {
                    dataUser.set( this, key );
                } );
            }
    
            return access( this, function( value ) {
                var data;
    
                // The calling jQuery object (element matches) is not empty
                // (and therefore has an element appears at this[ 0 ]) and the
                // `value` parameter was not undefined. An empty jQuery object
                // will result in `undefined` for elem = this[ 0 ] which will
                // throw an exception if an attempt to read a data cache is made.
                if ( elem && value === undefined ) {
    
                    // Attempt to get data from the cache
                    // The key will always be camelCased in Data
                    data = dataUser.get( elem, key );
                    if ( data !== undefined ) {
                        return data;
                    }
    
                    // Attempt to "discover" the data in
                    // HTML5 custom data-* attrs
                    data = dataAttr( elem, key );
                    if ( data !== undefined ) {
                        return data;
                    }
    
                    // We tried really hard, but the data doesn't exist.
                    return;
                }
    
                // Set the data...
                this.each( function() {
    
                    // We always store the camelCased key
                    dataUser.set( this, key, value );
                } );
            }, null, value, arguments.length > 1, null, true );
        },
    
        removeData: function( key ) {
            return this.each( function() {
                dataUser.remove( this, key );
            } );
        }
    } );
    
    
    jQuery.extend( {
        queue: function( elem, type, data ) {
            var queue;
    
            if ( elem ) {
                type = ( type || "fx" ) + "queue";
                queue = dataPriv.get( elem, type );
    
                // Speed up dequeue by getting out quickly if this is just a lookup
                if ( data ) {
                    if ( !queue || Array.isArray( data ) ) {
                        queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
                    } else {
                        queue.push( data );
                    }
                }
                return queue || [];
            }
        },
    
        dequeue: function( elem, type ) {
            type = type || "fx";
    
            var queue = jQuery.queue( elem, type ),
                startLength = queue.length,
                fn = queue.shift(),
                hooks = jQuery._queueHooks( elem, type ),
                next = function() {
                    jQuery.dequeue( elem, type );
                };
    
            // If the fx queue is dequeued, always remove the progress sentinel
            if ( fn === "inprogress" ) {
                fn = queue.shift();
                startLength--;
            }
    
            if ( fn ) {
    
                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if ( type === "fx" ) {
                    queue.unshift( "inprogress" );
                }
    
                // Clear up the last queue stop function
                delete hooks.stop;
                fn.call( elem, next, hooks );
            }
    
            if ( !startLength && hooks ) {
                hooks.empty.fire();
            }
        },
    
        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function( elem, type ) {
            var key = type + "queueHooks";
            return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
                empty: jQuery.Callbacks( "once memory" ).add( function() {
                    dataPriv.remove( elem, [ type + "queue", key ] );
                } )
            } );
        }
    } );
    
    jQuery.fn.extend( {
        queue: function( type, data ) {
            var setter = 2;
    
            if ( typeof type !== "string" ) {
                data = type;
                type = "fx";
                setter--;
            }
    
            if ( arguments.length < setter ) {
                return jQuery.queue( this[ 0 ], type );
            }
    
            return data === undefined ?
                this :
                this.each( function() {
                    var queue = jQuery.queue( this, type, data );
    
                    // Ensure a hooks for this queue
                    jQuery._queueHooks( this, type );
    
                    if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
                        jQuery.dequeue( this, type );
                    }
                } );
        },
        dequeue: function( type ) {
            return this.each( function() {
                jQuery.dequeue( this, type );
            } );
        },
        clearQueue: function( type ) {
            return this.queue( type || "fx", [] );
        },
    
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function( type, obj ) {
            var tmp,
                count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function() {
                    if ( !( --count ) ) {
                        defer.resolveWith( elements, [ elements ] );
                    }
                };
    
            if ( typeof type !== "string" ) {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
    
            while ( i-- ) {
                tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
                if ( tmp && tmp.empty ) {
                    count++;
                    tmp.empty.add( resolve );
                }
            }
            resolve();
            return defer.promise( obj );
        }
    } );
    var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
    
    var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
    
    
    var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
    
    var documentElement = document.documentElement;
    
    
    
        var isAttached = function( elem ) {
                return jQuery.contains( elem.ownerDocument, elem );
            },
            composed = { composed: true };
    
        // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
        // Check attachment across shadow DOM boundaries when possible (gh-3504)
        // Support: iOS 10.0-10.2 only
        // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
        // leading to errors. We need to check for `getRootNode`.
        if ( documentElement.getRootNode ) {
            isAttached = function( elem ) {
                return jQuery.contains( elem.ownerDocument, elem ) ||
                    elem.getRootNode( composed ) === elem.ownerDocument;
            };
        }
    var isHiddenWithinTree = function( elem, el ) {
    
            // isHiddenWithinTree might be called from jQuery#filter function;
            // in that case, element will be second argument
            elem = el || elem;
    
            // Inline style trumps all
            return elem.style.display === "none" ||
                elem.style.display === "" &&
    
                // Otherwise, check computed style
                // Support: Firefox <=43 - 45
                // Disconnected elements can have computed display: none, so first confirm that elem is
                // in the document.
                isAttached( elem ) &&
    
                jQuery.css( elem, "display" ) === "none";
        };
    
    
    
    function adjustCSS( elem, prop, valueParts, tween ) {
        var adjusted, scale,
            maxIterations = 20,
            currentValue = tween ?
                function() {
                    return tween.cur();
                } :
                function() {
                    return jQuery.css( elem, prop, "" );
                },
            initial = currentValue(),
            unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
    
            // Starting value computation is required for potential unit mismatches
            initialInUnit = elem.nodeType &&
                ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
                rcssNum.exec( jQuery.css( elem, prop ) );
    
        if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
    
            // Support: Firefox <=54
            // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
            initial = initial / 2;
    
            // Trust units reported by jQuery.css
            unit = unit || initialInUnit[ 3 ];
    
            // Iteratively approximate from a nonzero starting point
            initialInUnit = +initial || 1;
    
            while ( maxIterations-- ) {
    
                // Evaluate and update our best guess (doubling guesses that zero out).
                // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
                jQuery.style( elem, prop, initialInUnit + unit );
                if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
                    maxIterations = 0;
                }
                initialInUnit = initialInUnit / scale;
    
            }
    
            initialInUnit = initialInUnit * 2;
            jQuery.style( elem, prop, initialInUnit + unit );
    
            // Make sure we update the tween properties later on
            valueParts = valueParts || [];
        }
    
        if ( valueParts ) {
            initialInUnit = +initialInUnit || +initial || 0;
    
            // Apply relative offset (+=/-=) if specified
            adjusted = valueParts[ 1 ] ?
                initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
                +valueParts[ 2 ];
            if ( tween ) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }
        return adjusted;
    }
    
    
    var defaultDisplayMap = {};
    
    function getDefaultDisplay( elem ) {
        var temp,
            doc = elem.ownerDocument,
            nodeName = elem.nodeName,
            display = defaultDisplayMap[ nodeName ];
    
        if ( display ) {
            return display;
        }
    
        temp = doc.body.appendChild( doc.createElement( nodeName ) );
        display = jQuery.css( temp, "display" );
    
        temp.parentNode.removeChild( temp );
    
        if ( display === "none" ) {
            display = "block";
        }
        defaultDisplayMap[ nodeName ] = display;
    
        return display;
    }
    
    function showHide( elements, show ) {
        var display, elem,
            values = [],
            index = 0,
            length = elements.length;
    
        // Determine new display value for elements that need to change
        for ( ; index < length; index++ ) {
            elem = elements[ index ];
            if ( !elem.style ) {
                continue;
            }
    
            display = elem.style.display;
            if ( show ) {
    
                // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
                // check is required in this first loop unless we have a nonempty display value (either
                // inline or about-to-be-restored)
                if ( display === "none" ) {
                    values[ index ] = dataPriv.get( elem, "display" ) || null;
                    if ( !values[ index ] ) {
                        elem.style.display = "";
                    }
                }
                if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
                    values[ index ] = getDefaultDisplay( elem );
                }
            } else {
                if ( display !== "none" ) {
                    values[ index ] = "none";
    
                    // Remember what we're overwriting
                    dataPriv.set( elem, "display", display );
                }
            }
        }
    
        // Set the display of the elements in a second loop to avoid constant reflow
        for ( index = 0; index < length; index++ ) {
            if ( values[ index ] != null ) {
                elements[ index ].style.display = values[ index ];
            }
        }
    
        return elements;
    }
    
    jQuery.fn.extend( {
        show: function() {
            return showHide( this, true );
        },
        hide: function() {
            return showHide( this );
        },
        toggle: function( state ) {
            if ( typeof state === "boolean" ) {
                return state ? this.show() : this.hide();
            }
    
            return this.each( function() {
                if ( isHiddenWithinTree( this ) ) {
                    jQuery( this ).show();
                } else {
                    jQuery( this ).hide();
                }
            } );
        }
    } );
    var rcheckableType = ( /^(?:checkbox|radio)$/i );
    
    var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );
    
    var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );
    
    
    
    ( function() {
        var fragment = document.createDocumentFragment(),
            div = fragment.appendChild( document.createElement( "div" ) ),
            input = document.createElement( "input" );
    
        // Support: Android 4.0 - 4.3 only
        // Check state lost if the name is set (trac-11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (trac-14901)
        input.setAttribute( "type", "radio" );
        input.setAttribute( "checked", "checked" );
        input.setAttribute( "name", "t" );
    
        div.appendChild( input );
    
        // Support: Android <=4.1 only
        // Older WebKit doesn't clone checked state correctly in fragments
        support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
    
        // Support: IE <=11 only
        // Make sure textarea (and checkbox) defaultValue is properly cloned
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
    
        // Support: IE <=9 only
        // IE <=9 replaces <option> tags with their contents when inserted outside of
        // the select element.
        div.innerHTML = "<option></option>";
        support.option = !!div.lastChild;
    } )();
    
    
    // We have to close these tags to support XHTML (trac-13200)
    var wrapMap = {
    
        // XHTML parsers do not magically insert elements in the
        // same way that tag soup parsers do. So we cannot shorten
        // this by omitting <tbody> or other required elements.
        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
    
        _default: [ 0, "", "" ]
    };
    
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    
    // Support: IE <=9 only
    if ( !support.option ) {
        wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
    }
    
    
    function getAll( context, tag ) {
    
        // Support: IE <=9 - 11 only
        // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
        var ret;
    
        if ( typeof context.getElementsByTagName !== "undefined" ) {
            ret = context.getElementsByTagName( tag || "*" );
    
        } else if ( typeof context.querySelectorAll !== "undefined" ) {
            ret = context.querySelectorAll( tag || "*" );
    
        } else {
            ret = [];
        }
    
        if ( tag === undefined || tag && nodeName( context, tag ) ) {
            return jQuery.merge( [ context ], ret );
        }
    
        return ret;
    }
    
    
    // Mark scripts as having already been evaluated
    function setGlobalEval( elems, refElements ) {
        var i = 0,
            l = elems.length;
    
        for ( ; i < l; i++ ) {
            dataPriv.set(
                elems[ i ],
                "globalEval",
                !refElements || dataPriv.get( refElements[ i ], "globalEval" )
            );
        }
    }
    
    
    var rhtml = /<|&#?\w+;/;
    
    function buildFragment( elems, context, scripts, selection, ignored ) {
        var elem, tmp, tag, wrap, attached, j,
            fragment = context.createDocumentFragment(),
            nodes = [],
            i = 0,
            l = elems.length;
    
        for ( ; i < l; i++ ) {
            elem = elems[ i ];
    
            if ( elem || elem === 0 ) {
    
                // Add nodes directly
                if ( toType( elem ) === "object" ) {
    
                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
    
                // Convert non-html into a text node
                } else if ( !rhtml.test( elem ) ) {
                    nodes.push( context.createTextNode( elem ) );
    
                // Convert html into DOM nodes
                } else {
                    tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
    
                    // Deserialize a standard representation
                    tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
                    wrap = wrapMap[ tag ] || wrapMap._default;
                    tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
    
                    // Descend through wrappers to the right content
                    j = wrap[ 0 ];
                    while ( j-- ) {
                        tmp = tmp.lastChild;
                    }
    
                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge( nodes, tmp.childNodes );
    
                    // Remember the top-level container
                    tmp = fragment.firstChild;
    
                    // Ensure the created nodes are orphaned (trac-12392)
                    tmp.textContent = "";
                }
            }
        }
    
        // Remove wrapper from fragment
        fragment.textContent = "";
    
        i = 0;
        while ( ( elem = nodes[ i++ ] ) ) {
    
            // Skip elements already in the context collection (trac-4087)
            if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
                if ( ignored ) {
                    ignored.push( elem );
                }
                continue;
            }
    
            attached = isAttached( elem );
    
            // Append to fragment
            tmp = getAll( fragment.appendChild( elem ), "script" );
    
            // Preserve script evaluation history
            if ( attached ) {
                setGlobalEval( tmp );
            }
    
            // Capture executables
            if ( scripts ) {
                j = 0;
                while ( ( elem = tmp[ j++ ] ) ) {
                    if ( rscriptType.test( elem.type || "" ) ) {
                        scripts.push( elem );
                    }
                }
            }
        }
    
        return fragment;
    }
    
    
    var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
    
    function returnTrue() {
        return true;
    }
    
    function returnFalse() {
        return false;
    }
    
    function on( elem, types, selector, data, fn, one ) {
        var origFn, type;
    
        // Types can be a map of types/handlers
        if ( typeof types === "object" ) {
    
            // ( types-Object, selector, data )
            if ( typeof selector !== "string" ) {
    
                // ( types-Object, data )
                data = data || selector;
                selector = undefined;
            }
            for ( type in types ) {
                on( elem, type, selector, data, types[ type ], one );
            }
            return elem;
        }
    
        if ( data == null && fn == null ) {
    
            // ( types, fn )
            fn = selector;
            data = selector = undefined;
        } else if ( fn == null ) {
            if ( typeof selector === "string" ) {
    
                // ( types, selector, fn )
                fn = data;
                data = undefined;
            } else {
    
                // ( types, data, fn )
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if ( fn === false ) {
            fn = returnFalse;
        } else if ( !fn ) {
            return elem;
        }
    
        if ( one === 1 ) {
            origFn = fn;
            fn = function( event ) {
    
                // Can use an empty set, since event contains the info
                jQuery().off( event );
                return origFn.apply( this, arguments );
            };
    
            // Use same guid so caller can remove using origFn
            fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
        }
        return elem.each( function() {
            jQuery.event.add( this, types, fn, data, selector );
        } );
    }
    
    /*
     * Helper functions for managing events -- not part of the public interface.
     * Props to Dean Edwards' addEvent library for many of the ideas.
     */
    jQuery.event = {
    
        global: {},
    
        add: function( elem, types, handler, data, selector ) {
    
            var handleObjIn, eventHandle, tmp,
                events, t, handleObj,
                special, handlers, type, namespaces, origType,
                elemData = dataPriv.get( elem );
    
            // Only attach events to objects that accept data
            if ( !acceptData( elem ) ) {
                return;
            }
    
            // Caller can pass in an object of custom data in lieu of the handler
            if ( handler.handler ) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
    
            // Ensure that invalid selectors throw exceptions at attach time
            // Evaluate against documentElement in case elem is a non-element node (e.g., document)
            if ( selector ) {
                jQuery.find.matchesSelector( documentElement, selector );
            }
    
            // Make sure that the handler has a unique ID, used to find/remove it later
            if ( !handler.guid ) {
                handler.guid = jQuery.guid++;
            }
    
            // Init the element's event structure and main handler, if this is the first
            if ( !( events = elemData.events ) ) {
                events = elemData.events = Object.create( null );
            }
            if ( !( eventHandle = elemData.handle ) ) {
                eventHandle = elemData.handle = function( e ) {
    
                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
                        jQuery.event.dispatch.apply( elem, arguments ) : undefined;
                };
            }
    
            // Handle multiple events separated by a space
            types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
            t = types.length;
            while ( t-- ) {
                tmp = rtypenamespace.exec( types[ t ] ) || [];
                type = origType = tmp[ 1 ];
                namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
    
                // There *must* be a type, no attaching namespace-only handlers
                if ( !type ) {
                    continue;
                }
    
                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[ type ] || {};
    
                // If selector defined, determine special event api type, otherwise given type
                type = ( selector ? special.delegateType : special.bindType ) || type;
    
                // Update special based on newly reset type
                special = jQuery.event.special[ type ] || {};
    
                // handleObj is passed to all event handlers
                handleObj = jQuery.extend( {
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
                    namespace: namespaces.join( "." )
                }, handleObjIn );
    
                // Init the event handler queue if we're the first
                if ( !( handlers = events[ type ] ) ) {
                    handlers = events[ type ] = [];
                    handlers.delegateCount = 0;
    
                    // Only use addEventListener if the special events handler returns false
                    if ( !special.setup ||
                        special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
    
                        if ( elem.addEventListener ) {
                            elem.addEventListener( type, eventHandle );
                        }
                    }
                }
    
                if ( special.add ) {
                    special.add.call( elem, handleObj );
    
                    if ( !handleObj.handler.guid ) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
    
                // Add to the element's handler list, delegates in front
                if ( selector ) {
                    handlers.splice( handlers.delegateCount++, 0, handleObj );
                } else {
                    handlers.push( handleObj );
                }
    
                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[ type ] = true;
            }
    
        },
    
        // Detach an event or set of events from an element
        remove: function( elem, types, handler, selector, mappedTypes ) {
    
            var j, origCount, tmp,
                events, t, handleObj,
                special, handlers, type, namespaces, origType,
                elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
    
            if ( !elemData || !( events = elemData.events ) ) {
                return;
            }
    
            // Once for each type.namespace in types; type may be omitted
            types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
            t = types.length;
            while ( t-- ) {
                tmp = rtypenamespace.exec( types[ t ] ) || [];
                type = origType = tmp[ 1 ];
                namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
    
                // Unbind all events (on this namespace, if provided) for the element
                if ( !type ) {
                    for ( type in events ) {
                        jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
                    }
                    continue;
                }
    
                special = jQuery.event.special[ type ] || {};
                type = ( selector ? special.delegateType : special.bindType ) || type;
                handlers = events[ type ] || [];
                tmp = tmp[ 2 ] &&
                    new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
    
                // Remove matching events
                origCount = j = handlers.length;
                while ( j-- ) {
                    handleObj = handlers[ j ];
    
                    if ( ( mappedTypes || origType === handleObj.origType ) &&
                        ( !handler || handler.guid === handleObj.guid ) &&
                        ( !tmp || tmp.test( handleObj.namespace ) ) &&
                        ( !selector || selector === handleObj.selector ||
                            selector === "**" && handleObj.selector ) ) {
                        handlers.splice( j, 1 );
    
                        if ( handleObj.selector ) {
                            handlers.delegateCount--;
                        }
                        if ( special.remove ) {
                            special.remove.call( elem, handleObj );
                        }
                    }
                }
    
                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if ( origCount && !handlers.length ) {
                    if ( !special.teardown ||
                        special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
    
                        jQuery.removeEvent( elem, type, elemData.handle );
                    }
    
                    delete events[ type ];
                }
            }
    
            // Remove data and the expando if it's no longer used
            if ( jQuery.isEmptyObject( events ) ) {
                dataPriv.remove( elem, "handle events" );
            }
        },
    
        dispatch: function( nativeEvent ) {
    
            var i, j, ret, matched, handleObj, handlerQueue,
                args = new Array( arguments.length ),
    
                // Make a writable jQuery.Event from the native event object
                event = jQuery.event.fix( nativeEvent ),
    
                handlers = (
                    dataPriv.get( this, "events" ) || Object.create( null )
                )[ event.type ] || [],
                special = jQuery.event.special[ event.type ] || {};
    
            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[ 0 ] = event;
    
            for ( i = 1; i < arguments.length; i++ ) {
                args[ i ] = arguments[ i ];
            }
    
            event.delegateTarget = this;
    
            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
                return;
            }
    
            // Determine handlers
            handlerQueue = jQuery.event.handlers.call( this, event, handlers );
    
            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
                event.currentTarget = matched.elem;
    
                j = 0;
                while ( ( handleObj = matched.handlers[ j++ ] ) &&
                    !event.isImmediatePropagationStopped() ) {
    
                    // If the event is namespaced, then each handler is only invoked if it is
                    // specially universal or its namespaces are a superset of the event's.
                    if ( !event.rnamespace || handleObj.namespace === false ||
                        event.rnamespace.test( handleObj.namespace ) ) {
    
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
    
                        ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
                            handleObj.handler ).apply( matched.elem, args );
    
                        if ( ret !== undefined ) {
                            if ( ( event.result = ret ) === false ) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
    
            // Call the postDispatch hook for the mapped type
            if ( special.postDispatch ) {
                special.postDispatch.call( this, event );
            }
    
            return event.result;
        },
    
        handlers: function( event, handlers ) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors,
                handlerQueue = [],
                delegateCount = handlers.delegateCount,
                cur = event.target;
    
            // Find delegate handlers
            if ( delegateCount &&
    
                // Support: IE <=9
                // Black-hole SVG <use> instance trees (trac-13180)
                cur.nodeType &&
    
                // Support: Firefox <=42
                // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
                // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
                // Support: IE 11 only
                // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
                !( event.type === "click" && event.button >= 1 ) ) {
    
                for ( ; cur !== this; cur = cur.parentNode || this ) {
    
                    // Don't check non-elements (trac-13208)
                    // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
                    if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
                        matchedHandlers = [];
                        matchedSelectors = {};
                        for ( i = 0; i < delegateCount; i++ ) {
                            handleObj = handlers[ i ];
    
                            // Don't conflict with Object.prototype properties (trac-13203)
                            sel = handleObj.selector + " ";
    
                            if ( matchedSelectors[ sel ] === undefined ) {
                                matchedSelectors[ sel ] = handleObj.needsContext ?
                                    jQuery( sel, this ).index( cur ) > -1 :
                                    jQuery.find( sel, this, null, [ cur ] ).length;
                            }
                            if ( matchedSelectors[ sel ] ) {
                                matchedHandlers.push( handleObj );
                            }
                        }
                        if ( matchedHandlers.length ) {
                            handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
                        }
                    }
                }
            }
    
            // Add the remaining (directly-bound) handlers
            cur = this;
            if ( delegateCount < handlers.length ) {
                handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
            }
    
            return handlerQueue;
        },
    
        addProp: function( name, hook ) {
            Object.defineProperty( jQuery.Event.prototype, name, {
                enumerable: true,
                configurable: true,
    
                get: isFunction( hook ) ?
                    function() {
                        if ( this.originalEvent ) {
                            return hook( this.originalEvent );
                        }
                    } :
                    function() {
                        if ( this.originalEvent ) {
                            return this.originalEvent[ name ];
                        }
                    },
    
                set: function( value ) {
                    Object.defineProperty( this, name, {
                        enumerable: true,
                        configurable: true,
                        writable: true,
                        value: value
                    } );
                }
            } );
        },
    
        fix: function( originalEvent ) {
            return originalEvent[ jQuery.expando ] ?
                originalEvent :
                new jQuery.Event( originalEvent );
        },
    
        special: {
            load: {
    
                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            click: {
    
                // Utilize native event to ensure correct state for checkable inputs
                setup: function( data ) {
    
                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;
    
                    // Claim the first handler
                    if ( rcheckableType.test( el.type ) &&
                        el.click && nodeName( el, "input" ) ) {
    
                        // dataPriv.set( el, "click", ... )
                        leverageNative( el, "click", true );
                    }
    
                    // Return false to allow normal processing in the caller
                    return false;
                },
                trigger: function( data ) {
    
                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;
    
                    // Force setup before triggering a click
                    if ( rcheckableType.test( el.type ) &&
                        el.click && nodeName( el, "input" ) ) {
    
                        leverageNative( el, "click" );
                    }
    
                    // Return non-false to allow normal event-path propagation
                    return true;
                },
    
                // For cross-browser consistency, suppress native .click() on links
                // Also prevent it if we're currently inside a leveraged native-event stack
                _default: function( event ) {
                    var target = event.target;
                    return rcheckableType.test( target.type ) &&
                        target.click && nodeName( target, "input" ) &&
                        dataPriv.get( target, "click" ) ||
                        nodeName( target, "a" );
                }
            },
    
            beforeunload: {
                postDispatch: function( event ) {
    
                    // Support: Firefox 20+
                    // Firefox doesn't alert if the returnValue field is not set.
                    if ( event.result !== undefined && event.originalEvent ) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        }
    };
    
    // Ensure the presence of an event listener that handles manually-triggered
    // synthetic events by interrupting progress until reinvoked in response to
    // *native* events that it fires directly, ensuring that state changes have
    // already occurred before other listeners are invoked.
    function leverageNative( el, type, isSetup ) {
    
        // Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add
        if ( !isSetup ) {
            if ( dataPriv.get( el, type ) === undefined ) {
                jQuery.event.add( el, type, returnTrue );
            }
            return;
        }
    
        // Register the controller as a special universal handler for all event namespaces
        dataPriv.set( el, type, false );
        jQuery.event.add( el, type, {
            namespace: false,
            handler: function( event ) {
                var result,
                    saved = dataPriv.get( this, type );
    
                if ( ( event.isTrigger & 1 ) && this[ type ] ) {
    
                    // Interrupt processing of the outer synthetic .trigger()ed event
                    if ( !saved ) {
    
                        // Store arguments for use when handling the inner native event
                        // There will always be at least one argument (an event object), so this array
                        // will not be confused with a leftover capture object.
                        saved = slice.call( arguments );
                        dataPriv.set( this, type, saved );
    
                        // Trigger the native event and capture its result
                        this[ type ]();
                        result = dataPriv.get( this, type );
                        dataPriv.set( this, type, false );
    
                        if ( saved !== result ) {
    
                            // Cancel the outer synthetic event
                            event.stopImmediatePropagation();
                            event.preventDefault();
    
                            return result;
                        }
    
                    // If this is an inner synthetic event for an event with a bubbling surrogate
                    // (focus or blur), assume that the surrogate already propagated from triggering
                    // the native event and prevent that from happening again here.
                    // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
                    // bubbling surrogate propagates *after* the non-bubbling base), but that seems
                    // less bad than duplication.
                    } else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
                        event.stopPropagation();
                    }
    
                // If this is a native event triggered above, everything is now in order
                // Fire an inner synthetic event with the original arguments
                } else if ( saved ) {
    
                    // ...and capture the result
                    dataPriv.set( this, type, jQuery.event.trigger(
                        saved[ 0 ],
                        saved.slice( 1 ),
                        this
                    ) );
    
                    // Abort handling of the native event by all jQuery handlers while allowing
                    // native handlers on the same element to run. On target, this is achieved
                    // by stopping immediate propagation just on the jQuery event. However,
                    // the native event is re-wrapped by a jQuery one on each level of the
                    // propagation so the only way to stop it for jQuery is to stop it for
                    // everyone via native `stopPropagation()`. This is not a problem for
                    // focus/blur which don't bubble, but it does also stop click on checkboxes
                    // and radios. We accept this limitation.
                    event.stopPropagation();
                    event.isImmediatePropagationStopped = returnTrue;
                }
            }
        } );
    }
    
    jQuery.removeEvent = function( elem, type, handle ) {
    
        // This "if" is needed for plain objects
        if ( elem.removeEventListener ) {
            elem.removeEventListener( type, handle );
        }
    };
    
    jQuery.Event = function( src, props ) {
    
        // Allow instantiation without the 'new' keyword
        if ( !( this instanceof jQuery.Event ) ) {
            return new jQuery.Event( src, props );
        }
    
        // Event object
        if ( src && src.type ) {
            this.originalEvent = src;
            this.type = src.type;
    
            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = src.defaultPrevented ||
                    src.defaultPrevented === undefined &&
    
                    // Support: Android <=2.3 only
                    src.returnValue === false ?
                returnTrue :
                returnFalse;
    
            // Create target properties
            // Support: Safari <=6 - 7 only
            // Target should not be a text node (trac-504, trac-13143)
            this.target = ( src.target && src.target.nodeType === 3 ) ?
                src.target.parentNode :
                src.target;
    
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
    
        // Event type
        } else {
            this.type = src;
        }
    
        // Put explicitly provided properties onto the event object
        if ( props ) {
            jQuery.extend( this, props );
        }
    
        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || Date.now();
    
        // Mark it as fixed
        this[ jQuery.expando ] = true;
    };
    
    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
    
        preventDefault: function() {
            var e = this.originalEvent;
    
            this.isDefaultPrevented = returnTrue;
    
            if ( e && !this.isSimulated ) {
                e.preventDefault();
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;
    
            this.isPropagationStopped = returnTrue;
    
            if ( e && !this.isSimulated ) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
    
            this.isImmediatePropagationStopped = returnTrue;
    
            if ( e && !this.isSimulated ) {
                e.stopImmediatePropagation();
            }
    
            this.stopPropagation();
        }
    };
    
    // Includes all common event props including KeyEvent and MouseEvent specific props
    jQuery.each( {
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        "char": true,
        code: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: true
    }, jQuery.event.addProp );
    
    jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
    
        function focusMappedHandler( nativeEvent ) {
            if ( document.documentMode ) {
    
                // Support: IE 11+
                // Attach a single focusin/focusout handler on the document while someone wants
                // focus/blur. This is because the former are synchronous in IE while the latter
                // are async. In other browsers, all those handlers are invoked synchronously.
    
                // `handle` from private data would already wrap the event, but we need
                // to change the `type` here.
                var handle = dataPriv.get( this, "handle" ),
                    event = jQuery.event.fix( nativeEvent );
                event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
                event.isSimulated = true;
    
                // First, handle focusin/focusout
                handle( nativeEvent );
    
                // ...then, handle focus/blur
                //
                // focus/blur don't bubble while focusin/focusout do; simulate the former by only
                // invoking the handler at the lower level.
                if ( event.target === event.currentTarget ) {
    
                    // The setup part calls `leverageNative`, which, in turn, calls
                    // `jQuery.event.add`, so event handle will already have been set
                    // by this point.
                    handle( event );
                }
            } else {
    
                // For non-IE browsers, attach a single capturing handler on the document
                // while someone wants focusin/focusout.
                jQuery.event.simulate( delegateType, nativeEvent.target,
                    jQuery.event.fix( nativeEvent ) );
            }
        }
    
        jQuery.event.special[ type ] = {
    
            // Utilize native event if possible so blur/focus sequence is correct
            setup: function() {
    
                var attaches;
    
                // Claim the first handler
                // dataPriv.set( this, "focus", ... )
                // dataPriv.set( this, "blur", ... )
                leverageNative( this, type, true );
    
                if ( document.documentMode ) {
    
                    // Support: IE 9 - 11+
                    // We use the same native handler for focusin & focus (and focusout & blur)
                    // so we need to coordinate setup & teardown parts between those events.
                    // Use `delegateType` as the key as `type` is already used by `leverageNative`.
                    attaches = dataPriv.get( this, delegateType );
                    if ( !attaches ) {
                        this.addEventListener( delegateType, focusMappedHandler );
                    }
                    dataPriv.set( this, delegateType, ( attaches || 0 ) + 1 );
                } else {
    
                    // Return false to allow normal processing in the caller
                    return false;
                }
            },
            trigger: function() {
    
                // Force setup before trigger
                leverageNative( this, type );
    
                // Return non-false to allow normal event-path propagation
                return true;
            },
    
            teardown: function() {
                var attaches;
    
                if ( document.documentMode ) {
                    attaches = dataPriv.get( this, delegateType ) - 1;
                    if ( !attaches ) {
                        this.removeEventListener( delegateType, focusMappedHandler );
                        dataPriv.remove( this, delegateType );
                    } else {
                        dataPriv.set( this, delegateType, attaches );
                    }
                } else {
    
                    // Return false to indicate standard teardown should be applied
                    return false;
                }
            },
    
            // Suppress native focus or blur if we're currently inside
            // a leveraged native-event stack
            _default: function( event ) {
                return dataPriv.get( event.target, type );
            },
    
            delegateType: delegateType
        };
    
        // Support: Firefox <=44
        // Firefox doesn't have focus(in | out) events
        // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
        //
        // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
        // focus(in | out) events fire after focus & blur events,
        // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
        // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
        //
        // Support: IE 9 - 11+
        // To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,
        // attach a single handler for both events in IE.
        jQuery.event.special[ delegateType ] = {
            setup: function() {
    
                // Handle: regular nodes (via `this.ownerDocument`), window
                // (via `this.document`) & document (via `this`).
                var doc = this.ownerDocument || this.document || this,
                    dataHolder = document.documentMode ? this : doc,
                    attaches = dataPriv.get( dataHolder, delegateType );
    
                // Support: IE 9 - 11+
                // We use the same native handler for focusin & focus (and focusout & blur)
                // so we need to coordinate setup & teardown parts between those events.
                // Use `delegateType` as the key as `type` is already used by `leverageNative`.
                if ( !attaches ) {
                    if ( document.documentMode ) {
                        this.addEventListener( delegateType, focusMappedHandler );
                    } else {
                        doc.addEventListener( type, focusMappedHandler, true );
                    }
                }
                dataPriv.set( dataHolder, delegateType, ( attaches || 0 ) + 1 );
            },
            teardown: function() {
                var doc = this.ownerDocument || this.document || this,
                    dataHolder = document.documentMode ? this : doc,
                    attaches = dataPriv.get( dataHolder, delegateType ) - 1;
    
                if ( !attaches ) {
                    if ( document.documentMode ) {
                        this.removeEventListener( delegateType, focusMappedHandler );
                    } else {
                        doc.removeEventListener( type, focusMappedHandler, true );
                    }
                    dataPriv.remove( dataHolder, delegateType );
                } else {
                    dataPriv.set( dataHolder, delegateType, attaches );
                }
            }
        };
    } );
    
    // Create mouseenter/leave events using mouseover/out and event-time checks
    // so that event delegation works in jQuery.
    // Do the same for pointerenter/pointerleave and pointerover/pointerout
    //
    // Support: Safari 7 only
    // Safari sends mouseenter too often; see:
    // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
    // for the description of the bug (it existed in older Chrome versions as well).
    jQuery.each( {
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function( orig, fix ) {
        jQuery.event.special[ orig ] = {
            delegateType: fix,
            bindType: fix,
    
            handle: function( event ) {
                var ret,
                    target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj;
    
                // For mouseenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply( this, arguments );
                    event.type = fix;
                }
                return ret;
            }
        };
    } );
    
    jQuery.fn.extend( {
    
        on: function( types, selector, data, fn ) {
            return on( this, types, selector, data, fn );
        },
        one: function( types, selector, data, fn ) {
            return on( this, types, selector, data, fn, 1 );
        },
        off: function( types, selector, fn ) {
            var handleObj, type;
            if ( types && types.preventDefault && types.handleObj ) {
    
                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery( types.delegateTarget ).off(
                    handleObj.namespace ?
                        handleObj.origType + "." + handleObj.namespace :
                        handleObj.origType,
                    handleObj.selector,
                    handleObj.handler
                );
                return this;
            }
            if ( typeof types === "object" ) {
    
                // ( types-object [, selector] )
                for ( type in types ) {
                    this.off( type, selector, types[ type ] );
                }
                return this;
            }
            if ( selector === false || typeof selector === "function" ) {
    
                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if ( fn === false ) {
                fn = returnFalse;
            }
            return this.each( function() {
                jQuery.event.remove( this, types, fn, selector );
            } );
        }
    } );
    
    
    var
    
        // Support: IE <=10 - 11, Edge 12 - 13 only
        // In IE/Edge using regex groups here causes severe slowdowns.
        // See https://connect.microsoft.com/IE/feedback/details/1736512/
        rnoInnerhtml = /<script|<style|<link/i,
    
        // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    
        rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;
    
    // Prefer a tbody over its parent table for containing new rows
    function manipulationTarget( elem, content ) {
        if ( nodeName( elem, "table" ) &&
            nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {
    
            return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
        }
    
        return elem;
    }
    
    // Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript( elem ) {
        elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
        return elem;
    }
    function restoreScript( elem ) {
        if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
            elem.type = elem.type.slice( 5 );
        } else {
            elem.removeAttribute( "type" );
        }
    
        return elem;
    }
    
    function cloneCopyEvent( src, dest ) {
        var i, l, type, pdataOld, udataOld, udataCur, events;
    
        if ( dest.nodeType !== 1 ) {
            return;
        }
    
        // 1. Copy private data: events, handlers, etc.
        if ( dataPriv.hasData( src ) ) {
            pdataOld = dataPriv.get( src );
            events = pdataOld.events;
    
            if ( events ) {
                dataPriv.remove( dest, "handle events" );
    
                for ( type in events ) {
                    for ( i = 0, l = events[ type ].length; i < l; i++ ) {
                        jQuery.event.add( dest, type, events[ type ][ i ] );
                    }
                }
            }
        }
    
        // 2. Copy user data
        if ( dataUser.hasData( src ) ) {
            udataOld = dataUser.access( src );
            udataCur = jQuery.extend( {}, udataOld );
    
            dataUser.set( dest, udataCur );
        }
    }
    
    // Fix IE bugs, see support tests
    function fixInput( src, dest ) {
        var nodeName = dest.nodeName.toLowerCase();
    
        // Fails to persist the checked state of a cloned checkbox or radio button.
        if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
            dest.checked = src.checked;
    
        // Fails to return the selected option to the default selected state when cloning options
        } else if ( nodeName === "input" || nodeName === "textarea" ) {
            dest.defaultValue = src.defaultValue;
        }
    }
    
    function domManip( collection, args, callback, ignored ) {
    
        // Flatten any nested arrays
        args = flat( args );
    
        var fragment, first, scripts, hasScripts, node, doc,
            i = 0,
            l = collection.length,
            iNoClone = l - 1,
            value = args[ 0 ],
            valueIsFunction = isFunction( value );
    
        // We can't cloneNode fragments that contain checked, in WebKit
        if ( valueIsFunction ||
                ( l > 1 && typeof value === "string" &&
                    !support.checkClone && rchecked.test( value ) ) ) {
            return collection.each( function( index ) {
                var self = collection.eq( index );
                if ( valueIsFunction ) {
                    args[ 0 ] = value.call( this, index, self.html() );
                }
                domManip( self, args, callback, ignored );
            } );
        }
    
        if ( l ) {
            fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
            first = fragment.firstChild;
    
            if ( fragment.childNodes.length === 1 ) {
                fragment = first;
            }
    
            // Require either new content or an interest in ignored elements to invoke the callback
            if ( first || ignored ) {
                scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
                hasScripts = scripts.length;
    
                // Use the original fragment for the last item
                // instead of the first because it can end up
                // being emptied incorrectly in certain situations (trac-8070).
                for ( ; i < l; i++ ) {
                    node = fragment;
    
                    if ( i !== iNoClone ) {
                        node = jQuery.clone( node, true, true );
    
                        // Keep references to cloned scripts for later restoration
                        if ( hasScripts ) {
    
                            // Support: Android <=4.0 only, PhantomJS 1 only
                            // push.apply(_, arraylike) throws on ancient WebKit
                            jQuery.merge( scripts, getAll( node, "script" ) );
                        }
                    }
    
                    callback.call( collection[ i ], node, i );
                }
    
                if ( hasScripts ) {
                    doc = scripts[ scripts.length - 1 ].ownerDocument;
    
                    // Re-enable scripts
                    jQuery.map( scripts, restoreScript );
    
                    // Evaluate executable scripts on first document insertion
                    for ( i = 0; i < hasScripts; i++ ) {
                        node = scripts[ i ];
                        if ( rscriptType.test( node.type || "" ) &&
                            !dataPriv.access( node, "globalEval" ) &&
                            jQuery.contains( doc, node ) ) {
    
                            if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {
    
                                // Optional AJAX dependency, but won't run scripts if not present
                                if ( jQuery._evalUrl && !node.noModule ) {
                                    jQuery._evalUrl( node.src, {
                                        nonce: node.nonce || node.getAttribute( "nonce" )
                                    }, doc );
                                }
                            } else {
    
                                // Unwrap a CDATA section containing script contents. This shouldn't be
                                // needed as in XML documents they're already not visible when
                                // inspecting element contents and in HTML documents they have no
                                // meaning but we're preserving that logic for backwards compatibility.
                                // This will be removed completely in 4.0. See gh-4904.
                                DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
                            }
                        }
                    }
                }
            }
        }
    
        return collection;
    }
    
    function remove( elem, selector, keepData ) {
        var node,
            nodes = selector ? jQuery.filter( selector, elem ) : elem,
            i = 0;
    
        for ( ; ( node = nodes[ i ] ) != null; i++ ) {
            if ( !keepData && node.nodeType === 1 ) {
                jQuery.cleanData( getAll( node ) );
            }
    
            if ( node.parentNode ) {
                if ( keepData && isAttached( node ) ) {
                    setGlobalEval( getAll( node, "script" ) );
                }
                node.parentNode.removeChild( node );
            }
        }
    
        return elem;
    }
    
    jQuery.extend( {
        htmlPrefilter: function( html ) {
            return html;
        },
    
        clone: function( elem, dataAndEvents, deepDataAndEvents ) {
            var i, l, srcElements, destElements,
                clone = elem.cloneNode( true ),
                inPage = isAttached( elem );
    
            // Fix IE cloning issues
            if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
                    !jQuery.isXMLDoc( elem ) ) {
    
                // We eschew jQuery#find here for performance reasons:
                // https://jsperf.com/getall-vs-sizzle/2
                destElements = getAll( clone );
                srcElements = getAll( elem );
    
                for ( i = 0, l = srcElements.length; i < l; i++ ) {
                    fixInput( srcElements[ i ], destElements[ i ] );
                }
            }
    
            // Copy the events from the original to the clone
            if ( dataAndEvents ) {
                if ( deepDataAndEvents ) {
                    srcElements = srcElements || getAll( elem );
                    destElements = destElements || getAll( clone );
    
                    for ( i = 0, l = srcElements.length; i < l; i++ ) {
                        cloneCopyEvent( srcElements[ i ], destElements[ i ] );
                    }
                } else {
                    cloneCopyEvent( elem, clone );
                }
            }
    
            // Preserve script evaluation history
            destElements = getAll( clone, "script" );
            if ( destElements.length > 0 ) {
                setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
            }
    
            // Return the cloned set
            return clone;
        },
    
        cleanData: function( elems ) {
            var data, elem, type,
                special = jQuery.event.special,
                i = 0;
    
            for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
                if ( acceptData( elem ) ) {
                    if ( ( data = elem[ dataPriv.expando ] ) ) {
                        if ( data.events ) {
                            for ( type in data.events ) {
                                if ( special[ type ] ) {
                                    jQuery.event.remove( elem, type );
    
                                // This is a shortcut to avoid jQuery.event.remove's overhead
                                } else {
                                    jQuery.removeEvent( elem, type, data.handle );
                                }
                            }
                        }
    
                        // Support: Chrome <=35 - 45+
                        // Assign undefined instead of using delete, see Data#remove
                        elem[ dataPriv.expando ] = undefined;
                    }
                    if ( elem[ dataUser.expando ] ) {
    
                        // Support: Chrome <=35 - 45+
                        // Assign undefined instead of using delete, see Data#remove
                        elem[ dataUser.expando ] = undefined;
                    }
                }
            }
        }
    } );
    
    jQuery.fn.extend( {
        detach: function( selector ) {
            return remove( this, selector, true );
        },
    
        remove: function( selector ) {
            return remove( this, selector );
        },
    
        text: function( value ) {
            return access( this, function( value ) {
                return value === undefined ?
                    jQuery.text( this ) :
                    this.empty().each( function() {
                        if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                            this.textContent = value;
                        }
                    } );
            }, null, value, arguments.length );
        },
    
        append: function() {
            return domManip( this, arguments, function( elem ) {
                if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                    var target = manipulationTarget( this, elem );
                    target.appendChild( elem );
                }
            } );
        },
    
        prepend: function() {
            return domManip( this, arguments, function( elem ) {
                if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                    var target = manipulationTarget( this, elem );
                    target.insertBefore( elem, target.firstChild );
                }
            } );
        },
    
        before: function() {
            return domManip( this, arguments, function( elem ) {
                if ( this.parentNode ) {
                    this.parentNode.insertBefore( elem, this );
                }
            } );
        },
    
        after: function() {
            return domManip( this, arguments, function( elem ) {
                if ( this.parentNode ) {
                    this.parentNode.insertBefore( elem, this.nextSibling );
                }
            } );
        },
    
        empty: function() {
            var elem,
                i = 0;
    
            for ( ; ( elem = this[ i ] ) != null; i++ ) {
                if ( elem.nodeType === 1 ) {
    
                    // Prevent memory leaks
                    jQuery.cleanData( getAll( elem, false ) );
    
                    // Remove any remaining nodes
                    elem.textContent = "";
                }
            }
    
            return this;
        },
    
        clone: function( dataAndEvents, deepDataAndEvents ) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
    
            return this.map( function() {
                return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
            } );
        },
    
        html: function( value ) {
            return access( this, function( value ) {
                var elem = this[ 0 ] || {},
                    i = 0,
                    l = this.length;
    
                if ( value === undefined && elem.nodeType === 1 ) {
                    return elem.innerHTML;
                }
    
                // See if we can take a shortcut and just use innerHTML
                if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
                    !wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
    
                    value = jQuery.htmlPrefilter( value );
    
                    try {
                        for ( ; i < l; i++ ) {
                            elem = this[ i ] || {};
    
                            // Remove element nodes and prevent memory leaks
                            if ( elem.nodeType === 1 ) {
                                jQuery.cleanData( getAll( elem, false ) );
                                elem.innerHTML = value;
                            }
                        }
    
                        elem = 0;
    
                    // If using innerHTML throws an exception, use the fallback method
                    } catch ( e ) {}
                }
    
                if ( elem ) {
                    this.empty().append( value );
                }
            }, null, value, arguments.length );
        },
    
        replaceWith: function() {
            var ignored = [];
    
            // Make the changes, replacing each non-ignored context element with the new content
            return domManip( this, arguments, function( elem ) {
                var parent = this.parentNode;
    
                if ( jQuery.inArray( this, ignored ) < 0 ) {
                    jQuery.cleanData( getAll( this ) );
                    if ( parent ) {
                        parent.replaceChild( elem, this );
                    }
                }
    
            // Force callback invocation
            }, ignored );
        }
    } );
    
    jQuery.each( {
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function( name, original ) {
        jQuery.fn[ name ] = function( selector ) {
            var elems,
                ret = [],
                insert = jQuery( selector ),
                last = insert.length - 1,
                i = 0;
    
            for ( ; i <= last; i++ ) {
                elems = i === last ? this : this.clone( true );
                jQuery( insert[ i ] )[ original ]( elems );
    
                // Support: Android <=4.0 only, PhantomJS 1 only
                // .get() because push.apply(_, arraylike) throws on ancient WebKit
                push.apply( ret, elems.get() );
            }
    
            return this.pushStack( ret );
        };
    } );
    var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
    
    var rcustomProp = /^--/;
    
    
    var getStyles = function( elem ) {
    
            // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
            // IE throws on elements created in popups
            // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
            var view = elem.ownerDocument.defaultView;
    
            if ( !view || !view.opener ) {
                view = window;
            }
    
            return view.getComputedStyle( elem );
        };
    
    var swap = function( elem, options, callback ) {
        var ret, name,
            old = {};
    
        // Remember the old values, and insert the new ones
        for ( name in options ) {
            old[ name ] = elem.style[ name ];
            elem.style[ name ] = options[ name ];
        }
    
        ret = callback.call( elem );
    
        // Revert the old values
        for ( name in options ) {
            elem.style[ name ] = old[ name ];
        }
    
        return ret;
    };
    
    
    var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );
    
    
    
    ( function() {
    
        // Executing both pixelPosition & boxSizingReliable tests require only one layout
        // so they're executed at the same time to save the second computation.
        function computeStyleTests() {
    
            // This is a singleton, we need to execute it only once
            if ( !div ) {
                return;
            }
    
            container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
                "margin-top:1px;padding:0;border:0";
            div.style.cssText =
                "position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
                "margin:auto;border:1px;padding:1px;" +
                "width:60%;top:1%";
            documentElement.appendChild( container ).appendChild( div );
    
            var divStyle = window.getComputedStyle( div );
            pixelPositionVal = divStyle.top !== "1%";
    
            // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
            reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;
    
            // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
            // Some styles come back with percentage values, even though they shouldn't
            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;
    
            // Support: IE 9 - 11 only
            // Detect misreporting of content dimensions for box-sizing:border-box elements
            boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;
    
            // Support: IE 9 only
            // Detect overflow:scroll screwiness (gh-3699)
            // Support: Chrome <=64
            // Don't get tricked when zoom affects offsetWidth (gh-4029)
            div.style.position = "absolute";
            scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;
    
            documentElement.removeChild( container );
    
            // Nullify the div so it wouldn't be stored in the memory and
            // it will also be a sign that checks already performed
            div = null;
        }
    
        function roundPixelMeasures( measure ) {
            return Math.round( parseFloat( measure ) );
        }
    
        var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
            reliableTrDimensionsVal, reliableMarginLeftVal,
            container = document.createElement( "div" ),
            div = document.createElement( "div" );
    
        // Finish early in limited (non-browser) environments
        if ( !div.style ) {
            return;
        }
    
        // Support: IE <=9 - 11 only
        // Style of cloned element affects source element cloned (trac-8908)
        div.style.backgroundClip = "content-box";
        div.cloneNode( true ).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
    
        jQuery.extend( support, {
            boxSizingReliable: function() {
                computeStyleTests();
                return boxSizingReliableVal;
            },
            pixelBoxStyles: function() {
                computeStyleTests();
                return pixelBoxStylesVal;
            },
            pixelPosition: function() {
                computeStyleTests();
                return pixelPositionVal;
            },
            reliableMarginLeft: function() {
                computeStyleTests();
                return reliableMarginLeftVal;
            },
            scrollboxSize: function() {
                computeStyleTests();
                return scrollboxSizeVal;
            },
    
            // Support: IE 9 - 11+, Edge 15 - 18+
            // IE/Edge misreport `getComputedStyle` of table rows with width/height
            // set in CSS while `offset*` properties report correct values.
            // Behavior in IE 9 is more subtle than in newer versions & it passes
            // some versions of this test; make sure not to make it pass there!
            //
            // Support: Firefox 70+
            // Only Firefox includes border widths
            // in computed dimensions. (gh-4529)
            reliableTrDimensions: function() {
                var table, tr, trChild, trStyle;
                if ( reliableTrDimensionsVal == null ) {
                    table = document.createElement( "table" );
                    tr = document.createElement( "tr" );
                    trChild = document.createElement( "div" );
    
                    table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
                    tr.style.cssText = "box-sizing:content-box;border:1px solid";
    
                    // Support: Chrome 86+
                    // Height set through cssText does not get applied.
                    // Computed height then comes back as 0.
                    tr.style.height = "1px";
                    trChild.style.height = "9px";
    
                    // Support: Android 8 Chrome 86+
                    // In our bodyBackground.html iframe,
                    // display for all div elements is set to "inline",
                    // which causes a problem only in Android 8 Chrome 86.
                    // Ensuring the div is `display: block`
                    // gets around this issue.
                    trChild.style.display = "block";
    
                    documentElement
                        .appendChild( table )
                        .appendChild( tr )
                        .appendChild( trChild );
    
                    trStyle = window.getComputedStyle( tr );
                    reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
                        parseInt( trStyle.borderTopWidth, 10 ) +
                        parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;
    
                    documentElement.removeChild( table );
                }
                return reliableTrDimensionsVal;
            }
        } );
    } )();
    
    
    function curCSS( elem, name, computed ) {
        var width, minWidth, maxWidth, ret,
            isCustomProp = rcustomProp.test( name ),
    
            // Support: Firefox 51+
            // Retrieving style before computed somehow
            // fixes an issue with getting wrong values
            // on detached elements
            style = elem.style;
    
        computed = computed || getStyles( elem );
    
        // getPropertyValue is needed for:
        //   .css('filter') (IE 9 only, trac-12537)
        //   .css('--customProperty) (gh-3144)
        if ( computed ) {
    
            // Support: IE <=9 - 11+
            // IE only supports `"float"` in `getPropertyValue`; in computed styles
            // it's only available as `"cssFloat"`. We no longer modify properties
            // sent to `.css()` apart from camelCasing, so we need to check both.
            // Normally, this would create difference in behavior: if
            // `getPropertyValue` returns an empty string, the value returned
            // by `.css()` would be `undefined`. This is usually the case for
            // disconnected elements. However, in IE even disconnected elements
            // with no styles return `"none"` for `getPropertyValue( "float" )`
            ret = computed.getPropertyValue( name ) || computed[ name ];
    
            if ( isCustomProp && ret ) {
    
                // Support: Firefox 105+, Chrome <=105+
                // Spec requires trimming whitespace for custom properties (gh-4926).
                // Firefox only trims leading whitespace. Chrome just collapses
                // both leading & trailing whitespace to a single space.
                //
                // Fall back to `undefined` if empty string returned.
                // This collapses a missing definition with property defined
                // and set to an empty string but there's no standard API
                // allowing us to differentiate them without a performance penalty
                // and returning `undefined` aligns with older jQuery.
                //
                // rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
                // as whitespace while CSS does not, but this is not a problem
                // because CSS preprocessing replaces them with U+000A LINE FEED
                // (which *is* CSS whitespace)
                // https://www.w3.org/TR/css-syntax-3/#input-preprocessing
                ret = ret.replace( rtrimCSS, "$1" ) || undefined;
            }
    
            if ( ret === "" && !isAttached( elem ) ) {
                ret = jQuery.style( elem, name );
            }
    
            // A tribute to the "awesome hack by Dean Edwards"
            // Android Browser returns percentage for some values,
            // but width seems to be reliably pixels.
            // This is against the CSSOM draft spec:
            // https://drafts.csswg.org/cssom/#resolved-values
            if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {
    
                // Remember the original values
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;
    
                // Put in the new values to get a computed value out
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;
    
                // Revert the changed values
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }
    
        return ret !== undefined ?
    
            // Support: IE <=9 - 11 only
            // IE returns zIndex value as an integer.
            ret + "" :
            ret;
    }
    
    
    function addGetHookIf( conditionFn, hookFn ) {
    
        // Define the hook, we'll check on the first run if it's really needed.
        return {
            get: function() {
                if ( conditionFn() ) {
    
                    // Hook not needed (or it's not possible to use it due
                    // to missing dependency), remove it.
                    delete this.get;
                    return;
                }
    
                // Hook needed; redefine it so that the support test is not executed again.
                return ( this.get = hookFn ).apply( this, arguments );
            }
        };
    }
    
    
    var cssPrefixes = [ "Webkit", "Moz", "ms" ],
        emptyStyle = document.createElement( "div" ).style,
        vendorProps = {};
    
    // Return a vendor-prefixed property or undefined
    function vendorPropName( name ) {
    
        // Check for vendor prefixed names
        var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
            i = cssPrefixes.length;
    
        while ( i-- ) {
            name = cssPrefixes[ i ] + capName;
            if ( name in emptyStyle ) {
                return name;
            }
        }
    }
    
    // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
    function finalPropName( name ) {
        var final = jQuery.cssProps[ name ] || vendorProps[ name ];
    
        if ( final ) {
            return final;
        }
        if ( name in emptyStyle ) {
            return name;
        }
        return vendorProps[ name ] = vendorPropName( name ) || name;
    }
    
    
    var
    
        // Swappable if display is none or starts with table
        // except "table", "table-cell", or "table-caption"
        // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
        rdisplayswap = /^(none|table(?!-c[ea]).+)/,
        cssShow = { position: "absolute", visibility: "hidden", display: "block" },
        cssNormalTransform = {
            letterSpacing: "0",
            fontWeight: "400"
        };
    
    function setPositiveNumber( _elem, value, subtract ) {
    
        // Any relative (+/-) values have already been
        // normalized at this point
        var matches = rcssNum.exec( value );
        return matches ?
    
            // Guard against undefined "subtract", e.g., when used as in cssHooks
            Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
            value;
    }
    
    function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
        var i = dimension === "width" ? 1 : 0,
            extra = 0,
            delta = 0,
            marginDelta = 0;
    
        // Adjustment may not be necessary
        if ( box === ( isBorderBox ? "border" : "content" ) ) {
            return 0;
        }
    
        for ( ; i < 4; i += 2 ) {
    
            // Both box models exclude margin
            // Count margin delta separately to only add it after scroll gutter adjustment.
            // This is needed to make negative margins work with `outerHeight( true )` (gh-3982).
            if ( box === "margin" ) {
                marginDelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
            }
    
            // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
            if ( !isBorderBox ) {
    
                // Add padding
                delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
    
                // For "border" or "margin", add border
                if ( box !== "padding" ) {
                    delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
    
                // But still keep track of it otherwise
                } else {
                    extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
                }
    
            // If we get here with a border-box (content + padding + border), we're seeking "content" or
            // "padding" or "margin"
            } else {
    
                // For "content", subtract padding
                if ( box === "content" ) {
                    delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
                }
    
                // For "content" or "padding", subtract border
                if ( box !== "margin" ) {
                    delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
                }
            }
        }
    
        // Account for positive content-box scroll gutter when requested by providing computedVal
        if ( !isBorderBox && computedVal >= 0 ) {
    
            // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
            // Assuming integer scroll gutter, subtract the rest and round down
            delta += Math.max( 0, Math.ceil(
                elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
                computedVal -
                delta -
                extra -
                0.5
    
            // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
            // Use an explicit zero to avoid NaN (gh-3964)
            ) ) || 0;
        }
    
        return delta + marginDelta;
    }
    
    function getWidthOrHeight( elem, dimension, extra ) {
    
        // Start with computed style
        var styles = getStyles( elem ),
    
            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
            // Fake content-box until we know it's needed to know the true value.
            boxSizingNeeded = !support.boxSizingReliable() || extra,
            isBorderBox = boxSizingNeeded &&
                jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
            valueIsBorderBox = isBorderBox,
    
            val = curCSS( elem, dimension, styles ),
            offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );
    
        // Support: Firefox <=54
        // Return a confounding non-pixel value or feign ignorance, as appropriate.
        if ( rnumnonpx.test( val ) ) {
            if ( !extra ) {
                return val;
            }
            val = "auto";
        }
    
    
        // Support: IE 9 - 11 only
        // Use offsetWidth/offsetHeight for when box sizing is unreliable.
        // In those cases, the computed value can be trusted to be border-box.
        if ( ( !support.boxSizingReliable() && isBorderBox ||
    
            // Support: IE 10 - 11+, Edge 15 - 18+
            // IE/Edge misreport `getComputedStyle` of table rows with width/height
            // set in CSS while `offset*` properties report correct values.
            // Interestingly, in some cases IE 9 doesn't suffer from this issue.
            !support.reliableTrDimensions() && nodeName( elem, "tr" ) ||
    
            // Fall back to offsetWidth/offsetHeight when value is "auto"
            // This happens for inline elements with no explicit setting (gh-3571)
            val === "auto" ||
    
            // Support: Android <=4.1 - 4.3 only
            // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
            !parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&
    
            // Make sure the element is visible & connected
            elem.getClientRects().length ) {
    
            isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
    
            // Where available, offsetWidth/offsetHeight approximate border box dimensions.
            // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
            // retrieved value as a content box dimension.
            valueIsBorderBox = offsetProp in elem;
            if ( valueIsBorderBox ) {
                val = elem[ offsetProp ];
            }
        }
    
        // Normalize "" and auto
        val = parseFloat( val ) || 0;
    
        // Adjust for the element's box model
        return ( val +
            boxModelAdjustment(
                elem,
                dimension,
                extra || ( isBorderBox ? "border" : "content" ),
                valueIsBorderBox,
                styles,
    
                // Provide the current computed size to request scroll gutter calculation (gh-3589)
                val
            )
        ) + "px";
    }
    
    jQuery.extend( {
    
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function( elem, computed ) {
                    if ( computed ) {
    
                        // We should always get a number back from opacity
                        var ret = curCSS( elem, "opacity" );
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },
    
        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageSlice: true,
            columnCount: true,
            flexGrow: true,
            flexShrink: true,
            fontWeight: true,
            gridArea: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnStart: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowStart: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            scale: true,
            widows: true,
            zIndex: true,
            zoom: true,
    
            // SVG-related
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeMiterlimit: true,
            strokeOpacity: true
        },
    
        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {},
    
        // Get and set the style property on a DOM Node
        style: function( elem, name, value, extra ) {
    
            // Don't set styles on text and comment nodes
            if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
                return;
            }
    
            // Make sure that we're working with the right name
            var ret, type, hooks,
                origName = camelCase( name ),
                isCustomProp = rcustomProp.test( name ),
                style = elem.style;
    
            // Make sure that we're working with the right name. We don't
            // want to query the value if it is a CSS custom property
            // since they are user-defined.
            if ( !isCustomProp ) {
                name = finalPropName( origName );
            }
    
            // Gets hook for the prefixed version, then unprefixed version
            hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
    
            // Check if we're setting a value
            if ( value !== undefined ) {
                type = typeof value;
    
                // Convert "+=" or "-=" to relative numbers (trac-7345)
                if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
                    value = adjustCSS( elem, name, ret );
    
                    // Fixes bug trac-9237
                    type = "number";
                }
    
                // Make sure that null and NaN values aren't set (trac-7116)
                if ( value == null || value !== value ) {
                    return;
                }
    
                // If a number was passed in, add the unit (except for certain CSS properties)
                // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
                // "px" to a few hardcoded values.
                if ( type === "number" && !isCustomProp ) {
                    value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
                }
    
                // background-* props affect original clone's values
                if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
                    style[ name ] = "inherit";
                }
    
                // If a hook was provided, use that value, otherwise just set the specified value
                if ( !hooks || !( "set" in hooks ) ||
                    ( value = hooks.set( elem, value, extra ) ) !== undefined ) {
    
                    if ( isCustomProp ) {
                        style.setProperty( name, value );
                    } else {
                        style[ name ] = value;
                    }
                }
    
            } else {
    
                // If a hook was provided get the non-computed value from there
                if ( hooks && "get" in hooks &&
                    ( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
    
                    return ret;
                }
    
                // Otherwise just get the value from the style object
                return style[ name ];
            }
        },
    
        css: function( elem, name, extra, styles ) {
            var val, num, hooks,
                origName = camelCase( name ),
                isCustomProp = rcustomProp.test( name );
    
            // Make sure that we're working with the right name. We don't
            // want to modify the value if it is a CSS custom property
            // since they are user-defined.
            if ( !isCustomProp ) {
                name = finalPropName( origName );
            }
    
            // Try prefixed name followed by the unprefixed name
            hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
    
            // If a hook was provided get the computed value from there
            if ( hooks && "get" in hooks ) {
                val = hooks.get( elem, true, extra );
            }
    
            // Otherwise, if a way to get the computed value exists, use that
            if ( val === undefined ) {
                val = curCSS( elem, name, styles );
            }
    
            // Convert "normal" to computed value
            if ( val === "normal" && name in cssNormalTransform ) {
                val = cssNormalTransform[ name ];
            }
    
            // Make numeric if forced or a qualifier was provided and val looks numeric
            if ( extra === "" || extra ) {
                num = parseFloat( val );
                return extra === true || isFinite( num ) ? num || 0 : val;
            }
    
            return val;
        }
    } );
    
    jQuery.each( [ "height", "width" ], function( _i, dimension ) {
        jQuery.cssHooks[ dimension ] = {
            get: function( elem, computed, extra ) {
                if ( computed ) {
    
                    // Certain elements can have dimension info if we invisibly show them
                    // but it must have a current display style that would benefit
                    return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
    
                        // Support: Safari 8+
                        // Table columns in Safari have non-zero offsetWidth & zero
                        // getBoundingClientRect().width unless display is changed.
                        // Support: IE <=11 only
                        // Running getBoundingClientRect on a disconnected node
                        // in IE throws an error.
                        ( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
                        swap( elem, cssShow, function() {
                            return getWidthOrHeight( elem, dimension, extra );
                        } ) :
                        getWidthOrHeight( elem, dimension, extra );
                }
            },
    
            set: function( elem, value, extra ) {
                var matches,
                    styles = getStyles( elem ),
    
                    // Only read styles.position if the test has a chance to fail
                    // to avoid forcing a reflow.
                    scrollboxSizeBuggy = !support.scrollboxSize() &&
                        styles.position === "absolute",
    
                    // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
                    boxSizingNeeded = scrollboxSizeBuggy || extra,
                    isBorderBox = boxSizingNeeded &&
                        jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
                    subtract = extra ?
                        boxModelAdjustment(
                            elem,
                            dimension,
                            extra,
                            isBorderBox,
                            styles
                        ) :
                        0;
    
                // Account for unreliable border-box dimensions by comparing offset* to computed and
                // faking a content-box to get border and padding (gh-3699)
                if ( isBorderBox && scrollboxSizeBuggy ) {
                    subtract -= Math.ceil(
                        elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
                        parseFloat( styles[ dimension ] ) -
                        boxModelAdjustment( elem, dimension, "border", false, styles ) -
                        0.5
                    );
                }
    
                // Convert to pixels if value adjustment is needed
                if ( subtract && ( matches = rcssNum.exec( value ) ) &&
                    ( matches[ 3 ] || "px" ) !== "px" ) {
    
                    elem.style[ dimension ] = value;
                    value = jQuery.css( elem, dimension );
                }
    
                return setPositiveNumber( elem, value, subtract );
            }
        };
    } );
    
    jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
        function( elem, computed ) {
            if ( computed ) {
                return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
                    elem.getBoundingClientRect().left -
                        swap( elem, { marginLeft: 0 }, function() {
                            return elem.getBoundingClientRect().left;
                        } )
                ) + "px";
            }
        }
    );
    
    // These hooks are used by animate to expand properties
    jQuery.each( {
        margin: "",
        padding: "",
        border: "Width"
    }, function( prefix, suffix ) {
        jQuery.cssHooks[ prefix + suffix ] = {
            expand: function( value ) {
                var i = 0,
                    expanded = {},
    
                    // Assumes a single number if not a string
                    parts = typeof value === "string" ? value.split( " " ) : [ value ];
    
                for ( ; i < 4; i++ ) {
                    expanded[ prefix + cssExpand[ i ] + suffix ] =
                        parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
                }
    
                return expanded;
            }
        };
    
        if ( prefix !== "margin" ) {
            jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
        }
    } );
    
    jQuery.fn.extend( {
        css: function( name, value ) {
            return access( this, function( elem, name, value ) {
                var styles, len,
                    map = {},
                    i = 0;
    
                if ( Array.isArray( name ) ) {
                    styles = getStyles( elem );
                    len = name.length;
    
                    for ( ; i < len; i++ ) {
                        map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
                    }
    
                    return map;
                }
    
                return value !== undefined ?
                    jQuery.style( elem, name, value ) :
                    jQuery.css( elem, name );
            }, name, value, arguments.length > 1 );
        }
    } );
    
    
    function Tween( elem, options, prop, end, easing ) {
        return new Tween.prototype.init( elem, options, prop, end, easing );
    }
    jQuery.Tween = Tween;
    
    Tween.prototype = {
        constructor: Tween,
        init: function( elem, options, prop, end, easing, unit ) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
        },
        cur: function() {
            var hooks = Tween.propHooks[ this.prop ];
    
            return hooks && hooks.get ?
                hooks.get( this ) :
                Tween.propHooks._default.get( this );
        },
        run: function( percent ) {
            var eased,
                hooks = Tween.propHooks[ this.prop ];
    
            if ( this.options.duration ) {
                this.pos = eased = jQuery.easing[ this.easing ](
                    percent, this.options.duration * percent, 0, 1, this.options.duration
                );
            } else {
                this.pos = eased = percent;
            }
            this.now = ( this.end - this.start ) * eased + this.start;
    
            if ( this.options.step ) {
                this.options.step.call( this.elem, this.now, this );
            }
    
            if ( hooks && hooks.set ) {
                hooks.set( this );
            } else {
                Tween.propHooks._default.set( this );
            }
            return this;
        }
    };
    
    Tween.prototype.init.prototype = Tween.prototype;
    
    Tween.propHooks = {
        _default: {
            get: function( tween ) {
                var result;
    
                // Use a property on the element directly when it is not a DOM element,
                // or when there is no matching style property that exists.
                if ( tween.elem.nodeType !== 1 ||
                    tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
                    return tween.elem[ tween.prop ];
                }
    
                // Passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails.
                // Simple values such as "10px" are parsed to Float;
                // complex values such as "rotate(1rad)" are returned as-is.
                result = jQuery.css( tween.elem, tween.prop, "" );
    
                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function( tween ) {
    
                // Use step hook for back compat.
                // Use cssHook if its there.
                // Use .style if available and use plain properties where available.
                if ( jQuery.fx.step[ tween.prop ] ) {
                    jQuery.fx.step[ tween.prop ]( tween );
                } else if ( tween.elem.nodeType === 1 && (
                    jQuery.cssHooks[ tween.prop ] ||
                        tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
                    jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
                } else {
                    tween.elem[ tween.prop ] = tween.now;
                }
            }
        }
    };
    
    // Support: IE <=9 only
    // Panic based approach to setting things on disconnected nodes
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function( tween ) {
            if ( tween.elem.nodeType && tween.elem.parentNode ) {
                tween.elem[ tween.prop ] = tween.now;
            }
        }
    };
    
    jQuery.easing = {
        linear: function( p ) {
            return p;
        },
        swing: function( p ) {
            return 0.5 - Math.cos( p * Math.PI ) / 2;
        },
        _default: "swing"
    };
    
    jQuery.fx = Tween.prototype.init;
    
    // Back compat <1.8 extension point
    jQuery.fx.step = {};
    
    
    
    
    var
        fxNow, inProgress,
        rfxtypes = /^(?:toggle|show|hide)$/,
        rrun = /queueHooks$/;
    
    function schedule() {
        if ( inProgress ) {
            if ( document.hidden === false && window.requestAnimationFrame ) {
                window.requestAnimationFrame( schedule );
            } else {
                window.setTimeout( schedule, jQuery.fx.interval );
            }
    
            jQuery.fx.tick();
        }
    }
    
    // Animations created synchronously will run synchronously
    function createFxNow() {
        window.setTimeout( function() {
            fxNow = undefined;
        } );
        return ( fxNow = Date.now() );
    }
    
    // Generate parameters to create a standard animation
    function genFx( type, includeWidth ) {
        var which,
            i = 0,
            attrs = { height: type };
    
        // If we include width, step value is 1 to do all cssExpand values,
        // otherwise step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for ( ; i < 4; i += 2 - includeWidth ) {
            which = cssExpand[ i ];
            attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
        }
    
        if ( includeWidth ) {
            attrs.opacity = attrs.width = type;
        }
    
        return attrs;
    }
    
    function createTween( value, prop, animation ) {
        var tween,
            collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
            index = 0,
            length = collection.length;
        for ( ; index < length; index++ ) {
            if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
    
                // We're done with this property
                return tween;
            }
        }
    }
    
    function defaultPrefilter( elem, props, opts ) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
            isBox = "width" in props || "height" in props,
            anim = this,
            orig = {},
            style = elem.style,
            hidden = elem.nodeType && isHiddenWithinTree( elem ),
            dataShow = dataPriv.get( elem, "fxshow" );
    
        // Queue-skipping animations hijack the fx hooks
        if ( !opts.queue ) {
            hooks = jQuery._queueHooks( elem, "fx" );
            if ( hooks.unqueued == null ) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if ( !hooks.unqueued ) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
    
            anim.always( function() {
    
                // Ensure the complete handler is called before this completes
                anim.always( function() {
                    hooks.unqueued--;
                    if ( !jQuery.queue( elem, "fx" ).length ) {
                        hooks.empty.fire();
                    }
                } );
            } );
        }
    
        // Detect show/hide animations
        for ( prop in props ) {
            value = props[ prop ];
            if ( rfxtypes.test( value ) ) {
                delete props[ prop ];
                toggle = toggle || value === "toggle";
                if ( value === ( hidden ? "hide" : "show" ) ) {
    
                    // Pretend to be hidden if this is a "show" and
                    // there is still data from a stopped show/hide
                    if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
                        hidden = true;
    
                    // Ignore all other no-op show/hide data
                    } else {
                        continue;
                    }
                }
                orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
            }
        }
    
        // Bail out if this is a no-op like .hide().hide()
        propTween = !jQuery.isEmptyObject( props );
        if ( !propTween && jQuery.isEmptyObject( orig ) ) {
            return;
        }
    
        // Restrict "overflow" and "display" styles during box animations
        if ( isBox && elem.nodeType === 1 ) {
    
            // Support: IE <=9 - 11, Edge 12 - 15
            // Record all 3 overflow attributes because IE does not infer the shorthand
            // from identically-valued overflowX and overflowY and Edge just mirrors
            // the overflowX value there.
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
    
            // Identify a display type, preferring old show/hide data over the CSS cascade
            restoreDisplay = dataShow && dataShow.display;
            if ( restoreDisplay == null ) {
                restoreDisplay = dataPriv.get( elem, "display" );
            }
            display = jQuery.css( elem, "display" );
            if ( display === "none" ) {
                if ( restoreDisplay ) {
                    display = restoreDisplay;
                } else {
    
                    // Get nonempty value(s) by temporarily forcing visibility
                    showHide( [ elem ], true );
                    restoreDisplay = elem.style.display || restoreDisplay;
                    display = jQuery.css( elem, "display" );
                    showHide( [ elem ] );
                }
            }
    
            // Animate inline elements as inline-block
            if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
                if ( jQuery.css( elem, "float" ) === "none" ) {
    
                    // Restore the original display value at the end of pure show/hide animations
                    if ( !propTween ) {
                        anim.done( function() {
                            style.display = restoreDisplay;
                        } );
                        if ( restoreDisplay == null ) {
                            display = style.display;
                            restoreDisplay = display === "none" ? "" : display;
                        }
                    }
                    style.display = "inline-block";
                }
            }
        }
    
        if ( opts.overflow ) {
            style.overflow = "hidden";
            anim.always( function() {
                style.overflow = opts.overflow[ 0 ];
                style.overflowX = opts.overflow[ 1 ];
                style.overflowY = opts.overflow[ 2 ];
            } );
        }
    
        // Implement show/hide animations
        propTween = false;
        for ( prop in orig ) {
    
            // General show/hide setup for this element animation
            if ( !propTween ) {
                if ( dataShow ) {
                    if ( "hidden" in dataShow ) {
                        hidden = dataShow.hidden;
                    }
                } else {
                    dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
                }
    
                // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
                if ( toggle ) {
                    dataShow.hidden = !hidden;
                }
    
                // Show elements before animating them
                if ( hidden ) {
                    showHide( [ elem ], true );
                }
    
                /* eslint-disable no-loop-func */
    
                anim.done( function() {
    
                    /* eslint-enable no-loop-func */
    
                    // The final step of a "hide" animation is actually hiding the element
                    if ( !hidden ) {
                        showHide( [ elem ] );
                    }
                    dataPriv.remove( elem, "fxshow" );
                    for ( prop in orig ) {
                        jQuery.style( elem, prop, orig[ prop ] );
                    }
                } );
            }
    
            // Per-property setup
            propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
            if ( !( prop in dataShow ) ) {
                dataShow[ prop ] = propTween.start;
                if ( hidden ) {
                    propTween.end = propTween.start;
                    propTween.start = 0;
                }
            }
        }
    }
    
    function propFilter( props, specialEasing ) {
        var index, name, easing, value, hooks;
    
        // camelCase, specialEasing and expand cssHook pass
        for ( index in props ) {
            name = camelCase( index );
            easing = specialEasing[ name ];
            value = props[ index ];
            if ( Array.isArray( value ) ) {
                easing = value[ 1 ];
                value = props[ index ] = value[ 0 ];
            }
    
            if ( index !== name ) {
                props[ name ] = value;
                delete props[ index ];
            }
    
            hooks = jQuery.cssHooks[ name ];
            if ( hooks && "expand" in hooks ) {
                value = hooks.expand( value );
                delete props[ name ];
    
                // Not quite $.extend, this won't overwrite existing keys.
                // Reusing 'index' because we have the correct "name"
                for ( index in value ) {
                    if ( !( index in props ) ) {
                        props[ index ] = value[ index ];
                        specialEasing[ index ] = easing;
                    }
                }
            } else {
                specialEasing[ name ] = easing;
            }
        }
    }
    
    function Animation( elem, properties, options ) {
        var result,
            stopped,
            index = 0,
            length = Animation.prefilters.length,
            deferred = jQuery.Deferred().always( function() {
    
                // Don't match elem in the :animated selector
                delete tick.elem;
            } ),
            tick = function() {
                if ( stopped ) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(),
                    remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
    
                    // Support: Android 2.3 only
                    // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
                    temp = remaining / animation.duration || 0,
                    percent = 1 - temp,
                    index = 0,
                    length = animation.tweens.length;
    
                for ( ; index < length; index++ ) {
                    animation.tweens[ index ].run( percent );
                }
    
                deferred.notifyWith( elem, [ animation, percent, remaining ] );
    
                // If there's more to do, yield
                if ( percent < 1 && length ) {
                    return remaining;
                }
    
                // If this was an empty animation, synthesize a final progress notification
                if ( !length ) {
                    deferred.notifyWith( elem, [ animation, 1, 0 ] );
                }
    
                // Resolve the animation and report its conclusion
                deferred.resolveWith( elem, [ animation ] );
                return false;
            },
            animation = deferred.promise( {
                elem: elem,
                props: jQuery.extend( {}, properties ),
                opts: jQuery.extend( true, {
                    specialEasing: {},
                    easing: jQuery.easing._default
                }, options ),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function( prop, end ) {
                    var tween = jQuery.Tween( elem, animation.opts, prop, end,
                        animation.opts.specialEasing[ prop ] || animation.opts.easing );
                    animation.tweens.push( tween );
                    return tween;
                },
                stop: function( gotoEnd ) {
                    var index = 0,
    
                        // If we are going to the end, we want to run all the tweens
                        // otherwise we skip this part
                        length = gotoEnd ? animation.tweens.length : 0;
                    if ( stopped ) {
                        return this;
                    }
                    stopped = true;
                    for ( ; index < length; index++ ) {
                        animation.tweens[ index ].run( 1 );
                    }
    
                    // Resolve when we played the last frame; otherwise, reject
                    if ( gotoEnd ) {
                        deferred.notifyWith( elem, [ animation, 1, 0 ] );
                        deferred.resolveWith( elem, [ animation, gotoEnd ] );
                    } else {
                        deferred.rejectWith( elem, [ animation, gotoEnd ] );
                    }
                    return this;
                }
            } ),
            props = animation.props;
    
        propFilter( props, animation.opts.specialEasing );
    
        for ( ; index < length; index++ ) {
            result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
            if ( result ) {
                if ( isFunction( result.stop ) ) {
                    jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
                        result.stop.bind( result );
                }
                return result;
            }
        }
    
        jQuery.map( props, createTween, animation );
    
        if ( isFunction( animation.opts.start ) ) {
            animation.opts.start.call( elem, animation );
        }
    
        // Attach callbacks from options
        animation
            .progress( animation.opts.progress )
            .done( animation.opts.done, animation.opts.complete )
            .fail( animation.opts.fail )
            .always( animation.opts.always );
    
        jQuery.fx.timer(
            jQuery.extend( tick, {
                elem: elem,
                anim: animation,
                queue: animation.opts.queue
            } )
        );
    
        return animation;
    }
    
    jQuery.Animation = jQuery.extend( Animation, {
    
        tweeners: {
            "*": [ function( prop, value ) {
                var tween = this.createTween( prop, value );
                adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
                return tween;
            } ]
        },
    
        tweener: function( props, callback ) {
            if ( isFunction( props ) ) {
                callback = props;
                props = [ "*" ];
            } else {
                props = props.match( rnothtmlwhite );
            }
    
            var prop,
                index = 0,
                length = props.length;
    
            for ( ; index < length; index++ ) {
                prop = props[ index ];
                Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
                Animation.tweeners[ prop ].unshift( callback );
            }
        },
    
        prefilters: [ defaultPrefilter ],
    
        prefilter: function( callback, prepend ) {
            if ( prepend ) {
                Animation.prefilters.unshift( callback );
            } else {
                Animation.prefilters.push( callback );
            }
        }
    } );
    
    jQuery.speed = function( speed, easing, fn ) {
        var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
            complete: fn || !fn && easing ||
                isFunction( speed ) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction( easing ) && easing
        };
    
        // Go to the end state if fx are off
        if ( jQuery.fx.off ) {
            opt.duration = 0;
    
        } else {
            if ( typeof opt.duration !== "number" ) {
                if ( opt.duration in jQuery.fx.speeds ) {
                    opt.duration = jQuery.fx.speeds[ opt.duration ];
    
                } else {
                    opt.duration = jQuery.fx.speeds._default;
                }
            }
        }
    
        // Normalize opt.queue - true/undefined/null -> "fx"
        if ( opt.queue == null || opt.queue === true ) {
            opt.queue = "fx";
        }
    
        // Queueing
        opt.old = opt.complete;
    
        opt.complete = function() {
            if ( isFunction( opt.old ) ) {
                opt.old.call( this );
            }
    
            if ( opt.queue ) {
                jQuery.dequeue( this, opt.queue );
            }
        };
    
        return opt;
    };
    
    jQuery.fn.extend( {
        fadeTo: function( speed, to, easing, callback ) {
    
            // Show any hidden elements after setting opacity to 0
            return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()
    
                // Animate to the value specified
                .end().animate( { opacity: to }, speed, easing, callback );
        },
        animate: function( prop, speed, easing, callback ) {
            var empty = jQuery.isEmptyObject( prop ),
                optall = jQuery.speed( speed, easing, callback ),
                doAnimation = function() {
    
                    // Operate on a copy of prop so per-property easing won't be lost
                    var anim = Animation( this, jQuery.extend( {}, prop ), optall );
    
                    // Empty animations, or finishing resolves immediately
                    if ( empty || dataPriv.get( this, "finish" ) ) {
                        anim.stop( true );
                    }
                };
    
            doAnimation.finish = doAnimation;
    
            return empty || optall.queue === false ?
                this.each( doAnimation ) :
                this.queue( optall.queue, doAnimation );
        },
        stop: function( type, clearQueue, gotoEnd ) {
            var stopQueue = function( hooks ) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop( gotoEnd );
            };
    
            if ( typeof type !== "string" ) {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if ( clearQueue ) {
                this.queue( type || "fx", [] );
            }
    
            return this.each( function() {
                var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = dataPriv.get( this );
    
                if ( index ) {
                    if ( data[ index ] && data[ index ].stop ) {
                        stopQueue( data[ index ] );
                    }
                } else {
                    for ( index in data ) {
                        if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
                            stopQueue( data[ index ] );
                        }
                    }
                }
    
                for ( index = timers.length; index--; ) {
                    if ( timers[ index ].elem === this &&
                        ( type == null || timers[ index ].queue === type ) ) {
    
                        timers[ index ].anim.stop( gotoEnd );
                        dequeue = false;
                        timers.splice( index, 1 );
                    }
                }
    
                // Start the next in the queue if the last step wasn't forced.
                // Timers currently will call their complete callbacks, which
                // will dequeue but only if they were gotoEnd.
                if ( dequeue || !gotoEnd ) {
                    jQuery.dequeue( this, type );
                }
            } );
        },
        finish: function( type ) {
            if ( type !== false ) {
                type = type || "fx";
            }
            return this.each( function() {
                var index,
                    data = dataPriv.get( this ),
                    queue = data[ type + "queue" ],
                    hooks = data[ type + "queueHooks" ],
                    timers = jQuery.timers,
                    length = queue ? queue.length : 0;
    
                // Enable finishing flag on private data
                data.finish = true;
    
                // Empty the queue first
                jQuery.queue( this, type, [] );
    
                if ( hooks && hooks.stop ) {
                    hooks.stop.call( this, true );
                }
    
                // Look for any active animations, and finish them
                for ( index = timers.length; index--; ) {
                    if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
                        timers[ index ].anim.stop( true );
                        timers.splice( index, 1 );
                    }
                }
    
                // Look for any animations in the old queue and finish them
                for ( index = 0; index < length; index++ ) {
                    if ( queue[ index ] && queue[ index ].finish ) {
                        queue[ index ].finish.call( this );
                    }
                }
    
                // Turn off finishing flag
                delete data.finish;
            } );
        }
    } );
    
    jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
        var cssFn = jQuery.fn[ name ];
        jQuery.fn[ name ] = function( speed, easing, callback ) {
            return speed == null || typeof speed === "boolean" ?
                cssFn.apply( this, arguments ) :
                this.animate( genFx( name, true ), speed, easing, callback );
        };
    } );
    
    // Generate shortcuts for custom animations
    jQuery.each( {
        slideDown: genFx( "show" ),
        slideUp: genFx( "hide" ),
        slideToggle: genFx( "toggle" ),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" }
    }, function( name, props ) {
        jQuery.fn[ name ] = function( speed, easing, callback ) {
            return this.animate( props, speed, easing, callback );
        };
    } );
    
    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer,
            i = 0,
            timers = jQuery.timers;
    
        fxNow = Date.now();
    
        for ( ; i < timers.length; i++ ) {
            timer = timers[ i ];
    
            // Run the timer and safely remove it when done (allowing for external removal)
            if ( !timer() && timers[ i ] === timer ) {
                timers.splice( i--, 1 );
            }
        }
    
        if ( !timers.length ) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    
    jQuery.fx.timer = function( timer ) {
        jQuery.timers.push( timer );
        jQuery.fx.start();
    };
    
    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        if ( inProgress ) {
            return;
        }
    
        inProgress = true;
        schedule();
    };
    
    jQuery.fx.stop = function() {
        inProgress = null;
    };
    
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
    
        // Default speed
        _default: 400
    };
    
    
    // Based off of the plugin by Clint Helfers, with permission.
    jQuery.fn.delay = function( time, type ) {
        time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
        type = type || "fx";
    
        return this.queue( type, function( next, hooks ) {
            var timeout = window.setTimeout( next, time );
            hooks.stop = function() {
                window.clearTimeout( timeout );
            };
        } );
    };
    
    
    ( function() {
        var input = document.createElement( "input" ),
            select = document.createElement( "select" ),
            opt = select.appendChild( document.createElement( "option" ) );
    
        input.type = "checkbox";
    
        // Support: Android <=4.3 only
        // Default value for a checkbox should be "on"
        support.checkOn = input.value !== "";
    
        // Support: IE <=11 only
        // Must access selectedIndex to make default options select
        support.optSelected = opt.selected;
    
        // Support: IE <=11 only
        // An input loses its value after becoming a radio
        input = document.createElement( "input" );
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
    } )();
    
    
    var boolHook,
        attrHandle = jQuery.expr.attrHandle;
    
    jQuery.fn.extend( {
        attr: function( name, value ) {
            return access( this, jQuery.attr, name, value, arguments.length > 1 );
        },
    
        removeAttr: function( name ) {
            return this.each( function() {
                jQuery.removeAttr( this, name );
            } );
        }
    } );
    
    jQuery.extend( {
        attr: function( elem, name, value ) {
            var ret, hooks,
                nType = elem.nodeType;
    
            // Don't get/set attributes on text, comment and attribute nodes
            if ( nType === 3 || nType === 8 || nType === 2 ) {
                return;
            }
    
            // Fallback to prop when attributes are not supported
            if ( typeof elem.getAttribute === "undefined" ) {
                return jQuery.prop( elem, name, value );
            }
    
            // Attribute hooks are determined by the lowercase version
            // Grab necessary hook if one is defined
            if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
                hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
                    ( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
            }
    
            if ( value !== undefined ) {
                if ( value === null ) {
                    jQuery.removeAttr( elem, name );
                    return;
                }
    
                if ( hooks && "set" in hooks &&
                    ( ret = hooks.set( elem, value, name ) ) !== undefined ) {
                    return ret;
                }
    
                elem.setAttribute( name, value + "" );
                return value;
            }
    
            if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
                return ret;
            }
    
            ret = jQuery.find.attr( elem, name );
    
            // Non-existent attributes return null, we normalize to undefined
            return ret == null ? undefined : ret;
        },
    
        attrHooks: {
            type: {
                set: function( elem, value ) {
                    if ( !support.radioValue && value === "radio" &&
                        nodeName( elem, "input" ) ) {
                        var val = elem.value;
                        elem.setAttribute( "type", value );
                        if ( val ) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },
    
        removeAttr: function( elem, value ) {
            var name,
                i = 0,
    
                // Attribute names can contain non-HTML whitespace characters
                // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
                attrNames = value && value.match( rnothtmlwhite );
    
            if ( attrNames && elem.nodeType === 1 ) {
                while ( ( name = attrNames[ i++ ] ) ) {
                    elem.removeAttribute( name );
                }
            }
        }
    } );
    
    // Hooks for boolean attributes
    boolHook = {
        set: function( elem, value, name ) {
            if ( value === false ) {
    
                // Remove boolean attributes when set to false
                jQuery.removeAttr( elem, name );
            } else {
                elem.setAttribute( name, name );
            }
            return name;
        }
    };
    
    jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
        var getter = attrHandle[ name ] || jQuery.find.attr;
    
        attrHandle[ name ] = function( elem, name, isXML ) {
            var ret, handle,
                lowercaseName = name.toLowerCase();
    
            if ( !isXML ) {
    
                // Avoid an infinite loop by temporarily removing this function from the getter
                handle = attrHandle[ lowercaseName ];
                attrHandle[ lowercaseName ] = ret;
                ret = getter( elem, name, isXML ) != null ?
                    lowercaseName :
                    null;
                attrHandle[ lowercaseName ] = handle;
            }
            return ret;
        };
    } );
    
    
    
    
    var rfocusable = /^(?:input|select|textarea|button)$/i,
        rclickable = /^(?:a|area)$/i;
    
    jQuery.fn.extend( {
        prop: function( name, value ) {
            return access( this, jQuery.prop, name, value, arguments.length > 1 );
        },
    
        removeProp: function( name ) {
            return this.each( function() {
                delete this[ jQuery.propFix[ name ] || name ];
            } );
        }
    } );
    
    jQuery.extend( {
        prop: function( elem, name, value ) {
            var ret, hooks,
                nType = elem.nodeType;
    
            // Don't get/set properties on text, comment and attribute nodes
            if ( nType === 3 || nType === 8 || nType === 2 ) {
                return;
            }
    
            if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
    
                // Fix name and attach hooks
                name = jQuery.propFix[ name ] || name;
                hooks = jQuery.propHooks[ name ];
            }
    
            if ( value !== undefined ) {
                if ( hooks && "set" in hooks &&
                    ( ret = hooks.set( elem, value, name ) ) !== undefined ) {
                    return ret;
                }
    
                return ( elem[ name ] = value );
            }
    
            if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
                return ret;
            }
    
            return elem[ name ];
        },
    
        propHooks: {
            tabIndex: {
                get: function( elem ) {
    
                    // Support: IE <=9 - 11 only
                    // elem.tabIndex doesn't always return the
                    // correct value when it hasn't been explicitly set
                    // Use proper attribute retrieval (trac-12072)
                    var tabindex = jQuery.find.attr( elem, "tabindex" );
    
                    if ( tabindex ) {
                        return parseInt( tabindex, 10 );
                    }
    
                    if (
                        rfocusable.test( elem.nodeName ) ||
                        rclickable.test( elem.nodeName ) &&
                        elem.href
                    ) {
                        return 0;
                    }
    
                    return -1;
                }
            }
        },
    
        propFix: {
            "for": "htmlFor",
            "class": "className"
        }
    } );
    
    // Support: IE <=11 only
    // Accessing the selectedIndex property
    // forces the browser to respect setting selected
    // on the option
    // The getter ensures a default option is selected
    // when in an optgroup
    // eslint rule "no-unused-expressions" is disabled for this code
    // since it considers such accessions noop
    if ( !support.optSelected ) {
        jQuery.propHooks.selected = {
            get: function( elem ) {
    
                /* eslint no-unused-expressions: "off" */
    
                var parent = elem.parentNode;
                if ( parent && parent.parentNode ) {
                    parent.parentNode.selectedIndex;
                }
                return null;
            },
            set: function( elem ) {
    
                /* eslint no-unused-expressions: "off" */
    
                var parent = elem.parentNode;
                if ( parent ) {
                    parent.selectedIndex;
    
                    if ( parent.parentNode ) {
                        parent.parentNode.selectedIndex;
                    }
                }
            }
        };
    }
    
    jQuery.each( [
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
    ], function() {
        jQuery.propFix[ this.toLowerCase() ] = this;
    } );
    
    
    
    
        // Strip and collapse whitespace according to HTML spec
        // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
        function stripAndCollapse( value ) {
            var tokens = value.match( rnothtmlwhite ) || [];
            return tokens.join( " " );
        }
    
    
    function getClass( elem ) {
        return elem.getAttribute && elem.getAttribute( "class" ) || "";
    }
    
    function classesToArray( value ) {
        if ( Array.isArray( value ) ) {
            return value;
        }
        if ( typeof value === "string" ) {
            return value.match( rnothtmlwhite ) || [];
        }
        return [];
    }
    
    jQuery.fn.extend( {
        addClass: function( value ) {
            var classNames, cur, curValue, className, i, finalValue;
    
            if ( isFunction( value ) ) {
                return this.each( function( j ) {
                    jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
                } );
            }
    
            classNames = classesToArray( value );
    
            if ( classNames.length ) {
                return this.each( function() {
                    curValue = getClass( this );
                    cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
    
                    if ( cur ) {
                        for ( i = 0; i < classNames.length; i++ ) {
                            className = classNames[ i ];
                            if ( cur.indexOf( " " + className + " " ) < 0 ) {
                                cur += className + " ";
                            }
                        }
    
                        // Only assign if different to avoid unneeded rendering.
                        finalValue = stripAndCollapse( cur );
                        if ( curValue !== finalValue ) {
                            this.setAttribute( "class", finalValue );
                        }
                    }
                } );
            }
    
            return this;
        },
    
        removeClass: function( value ) {
            var classNames, cur, curValue, className, i, finalValue;
    
            if ( isFunction( value ) ) {
                return this.each( function( j ) {
                    jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
                } );
            }
    
            if ( !arguments.length ) {
                return this.attr( "class", "" );
            }
    
            classNames = classesToArray( value );
    
            if ( classNames.length ) {
                return this.each( function() {
                    curValue = getClass( this );
    
                    // This expression is here for better compressibility (see addClass)
                    cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
    
                    if ( cur ) {
                        for ( i = 0; i < classNames.length; i++ ) {
                            className = classNames[ i ];
    
                            // Remove *all* instances
                            while ( cur.indexOf( " " + className + " " ) > -1 ) {
                                cur = cur.replace( " " + className + " ", " " );
                            }
                        }
    
                        // Only assign if different to avoid unneeded rendering.
                        finalValue = stripAndCollapse( cur );
                        if ( curValue !== finalValue ) {
                            this.setAttribute( "class", finalValue );
                        }
                    }
                } );
            }
    
            return this;
        },
    
        toggleClass: function( value, stateVal ) {
            var classNames, className, i, self,
                type = typeof value,
                isValidValue = type === "string" || Array.isArray( value );
    
            if ( isFunction( value ) ) {
                return this.each( function( i ) {
                    jQuery( this ).toggleClass(
                        value.call( this, i, getClass( this ), stateVal ),
                        stateVal
                    );
                } );
            }
    
            if ( typeof stateVal === "boolean" && isValidValue ) {
                return stateVal ? this.addClass( value ) : this.removeClass( value );
            }
    
            classNames = classesToArray( value );
    
            return this.each( function() {
                if ( isValidValue ) {
    
                    // Toggle individual class names
                    self = jQuery( this );
    
                    for ( i = 0; i < classNames.length; i++ ) {
                        className = classNames[ i ];
    
                        // Check each className given, space separated list
                        if ( self.hasClass( className ) ) {
                            self.removeClass( className );
                        } else {
                            self.addClass( className );
                        }
                    }
    
                // Toggle whole class name
                } else if ( value === undefined || type === "boolean" ) {
                    className = getClass( this );
                    if ( className ) {
    
                        // Store className if set
                        dataPriv.set( this, "__className__", className );
                    }
    
                    // If the element has a class name or if we're passed `false`,
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    if ( this.setAttribute ) {
                        this.setAttribute( "class",
                            className || value === false ?
                                "" :
                                dataPriv.get( this, "__className__" ) || ""
                        );
                    }
                }
            } );
        },
    
        hasClass: function( selector ) {
            var className, elem,
                i = 0;
    
            className = " " + selector + " ";
            while ( ( elem = this[ i++ ] ) ) {
                if ( elem.nodeType === 1 &&
                    ( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
                    return true;
                }
            }
    
            return false;
        }
    } );
    
    
    
    
    var rreturn = /\r/g;
    
    jQuery.fn.extend( {
        val: function( value ) {
            var hooks, ret, valueIsFunction,
                elem = this[ 0 ];
    
            if ( !arguments.length ) {
                if ( elem ) {
                    hooks = jQuery.valHooks[ elem.type ] ||
                        jQuery.valHooks[ elem.nodeName.toLowerCase() ];
    
                    if ( hooks &&
                        "get" in hooks &&
                        ( ret = hooks.get( elem, "value" ) ) !== undefined
                    ) {
                        return ret;
                    }
    
                    ret = elem.value;
    
                    // Handle most common string cases
                    if ( typeof ret === "string" ) {
                        return ret.replace( rreturn, "" );
                    }
    
                    // Handle cases where value is null/undef or number
                    return ret == null ? "" : ret;
                }
    
                return;
            }
    
            valueIsFunction = isFunction( value );
    
            return this.each( function( i ) {
                var val;
    
                if ( this.nodeType !== 1 ) {
                    return;
                }
    
                if ( valueIsFunction ) {
                    val = value.call( this, i, jQuery( this ).val() );
                } else {
                    val = value;
                }
    
                // Treat null/undefined as ""; convert numbers to string
                if ( val == null ) {
                    val = "";
    
                } else if ( typeof val === "number" ) {
                    val += "";
    
                } else if ( Array.isArray( val ) ) {
                    val = jQuery.map( val, function( value ) {
                        return value == null ? "" : value + "";
                    } );
                }
    
                hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
    
                // If set returns undefined, fall back to normal setting
                if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
                    this.value = val;
                }
            } );
        }
    } );
    
    jQuery.extend( {
        valHooks: {
            option: {
                get: function( elem ) {
    
                    var val = jQuery.find.attr( elem, "value" );
                    return val != null ?
                        val :
    
                        // Support: IE <=10 - 11 only
                        // option.text throws exceptions (trac-14686, trac-14858)
                        // Strip and collapse whitespace
                        // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                        stripAndCollapse( jQuery.text( elem ) );
                }
            },
            select: {
                get: function( elem ) {
                    var value, option, i,
                        options = elem.options,
                        index = elem.selectedIndex,
                        one = elem.type === "select-one",
                        values = one ? null : [],
                        max = one ? index + 1 : options.length;
    
                    if ( index < 0 ) {
                        i = max;
    
                    } else {
                        i = one ? index : 0;
                    }
    
                    // Loop through all the selected options
                    for ( ; i < max; i++ ) {
                        option = options[ i ];
    
                        // Support: IE <=9 only
                        // IE8-9 doesn't update selected after form reset (trac-2551)
                        if ( ( option.selected || i === index ) &&
    
                                // Don't return options that are disabled or in a disabled optgroup
                                !option.disabled &&
                                ( !option.parentNode.disabled ||
                                    !nodeName( option.parentNode, "optgroup" ) ) ) {
    
                            // Get the specific value for the option
                            value = jQuery( option ).val();
    
                            // We don't need an array for one selects
                            if ( one ) {
                                return value;
                            }
    
                            // Multi-Selects return an array
                            values.push( value );
                        }
                    }
    
                    return values;
                },
    
                set: function( elem, value ) {
                    var optionSet, option,
                        options = elem.options,
                        values = jQuery.makeArray( value ),
                        i = options.length;
    
                    while ( i-- ) {
                        option = options[ i ];
    
                        /* eslint-disable no-cond-assign */
    
                        if ( option.selected =
                            jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
                        ) {
                            optionSet = true;
                        }
    
                        /* eslint-enable no-cond-assign */
                    }
    
                    // Force browsers to behave consistently when non-matching value is set
                    if ( !optionSet ) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        }
    } );
    
    // Radios and checkboxes getter/setter
    jQuery.each( [ "radio", "checkbox" ], function() {
        jQuery.valHooks[ this ] = {
            set: function( elem, value ) {
                if ( Array.isArray( value ) ) {
                    return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
                }
            }
        };
        if ( !support.checkOn ) {
            jQuery.valHooks[ this ].get = function( elem ) {
                return elem.getAttribute( "value" ) === null ? "on" : elem.value;
            };
        }
    } );
    
    
    
    
    // Return jQuery for attributes-only inclusion
    var location = window.location;
    
    var nonce = { guid: Date.now() };
    
    var rquery = ( /\?/ );
    
    
    
    // Cross-browser xml parsing
    jQuery.parseXML = function( data ) {
        var xml, parserErrorElem;
        if ( !data || typeof data !== "string" ) {
            return null;
        }
    
        // Support: IE 9 - 11 only
        // IE throws on parseFromString with invalid input.
        try {
            xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
        } catch ( e ) {}
    
        parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
        if ( !xml || parserErrorElem ) {
            jQuery.error( "Invalid XML: " + (
                parserErrorElem ?
                    jQuery.map( parserErrorElem.childNodes, function( el ) {
                        return el.textContent;
                    } ).join( "\n" ) :
                    data
            ) );
        }
        return xml;
    };
    
    
    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
        stopPropagationCallback = function( e ) {
            e.stopPropagation();
        };
    
    jQuery.extend( jQuery.event, {
    
        trigger: function( event, data, elem, onlyHandlers ) {
    
            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
                eventPath = [ elem || document ],
                type = hasOwn.call( event, "type" ) ? event.type : event,
                namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
    
            cur = lastElement = tmp = elem = elem || document;
    
            // Don't do events on text and comment nodes
            if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
                return;
            }
    
            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
                return;
            }
    
            if ( type.indexOf( "." ) > -1 ) {
    
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split( "." );
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf( ":" ) < 0 && "on" + type;
    
            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[ jQuery.expando ] ?
                event :
                new jQuery.Event( type, typeof event === "object" && event );
    
            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join( "." );
            event.rnamespace = event.namespace ?
                new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
                null;
    
            // Clean up the event in case it is being reused
            event.result = undefined;
            if ( !event.target ) {
                event.target = elem;
            }
    
            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ?
                [ event ] :
                jQuery.makeArray( data, [ event ] );
    
            // Allow special events to draw outside the lines
            special = jQuery.event.special[ type ] || {};
            if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
                return;
            }
    
            // Determine event propagation path in advance, per W3C events spec (trac-9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
            if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {
    
                bubbleType = special.delegateType || type;
                if ( !rfocusMorph.test( bubbleType + type ) ) {
                    cur = cur.parentNode;
                }
                for ( ; cur; cur = cur.parentNode ) {
                    eventPath.push( cur );
                    tmp = cur;
                }
    
                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if ( tmp === ( elem.ownerDocument || document ) ) {
                    eventPath.push( tmp.defaultView || tmp.parentWindow || window );
                }
            }
    
            // Fire handlers on the event path
            i = 0;
            while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
                lastElement = cur;
                event.type = i > 1 ?
                    bubbleType :
                    special.bindType || type;
    
                // jQuery handler
                handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
                    dataPriv.get( cur, "handle" );
                if ( handle ) {
                    handle.apply( cur, data );
                }
    
                // Native handler
                handle = ontype && cur[ ontype ];
                if ( handle && handle.apply && acceptData( cur ) ) {
                    event.result = handle.apply( cur, data );
                    if ( event.result === false ) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;
    
            // If nobody prevented the default action, do it now
            if ( !onlyHandlers && !event.isDefaultPrevented() ) {
    
                if ( ( !special._default ||
                    special._default.apply( eventPath.pop(), data ) === false ) &&
                    acceptData( elem ) ) {
    
                    // Call a native DOM method on the target with the same name as the event.
                    // Don't do default actions on window, that's where global variables be (trac-6170)
                    if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {
    
                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ ontype ];
    
                        if ( tmp ) {
                            elem[ ontype ] = null;
                        }
    
                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
    
                        if ( event.isPropagationStopped() ) {
                            lastElement.addEventListener( type, stopPropagationCallback );
                        }
    
                        elem[ type ]();
    
                        if ( event.isPropagationStopped() ) {
                            lastElement.removeEventListener( type, stopPropagationCallback );
                        }
    
                        jQuery.event.triggered = undefined;
    
                        if ( tmp ) {
                            elem[ ontype ] = tmp;
                        }
                    }
                }
            }
    
            return event.result;
        },
    
        // Piggyback on a donor event to simulate a different one
        // Used only for `focus(in | out)` events
        simulate: function( type, elem, event ) {
            var e = jQuery.extend(
                new jQuery.Event(),
                event,
                {
                    type: type,
                    isSimulated: true
                }
            );
    
            jQuery.event.trigger( e, null, elem );
        }
    
    } );
    
    jQuery.fn.extend( {
    
        trigger: function( type, data ) {
            return this.each( function() {
                jQuery.event.trigger( type, data, this );
            } );
        },
        triggerHandler: function( type, data ) {
            var elem = this[ 0 ];
            if ( elem ) {
                return jQuery.event.trigger( type, data, elem, true );
            }
        }
    } );
    
    
    var
        rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
        rsubmittable = /^(?:input|select|textarea|keygen)/i;
    
    function buildParams( prefix, obj, traditional, add ) {
        var name;
    
        if ( Array.isArray( obj ) ) {
    
            // Serialize array item.
            jQuery.each( obj, function( i, v ) {
                if ( traditional || rbracket.test( prefix ) ) {
    
                    // Treat each array item as a scalar.
                    add( prefix, v );
    
                } else {
    
                    // Item is non-scalar (array or object), encode its numeric index.
                    buildParams(
                        prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
                        v,
                        traditional,
                        add
                    );
                }
            } );
    
        } else if ( !traditional && toType( obj ) === "object" ) {
    
            // Serialize object item.
            for ( name in obj ) {
                buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
            }
    
        } else {
    
            // Serialize scalar item.
            add( prefix, obj );
        }
    }
    
    // Serialize an array of form elements or a set of
    // key/values into a query string
    jQuery.param = function( a, traditional ) {
        var prefix,
            s = [],
            add = function( key, valueOrFunction ) {
    
                // If value is a function, invoke it and use its return value
                var value = isFunction( valueOrFunction ) ?
                    valueOrFunction() :
                    valueOrFunction;
    
                s[ s.length ] = encodeURIComponent( key ) + "=" +
                    encodeURIComponent( value == null ? "" : value );
            };
    
        if ( a == null ) {
            return "";
        }
    
        // If an array was passed in, assume that it is an array of form elements.
        if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
    
            // Serialize the form elements
            jQuery.each( a, function() {
                add( this.name, this.value );
            } );
    
        } else {
    
            // If traditional, encode the "old" way (the way 1.3.2 or older
            // did it), otherwise encode params recursively.
            for ( prefix in a ) {
                buildParams( prefix, a[ prefix ], traditional, add );
            }
        }
    
        // Return the resulting serialization
        return s.join( "&" );
    };
    
    jQuery.fn.extend( {
        serialize: function() {
            return jQuery.param( this.serializeArray() );
        },
        serializeArray: function() {
            return this.map( function() {
    
                // Can add propHook for "elements" to filter or add form elements
                var elements = jQuery.prop( this, "elements" );
                return elements ? jQuery.makeArray( elements ) : this;
            } ).filter( function() {
                var type = this.type;
    
                // Use .is( ":disabled" ) so that fieldset[disabled] works
                return this.name && !jQuery( this ).is( ":disabled" ) &&
                    rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
                    ( this.checked || !rcheckableType.test( type ) );
            } ).map( function( _i, elem ) {
                var val = jQuery( this ).val();
    
                if ( val == null ) {
                    return null;
                }
    
                if ( Array.isArray( val ) ) {
                    return jQuery.map( val, function( val ) {
                        return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
                    } );
                }
    
                return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
            } ).get();
        }
    } );
    
    
    var
        r20 = /%20/g,
        rhash = /#.*$/,
        rantiCache = /([?&])_=[^&]*/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
    
        // trac-7653, trac-8125, trac-8152: local protocol detection
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,
    
        /* Prefilters
         * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
         * 2) These are called:
         *    - BEFORE asking for a transport
         *    - AFTER param serialization (s.data is a string if s.processData is true)
         * 3) key is the dataType
         * 4) the catchall symbol "*" can be used
         * 5) execution will start with transport dataType and THEN continue down to "*" if needed
         */
        prefilters = {},
    
        /* Transports bindings
         * 1) key is the dataType
         * 2) the catchall symbol "*" can be used
         * 3) selection will start with transport dataType and THEN go to "*" if needed
         */
        transports = {},
    
        // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
        allTypes = "*/".concat( "*" ),
    
        // Anchor tag for parsing the document origin
        originAnchor = document.createElement( "a" );
    
    originAnchor.href = location.href;
    
    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports( structure ) {
    
        // dataTypeExpression is optional and defaults to "*"
        return function( dataTypeExpression, func ) {
    
            if ( typeof dataTypeExpression !== "string" ) {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
    
            var dataType,
                i = 0,
                dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];
    
            if ( isFunction( func ) ) {
    
                // For each dataType in the dataTypeExpression
                while ( ( dataType = dataTypes[ i++ ] ) ) {
    
                    // Prepend if requested
                    if ( dataType[ 0 ] === "+" ) {
                        dataType = dataType.slice( 1 ) || "*";
                        ( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
    
                    // Otherwise append
                    } else {
                        ( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
                    }
                }
            }
        };
    }
    
    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
    
        var inspected = {},
            seekingTransport = ( structure === transports );
    
        function inspect( dataType ) {
            var selected;
            inspected[ dataType ] = true;
            jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
                var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
                if ( typeof dataTypeOrTransport === "string" &&
                    !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
    
                    options.dataTypes.unshift( dataTypeOrTransport );
                    inspect( dataTypeOrTransport );
                    return false;
                } else if ( seekingTransport ) {
                    return !( selected = dataTypeOrTransport );
                }
            } );
            return selected;
        }
    
        return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
    }
    
    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes trac-9887
    function ajaxExtend( target, src ) {
        var key, deep,
            flatOptions = jQuery.ajaxSettings.flatOptions || {};
    
        for ( key in src ) {
            if ( src[ key ] !== undefined ) {
                ( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
            }
        }
        if ( deep ) {
            jQuery.extend( true, target, deep );
        }
    
        return target;
    }
    
    /* Handles responses to an ajax request:
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */
    function ajaxHandleResponses( s, jqXHR, responses ) {
    
        var ct, type, finalDataType, firstDataType,
            contents = s.contents,
            dataTypes = s.dataTypes;
    
        // Remove auto dataType and get content-type in the process
        while ( dataTypes[ 0 ] === "*" ) {
            dataTypes.shift();
            if ( ct === undefined ) {
                ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
            }
        }
    
        // Check if we're dealing with a known content-type
        if ( ct ) {
            for ( type in contents ) {
                if ( contents[ type ] && contents[ type ].test( ct ) ) {
                    dataTypes.unshift( type );
                    break;
                }
            }
        }
    
        // Check to see if we have a response for the expected dataType
        if ( dataTypes[ 0 ] in responses ) {
            finalDataType = dataTypes[ 0 ];
        } else {
    
            // Try convertible dataTypes
            for ( type in responses ) {
                if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
                    finalDataType = type;
                    break;
                }
                if ( !firstDataType ) {
                    firstDataType = type;
                }
            }
    
            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }
    
        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if ( finalDataType ) {
            if ( finalDataType !== dataTypes[ 0 ] ) {
                dataTypes.unshift( finalDataType );
            }
            return responses[ finalDataType ];
        }
    }
    
    /* Chain conversions given the request and the original response
     * Also sets the responseXXX fields on the jqXHR instance
     */
    function ajaxConvert( s, response, jqXHR, isSuccess ) {
        var conv2, current, conv, tmp, prev,
            converters = {},
    
            // Work with a copy of dataTypes in case we need to modify it for conversion
            dataTypes = s.dataTypes.slice();
    
        // Create converters map with lowercased keys
        if ( dataTypes[ 1 ] ) {
            for ( conv in s.converters ) {
                converters[ conv.toLowerCase() ] = s.converters[ conv ];
            }
        }
    
        current = dataTypes.shift();
    
        // Convert to each sequential dataType
        while ( current ) {
    
            if ( s.responseFields[ current ] ) {
                jqXHR[ s.responseFields[ current ] ] = response;
            }
    
            // Apply the dataFilter if provided
            if ( !prev && isSuccess && s.dataFilter ) {
                response = s.dataFilter( response, s.dataType );
            }
    
            prev = current;
            current = dataTypes.shift();
    
            if ( current ) {
    
                // There's only work to do if current dataType is non-auto
                if ( current === "*" ) {
    
                    current = prev;
    
                // Convert response if prev dataType is non-auto and differs from current
                } else if ( prev !== "*" && prev !== current ) {
    
                    // Seek a direct converter
                    conv = converters[ prev + " " + current ] || converters[ "* " + current ];
    
                    // If none found, seek a pair
                    if ( !conv ) {
                        for ( conv2 in converters ) {
    
                            // If conv2 outputs current
                            tmp = conv2.split( " " );
                            if ( tmp[ 1 ] === current ) {
    
                                // If prev can be converted to accepted input
                                conv = converters[ prev + " " + tmp[ 0 ] ] ||
                                    converters[ "* " + tmp[ 0 ] ];
                                if ( conv ) {
    
                                    // Condense equivalence converters
                                    if ( conv === true ) {
                                        conv = converters[ conv2 ];
    
                                    // Otherwise, insert the intermediate dataType
                                    } else if ( converters[ conv2 ] !== true ) {
                                        current = tmp[ 0 ];
                                        dataTypes.unshift( tmp[ 1 ] );
                                    }
                                    break;
                                }
                            }
                        }
                    }
    
                    // Apply converter (if not an equivalence)
                    if ( conv !== true ) {
    
                        // Unless errors are allowed to bubble, catch and return them
                        if ( conv && s.throws ) {
                            response = conv( response );
                        } else {
                            try {
                                response = conv( response );
                            } catch ( e ) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }
            }
        }
    
        return { state: "success", data: response };
    }
    
    jQuery.extend( {
    
        // Counter for holding the number of active queries
        active: 0,
    
        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},
    
        ajaxSettings: {
            url: location.href,
            type: "GET",
            isLocal: rlocalProtocol.test( location.protocol ),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
    
            /*
            timeout: 0,
            data: null,
            dataType: null,
            username: null,
            password: null,
            cache: null,
            throws: false,
            traditional: false,
            headers: {},
            */
    
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
    
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
    
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
    
            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {
    
                // Convert anything to text
                "* text": String,
    
                // Text to html (true = no transformation)
                "text html": true,
    
                // Evaluate text as a json expression
                "text json": JSON.parse,
    
                // Parse text as xml
                "text xml": jQuery.parseXML
            },
    
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },
    
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function( target, settings ) {
            return settings ?
    
                // Building a settings object
                ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
    
                // Extending ajaxSettings
                ajaxExtend( jQuery.ajaxSettings, target );
        },
    
        ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
        ajaxTransport: addToPrefiltersOrTransports( transports ),
    
        // Main method
        ajax: function( url, options ) {
    
            // If url is an object, simulate pre-1.5 signature
            if ( typeof url === "object" ) {
                options = url;
                url = undefined;
            }
    
            // Force options to be an object
            options = options || {};
    
            var transport,
    
                // URL without anti-cache param
                cacheURL,
    
                // Response headers
                responseHeadersString,
                responseHeaders,
    
                // timeout handle
                timeoutTimer,
    
                // Url cleanup var
                urlAnchor,
    
                // Request state (becomes false upon send and true upon completion)
                completed,
    
                // To know if global events are to be dispatched
                fireGlobals,
    
                // Loop variable
                i,
    
                // uncached part of the url
                uncached,
    
                // Create the final options object
                s = jQuery.ajaxSetup( {}, options ),
    
                // Callbacks context
                callbackContext = s.context || s,
    
                // Context for global events is callbackContext if it is a DOM node or jQuery collection
                globalEventContext = s.context &&
                    ( callbackContext.nodeType || callbackContext.jquery ) ?
                    jQuery( callbackContext ) :
                    jQuery.event,
    
                // Deferreds
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks( "once memory" ),
    
                // Status-dependent callbacks
                statusCode = s.statusCode || {},
    
                // Headers (they are sent all at once)
                requestHeaders = {},
                requestHeadersNames = {},
    
                // Default abort message
                strAbort = "canceled",
    
                // Fake xhr
                jqXHR = {
                    readyState: 0,
    
                    // Builds headers hashtable if needed
                    getResponseHeader: function( key ) {
                        var match;
                        if ( completed ) {
                            if ( !responseHeaders ) {
                                responseHeaders = {};
                                while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
                                    responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
                                        ( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
                                            .concat( match[ 2 ] );
                                }
                            }
                            match = responseHeaders[ key.toLowerCase() + " " ];
                        }
                        return match == null ? null : match.join( ", " );
                    },
    
                    // Raw string
                    getAllResponseHeaders: function() {
                        return completed ? responseHeadersString : null;
                    },
    
                    // Caches the header
                    setRequestHeader: function( name, value ) {
                        if ( completed == null ) {
                            name = requestHeadersNames[ name.toLowerCase() ] =
                                requestHeadersNames[ name.toLowerCase() ] || name;
                            requestHeaders[ name ] = value;
                        }
                        return this;
                    },
    
                    // Overrides response content-type header
                    overrideMimeType: function( type ) {
                        if ( completed == null ) {
                            s.mimeType = type;
                        }
                        return this;
                    },
    
                    // Status-dependent callbacks
                    statusCode: function( map ) {
                        var code;
                        if ( map ) {
                            if ( completed ) {
    
                                // Execute the appropriate callbacks
                                jqXHR.always( map[ jqXHR.status ] );
                            } else {
    
                                // Lazy-add the new callbacks in a way that preserves old ones
                                for ( code in map ) {
                                    statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
                                }
                            }
                        }
                        return this;
                    },
    
                    // Cancel the request
                    abort: function( statusText ) {
                        var finalText = statusText || strAbort;
                        if ( transport ) {
                            transport.abort( finalText );
                        }
                        done( 0, finalText );
                        return this;
                    }
                };
    
            // Attach deferreds
            deferred.promise( jqXHR );
    
            // Add protocol if not provided (prefilters might expect it)
            // Handle falsy url in the settings object (trac-10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ( ( url || s.url || location.href ) + "" )
                .replace( rprotocol, location.protocol + "//" );
    
            // Alias method option to type as per ticket trac-12004
            s.type = options.method || options.type || s.method || s.type;
    
            // Extract dataTypes list
            s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];
    
            // A cross-domain request is in order when the origin doesn't match the current origin.
            if ( s.crossDomain == null ) {
                urlAnchor = document.createElement( "a" );
    
                // Support: IE <=8 - 11, Edge 12 - 15
                // IE throws exception on accessing the href property if url is malformed,
                // e.g. http://example.com:80x/
                try {
                    urlAnchor.href = s.url;
    
                    // Support: IE <=8 - 11 only
                    // Anchor's host property isn't correctly set when s.url is relative
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
                        urlAnchor.protocol + "//" + urlAnchor.host;
                } catch ( e ) {
    
                    // If there is an error parsing the URL, assume it is crossDomain,
                    // it can be rejected by the transport if it is invalid
                    s.crossDomain = true;
                }
            }
    
            // Convert data if not already a string
            if ( s.data && s.processData && typeof s.data !== "string" ) {
                s.data = jQuery.param( s.data, s.traditional );
            }
    
            // Apply prefilters
            inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
    
            // If request was aborted inside a prefilter, stop there
            if ( completed ) {
                return jqXHR;
            }
    
            // We can fire global events as of now if asked to
            // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
            fireGlobals = jQuery.event && s.global;
    
            // Watch for a new set of requests
            if ( fireGlobals && jQuery.active++ === 0 ) {
                jQuery.event.trigger( "ajaxStart" );
            }
    
            // Uppercase the type
            s.type = s.type.toUpperCase();
    
            // Determine if request has content
            s.hasContent = !rnoContent.test( s.type );
    
            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            // Remove hash to simplify url manipulation
            cacheURL = s.url.replace( rhash, "" );
    
            // More options handling for requests with no content
            if ( !s.hasContent ) {
    
                // Remember the hash so we can put it back
                uncached = s.url.slice( cacheURL.length );
    
                // If data is available and should be processed, append data to url
                if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
                    cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;
    
                    // trac-9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }
    
                // Add or update anti-cache param if needed
                if ( s.cache === false ) {
                    cacheURL = cacheURL.replace( rantiCache, "$1" );
                    uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
                        uncached;
                }
    
                // Put hash and anti-cache on the URL that will be requested (gh-1732)
                s.url = cacheURL + uncached;
    
            // Change '%20' to '+' if this is encoded form body content (gh-2658)
            } else if ( s.data && s.processData &&
                ( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
                s.data = s.data.replace( r20, "+" );
            }
    
            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if ( s.ifModified ) {
                if ( jQuery.lastModified[ cacheURL ] ) {
                    jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
                }
                if ( jQuery.etag[ cacheURL ] ) {
                    jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
                }
            }
    
            // Set the correct header, if data is being sent
            if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
                jqXHR.setRequestHeader( "Content-Type", s.contentType );
            }
    
            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader(
                "Accept",
                s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
                    s.accepts[ s.dataTypes[ 0 ] ] +
                        ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
                    s.accepts[ "*" ]
            );
    
            // Check for headers option
            for ( i in s.headers ) {
                jqXHR.setRequestHeader( i, s.headers[ i ] );
            }
    
            // Allow custom headers/mimetypes and early abort
            if ( s.beforeSend &&
                ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {
    
                // Abort if not done already and return
                return jqXHR.abort();
            }
    
            // Aborting is no longer a cancellation
            strAbort = "abort";
    
            // Install callbacks on deferreds
            completeDeferred.add( s.complete );
            jqXHR.done( s.success );
            jqXHR.fail( s.error );
    
            // Get transport
            transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
    
            // If no transport, we auto-abort
            if ( !transport ) {
                done( -1, "No Transport" );
            } else {
                jqXHR.readyState = 1;
    
                // Send global event
                if ( fireGlobals ) {
                    globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
                }
    
                // If request was aborted inside ajaxSend, stop there
                if ( completed ) {
                    return jqXHR;
                }
    
                // Timeout
                if ( s.async && s.timeout > 0 ) {
                    timeoutTimer = window.setTimeout( function() {
                        jqXHR.abort( "timeout" );
                    }, s.timeout );
                }
    
                try {
                    completed = false;
                    transport.send( requestHeaders, done );
                } catch ( e ) {
    
                    // Rethrow post-completion exceptions
                    if ( completed ) {
                        throw e;
                    }
    
                    // Propagate others as results
                    done( -1, e );
                }
            }
    
            // Callback for when everything is done
            function done( status, nativeStatusText, responses, headers ) {
                var isSuccess, success, error, response, modified,
                    statusText = nativeStatusText;
    
                // Ignore repeat invocations
                if ( completed ) {
                    return;
                }
    
                completed = true;
    
                // Clear timeout if it exists
                if ( timeoutTimer ) {
                    window.clearTimeout( timeoutTimer );
                }
    
                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;
    
                // Cache response headers
                responseHeadersString = headers || "";
    
                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;
    
                // Determine if successful
                isSuccess = status >= 200 && status < 300 || status === 304;
    
                // Get response data
                if ( responses ) {
                    response = ajaxHandleResponses( s, jqXHR, responses );
                }
    
                // Use a noop converter for missing script but not if jsonp
                if ( !isSuccess &&
                    jQuery.inArray( "script", s.dataTypes ) > -1 &&
                    jQuery.inArray( "json", s.dataTypes ) < 0 ) {
                    s.converters[ "text script" ] = function() {};
                }
    
                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert( s, response, jqXHR, isSuccess );
    
                // If successful, handle type chaining
                if ( isSuccess ) {
    
                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if ( s.ifModified ) {
                        modified = jqXHR.getResponseHeader( "Last-Modified" );
                        if ( modified ) {
                            jQuery.lastModified[ cacheURL ] = modified;
                        }
                        modified = jqXHR.getResponseHeader( "etag" );
                        if ( modified ) {
                            jQuery.etag[ cacheURL ] = modified;
                        }
                    }
    
                    // if no content
                    if ( status === 204 || s.type === "HEAD" ) {
                        statusText = "nocontent";
    
                    // if not modified
                    } else if ( status === 304 ) {
                        statusText = "notmodified";
    
                    // If we have data, let's convert it
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
    
                    // Extract error from statusText and normalize for non-aborts
                    error = statusText;
                    if ( status || !statusText ) {
                        statusText = "error";
                        if ( status < 0 ) {
                            status = 0;
                        }
                    }
                }
    
                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = ( nativeStatusText || statusText ) + "";
    
                // Success/Error
                if ( isSuccess ) {
                    deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
                } else {
                    deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
                }
    
                // Status-dependent callbacks
                jqXHR.statusCode( statusCode );
                statusCode = undefined;
    
                if ( fireGlobals ) {
                    globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
                        [ jqXHR, s, isSuccess ? success : error ] );
                }
    
                // Complete
                completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
    
                if ( fireGlobals ) {
                    globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
    
                    // Handle the global AJAX counter
                    if ( !( --jQuery.active ) ) {
                        jQuery.event.trigger( "ajaxStop" );
                    }
                }
            }
    
            return jqXHR;
        },
    
        getJSON: function( url, data, callback ) {
            return jQuery.get( url, data, callback, "json" );
        },
    
        getScript: function( url, callback ) {
            return jQuery.get( url, undefined, callback, "script" );
        }
    } );
    
    jQuery.each( [ "get", "post" ], function( _i, method ) {
        jQuery[ method ] = function( url, data, callback, type ) {
    
            // Shift arguments if data argument was omitted
            if ( isFunction( data ) ) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
    
            // The url can be an options object (which then must have .url)
            return jQuery.ajax( jQuery.extend( {
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject( url ) && url ) );
        };
    } );
    
    jQuery.ajaxPrefilter( function( s ) {
        var i;
        for ( i in s.headers ) {
            if ( i.toLowerCase() === "content-type" ) {
                s.contentType = s.headers[ i ] || "";
            }
        }
    } );
    
    
    jQuery._evalUrl = function( url, options, doc ) {
        return jQuery.ajax( {
            url: url,
    
            // Make this explicit, since user can override this through ajaxSetup (trac-11264)
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
    
            // Only evaluate the response if it is successful (gh-4126)
            // dataFilter is not invoked for failure responses, so using it instead
            // of the default converter is kludgy but it works.
            converters: {
                "text script": function() {}
            },
            dataFilter: function( response ) {
                jQuery.globalEval( response, options, doc );
            }
        } );
    };
    
    
    jQuery.fn.extend( {
        wrapAll: function( html ) {
            var wrap;
    
            if ( this[ 0 ] ) {
                if ( isFunction( html ) ) {
                    html = html.call( this[ 0 ] );
                }
    
                // The elements to wrap the target around
                wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
    
                if ( this[ 0 ].parentNode ) {
                    wrap.insertBefore( this[ 0 ] );
                }
    
                wrap.map( function() {
                    var elem = this;
    
                    while ( elem.firstElementChild ) {
                        elem = elem.firstElementChild;
                    }
    
                    return elem;
                } ).append( this );
            }
    
            return this;
        },
    
        wrapInner: function( html ) {
            if ( isFunction( html ) ) {
                return this.each( function( i ) {
                    jQuery( this ).wrapInner( html.call( this, i ) );
                } );
            }
    
            return this.each( function() {
                var self = jQuery( this ),
                    contents = self.contents();
    
                if ( contents.length ) {
                    contents.wrapAll( html );
    
                } else {
                    self.append( html );
                }
            } );
        },
    
        wrap: function( html ) {
            var htmlIsFunction = isFunction( html );
    
            return this.each( function( i ) {
                jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
            } );
        },
    
        unwrap: function( selector ) {
            this.parent( selector ).not( "body" ).each( function() {
                jQuery( this ).replaceWith( this.childNodes );
            } );
            return this;
        }
    } );
    
    
    jQuery.expr.pseudos.hidden = function( elem ) {
        return !jQuery.expr.pseudos.visible( elem );
    };
    jQuery.expr.pseudos.visible = function( elem ) {
        return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
    };
    
    
    
    
    jQuery.ajaxSettings.xhr = function() {
        try {
            return new window.XMLHttpRequest();
        } catch ( e ) {}
    };
    
    var xhrSuccessStatus = {
    
            // File protocol always yields status code 0, assume 200
            0: 200,
    
            // Support: IE <=9 only
            // trac-1450: sometimes IE returns 1223 when it should be 204
            1223: 204
        },
        xhrSupported = jQuery.ajaxSettings.xhr();
    
    support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
    support.ajax = xhrSupported = !!xhrSupported;
    
    jQuery.ajaxTransport( function( options ) {
        var callback, errorCallback;
    
        // Cross domain only allowed if supported through XMLHttpRequest
        if ( support.cors || xhrSupported && !options.crossDomain ) {
            return {
                send: function( headers, complete ) {
                    var i,
                        xhr = options.xhr();
    
                    xhr.open(
                        options.type,
                        options.url,
                        options.async,
                        options.username,
                        options.password
                    );
    
                    // Apply custom fields if provided
                    if ( options.xhrFields ) {
                        for ( i in options.xhrFields ) {
                            xhr[ i ] = options.xhrFields[ i ];
                        }
                    }
    
                    // Override mime type if needed
                    if ( options.mimeType && xhr.overrideMimeType ) {
                        xhr.overrideMimeType( options.mimeType );
                    }
    
                    // X-Requested-With header
                    // For cross-domain requests, seeing as conditions for a preflight are
                    // akin to a jigsaw puzzle, we simply never set it to be sure.
                    // (it can always be set on a per-request basis or even using ajaxSetup)
                    // For same-domain requests, won't change header if already provided.
                    if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
                        headers[ "X-Requested-With" ] = "XMLHttpRequest";
                    }
    
                    // Set headers
                    for ( i in headers ) {
                        xhr.setRequestHeader( i, headers[ i ] );
                    }
    
                    // Callback
                    callback = function( type ) {
                        return function() {
                            if ( callback ) {
                                callback = errorCallback = xhr.onload =
                                    xhr.onerror = xhr.onabort = xhr.ontimeout =
                                        xhr.onreadystatechange = null;
    
                                if ( type === "abort" ) {
                                    xhr.abort();
                                } else if ( type === "error" ) {
    
                                    // Support: IE <=9 only
                                    // On a manual native abort, IE9 throws
                                    // errors on any property access that is not readyState
                                    if ( typeof xhr.status !== "number" ) {
                                        complete( 0, "error" );
                                    } else {
                                        complete(
    
                                            // File: protocol always yields status 0; see trac-8605, trac-14207
                                            xhr.status,
                                            xhr.statusText
                                        );
                                    }
                                } else {
                                    complete(
                                        xhrSuccessStatus[ xhr.status ] || xhr.status,
                                        xhr.statusText,
    
                                        // Support: IE <=9 only
                                        // IE9 has no XHR2 but throws on binary (trac-11426)
                                        // For XHR2 non-text, let the caller handle it (gh-2498)
                                        ( xhr.responseType || "text" ) !== "text"  ||
                                        typeof xhr.responseText !== "string" ?
                                            { binary: xhr.response } :
                                            { text: xhr.responseText },
                                        xhr.getAllResponseHeaders()
                                    );
                                }
                            }
                        };
                    };
    
                    // Listen to events
                    xhr.onload = callback();
                    errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );
    
                    // Support: IE 9 only
                    // Use onreadystatechange to replace onabort
                    // to handle uncaught aborts
                    if ( xhr.onabort !== undefined ) {
                        xhr.onabort = errorCallback;
                    } else {
                        xhr.onreadystatechange = function() {
    
                            // Check readyState before timeout as it changes
                            if ( xhr.readyState === 4 ) {
    
                                // Allow onerror to be called first,
                                // but that will not handle a native abort
                                // Also, save errorCallback to a variable
                                // as xhr.onerror cannot be accessed
                                window.setTimeout( function() {
                                    if ( callback ) {
                                        errorCallback();
                                    }
                                } );
                            }
                        };
                    }
    
                    // Create the abort callback
                    callback = callback( "abort" );
    
                    try {
    
                        // Do send the request (this may raise an exception)
                        xhr.send( options.hasContent && options.data || null );
                    } catch ( e ) {
    
                        // trac-14683: Only rethrow if this hasn't been notified as an error yet
                        if ( callback ) {
                            throw e;
                        }
                    }
                },
    
                abort: function() {
                    if ( callback ) {
                        callback();
                    }
                }
            };
        }
    } );
    
    
    
    
    // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
    jQuery.ajaxPrefilter( function( s ) {
        if ( s.crossDomain ) {
            s.contents.script = false;
        }
    } );
    
    // Install script dataType
    jQuery.ajaxSetup( {
        accepts: {
            script: "text/javascript, application/javascript, " +
                "application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function( text ) {
                jQuery.globalEval( text );
                return text;
            }
        }
    } );
    
    // Handle cache's special case and crossDomain
    jQuery.ajaxPrefilter( "script", function( s ) {
        if ( s.cache === undefined ) {
            s.cache = false;
        }
        if ( s.crossDomain ) {
            s.type = "GET";
        }
    } );
    
    // Bind script tag hack transport
    jQuery.ajaxTransport( "script", function( s ) {
    
        // This transport only deals with cross domain or forced-by-attrs requests
        if ( s.crossDomain || s.scriptAttrs ) {
            var script, callback;
            return {
                send: function( _, complete ) {
                    script = jQuery( "<script>" )
                        .attr( s.scriptAttrs || {} )
                        .prop( { charset: s.scriptCharset, src: s.url } )
                        .on( "load error", callback = function( evt ) {
                            script.remove();
                            callback = null;
                            if ( evt ) {
                                complete( evt.type === "error" ? 404 : 200, evt.type );
                            }
                        } );
    
                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    document.head.appendChild( script[ 0 ] );
                },
                abort: function() {
                    if ( callback ) {
                        callback();
                    }
                }
            };
        }
    } );
    
    
    
    
    var oldCallbacks = [],
        rjsonp = /(=)\?(?=&|$)|\?\?/;
    
    // Default jsonp settings
    jQuery.ajaxSetup( {
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
            this[ callback ] = true;
            return callback;
        }
    } );
    
    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
    
        var callbackName, overwritten, responseContainer,
            jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
                "url" :
                typeof s.data === "string" &&
                    ( s.contentType || "" )
                        .indexOf( "application/x-www-form-urlencoded" ) === 0 &&
                    rjsonp.test( s.data ) && "data"
            );
    
        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
    
            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
                s.jsonpCallback() :
                s.jsonpCallback;
    
            // Insert callback into url or form data
            if ( jsonProp ) {
                s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
            } else if ( s.jsonp !== false ) {
                s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
            }
    
            // Use data converter to retrieve json after script execution
            s.converters[ "script json" ] = function() {
                if ( !responseContainer ) {
                    jQuery.error( callbackName + " was not called" );
                }
                return responseContainer[ 0 ];
            };
    
            // Force json dataType
            s.dataTypes[ 0 ] = "json";
    
            // Install callback
            overwritten = window[ callbackName ];
            window[ callbackName ] = function() {
                responseContainer = arguments;
            };
    
            // Clean-up function (fires after converters)
            jqXHR.always( function() {
    
                // If previous value didn't exist - remove it
                if ( overwritten === undefined ) {
                    jQuery( window ).removeProp( callbackName );
    
                // Otherwise restore preexisting value
                } else {
                    window[ callbackName ] = overwritten;
                }
    
                // Save back as free
                if ( s[ callbackName ] ) {
    
                    // Make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;
    
                    // Save the callback name for future use
                    oldCallbacks.push( callbackName );
                }
    
                // Call if it was a function and we have a response
                if ( responseContainer && isFunction( overwritten ) ) {
                    overwritten( responseContainer[ 0 ] );
                }
    
                responseContainer = overwritten = undefined;
            } );
    
            // Delegate to script
            return "script";
        }
    } );
    
    
    
    
    // Support: Safari 8 only
    // In Safari 8 documents created via document.implementation.createHTMLDocument
    // collapse sibling forms: the second one becomes a child of the first one.
    // Because of that, this security measure has to be disabled in Safari 8.
    // https://bugs.webkit.org/show_bug.cgi?id=137337
    support.createHTMLDocument = ( function() {
        var body = document.implementation.createHTMLDocument( "" ).body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
    } )();
    
    
    // Argument "data" should be string of html
    // context (optional): If specified, the fragment will be created in this context,
    // defaults to document
    // keepScripts (optional): If true, will include scripts passed in the html string
    jQuery.parseHTML = function( data, context, keepScripts ) {
        if ( typeof data !== "string" ) {
            return [];
        }
        if ( typeof context === "boolean" ) {
            keepScripts = context;
            context = false;
        }
    
        var base, parsed, scripts;
    
        if ( !context ) {
    
            // Stop scripts or inline event handlers from being executed immediately
            // by using document.implementation
            if ( support.createHTMLDocument ) {
                context = document.implementation.createHTMLDocument( "" );
    
                // Set the base href for the created document
                // so any parsed elements with URLs
                // are based on the document's URL (gh-2965)
                base = context.createElement( "base" );
                base.href = document.location.href;
                context.head.appendChild( base );
            } else {
                context = document;
            }
        }
    
        parsed = rsingleTag.exec( data );
        scripts = !keepScripts && [];
    
        // Single tag
        if ( parsed ) {
            return [ context.createElement( parsed[ 1 ] ) ];
        }
    
        parsed = buildFragment( [ data ], context, scripts );
    
        if ( scripts && scripts.length ) {
            jQuery( scripts ).remove();
        }
    
        return jQuery.merge( [], parsed.childNodes );
    };
    
    
    /**
     * Load a url into a page
     */
    jQuery.fn.load = function( url, params, callback ) {
        var selector, type, response,
            self = this,
            off = url.indexOf( " " );
    
        if ( off > -1 ) {
            selector = stripAndCollapse( url.slice( off ) );
            url = url.slice( 0, off );
        }
    
        // If it's a function
        if ( isFunction( params ) ) {
    
            // We assume that it's the callback
            callback = params;
            params = undefined;
    
        // Otherwise, build a param string
        } else if ( params && typeof params === "object" ) {
            type = "POST";
        }
    
        // If we have elements to modify, make the request
        if ( self.length > 0 ) {
            jQuery.ajax( {
                url: url,
    
                // If "type" variable is undefined, then "GET" method will be used.
                // Make value of this field explicit since
                // user can override it through ajaxSetup method
                type: type || "GET",
                dataType: "html",
                data: params
            } ).done( function( responseText ) {
    
                // Save response for use in complete callback
                response = arguments;
    
                self.html( selector ?
    
                    // If a selector was specified, locate the right elements in a dummy div
                    // Exclude scripts to avoid IE 'Permission Denied' errors
                    jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
    
                    // Otherwise use the full result
                    responseText );
    
            // If the request succeeds, this function gets "data", "status", "jqXHR"
            // but they are ignored because response was set above.
            // If it fails, this function gets "jqXHR", "status", "error"
            } ).always( callback && function( jqXHR, status ) {
                self.each( function() {
                    callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
                } );
            } );
        }
    
        return this;
    };
    
    
    
    
    jQuery.expr.pseudos.animated = function( elem ) {
        return jQuery.grep( jQuery.timers, function( fn ) {
            return elem === fn.elem;
        } ).length;
    };
    
    
    
    
    jQuery.offset = {
        setOffset: function( elem, options, i ) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
                position = jQuery.css( elem, "position" ),
                curElem = jQuery( elem ),
                props = {};
    
            // Set position first, in-case top/left are set even on static elem
            if ( position === "static" ) {
                elem.style.position = "relative";
            }
    
            curOffset = curElem.offset();
            curCSSTop = jQuery.css( elem, "top" );
            curCSSLeft = jQuery.css( elem, "left" );
            calculatePosition = ( position === "absolute" || position === "fixed" ) &&
                ( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
    
            // Need to be able to calculate position if either
            // top or left is auto and position is either absolute or fixed
            if ( calculatePosition ) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
    
            } else {
                curTop = parseFloat( curCSSTop ) || 0;
                curLeft = parseFloat( curCSSLeft ) || 0;
            }
    
            if ( isFunction( options ) ) {
    
                // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
                options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
            }
    
            if ( options.top != null ) {
                props.top = ( options.top - curOffset.top ) + curTop;
            }
            if ( options.left != null ) {
                props.left = ( options.left - curOffset.left ) + curLeft;
            }
    
            if ( "using" in options ) {
                options.using.call( elem, props );
    
            } else {
                curElem.css( props );
            }
        }
    };
    
    jQuery.fn.extend( {
    
        // offset() relates an element's border box to the document origin
        offset: function( options ) {
    
            // Preserve chaining for setter
            if ( arguments.length ) {
                return options === undefined ?
                    this :
                    this.each( function( i ) {
                        jQuery.offset.setOffset( this, options, i );
                    } );
            }
    
            var rect, win,
                elem = this[ 0 ];
    
            if ( !elem ) {
                return;
            }
    
            // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
            // Support: IE <=11 only
            // Running getBoundingClientRect on a
            // disconnected node in IE throws an error
            if ( !elem.getClientRects().length ) {
                return { top: 0, left: 0 };
            }
    
            // Get document-relative position by adding viewport scroll to viewport-relative gBCR
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
                top: rect.top + win.pageYOffset,
                left: rect.left + win.pageXOffset
            };
        },
    
        // position() relates an element's margin box to its offset parent's padding box
        // This corresponds to the behavior of CSS absolute positioning
        position: function() {
            if ( !this[ 0 ] ) {
                return;
            }
    
            var offsetParent, offset, doc,
                elem = this[ 0 ],
                parentOffset = { top: 0, left: 0 };
    
            // position:fixed elements are offset from the viewport, which itself always has zero offset
            if ( jQuery.css( elem, "position" ) === "fixed" ) {
    
                // Assume position:fixed implies availability of getBoundingClientRect
                offset = elem.getBoundingClientRect();
    
            } else {
                offset = this.offset();
    
                // Account for the *real* offset parent, which can be the document or its root element
                // when a statically positioned element is identified
                doc = elem.ownerDocument;
                offsetParent = elem.offsetParent || doc.documentElement;
                while ( offsetParent &&
                    ( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
                    jQuery.css( offsetParent, "position" ) === "static" ) {
    
                    offsetParent = offsetParent.parentNode;
                }
                if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {
    
                    // Incorporate borders into its offset, since they are outside its content origin
                    parentOffset = jQuery( offsetParent ).offset();
                    parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
                    parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
                }
            }
    
            // Subtract parent offsets and element margins
            return {
                top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
                left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
            };
        },
    
        // This method will return documentElement in the following cases:
        // 1) For the element inside the iframe without offsetParent, this method will return
        //    documentElement of the parent window
        // 2) For the hidden or detached element
        // 3) For body or html element, i.e. in case of the html node - it will return itself
        //
        // but those exceptions were never presented as a real life use-cases
        // and might be considered as more preferable results.
        //
        // This logic, however, is not guaranteed and can change at any point in the future
        offsetParent: function() {
            return this.map( function() {
                var offsetParent = this.offsetParent;
    
                while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
                    offsetParent = offsetParent.offsetParent;
                }
    
                return offsetParent || documentElement;
            } );
        }
    } );
    
    // Create scrollLeft and scrollTop methods
    jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
        var top = "pageYOffset" === prop;
    
        jQuery.fn[ method ] = function( val ) {
            return access( this, function( elem, method, val ) {
    
                // Coalesce documents and windows
                var win;
                if ( isWindow( elem ) ) {
                    win = elem;
                } else if ( elem.nodeType === 9 ) {
                    win = elem.defaultView;
                }
    
                if ( val === undefined ) {
                    return win ? win[ prop ] : elem[ method ];
                }
    
                if ( win ) {
                    win.scrollTo(
                        !top ? val : win.pageXOffset,
                        top ? val : win.pageYOffset
                    );
    
                } else {
                    elem[ method ] = val;
                }
            }, method, val, arguments.length );
        };
    } );
    
    // Support: Safari <=7 - 9.1, Chrome <=37 - 49
    // Add the top/left cssHooks using jQuery.fn.position
    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
    // getComputedStyle returns percent when specified for top/left/bottom/right;
    // rather than make the css module depend on the offset module, just check for it here
    jQuery.each( [ "top", "left" ], function( _i, prop ) {
        jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
            function( elem, computed ) {
                if ( computed ) {
                    computed = curCSS( elem, prop );
    
                    // If curCSS returns percentage, fallback to offset
                    return rnumnonpx.test( computed ) ?
                        jQuery( elem ).position()[ prop ] + "px" :
                        computed;
                }
            }
        );
    } );
    
    
    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
        jQuery.each( {
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function( defaultExtra, funcName ) {
    
            // Margin is only for outerHeight, outerWidth
            jQuery.fn[ funcName ] = function( margin, value ) {
                var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
                    extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
    
                return access( this, function( elem, type, value ) {
                    var doc;
    
                    if ( isWindow( elem ) ) {
    
                        // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                        return funcName.indexOf( "outer" ) === 0 ?
                            elem[ "inner" + name ] :
                            elem.document.documentElement[ "client" + name ];
                    }
    
                    // Get document width or height
                    if ( elem.nodeType === 9 ) {
                        doc = elem.documentElement;
    
                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                        // whichever is greatest
                        return Math.max(
                            elem.body[ "scroll" + name ], doc[ "scroll" + name ],
                            elem.body[ "offset" + name ], doc[ "offset" + name ],
                            doc[ "client" + name ]
                        );
                    }
    
                    return value === undefined ?
    
                        // Get width or height on the element, requesting but not forcing parseFloat
                        jQuery.css( elem, type, extra ) :
    
                        // Set width or height on the element
                        jQuery.style( elem, type, value, extra );
                }, type, chainable ? margin : undefined, chainable );
            };
        } );
    } );
    
    
    jQuery.each( [
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend"
    ], function( _i, type ) {
        jQuery.fn[ type ] = function( fn ) {
            return this.on( type, fn );
        };
    } );
    
    
    
    
    jQuery.fn.extend( {
    
        bind: function( types, data, fn ) {
            return this.on( types, null, data, fn );
        },
        unbind: function( types, fn ) {
            return this.off( types, null, fn );
        },
    
        delegate: function( selector, types, data, fn ) {
            return this.on( types, selector, data, fn );
        },
        undelegate: function( selector, types, fn ) {
    
            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ?
                this.off( selector, "**" ) :
                this.off( types, selector || "**", fn );
        },
    
        hover: function( fnOver, fnOut ) {
            return this
                .on( "mouseenter", fnOver )
                .on( "mouseleave", fnOut || fnOver );
        }
    } );
    
    jQuery.each(
        ( "blur focus focusin focusout resize scroll click dblclick " +
        "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
        "change select submit keydown keypress keyup contextmenu" ).split( " " ),
        function( _i, name ) {
    
            // Handle event binding
            jQuery.fn[ name ] = function( data, fn ) {
                return arguments.length > 0 ?
                    this.on( name, null, data, fn ) :
                    this.trigger( name );
            };
        }
    );
    
    
    
    
    // Support: Android <=4.0 only
    // Make sure we trim BOM and NBSP
    // Require that the "whitespace run" starts from a non-whitespace
    // to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
    var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;
    
    // Bind a function to a context, optionally partially applying any
    // arguments.
    // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
    // However, it is not slated for removal any time soon
    jQuery.proxy = function( fn, context ) {
        var tmp, args, proxy;
    
        if ( typeof context === "string" ) {
            tmp = fn[ context ];
            context = fn;
            fn = tmp;
        }
    
        // Quick check to determine if target is callable, in the spec
        // this throws a TypeError, but we will just return undefined.
        if ( !isFunction( fn ) ) {
            return undefined;
        }
    
        // Simulated bind
        args = slice.call( arguments, 2 );
        proxy = function() {
            return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
        };
    
        // Set the guid of unique handler to the same of original handler, so it can be removed
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;
    
        return proxy;
    };
    
    jQuery.holdReady = function( hold ) {
        if ( hold ) {
            jQuery.readyWait++;
        } else {
            jQuery.ready( true );
        }
    };
    jQuery.isArray = Array.isArray;
    jQuery.parseJSON = JSON.parse;
    jQuery.nodeName = nodeName;
    jQuery.isFunction = isFunction;
    jQuery.isWindow = isWindow;
    jQuery.camelCase = camelCase;
    jQuery.type = toType;
    
    jQuery.now = Date.now;
    
    jQuery.isNumeric = function( obj ) {
    
        // As of jQuery 3.0, isNumeric is limited to
        // strings and numbers (primitives or objects)
        // that can be coerced to finite numbers (gh-2662)
        var type = jQuery.type( obj );
        return ( type === "number" || type === "string" ) &&
    
            // parseFloat NaNs numeric-cast false positives ("")
            // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
            // subtraction forces infinities to NaN
            !isNaN( obj - parseFloat( obj ) );
    };
    
    jQuery.trim = function( text ) {
        return text == null ?
            "" :
            ( text + "" ).replace( rtrim, "$1" );
    };
    
    
    
    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.
    
    // Note that for maximum portability, libraries that are not jQuery should
    // declare themselves as anonymous modules, and avoid setting a global if an
    // AMD loader is present. jQuery is a special case. For more information, see
    // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
    
    if ( typeof define === "function" && define.amd ) {
        define( "jquery", [], function() {
            return jQuery;
        } );
    }
    
    
    
    
    var
    
        // Map over jQuery in case of overwrite
        _jQuery = window.jQuery,
    
        // Map over the $ in case of overwrite
        _$ = window.$;
    
    jQuery.noConflict = function( deep ) {
        if ( window.$ === jQuery ) {
            window.$ = _$;
        }
    
        if ( deep && window.jQuery === jQuery ) {
            window.jQuery = _jQuery;
        }
    
        return jQuery;
    };
    
    // Expose jQuery and $ identifiers, even in AMD
    // (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
    // and CommonJS for browser emulators (trac-13566)
    if ( typeof noGlobal === "undefined" ) {
        window.jQuery = window.$ = jQuery;
    }
    
    
    
    
    return jQuery;
    } );
    
    },{}],417:[function(require,module,exports){
    /*globals jQuery, define, module, exports, require, window, document, postMessage */
    (function (factory) {
        "use strict";
        if (typeof define === 'function' && define.amd) {
            define(['jquery'], factory);
        }
        else if(typeof module !== 'undefined' && module.exports) {
            module.exports = factory(require('jquery'));
        }
        else {
            factory(jQuery);
        }
    }(function ($, undefined) {
        "use strict";
    /*!
     * jsTree 3.3.16
     * http://jstree.com/
     *
     * Copyright (c) 2014 Ivan Bozhanov (http://vakata.com)
     *
     * Licensed same as jquery - under the terms of the MIT License
     *   http://www.opensource.org/licenses/mit-license.php
     */
    /*!
     * if using jslint please allow for the jQuery global and use following options:
     * jslint: loopfunc: true, browser: true, ass: true, bitwise: true, continue: true, nomen: true, plusplus: true, regexp: true, unparam: true, todo: true, white: true
     */
    /*jshint -W083 */
    
        // prevent another load? maybe there is a better way?
        if($.jstree) {
            return;
        }
    
        /**
         * ### jsTree core functionality
         */
    
        // internal variables
        var instance_counter = 0,
            ccp_node = false,
            ccp_mode = false,
            ccp_inst = false,
            themes_loaded = [],
            src = $('script:last').attr('src'),
            document = window.document; // local variable is always faster to access then a global
    
        var setImmediate = window.setImmediate;
        var Promise = window.Promise;
        if (!setImmediate && Promise) {
            // Good enough approximation of setImmediate
            setImmediate = function (cb, arg) {
                Promise.resolve(arg).then(cb);
            };
        }
    
        /**
         * holds all jstree related functions and variables, including the actual class and methods to create, access and manipulate instances.
         * @name $.jstree
         */
        $.jstree = {
            /**
             * specifies the jstree version in use
             * @name $.jstree.version
             */
            version : '3.3.16',
            /**
             * holds all the default options used when creating new instances
             * @name $.jstree.defaults
             */
            defaults : {
                /**
                 * configure which plugins will be active on an instance. Should be an array of strings, where each element is a plugin name. The default is `[]`
                 * @name $.jstree.defaults.plugins
                 */
                plugins : []
            },
            /**
             * stores all loaded jstree plugins (used internally)
             * @name $.jstree.plugins
             */
            plugins : {},
            path : src && src.indexOf('/') !== -1 ? src.replace(/\/[^\/]+$/,'') : '',
            idregex : /[\\:&!^|()\[\]<>@*'+~#";.,=\- \/${}%?`]/g,
            root : '#'
        };
        
        /**
         * creates a jstree instance
         * @name $.jstree.create(el [, options])
         * @param {DOMElement|jQuery|String} el the element to create the instance on, can be jQuery extended or a selector
         * @param {Object} options options for this instance (extends `$.jstree.defaults`)
         * @return {jsTree} the new instance
         */
        $.jstree.create = function (el, options) {
            var tmp = new $.jstree.core(++instance_counter),
                opt = options;
            options = $.extend(true, {}, $.jstree.defaults, options);
            if(opt && opt.plugins) {
                options.plugins = opt.plugins;
            }
            $.each(options.plugins, function (i, k) {
                if(i !== 'core') {
                    tmp = tmp.plugin(k, options[k]);
                }
            });
            $(el).data('jstree', tmp);
            tmp.init(el, options);
            return tmp;
        };
        /**
         * remove all traces of jstree from the DOM and destroy all instances
         * @name $.jstree.destroy()
         */
        $.jstree.destroy = function () {
            $('.jstree:jstree').jstree('destroy');
            $(document).off('.jstree');
        };
        /**
         * the jstree class constructor, used only internally
         * @private
         * @name $.jstree.core(id)
         * @param {Number} id this instance's index
         */
        $.jstree.core = function (id) {
            this._id = id;
            this._cnt = 0;
            this._wrk = null;
            this._data = {
                core : {
                    themes : {
                        name : false,
                        dots : false,
                        icons : false,
                        ellipsis : false
                    },
                    selected : [],
                    last_error : {},
                    working : false,
                    worker_queue : [],
                    focused : null
                }
            };
        };
        /**
         * get a reference to an existing instance
         *
         * __Examples__
         *
         *	// provided a container with an ID of "tree", and a nested node with an ID of "branch"
         *	// all of there will return the same instance
         *	$.jstree.reference('tree');
         *	$.jstree.reference('#tree');
         *	$.jstree.reference($('#tree'));
         *	$.jstree.reference(document.getElementByID('tree'));
         *	$.jstree.reference('branch');
         *	$.jstree.reference('#branch');
         *	$.jstree.reference($('#branch'));
         *	$.jstree.reference(document.getElementByID('branch'));
         *
         * @name $.jstree.reference(needle)
         * @param {DOMElement|jQuery|String} needle
         * @return {jsTree|null} the instance or `null` if not found
         */
        $.jstree.reference = function (needle) {
            var tmp = null,
                obj = null;
            if(needle && needle.id && (!needle.tagName || !needle.nodeType)) { needle = needle.id; }
    
            if(!obj || !obj.length) {
                try { obj = $(needle); } catch (ignore) { }
            }
            if(!obj || !obj.length) {
                try { obj = $('#' + needle.replace($.jstree.idregex,'\\$&')); } catch (ignore) { }
            }
            if(obj && obj.length && (obj = obj.closest('.jstree')).length && (obj = obj.data('jstree'))) {
                tmp = obj;
            }
            else {
                $('.jstree').each(function () {
                    var inst = $(this).data('jstree');
                    if(inst && inst._model.data[needle]) {
                        tmp = inst;
                        return false;
                    }
                });
            }
            return tmp;
        };
        /**
         * Create an instance, get an instance or invoke a command on a instance.
         *
         * If there is no instance associated with the current node a new one is created and `arg` is used to extend `$.jstree.defaults` for this new instance. There would be no return value (chaining is not broken).
         *
         * If there is an existing instance and `arg` is a string the command specified by `arg` is executed on the instance, with any additional arguments passed to the function. If the function returns a value it will be returned (chaining could break depending on function).
         *
         * If there is an existing instance and `arg` is not a string the instance itself is returned (similar to `$.jstree.reference`).
         *
         * In any other case - nothing is returned and chaining is not broken.
         *
         * __Examples__
         *
         *	$('#tree1').jstree(); // creates an instance
         *	$('#tree2').jstree({ plugins : [] }); // create an instance with some options
         *	$('#tree1').jstree('open_node', '#branch_1'); // call a method on an existing instance, passing additional arguments
         *	$('#tree2').jstree(); // get an existing instance (or create an instance)
         *	$('#tree2').jstree(true); // get an existing instance (will not create new instance)
         *	$('#branch_1').jstree().select_node('#branch_1'); // get an instance (using a nested element and call a method)
         *
         * @name $().jstree([arg])
         * @param {String|Object} arg
         * @return {Mixed}
         */
        $.fn.jstree = function (arg) {
            // check for string argument
            var is_method	= (typeof arg === 'string'),
                args		= Array.prototype.slice.call(arguments, 1),
                result		= null;
            if(arg === true && !this.length) { return false; }
            this.each(function () {
                // get the instance (if there is one) and method (if it exists)
                var instance = $.jstree.reference(this),
                    method = is_method && instance ? instance[arg] : null;
                // if calling a method, and method is available - execute on the instance
                result = is_method && method ?
                    method.apply(instance, args) :
                    null;
                // if there is no instance and no method is being called - create one
                if(!instance && !is_method && (arg === undefined || $.isPlainObject(arg))) {
                    $.jstree.create(this, arg);
                }
                // if there is an instance and no method is called - return the instance
                if( (instance && !is_method) || arg === true ) {
                    result = instance || false;
                }
                // if there was a method call which returned a result - break and return the value
                if(result !== null && result !== undefined) {
                    return false;
                }
            });
            // if there was a method call with a valid return value - return that, otherwise continue the chain
            return result !== null && result !== undefined ?
                result : this;
        };
        /**
         * used to find elements containing an instance
         *
         * __Examples__
         *
         *	$('div:jstree').each(function () {
         *		$(this).jstree('destroy');
         *	});
         *
         * @name $(':jstree')
         * @return {jQuery}
         */
        $.expr.pseudos.jstree = $.expr.createPseudo(function(search) {
            return function(a) {
                return $(a).hasClass('jstree') &&
                    $(a).data('jstree') !== undefined;
            };
        });
    
        /**
         * stores all defaults for the core
         * @name $.jstree.defaults.core
         */
        $.jstree.defaults.core = {
            /**
             * data configuration
             *
             * If left as `false` the HTML inside the jstree container element is used to populate the tree (that should be an unordered list with list items).
             *
             * You can also pass in a HTML string or a JSON array here.
             *
             * It is possible to pass in a standard jQuery-like AJAX config and jstree will automatically determine if the response is JSON or HTML and use that to populate the tree.
             * In addition to the standard jQuery ajax options here you can supply functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node is being loaded, the return value of those functions will be used.
             *
             * The last option is to specify a function, that function will receive the node being loaded as argument and a second param which is a function which should be called with the result.
             *
             * __Examples__
             *
             *	// AJAX
             *	$('#tree').jstree({
             *		'core' : {
             *			'data' : {
             *				'url' : '/get/children/',
             *				'data' : function (node) {
             *					return { 'id' : node.id };
             *				}
             *			}
             *		});
             *
             *	// direct data
             *	$('#tree').jstree({
             *		'core' : {
             *			'data' : [
             *				'Simple root node',
             *				{
             *					'id' : 'node_2',
             *					'text' : 'Root node with options',
             *					'state' : { 'opened' : true, 'selected' : true },
             *					'children' : [ { 'text' : 'Child 1' }, 'Child 2']
             *				}
             *			]
             *		}
             *	});
             *
             *	// function
             *	$('#tree').jstree({
             *		'core' : {
             *			'data' : function (obj, callback) {
             *				callback.call(this, ['Root 1', 'Root 2']);
             *			}
             *		});
             *
             * @name $.jstree.defaults.core.data
             */
            data			: false,
            /**
             * configure the various strings used throughout the tree
             *
             * You can use an object where the key is the string you need to replace and the value is your replacement.
             * Another option is to specify a function which will be called with an argument of the needed string and should return the replacement.
             * If left as `false` no replacement is made.
             *
             * __Examples__
             *
             *	$('#tree').jstree({
             *		'core' : {
             *			'strings' : {
             *				'Loading ...' : 'Please wait ...'
             *			}
             *		}
             *	});
             *
             * @name $.jstree.defaults.core.strings
             */
            strings			: false,
            /**
             * determines what happens when a user tries to modify the structure of the tree
             * If left as `false` all operations like create, rename, delete, move or copy are prevented.
             * You can set this to `true` to allow all interactions or use a function to have better control.
             *
             * __Examples__
             *
             *	$('#tree').jstree({
             *		'core' : {
             *			'check_callback' : function (operation, node, node_parent, node_position, more) {
             *				// operation can be 'create_node', 'rename_node', 'delete_node', 'move_node', 'copy_node' or 'edit'
             *				// in case of 'rename_node' node_position is filled with the new node name
             *				return operation === 'rename_node' ? true : false;
             *			}
             *		}
             *	});
             *
             * @name $.jstree.defaults.core.check_callback
             */
            check_callback	: false,
            /**
             * a callback called with a single object parameter in the instance's scope when something goes wrong (operation prevented, ajax failed, etc)
             * @name $.jstree.defaults.core.error
             */
            error			: $.noop,
            /**
             * the open / close animation duration in milliseconds - set this to `false` to disable the animation (default is `200`)
             * @name $.jstree.defaults.core.animation
             */
            animation		: 200,
            /**
             * a boolean indicating if multiple nodes can be selected
             * @name $.jstree.defaults.core.multiple
             */
            multiple		: true,
            /**
             * theme configuration object
             * @name $.jstree.defaults.core.themes
             */
            themes			: {
                /**
                 * the name of the theme to use (if left as `false` the default theme is used)
                 * @name $.jstree.defaults.core.themes.name
                 */
                name			: false,
                /**
                 * the URL of the theme's CSS file, leave this as `false` if you have manually included the theme CSS (recommended). You can set this to `true` too which will try to autoload the theme.
                 * @name $.jstree.defaults.core.themes.url
                 */
                url				: false,
                /**
                 * the location of all jstree themes - only used if `url` is set to `true`
                 * @name $.jstree.defaults.core.themes.dir
                 */
                dir				: false,
                /**
                 * a boolean indicating if connecting dots are shown
                 * @name $.jstree.defaults.core.themes.dots
                 */
                dots			: true,
                /**
                 * a boolean indicating if node icons are shown
                 * @name $.jstree.defaults.core.themes.icons
                 */
                icons			: true,
                /**
                 * a boolean indicating if node ellipsis should be shown - this only works with a fixed with on the container
                 * @name $.jstree.defaults.core.themes.ellipsis
                 */
                ellipsis		: false,
                /**
                 * a boolean indicating if the tree background is striped
                 * @name $.jstree.defaults.core.themes.stripes
                 */
                stripes			: false,
                /**
                 * a string (or boolean `false`) specifying the theme variant to use (if the theme supports variants)
                 * @name $.jstree.defaults.core.themes.variant
                 */
                variant			: false,
                /**
                 * a boolean specifying if a reponsive version of the theme should kick in on smaller screens (if the theme supports it). Defaults to `false`.
                 * @name $.jstree.defaults.core.themes.responsive
                 */
                responsive		: false
            },
            /**
             * if left as `true` all parents of all selected nodes will be opened once the tree loads (so that all selected nodes are visible to the user)
             * @name $.jstree.defaults.core.expand_selected_onload
             */
            expand_selected_onload : true,
            /**
             * if left as `true` web workers will be used to parse incoming JSON data where possible, so that the UI will not be blocked by large requests. Workers are however about 30% slower. Defaults to `true`
             * @name $.jstree.defaults.core.worker
             */
            worker : true,
            /**
             * Force node text to plain text (and escape HTML). Defaults to `false`
             * @name $.jstree.defaults.core.force_text
             */
            force_text : false,
            /**
             * Should the node be toggled if the text is double clicked. Defaults to `true`
             * @name $.jstree.defaults.core.dblclick_toggle
             */
            dblclick_toggle : true,
            /**
             * Should the loaded nodes be part of the state. Defaults to `false`
             * @name $.jstree.defaults.core.loaded_state
             */
            loaded_state : false,
            /**
             * Should the last active node be focused when the tree container is blurred and the focused again. This helps working with screen readers. Defaults to `true`
             * @name $.jstree.defaults.core.restore_focus
             */
            restore_focus : true,
            /**
             * Force to compute and set "aria-setsize" and "aria-posinset" explicitly for each treeitem. 
             * Some browsers may compute incorrect elements position and produce wrong announcements for screen readers. Defaults to `false`
             * @name $.jstree.defaults.core.compute_elements_positions
             */
            compute_elements_positions : false,
            /**
             * Default keyboard shortcuts (an object where each key is the button name or combo - like 'enter', 'ctrl-space', 'p', etc and the value is the function to execute in the instance's scope)
             * @name $.jstree.defaults.core.keyboard
             */
            keyboard : {
                'ctrl-space': function (e) {
                    // aria defines space only with Ctrl
                    e.type = "click";
                    $(e.currentTarget).trigger(e);
                },
                'enter': function (e) {
                    // enter
                    e.type = "click";
                    $(e.currentTarget).trigger(e);
                },
                'left': function (e) {
                    // left
                    e.preventDefault();
                    if(this.is_open(e.currentTarget)) {
                        this.close_node(e.currentTarget);
                    }
                    else {
                        var o = this.get_parent(e.currentTarget);
                        if(o && o.id !== $.jstree.root) { this.get_node(o, true).children('.jstree-anchor').trigger('focus'); }
                    }
                },
                'up': function (e) {
                    // up
                    e.preventDefault();
                    var o = this.get_prev_dom(e.currentTarget);
                    if(o && o.length) { o.children('.jstree-anchor').trigger('focus'); }
                },
                'right': function (e) {
                    // right
                    e.preventDefault();
                    if(this.is_closed(e.currentTarget)) {
                        this.open_node(e.currentTarget, function (o) { this.get_node(o, true).children('.jstree-anchor').trigger('focus'); });
                    }
                    else if (this.is_open(e.currentTarget)) {
                        var o = this.get_node(e.currentTarget, true).children('.jstree-children')[0];
                        if(o) { $(this._firstChild(o)).children('.jstree-anchor').trigger('focus'); }
                    }
                },
                'down': function (e) {
                    // down
                    e.preventDefault();
                    var o = this.get_next_dom(e.currentTarget);
                    if(o && o.length) { o.children('.jstree-anchor').trigger('focus'); }
                },
                '*': function (e) {
                    // aria defines * on numpad as open_all - not very common
                    this.open_all();
                },
                'home': function (e) {
                    // home
                    e.preventDefault();
                    var o = this._firstChild(this.get_container_ul()[0]);
                    if(o) { $(o).children('.jstree-anchor').filter(':visible').trigger('focus'); }
                },
                'end': function (e) {
                    // end
                    e.preventDefault();
                    this.element.find('.jstree-anchor').filter(':visible').last().trigger('focus');
                },
                'f2': function (e) {
                    // f2 - safe to include - if check_callback is false it will fail
                    e.preventDefault();
                    this.edit(e.currentTarget);
                }
            },
            /**
             * Should reselecting an already selected node trigger the select and changed callbacks
             * @name $.jstree.defaults.core.allow_reselect
             */
            allow_reselect : false
        };
        $.jstree.core.prototype = {
            /**
             * used to decorate an instance with a plugin. Used internally.
             * @private
             * @name plugin(deco [, opts])
             * @param  {String} deco the plugin to decorate with
             * @param  {Object} opts options for the plugin
             * @return {jsTree}
             */
            plugin : function (deco, opts) {
                var Child = $.jstree.plugins[deco];
                if(Child) {
                    this._data[deco] = {};
                    Child.prototype = this;
                    return new Child(opts, this);
                }
                return this;
            },
            /**
             * initialize the instance. Used internally.
             * @private
             * @name init(el, optons)
             * @param {DOMElement|jQuery|String} el the element we are transforming
             * @param {Object} options options for this instance
             * @trigger init.jstree, loading.jstree, loaded.jstree, ready.jstree, changed.jstree
             */
            init : function (el, options) {
                this._model = {
                    data : {},
                    changed : [],
                    force_full_redraw : false,
                    redraw_timeout : false,
                    default_state : {
                        loaded : true,
                        opened : false,
                        selected : false,
                        disabled : false
                    }
                };
                this._model.data[$.jstree.root] = {
                    id : $.jstree.root,
                    parent : null,
                    parents : [],
                    children : [],
                    children_d : [],
                    state : { loaded : false }
                };
    
                this.element = $(el).addClass('jstree jstree-' + this._id);
                this.settings = options;
    
                this._data.core.ready = false;
                this._data.core.loaded = false;
                this._data.core.rtl = (this.element.css("direction") === "rtl");
                this.element[this._data.core.rtl ? 'addClass' : 'removeClass']("jstree-rtl");
                this.element.attr('role','tree');
                if(this.settings.core.multiple) {
                    this.element.attr('aria-multiselectable', true);
                }
                if(!this.element.attr('tabindex')) {
                    this.element.attr('tabindex','0');
                }
    
                this.bind();
                /**
                 * triggered after all events are bound
                 * @event
                 * @name init.jstree
                 */
                this.trigger("init");
    
                this._data.core.original_container_html = this.element.find(" > ul > li").clone(true);
                this._data.core.original_container_html
                    .find("li").addBack()
                    .contents().filter(function() {
                        return this.nodeType === 3 && (!this.nodeValue || /^\s+$/.test(this.nodeValue));
                    })
                    .remove();
                this.element.html("<"+"ul class='jstree-container-ul jstree-children' role='group'><"+"li id='j"+this._id+"_loading' class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='none'><i class='jstree-icon jstree-ocl'></i><"+"a class='jstree-anchor' role='treeitem' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>" + this.get_string("Loading ...") + "</a></li></ul>");
                this.element.attr('aria-activedescendant','j' + this._id + '_loading');
                this._data.core.li_height = this.get_container_ul().children("li").first().outerHeight() || 24;
                this._data.core.node = this._create_prototype_node();
                /**
                 * triggered after the loading text is shown and before loading starts
                 * @event
                 * @name loading.jstree
                 */
                this.trigger("loading");
                this.load_node($.jstree.root);
            },
            /**
             * destroy an instance
             * @name destroy()
             * @param  {Boolean} keep_html if not set to `true` the container will be emptied, otherwise the current DOM elements will be kept intact
             */
            destroy : function (keep_html) {
                /**
                 * triggered before the tree is destroyed
                 * @event
                 * @name destroy.jstree
                 */
                this.trigger("destroy");
                if(this._wrk) {
                    try {
                        window.URL.revokeObjectURL(this._wrk);
                        this._wrk = null;
                    }
                    catch (ignore) { }
                }
                if(!keep_html) { this.element.empty(); }
                this.teardown();
            },
            /**
             * Create a prototype node
             * @name _create_prototype_node()
             * @return {DOMElement}
             */
            _create_prototype_node : function () {
                var _node = document.createElement('LI'), _temp1, _temp2;
                _node.setAttribute('role', 'none');
                _temp1 = document.createElement('I');
                _temp1.className = 'jstree-icon jstree-ocl';
                _temp1.setAttribute('role', 'presentation');
                _node.appendChild(_temp1);
                _temp1 = document.createElement('A');
                _temp1.className = 'jstree-anchor';
                _temp1.setAttribute('href','#');
                _temp1.setAttribute('tabindex','-1');
                _temp1.setAttribute('role', 'treeitem');
                _temp2 = document.createElement('I');
                _temp2.className = 'jstree-icon jstree-themeicon';
                _temp2.setAttribute('role', 'presentation');
                _temp1.appendChild(_temp2);
                _node.appendChild(_temp1);
                _temp1 = _temp2 = null;
    
                return _node;
            },
            _kbevent_to_func : function (e) {
                var keys = {
                    8: "Backspace", 9: "Tab", 13: "Enter", 19: "Pause", 27: "Esc",
                    32: "Space", 33: "PageUp", 34: "PageDown", 35: "End", 36: "Home",
                    37: "Left", 38: "Up", 39: "Right", 40: "Down", 44: "Print", 45: "Insert",
                    46: "Delete", 96: "Numpad0", 97: "Numpad1", 98: "Numpad2", 99 : "Numpad3",
                    100: "Numpad4", 101: "Numpad5", 102: "Numpad6", 103: "Numpad7",
                    104: "Numpad8", 105: "Numpad9", '-13': "NumpadEnter", 112: "F1",
                    113: "F2", 114: "F3", 115: "F4", 116: "F5", 117: "F6", 118: "F7",
                    119: "F8", 120: "F9", 121: "F10", 122: "F11", 123: "F12", 144: "Numlock",
                    145: "Scrolllock", 16: 'Shift', 17: 'Ctrl', 18: 'Alt',
                    48: '0',  49: '1',  50: '2',  51: '3',  52: '4', 53:  '5',
                    54: '6',  55: '7',  56: '8',  57: '9',  59: ';',  61: '=', 65:  'a',
                    66: 'b',  67: 'c',  68: 'd',  69: 'e',  70: 'f',  71: 'g', 72:  'h',
                    73: 'i',  74: 'j',  75: 'k',  76: 'l',  77: 'm',  78: 'n', 79:  'o',
                    80: 'p',  81: 'q',  82: 'r',  83: 's',  84: 't',  85: 'u', 86:  'v',
                    87: 'w',  88: 'x',  89: 'y',  90: 'z', 107: '+', 109: '-', 110: '.',
                    186: ';', 187: '=', 188: ',', 189: '-', 190: '.', 191: '/', 192: '`',
                    219: '[', 220: '\\',221: ']', 222: "'", 111: '/', 106: '*', 173: '-'
                };
                var parts = [];
                if (e.ctrlKey) { parts.push('ctrl'); }
                if (e.altKey) { parts.push('alt'); }
                if (e.shiftKey) { parts.push('shift'); }
                parts.push(keys[e.which] ? keys[e.which].toLowerCase() : e.which);
                parts = parts.sort().join('-').toLowerCase();
                if (parts === 'shift-shift' || parts === 'ctrl-ctrl' || parts === 'alt-alt') {
                    return null;
                }
    
                var kb = this.settings.core.keyboard, i, tmp;
                for (i in kb) {
                    if (kb.hasOwnProperty(i)) {
                        tmp = i;
                        if (tmp !== '-' && tmp !== '+') {
                            tmp = tmp.replace('--', '-MINUS').replace('+-', '-MINUS').replace('++', '-PLUS').replace('-+', '-PLUS');
                            tmp = tmp.split(/-|\+/).sort().join('-').replace('MINUS', '-').replace('PLUS', '+').toLowerCase();
                        }
                        if (tmp === parts) {
                            return kb[i];
                        }
                    }
                }
                return null;
            },
            /**
             * part of the destroying of an instance. Used internally.
             * @private
             * @name teardown()
             */
            teardown : function () {
                this.unbind();
                this.element
                    .removeClass('jstree')
                    .removeData('jstree')
                    .find("[class^='jstree']")
                        .addBack()
                        .attr("class", function () { return this.className.replace(/jstree[^ ]*|$/ig,''); });
                this.element = null;
            },
            /**
             * bind all events. Used internally.
             * @private
             * @name bind()
             */
            bind : function () {
                var word = '',
                    tout = null,
                    was_click = 0;
                this.element
                    .on("dblclick.jstree", function (e) {
                            if(e.target.tagName && e.target.tagName.toLowerCase() === "input") { return true; }
                            if(document.selection && document.selection.empty) {
                                document.selection.empty();
                            }
                            else {
                                if(window.getSelection) {
                                    var sel = window.getSelection();
                                    try {
                                        sel.removeAllRanges();
                                        sel.collapse();
                                    } catch (ignore) { }
                                }
                            }
                        })
                    .on("mousedown.jstree", function (e) {
                            if(e.target === this.element[0]) {
                                e.preventDefault(); // prevent losing focus when clicking scroll arrows (FF, Chrome)
                                was_click = +(new Date()); // ie does not allow to prevent losing focus
                            }
                        }.bind(this))
                    .on("mousedown.jstree", ".jstree-ocl", function (e) {
                            e.preventDefault(); // prevent any node inside from losing focus when clicking the open/close icon
                        })
                    .on("click.jstree", ".jstree-ocl", function (e) {
                            this.toggle_node(e.target);
                        }.bind(this))
                    .on("dblclick.jstree", ".jstree-anchor", function (e) {
                            if(e.target.tagName && e.target.tagName.toLowerCase() === "input") { return true; }
                            if(this.settings.core.dblclick_toggle) {
                                this.toggle_node(e.target);
                            }
                        }.bind(this))
                    .on("click.jstree", ".jstree-anchor", function (e) {
                            e.preventDefault();
                            if(e.currentTarget !== document.activeElement) { $(e.currentTarget).trigger('focus'); }
                            this.activate_node(e.currentTarget, e);
                        }.bind(this))
                    .on('keydown.jstree', '.jstree-anchor', function (e) {
                            if(e.target.tagName && e.target.tagName.toLowerCase() === "input") { return true; }
                            if(this._data.core.rtl) {
                                if(e.which === 37) { e.which = 39; }
                                else if(e.which === 39) { e.which = 37; }
                            }
                            var f = this._kbevent_to_func(e);
                            if (f) {
                                var r = f.call(this, e);
                                if (r === false || r === true) {
                                    return r;
                                }
                            }
                        }.bind(this))
                    .on("load_node.jstree", function (e, data) {
                            if(data.status) {
                                if(data.node.id === $.jstree.root && !this._data.core.loaded) {
                                    this._data.core.loaded = true;
                                    if(this._firstChild(this.get_container_ul()[0])) {
                                        this.element.attr('aria-activedescendant',this._firstChild(this.get_container_ul()[0]).id);
                                    }
                                    /**
                                     * triggered after the root node is loaded for the first time
                                     * @event
                                     * @name loaded.jstree
                                     */
                                    this.trigger("loaded");
                                }
                                if(!this._data.core.ready) {
                                    setTimeout(function() {
                                        if(this.element && !this.get_container_ul().find('.jstree-loading').length) {
                                            this._data.core.ready = true;
                                            if(this._data.core.selected.length) {
                                                if(this.settings.core.expand_selected_onload) {
                                                    var tmp = [], i, j;
                                                    for(i = 0, j = this._data.core.selected.length; i < j; i++) {
                                                        tmp = tmp.concat(this._model.data[this._data.core.selected[i]].parents);
                                                    }
                                                    tmp = $.vakata.array_unique(tmp);
                                                    for(i = 0, j = tmp.length; i < j; i++) {
                                                        this.open_node(tmp[i], false, 0);
                                                    }
                                                }
                                                this.trigger('changed', { 'action' : 'ready', 'selected' : this._data.core.selected });
                                            }
                                            /**
                                             * triggered after all nodes are finished loading
                                             * @event
                                             * @name ready.jstree
                                             */
                                            this.trigger("ready");
                                        }
                                    }.bind(this), 0);
                                }
                            }
                        }.bind(this))
                    // quick searching when the tree is focused
                    .on('keypress.jstree', function (e) {
                            if(e.target.tagName && e.target.tagName.toLowerCase() === "input") { return true; }
                            if(tout) { clearTimeout(tout); }
                            tout = setTimeout(function () {
                                word = '';
                            }, 500);
    
                            var chr = String.fromCharCode(e.which).toLowerCase(),
                                col = this.element.find('.jstree-anchor').filter(':visible'),
                                ind = col.index(document.activeElement) || 0,
                                end = false;
                            word += chr;
    
                            // match for whole word from current node down (including the current node)
                            if(word.length > 1) {
                                col.slice(ind).each(function (i, v) {
                                    if($(v).text().toLowerCase().indexOf(word) === 0) {
                                        $(v).trigger('focus');
                                        end = true;
                                        return false;
                                    }
                                }.bind(this));
                                if(end) { return; }
    
                                // match for whole word from the beginning of the tree
                                col.slice(0, ind).each(function (i, v) {
                                    if($(v).text().toLowerCase().indexOf(word) === 0) {
                                        $(v).trigger('focus');
                                        end = true;
                                        return false;
                                    }
                                }.bind(this));
                                if(end) { return; }
                            }
                            // list nodes that start with that letter (only if word consists of a single char)
                            if(new RegExp('^' + chr.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&') + '+$').test(word)) {
                                // search for the next node starting with that letter
                                col.slice(ind + 1).each(function (i, v) {
                                    if($(v).text().toLowerCase().charAt(0) === chr) {
                                        $(v).trigger('focus');
                                        end = true;
                                        return false;
                                    }
                                }.bind(this));
                                if(end) { return; }
    
                                // search from the beginning
                                col.slice(0, ind + 1).each(function (i, v) {
                                    if($(v).text().toLowerCase().charAt(0) === chr) {
                                        $(v).trigger('focus');
                                        end = true;
                                        return false;
                                    }
                                }.bind(this));
                                if(end) { return; }
                            }
                        }.bind(this))
                    // THEME RELATED
                    .on("init.jstree", function () {
                            var s = this.settings.core.themes;
                            this._data.core.themes.dots			= s.dots;
                            this._data.core.themes.stripes		= s.stripes;
                            this._data.core.themes.icons		= s.icons;
                            this._data.core.themes.ellipsis		= s.ellipsis;
                            this.set_theme(s.name || "default", s.url);
                            this.set_theme_variant(s.variant);
                        }.bind(this))
                    .on("loading.jstree", function () {
                            this[ this._data.core.themes.dots ? "show_dots" : "hide_dots" ]();
                            this[ this._data.core.themes.icons ? "show_icons" : "hide_icons" ]();
                            this[ this._data.core.themes.stripes ? "show_stripes" : "hide_stripes" ]();
                            this[ this._data.core.themes.ellipsis ? "show_ellipsis" : "hide_ellipsis" ]();
                        }.bind(this))
                    .on('blur.jstree', '.jstree-anchor', function (e) {
                            this._data.core.focused = null;
                            $(e.currentTarget).filter('.jstree-hovered').trigger('mouseleave');
                            this.element.attr('tabindex', '0');
                            $(e.currentTarget).attr('tabindex', '-1');
                        }.bind(this))
                    .on('focus.jstree', '.jstree-anchor', function (e) {
                            var tmp = this.get_node(e.currentTarget);
                            if(tmp && (tmp.id || tmp.id === 0)) {
                                this._data.core.focused = tmp.id;
                            }
                            this.element.find('.jstree-hovered').not(e.currentTarget).trigger('mouseleave');
                            $(e.currentTarget).trigger('mouseenter');
                            this.element.attr('tabindex', '-1');
                            $(e.currentTarget).attr('tabindex', '0');
                        }.bind(this))
                    .on('focus.jstree', function () {
                            if(+(new Date()) - was_click > 500 && !this._data.core.focused && this.settings.core.restore_focus) {
                                was_click = 0;
                                var act = this.get_node(this.element.attr('aria-activedescendant'), true);
                                if(act) {
                                    act.find('> .jstree-anchor').trigger('focus');
                                }
                            }
                        }.bind(this))
                    .on('mouseenter.jstree', '.jstree-anchor', function (e) {
                            this.hover_node(e.currentTarget);
                        }.bind(this))
                    .on('mouseleave.jstree', '.jstree-anchor', function (e) {
                            this.dehover_node(e.currentTarget);
                        }.bind(this));
            },
            /**
             * part of the destroying of an instance. Used internally.
             * @private
             * @name unbind()
             */
            unbind : function () {
                this.element.off('.jstree');
                $(document).off('.jstree-' + this._id);
            },
            /**
             * trigger an event. Used internally.
             * @private
             * @name trigger(ev [, data])
             * @param  {String} ev the name of the event to trigger
             * @param  {Object} data additional data to pass with the event
             */
            trigger : function (ev, data) {
                if(!data) {
                    data = {};
                }
                data.instance = this;
                this.element.triggerHandler(ev.replace('.jstree','') + '.jstree', data);
            },
            /**
             * returns the jQuery extended instance container
             * @name get_container()
             * @return {jQuery}
             */
            get_container : function () {
                return this.element;
            },
            /**
             * returns the jQuery extended main UL node inside the instance container. Used internally.
             * @private
             * @name get_container_ul()
             * @return {jQuery}
             */
            get_container_ul : function () {
                return this.element.children(".jstree-children").first();
            },
            /**
             * gets string replacements (localization). Used internally.
             * @private
             * @name get_string(key)
             * @param  {String} key
             * @return {String}
             */
            get_string : function (key) {
                var a = this.settings.core.strings;
                if($.vakata.is_function(a)) { return a.call(this, key); }
                if(a && a[key]) { return a[key]; }
                return key;
            },
            /**
             * gets the first child of a DOM node. Used internally.
             * @private
             * @name _firstChild(dom)
             * @param  {DOMElement} dom
             * @return {DOMElement}
             */
            _firstChild : function (dom) {
                dom = dom ? dom.firstChild : null;
                while(dom !== null && dom.nodeType !== 1) {
                    dom = dom.nextSibling;
                }
                return dom;
            },
            /**
             * gets the next sibling of a DOM node. Used internally.
             * @private
             * @name _nextSibling(dom)
             * @param  {DOMElement} dom
             * @return {DOMElement}
             */
            _nextSibling : function (dom) {
                dom = dom ? dom.nextSibling : null;
                while(dom !== null && dom.nodeType !== 1) {
                    dom = dom.nextSibling;
                }
                return dom;
            },
            /**
             * gets the previous sibling of a DOM node. Used internally.
             * @private
             * @name _previousSibling(dom)
             * @param  {DOMElement} dom
             * @return {DOMElement}
             */
            _previousSibling : function (dom) {
                dom = dom ? dom.previousSibling : null;
                while(dom !== null && dom.nodeType !== 1) {
                    dom = dom.previousSibling;
                }
                return dom;
            },
            /**
             * get the JSON representation of a node (or the actual jQuery extended DOM node) by using any input (child DOM element, ID string, selector, etc)
             * @name get_node(obj [, as_dom])
             * @param  {mixed} obj
             * @param  {Boolean} as_dom
             * @return {Object|jQuery}
             */
            get_node : function (obj, as_dom) {
                if(obj && (obj.id || obj.id === 0)) {
                    obj = obj.id;
                }
                if (obj instanceof $ && obj.length && obj[0].id) {
                    obj = obj[0].id;
                }
                var dom;
                try {
                    if(this._model.data[obj]) {
                        obj = this._model.data[obj];
                    }
                    else if(typeof obj === "string" && this._model.data[obj.replace(/^#/, '')]) {
                        obj = this._model.data[obj.replace(/^#/, '')];
                    }
                    else if(typeof obj === "string" && (dom = $('#' + obj.replace($.jstree.idregex,'\\$&'), this.element)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) {
                        obj = this._model.data[dom.closest('.jstree-node').attr('id')];
                    }
                    else if((dom = this.element.find(obj)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) {
                        obj = this._model.data[dom.closest('.jstree-node').attr('id')];
                    }
                    else if((dom = this.element.find(obj)).length && dom.hasClass('jstree')) {
                        obj = this._model.data[$.jstree.root];
                    }
                    else {
                        return false;
                    }
    
                    if(as_dom) {
                        obj = obj.id === $.jstree.root ? this.element : $('#' + obj.id.replace($.jstree.idregex,'\\$&'), this.element);
                    }
                    return obj;
                } catch (ex) { return false; }
            },
            /**
             * get the path to a node, either consisting of node texts, or of node IDs, optionally glued together (otherwise an array)
             * @name get_path(obj [, glue, ids])
             * @param  {mixed} obj the node
             * @param  {String} glue if you want the path as a string - pass the glue here (for example '/'), if a falsy value is supplied here, an array is returned
             * @param  {Boolean} ids if set to true build the path using ID, otherwise node text is used
             * @return {mixed}
             */
            get_path : function (obj, glue, ids) {
                obj = obj.parents ? obj : this.get_node(obj);
                if(!obj || obj.id === $.jstree.root || !obj.parents) {
                    return false;
                }
                var i, j, p = [];
                p.push(ids ? obj.id : obj.text);
                for(i = 0, j = obj.parents.length; i < j; i++) {
                    p.push(ids ? obj.parents[i] : this.get_text(obj.parents[i]));
                }
                p = p.reverse().slice(1);
                return glue ? p.join(glue) : p;
            },
            /**
             * get the next visible node that is below the `obj` node. If `strict` is set to `true` only sibling nodes are returned.
             * @name get_next_dom(obj [, strict])
             * @param  {mixed} obj
             * @param  {Boolean} strict
             * @return {jQuery}
             */
            get_next_dom : function (obj, strict) {
                var tmp;
                obj = this.get_node(obj, true);
                if(obj[0] === this.element[0]) {
                    tmp = this._firstChild(this.get_container_ul()[0]);
                    while (tmp && tmp.offsetHeight === 0) {
                        tmp = this._nextSibling(tmp);
                    }
                    return tmp ? $(tmp) : false;
                }
                if(!obj || !obj.length) {
                    return false;
                }
                if(strict) {
                    tmp = obj[0];
                    do {
                        tmp = this._nextSibling(tmp);
                    } while (tmp && tmp.offsetHeight === 0);
                    return tmp ? $(tmp) : false;
                }
                if(obj.hasClass("jstree-open")) {
                    tmp = this._firstChild(obj.children('.jstree-children')[0]);
                    while (tmp && tmp.offsetHeight === 0) {
                        tmp = this._nextSibling(tmp);
                    }
                    if(tmp !== null) {
                        return $(tmp);
                    }
                }
                tmp = obj[0];
                do {
                    tmp = this._nextSibling(tmp);
                } while (tmp && tmp.offsetHeight === 0);
                if(tmp !== null) {
                    return $(tmp);
                }
                return obj.parentsUntil(".jstree",".jstree-node").nextAll(".jstree-node:visible").first();
            },
            /**
             * get the previous visible node that is above the `obj` node. If `strict` is set to `true` only sibling nodes are returned.
             * @name get_prev_dom(obj [, strict])
             * @param  {mixed} obj
             * @param  {Boolean} strict
             * @return {jQuery}
             */
            get_prev_dom : function (obj, strict) {
                var tmp;
                obj = this.get_node(obj, true);
                if(obj[0] === this.element[0]) {
                    tmp = this.get_container_ul()[0].lastChild;
                    while (tmp && tmp.offsetHeight === 0) {
                        tmp = this._previousSibling(tmp);
                    }
                    return tmp ? $(tmp) : false;
                }
                if(!obj || !obj.length) {
                    return false;
                }
                if(strict) {
                    tmp = obj[0];
                    do {
                        tmp = this._previousSibling(tmp);
                    } while (tmp && tmp.offsetHeight === 0);
                    return tmp ? $(tmp) : false;
                }
                tmp = obj[0];
                do {
                    tmp = this._previousSibling(tmp);
                } while (tmp && tmp.offsetHeight === 0);
                if(tmp !== null) {
                    obj = $(tmp);
                    while(obj.hasClass("jstree-open")) {
                        obj = obj.children(".jstree-children").first().children(".jstree-node:visible:last");
                    }
                    return obj;
                }
                tmp = obj[0].parentNode.parentNode;
                return tmp && tmp.className && tmp.className.indexOf('jstree-node') !== -1 ? $(tmp) : false;
            },
            /**
             * get the parent ID of a node
             * @name get_parent(obj)
             * @param  {mixed} obj
             * @return {String}
             */
            get_parent : function (obj) {
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) {
                    return false;
                }
                return obj.parent;
            },
            /**
             * get a jQuery collection of all the children of a node (node must be rendered), returns false on error
             * @name get_children_dom(obj)
             * @param  {mixed} obj
             * @return {jQuery}
             */
            get_children_dom : function (obj) {
                obj = this.get_node(obj, true);
                if(obj[0] === this.element[0]) {
                    return this.get_container_ul().children(".jstree-node");
                }
                if(!obj || !obj.length) {
                    return false;
                }
                return obj.children(".jstree-children").children(".jstree-node");
            },
            /**
             * checks if a node has children
             * @name is_parent(obj)
             * @param  {mixed} obj
             * @return {Boolean}
             */
            is_parent : function (obj) {
                obj = this.get_node(obj);
                return obj && (obj.state.loaded === false || obj.children.length > 0);
            },
            /**
             * checks if a node is loaded (its children are available)
             * @name is_loaded(obj)
             * @param  {mixed} obj
             * @return {Boolean}
             */
            is_loaded : function (obj) {
                obj = this.get_node(obj);
                return obj && obj.state.loaded;
            },
            /**
             * check if a node is currently loading (fetching children)
             * @name is_loading(obj)
             * @param  {mixed} obj
             * @return {Boolean}
             */
            is_loading : function (obj) {
                obj = this.get_node(obj);
                return obj && obj.state && obj.state.loading;
            },
            /**
             * check if a node is opened
             * @name is_open(obj)
             * @param  {mixed} obj
             * @return {Boolean}
             */
            is_open : function (obj) {
                obj = this.get_node(obj);
                return obj && obj.state.opened;
            },
            /**
             * check if a node is in a closed state
             * @name is_closed(obj)
             * @param  {mixed} obj
             * @return {Boolean}
             */
            is_closed : function (obj) {
                obj = this.get_node(obj);
                return obj && this.is_parent(obj) && !obj.state.opened;
            },
            /**
             * check if a node has no children
             * @name is_leaf(obj)
             * @param  {mixed} obj
             * @return {Boolean}
             */
            is_leaf : function (obj) {
                return !this.is_parent(obj);
            },
            /**
             * loads a node (fetches its children using the `core.data` setting). Multiple nodes can be passed to by using an array.
             * @name load_node(obj [, callback])
             * @param  {mixed} obj
             * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives two arguments - the node and a boolean status
             * @return {Boolean}
             * @trigger load_node.jstree
             */
            load_node : function (obj, callback) {
                var dom = this.get_node(obj, true), k, l, i, j, c;
                if($.vakata.is_array(obj)) {
                    this._load_nodes(obj.slice(), callback);
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj) {
                    if(callback) { callback.call(this, obj, false); }
                    return false;
                }
                // if(obj.state.loading) { } // the node is already loading - just wait for it to load and invoke callback? but if called implicitly it should be loaded again?
                if(obj.state.loaded) {
                    obj.state.loaded = false;
                    for(i = 0, j = obj.parents.length; i < j; i++) {
                        this._model.data[obj.parents[i]].children_d = $.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function (v) {
                            return $.inArray(v, obj.children_d) === -1;
                        });
                    }
                    for(k = 0, l = obj.children_d.length; k < l; k++) {
                        if(this._model.data[obj.children_d[k]].state.selected) {
                            c = true;
                        }
                        delete this._model.data[obj.children_d[k]];
                    }
                    if (c) {
                        this._data.core.selected = $.vakata.array_filter(this._data.core.selected, function (v) {
                            return $.inArray(v, obj.children_d) === -1;
                        });
                    }
                    obj.children = [];
                    obj.children_d = [];
                    if(c) {
                        this.trigger('changed', { 'action' : 'load_node', 'node' : obj, 'selected' : this._data.core.selected });
                    }
                }
                obj.state.failed = false;
                obj.state.loading = true;
                if (obj.id !== $.jstree.root) {
                    dom.children(".jstree-anchor").attr('aria-busy', true);
                } else {
                    dom.attr('aria-busy', true);
                }
                dom.addClass("jstree-loading");
                this._load_node(obj, function (status) {
                    obj = this._model.data[obj.id];
                    obj.state.loading = false;
                    obj.state.loaded = status;
                    obj.state.failed = !obj.state.loaded;
                    var dom = this.get_node(obj, true), i = 0, j = 0, m = this._model.data, has_children = false;
                    for(i = 0, j = obj.children.length; i < j; i++) {
                        if(m[obj.children[i]] && !m[obj.children[i]].state.hidden) {
                            has_children = true;
                            break;
                        }
                    }
                    if(obj.state.loaded && dom && dom.length) {
                        dom.removeClass('jstree-closed jstree-open jstree-leaf');
                        if (!has_children) {
                            dom.addClass('jstree-leaf');
                        }
                        else {
                            if (obj.id !== '#') {
                                dom.addClass(obj.state.opened ? 'jstree-open' : 'jstree-closed');
                            }
                        }
                    }
                    if (obj.id !== $.jstree.root) {
                        dom.children(".jstree-anchor").attr('aria-busy', false);
                    } else {
                        dom.attr('aria-busy', false);
                    }
                    dom.removeClass("jstree-loading");
                    /**
                     * triggered after a node is loaded
                     * @event
                     * @name load_node.jstree
                     * @param {Object} node the node that was loading
                     * @param {Boolean} status was the node loaded successfully
                     */
                    this.trigger('load_node', { "node" : obj, "status" : status });
                    if(callback) {
                        callback.call(this, obj, status);
                    }
                }.bind(this));
                return true;
            },
            /**
             * load an array of nodes (will also load unavailable nodes as soon as they appear in the structure). Used internally.
             * @private
             * @name _load_nodes(nodes [, callback])
             * @param  {array} nodes
             * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - the array passed to _load_nodes
             */
            _load_nodes : function (nodes, callback, is_callback, force_reload) {
                var r = true,
                    c = function () { this._load_nodes(nodes, callback, true); },
                    m = this._model.data, i, j, tmp = [];
                for(i = 0, j = nodes.length; i < j; i++) {
                    if(m[nodes[i]] && ( (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed) || (!is_callback && force_reload) )) {
                        if(!this.is_loading(nodes[i])) {
                            this.load_node(nodes[i], c);
                        }
                        r = false;
                    }
                }
                if(r) {
                    for(i = 0, j = nodes.length; i < j; i++) {
                        if(m[nodes[i]] && m[nodes[i]].state.loaded) {
                            tmp.push(nodes[i]);
                        }
                    }
                    if(callback && !callback.done) {
                        callback.call(this, tmp);
                        callback.done = true;
                    }
                }
            },
            /**
             * loads all unloaded nodes
             * @name load_all([obj, callback])
             * @param {mixed} obj the node to load recursively, omit to load all nodes in the tree
             * @param {function} callback a function to be executed once loading all the nodes is complete,
             * @trigger load_all.jstree
             */
            load_all : function (obj, callback) {
                if(!obj) { obj = $.jstree.root; }
                obj = this.get_node(obj);
                if(!obj) { return false; }
                var to_load = [],
                    m = this._model.data,
                    c = m[obj.id].children_d,
                    i, j;
                if(obj.state && !obj.state.loaded) {
                    to_load.push(obj.id);
                }
                for(i = 0, j = c.length; i < j; i++) {
                    if(m[c[i]] && m[c[i]].state && !m[c[i]].state.loaded) {
                        to_load.push(c[i]);
                    }
                }
                if(to_load.length) {
                    this._load_nodes(to_load, function () {
                        this.load_all(obj, callback);
                    });
                }
                else {
                    /**
                     * triggered after a load_all call completes
                     * @event
                     * @name load_all.jstree
                     * @param {Object} node the recursively loaded node
                     */
                    if(callback) { callback.call(this, obj); }
                    this.trigger('load_all', { "node" : obj });
                }
            },
            /**
             * handles the actual loading of a node. Used only internally.
             * @private
             * @name _load_node(obj [, callback])
             * @param  {mixed} obj
             * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - a boolean status
             * @return {Boolean}
             */
            _load_node : function (obj, callback) {
                var s = this.settings.core.data, t;
                var notTextOrCommentNode = function notTextOrCommentNode () {
                    return this.nodeType !== 3 && this.nodeType !== 8;
                };
                // use original HTML
                if(!s) {
                    if(obj.id === $.jstree.root) {
                        return this._append_html_data(obj, this._data.core.original_container_html.clone(true), function (status) {
                            callback.call(this, status);
                        });
                    }
                    else {
                        return callback.call(this, false);
                    }
                    // return callback.call(this, obj.id === $.jstree.root ? this._append_html_data(obj, this._data.core.original_container_html.clone(true)) : false);
                }
                if($.vakata.is_function(s)) {
                    return s.call(this, obj, function (d) {
                        if(d === false) {
                            callback.call(this, false);
                        }
                        else {
                            this[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $($.parseHTML(d)).filter(notTextOrCommentNode) : d, function (status) {
                                callback.call(this, status);
                            });
                        }
                        // return d === false ? callback.call(this, false) : callback.call(this, this[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $(d) : d));
                    }.bind(this));
                }
                if(typeof s === 'object') {
                    if(s.url) {
                        s = $.extend(true, {}, s);
                        if($.vakata.is_function(s.url)) {
                            s.url = s.url.call(this, obj);
                        }
                        if($.vakata.is_function(s.data)) {
                            s.data = s.data.call(this, obj);
                        }
                        return $.ajax(s)
                            .done(function (d,t,x) {
                                    var type = x.getResponseHeader('Content-Type');
                                    if((type && type.indexOf('json') !== -1) || typeof d === "object") {
                                        return this._append_json_data(obj, d, function (status) { callback.call(this, status); });
                                        //return callback.call(this, this._append_json_data(obj, d));
                                    }
                                    if((type && type.indexOf('html') !== -1) || typeof d === "string") {
                                        return this._append_html_data(obj, $($.parseHTML(d)).filter(notTextOrCommentNode), function (status) { callback.call(this, status); });
                                        // return callback.call(this, this._append_html_data(obj, $(d)));
                                    }
                                    this._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'core', 'id' : 'core_04', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id, 'xhr' : x }) };
                                    this.settings.core.error.call(this, this._data.core.last_error);
                                    return callback.call(this, false);
                                }.bind(this))
                            .fail(function (f) {
                                    this._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'core', 'id' : 'core_04', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id, 'xhr' : f }) };
                                    callback.call(this, false);
                                    this.settings.core.error.call(this, this._data.core.last_error);
                                }.bind(this));
                    }
                    if ($.vakata.is_array(s)) {
                        t = $.extend(true, [], s);
                    } else if ($.isPlainObject(s)) {
                        t = $.extend(true, {}, s);
                    } else {
                        t = s;
                    }
                    if(obj.id === $.jstree.root) {
                        return this._append_json_data(obj, t, function (status) {
                            callback.call(this, status);
                        });
                    }
                    else {
                        this._data.core.last_error = { 'error' : 'nodata', 'plugin' : 'core', 'id' : 'core_05', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id }) };
                        this.settings.core.error.call(this, this._data.core.last_error);
                        return callback.call(this, false);
                    }
                    //return callback.call(this, (obj.id === $.jstree.root ? this._append_json_data(obj, t) : false) );
                }
                if(typeof s === 'string') {
                    if(obj.id === $.jstree.root) {
                        return this._append_html_data(obj, $($.parseHTML(s)).filter(notTextOrCommentNode), function (status) {
                            callback.call(this, status);
                        });
                    }
                    else {
                        this._data.core.last_error = { 'error' : 'nodata', 'plugin' : 'core', 'id' : 'core_06', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id }) };
                        this.settings.core.error.call(this, this._data.core.last_error);
                        return callback.call(this, false);
                    }
                    //return callback.call(this, (obj.id === $.jstree.root ? this._append_html_data(obj, $(s)) : false) );
                }
                return callback.call(this, false);
            },
            /**
             * adds a node to the list of nodes to redraw. Used only internally.
             * @private
             * @name _node_changed(obj [, callback])
             * @param  {mixed} obj
             */
            _node_changed : function (obj) {
                obj = this.get_node(obj);
          if (obj && $.inArray(obj.id, this._model.changed) === -1) {
                    this._model.changed.push(obj.id);
                }
            },
            /**
             * appends HTML content to the tree. Used internally.
             * @private
             * @name _append_html_data(obj, data)
             * @param  {mixed} obj the node to append to
             * @param  {String} data the HTML string to parse and append
             * @trigger model.jstree, changed.jstree
             */
            _append_html_data : function (dom, data, cb) {
                dom = this.get_node(dom);
                dom.children = [];
                dom.children_d = [];
                var dat = data.is('ul') ? data.children() : data,
                    par = dom.id,
                    chd = [],
                    dpc = [],
                    m = this._model.data,
                    p = m[par],
                    s = this._data.core.selected.length,
                    tmp, i, j;
                dat.each(function (i, v) {
                    tmp = this._parse_model_from_html($(v), par, p.parents.concat());
                    if(tmp) {
                        chd.push(tmp);
                        dpc.push(tmp);
                        if(m[tmp].children_d.length) {
                            dpc = dpc.concat(m[tmp].children_d);
                        }
                    }
                }.bind(this));
                p.children = chd;
                p.children_d = dpc;
                for(i = 0, j = p.parents.length; i < j; i++) {
                    m[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);
                }
                /**
                 * triggered when new data is inserted to the tree model
                 * @event
                 * @name model.jstree
                 * @param {Array} nodes an array of node IDs
                 * @param {String} parent the parent ID of the nodes
                 */
                this.trigger('model', { "nodes" : dpc, 'parent' : par });
                if(par !== $.jstree.root) {
                    this._node_changed(par);
                    this.redraw();
                }
                else {
                    this.get_container_ul().children('.jstree-initial-node').remove();
                    this.redraw(true);
                }
                if(this._data.core.selected.length !== s) {
                    this.trigger('changed', { 'action' : 'model', 'selected' : this._data.core.selected });
                }
                cb.call(this, true);
            },
            /**
             * appends JSON content to the tree. Used internally.
             * @private
             * @name _append_json_data(obj, data)
             * @param  {mixed} obj the node to append to
             * @param  {String} data the JSON object to parse and append
             * @param  {Boolean} force_processing internal param - do not set
             * @trigger model.jstree, changed.jstree
             */
            _append_json_data : function (dom, data, cb, force_processing) {
                if(this.element === null) { return; }
                dom = this.get_node(dom);
                dom.children = [];
                dom.children_d = [];
                // *%$@!!!
                if(data.d) {
                    data = data.d;
                    if(typeof data === "string") {
                        data = JSON.parse(data);
                    }
                }
                if(!$.vakata.is_array(data)) { data = [data]; }
                var w = null,
                    args = {
                        'df'	: this._model.default_state,
                        'dat'	: data,
                        'par'	: dom.id,
                        'm'		: this._model.data,
                        't_id'	: this._id,
                        't_cnt'	: this._cnt,
                        'sel'	: this._data.core.selected
                    },
                    inst = this,
                    func = function (data, undefined) {
                        if(data.data) { data = data.data; }
                        var dat = data.dat,
                            par = data.par,
                            chd = [],
                            dpc = [],
                            add = [],
                            df = data.df,
                            t_id = data.t_id,
                            t_cnt = data.t_cnt,
                            m = data.m,
                            p = m[par],
                            sel = data.sel,
                            tmp, i, j, rslt,
                            parse_flat = function (d, p, ps) {
                                if(!ps) { ps = []; }
                                else { ps = ps.concat(); }
                                if(p) { ps.unshift(p); }
                                var tid = d.id.toString(),
                                    i, j, c, e,
                                    tmp = {
                                        id			: tid,
                                        text		: d.text || '',
                                        icon		: d.icon !== undefined ? d.icon : true,
                                        parent		: p,
                                        parents		: ps,
                                        children	: d.children || [],
                                        children_d	: d.children_d || [],
                                        data		: d.data,
                                        state		: { },
                                        li_attr		: { id : false },
                                        a_attr		: { href : '#' },
                                        original	: false
                                    };
                                for(i in df) {
                                    if(df.hasOwnProperty(i)) {
                                        tmp.state[i] = df[i];
                                    }
                                }
                                if(d && d.data && d.data.jstree && d.data.jstree.icon) {
                                    tmp.icon = d.data.jstree.icon;
                                }
                                if(tmp.icon === undefined || tmp.icon === null || tmp.icon === "") {
                                    tmp.icon = true;
                                }
                                if(d && d.data) {
                                    tmp.data = d.data;
                                    if(d.data.jstree) {
                                        for(i in d.data.jstree) {
                                            if(d.data.jstree.hasOwnProperty(i)) {
                                                tmp.state[i] = d.data.jstree[i];
                                            }
                                        }
                                    }
                                }
                                if(d && typeof d.state === 'object') {
                                    for (i in d.state) {
                                        if(d.state.hasOwnProperty(i)) {
                                            tmp.state[i] = d.state[i];
                                        }
                                    }
                                }
                                if(d && typeof d.li_attr === 'object') {
                                    for (i in d.li_attr) {
                                        if(d.li_attr.hasOwnProperty(i)) {
                                            tmp.li_attr[i] = d.li_attr[i];
                                        }
                                    }
                                }
                                if(!tmp.li_attr.id) {
                                    tmp.li_attr.id = tid;
                                }
                                if(d && typeof d.a_attr === 'object') {
                                    for (i in d.a_attr) {
                                        if(d.a_attr.hasOwnProperty(i)) {
                                            tmp.a_attr[i] = d.a_attr[i];
                                        }
                                    }
                                }
                                if(d && d.children && d.children === true) {
                                    tmp.state.loaded = false;
                                    tmp.children = [];
                                    tmp.children_d = [];
                                }
                                m[tmp.id] = tmp;
                                for(i = 0, j = tmp.children.length; i < j; i++) {
                                    c = parse_flat(m[tmp.children[i]], tmp.id, ps);
                                    e = m[c];
                                    tmp.children_d.push(c);
                                    if(e.children_d.length) {
                                        tmp.children_d = tmp.children_d.concat(e.children_d);
                                    }
                                }
                                delete d.data;
                                delete d.children;
                                m[tmp.id].original = d;
                                if(tmp.state.selected) {
                                    add.push(tmp.id);
                                }
                                return tmp.id;
                            },
                            parse_nest = function (d, p, ps) {
                                if(!ps) { ps = []; }
                                else { ps = ps.concat(); }
                                if(p) { ps.unshift(p); }
                                var tid = false, i, j, c, e, tmp;
                                do {
                                    tid = 'j' + t_id + '_' + (++t_cnt);
                                } while(m[tid]);
    
                                tmp = {
                                    id			: false,
                                    text		: typeof d === 'string' ? d : '',
                                    icon		: typeof d === 'object' && d.icon !== undefined ? d.icon : true,
                                    parent		: p,
                                    parents		: ps,
                                    children	: [],
                                    children_d	: [],
                                    data		: null,
                                    state		: { },
                                    li_attr		: { id : false },
                                    a_attr		: { href : '#' },
                                    original	: false
                                };
                                for(i in df) {
                                    if(df.hasOwnProperty(i)) {
                                        tmp.state[i] = df[i];
                                    }
                                }
                                if(d && (d.id || d.id === 0)) { tmp.id = d.id.toString(); }
                                if(d && d.text) { tmp.text = d.text; }
                                if(d && d.data && d.data.jstree && d.data.jstree.icon) {
                                    tmp.icon = d.data.jstree.icon;
                                }
                                if(tmp.icon === undefined || tmp.icon === null || tmp.icon === "") {
                                    tmp.icon = true;
                                }
                                if(d && d.data) {
                                    tmp.data = d.data;
                                    if(d.data.jstree) {
                                        for(i in d.data.jstree) {
                                            if(d.data.jstree.hasOwnProperty(i)) {
                                                tmp.state[i] = d.data.jstree[i];
                                            }
                                        }
                                    }
                                }
                                if(d && typeof d.state === 'object') {
                                    for (i in d.state) {
                                        if(d.state.hasOwnProperty(i)) {
                                            tmp.state[i] = d.state[i];
                                        }
                                    }
                                }
                                if(d && typeof d.li_attr === 'object') {
                                    for (i in d.li_attr) {
                                        if(d.li_attr.hasOwnProperty(i)) {
                                            tmp.li_attr[i] = d.li_attr[i];
                                        }
                                    }
                                }
                                if(tmp.li_attr.id && !(tmp.id || tmp.id === 0)) {
                                    tmp.id = tmp.li_attr.id.toString();
                                }
                                if(!(tmp.id || tmp.id === 0)) {
                                    tmp.id = tid;
                                }
                                if(!tmp.li_attr.id) {
                                    tmp.li_attr.id = tmp.id;
                                }
                                if(d && typeof d.a_attr === 'object') {
                                    for (i in d.a_attr) {
                                        if(d.a_attr.hasOwnProperty(i)) {
                                            tmp.a_attr[i] = d.a_attr[i];
                                        }
                                    }
                                }
                                if(d && d.children && d.children.length) {
                                    for(i = 0, j = d.children.length; i < j; i++) {
                                        c = parse_nest(d.children[i], tmp.id, ps);
                                        e = m[c];
                                        tmp.children.push(c);
                                        if(e.children_d.length) {
                                            tmp.children_d = tmp.children_d.concat(e.children_d);
                                        }
                                    }
                                    tmp.children_d = tmp.children_d.concat(tmp.children);
                                }
                                if(d && d.children && d.children === true) {
                                    tmp.state.loaded = false;
                                    tmp.children = [];
                                    tmp.children_d = [];
                                }
                                delete d.data;
                                delete d.children;
                                tmp.original = d;
                                m[tmp.id] = tmp;
                                if(tmp.state.selected) {
                                    add.push(tmp.id);
                                }
                                return tmp.id;
                            };
    
                        if(dat.length && dat[0].id !== undefined && dat[0].parent !== undefined) {
                            // Flat JSON support (for easy import from DB):
                            // 1) convert to object (foreach)
                            for(i = 0, j = dat.length; i < j; i++) {
                                if(!dat[i].children) {
                                    dat[i].children = [];
                                }
                                if(!dat[i].state) {
                                    dat[i].state = {};
                                }
                                m[dat[i].id.toString()] = dat[i];
                            }
                            // 2) populate children (foreach)
                            for(i = 0, j = dat.length; i < j; i++) {
                                if (!m[dat[i].parent.toString()]) {
                                    if (typeof inst !== "undefined") {
                                        inst._data.core.last_error = { 'error' : 'parse', 'plugin' : 'core', 'id' : 'core_07', 'reason' : 'Node with invalid parent', 'data' : JSON.stringify({ 'id' : dat[i].id.toString(), 'parent' : dat[i].parent.toString() }) };
                                        inst.settings.core.error.call(inst, inst._data.core.last_error);
                                    }
                                    continue;
                                }
    
                                m[dat[i].parent.toString()].children.push(dat[i].id.toString());
                                // populate parent.children_d
                                p.children_d.push(dat[i].id.toString());
                            }
                            // 3) normalize && populate parents and children_d with recursion
                            for(i = 0, j = p.children.length; i < j; i++) {
                                tmp = parse_flat(m[p.children[i]], par, p.parents.concat());
                                dpc.push(tmp);
                                if(m[tmp].children_d.length) {
                                    dpc = dpc.concat(m[tmp].children_d);
                                }
                            }
                            for(i = 0, j = p.parents.length; i < j; i++) {
                                m[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);
                            }
                            // ?) three_state selection - p.state.selected && t - (if three_state foreach(dat => ch) -> foreach(parents) if(parent.selected) child.selected = true;
                            rslt = {
                                'cnt' : t_cnt,
                                'mod' : m,
                                'sel' : sel,
                                'par' : par,
                                'dpc' : dpc,
                                'add' : add
                            };
                        }
                        else {
                            for(i = 0, j = dat.length; i < j; i++) {
                                tmp = parse_nest(dat[i], par, p.parents.concat());
                                if(tmp) {
                                    chd.push(tmp);
                                    dpc.push(tmp);
                                    if(m[tmp].children_d.length) {
                                        dpc = dpc.concat(m[tmp].children_d);
                                    }
                                }
                            }
                            p.children = chd;
                            p.children_d = dpc;
                            for(i = 0, j = p.parents.length; i < j; i++) {
                                m[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);
                            }
                            rslt = {
                                'cnt' : t_cnt,
                                'mod' : m,
                                'sel' : sel,
                                'par' : par,
                                'dpc' : dpc,
                                'add' : add
                            };
                        }
                        if(typeof window === 'undefined' || typeof window.document === 'undefined') {
                            postMessage(rslt);
                        }
                        else {
                            return rslt;
                        }
                    },
                    rslt = function (rslt, worker) {
                        if(this.element === null) { return; }
                        this._cnt = rslt.cnt;
                        var i, m = this._model.data;
                        for (i in m) {
                            if (m.hasOwnProperty(i) && m[i].state && m[i].state.loading && rslt.mod[i]) {
                                rslt.mod[i].state.loading = true;
                            }
                        }
                        this._model.data = rslt.mod; // breaks the reference in load_node - careful
    
                        if(worker) {
                            var j, a = rslt.add, r = rslt.sel, s = this._data.core.selected.slice();
                            m = this._model.data;
                            // if selection was changed while calculating in worker
                            if(r.length !== s.length || $.vakata.array_unique(r.concat(s)).length !== r.length) {
                                // deselect nodes that are no longer selected
                                for(i = 0, j = r.length; i < j; i++) {
                                    if($.inArray(r[i], a) === -1 && $.inArray(r[i], s) === -1) {
                                        m[r[i]].state.selected = false;
                                    }
                                }
                                // select nodes that were selected in the mean time
                                for(i = 0, j = s.length; i < j; i++) {
                                    if($.inArray(s[i], r) === -1) {
                                        m[s[i]].state.selected = true;
                                    }
                                }
                            }
                        }
                        if(rslt.add.length) {
                            this._data.core.selected = this._data.core.selected.concat(rslt.add);
                        }
    
                        this.trigger('model', { "nodes" : rslt.dpc, 'parent' : rslt.par });
    
                        if(rslt.par !== $.jstree.root) {
                            this._node_changed(rslt.par);
                            this.redraw();
                        }
                        else {
                            // this.get_container_ul().children('.jstree-initial-node').remove();
                            this.redraw(true);
                        }
                        if(rslt.add.length) {
                            this.trigger('changed', { 'action' : 'model', 'selected' : this._data.core.selected });
                        }
    
                        // If no worker, try to mimic worker behavioour, by invoking cb asynchronously
                        if (!worker && setImmediate) {
                            setImmediate(function(){
                                cb.call(inst, true);
                            });
                        }
                        else {
                            cb.call(inst, true);
                        }
                    };
                if(this.settings.core.worker && window.Blob && window.URL && window.Worker) {
                    try {
                        if(this._wrk === null) {
                            this._wrk = window.URL.createObjectURL(
                                new window.Blob(
                                    ['self.onmessage = ' + func.toString()],
                                    {type:"text/javascript"}
                                )
                            );
                        }
                        if(!this._data.core.working || force_processing) {
                            this._data.core.working = true;
                            w = new window.Worker(this._wrk);
                            w.onmessage = function (e) {
                                rslt.call(this, e.data, true);
                                try { w.terminate(); w = null; } catch(ignore) { }
                                if(this._data.core.worker_queue.length) {
                                    this._append_json_data.apply(this, this._data.core.worker_queue.shift());
                                }
                                else {
                                    this._data.core.working = false;
                                }
                            }.bind(this);
                            w.onerror = function (e) {
                                rslt.call(this, func(args), false);
                                if(this._data.core.worker_queue.length) {
                                    this._append_json_data.apply(this, this._data.core.worker_queue.shift());
                                }
                                else {
                                    this._data.core.working = false;
                                }
                            }.bind(this);
                            if(!args.par) {
                                if(this._data.core.worker_queue.length) {
                                    this._append_json_data.apply(this, this._data.core.worker_queue.shift());
                                }
                                else {
                                    this._data.core.working = false;
                                }
                            }
                            else {
                                w.postMessage(args);
                            }
                        }
                        else {
                            this._data.core.worker_queue.push([dom, data, cb, true]);
                        }
                    }
                    catch(e) {
                        rslt.call(this, func(args), false);
                        if(this._data.core.worker_queue.length) {
                            this._append_json_data.apply(this, this._data.core.worker_queue.shift());
                        }
                        else {
                            this._data.core.working = false;
                        }
                    }
                }
                else {
                    rslt.call(this, func(args), false);
                }
            },
            /**
             * parses a node from a jQuery object and appends them to the in memory tree model. Used internally.
             * @private
             * @name _parse_model_from_html(d [, p, ps])
             * @param  {jQuery} d the jQuery object to parse
             * @param  {String} p the parent ID
             * @param  {Array} ps list of all parents
             * @return {String} the ID of the object added to the model
             */
            _parse_model_from_html : function (d, p, ps) {
                if(!ps) { ps = []; }
                else { ps = [].concat(ps); }
                if(p) { ps.unshift(p); }
                var c, e, m = this._model.data,
                    data = {
                        id			: false,
                        text		: false,
                        icon		: true,
                        parent		: p,
                        parents		: ps,
                        children	: [],
                        children_d	: [],
                        data		: null,
                        state		: { },
                        li_attr		: { id : false },
                        a_attr		: { href : '#' },
                        original	: false
                    }, i, tmp, tid;
                for(i in this._model.default_state) {
                    if(this._model.default_state.hasOwnProperty(i)) {
                        data.state[i] = this._model.default_state[i];
                    }
                }
                tmp = $.vakata.attributes(d, true);
                $.each(tmp, function (i, v) {
                    v = $.vakata.trim(v);
                    if(!v.length) { return true; }
                    data.li_attr[i] = v;
                    if(i === 'id') {
                        data.id = v.toString();
                    }
                });
                tmp = d.children('a').first();
                if(tmp.length) {
                    tmp = $.vakata.attributes(tmp, true);
                    $.each(tmp, function (i, v) {
                        v = $.vakata.trim(v);
                        if(v.length) {
                            data.a_attr[i] = v;
                        }
                    });
                }
                tmp = d.children("a").first().length ? d.children("a").first().clone() : d.clone();
                tmp.children("ins, i, ul").remove();
                tmp = tmp.html();
                tmp = $('<div></div>').html(tmp);
                data.text = this.settings.core.force_text ? tmp.text() : tmp.html();
                tmp = d.data();
                data.data = tmp ? $.extend(true, {}, tmp) : null;
                data.state.opened = d.hasClass('jstree-open');
                data.state.selected = d.children('a').hasClass('jstree-clicked');
                data.state.disabled = d.children('a').hasClass('jstree-disabled');
                if(data.data && data.data.jstree) {
                    for(i in data.data.jstree) {
                        if(data.data.jstree.hasOwnProperty(i)) {
                            data.state[i] = data.data.jstree[i];
                        }
                    }
                }
                tmp = d.children("a").children(".jstree-themeicon");
                if(tmp.length) {
                    data.icon = tmp.hasClass('jstree-themeicon-hidden') ? false : tmp.attr('rel');
                }
                if(data.state.icon !== undefined) {
                    data.icon = data.state.icon;
                }
                if(data.icon === undefined || data.icon === null || data.icon === "") {
                    data.icon = true;
                }
                tmp = d.children("ul").children("li");
                do {
                    tid = 'j' + this._id + '_' + (++this._cnt);
                } while(m[tid]);
                data.id = data.li_attr.id ? data.li_attr.id.toString() : tid;
                if(tmp.length) {
                    tmp.each(function (i, v) {
                        c = this._parse_model_from_html($(v), data.id, ps);
                        e = this._model.data[c];
                        data.children.push(c);
                        if(e.children_d.length) {
                            data.children_d = data.children_d.concat(e.children_d);
                        }
                    }.bind(this));
                    data.children_d = data.children_d.concat(data.children);
                }
                else {
                    if(d.hasClass('jstree-closed')) {
                        data.state.loaded = false;
                    }
                }
                if(data.li_attr['class']) {
                    data.li_attr['class'] = data.li_attr['class'].replace('jstree-closed','').replace('jstree-open','');
                }
                if(data.a_attr['class']) {
                    data.a_attr['class'] = data.a_attr['class'].replace('jstree-clicked','').replace('jstree-disabled','');
                }
                m[data.id] = data;
                if(data.state.selected) {
                    this._data.core.selected.push(data.id);
                }
                return data.id;
            },
            /**
             * parses a node from a JSON object (used when dealing with flat data, which has no nesting of children, but has id and parent properties) and appends it to the in memory tree model. Used internally.
             * @private
             * @name _parse_model_from_flat_json(d [, p, ps])
             * @param  {Object} d the JSON object to parse
             * @param  {String} p the parent ID
             * @param  {Array} ps list of all parents
             * @return {String} the ID of the object added to the model
             */
            _parse_model_from_flat_json : function (d, p, ps) {
                if(!ps) { ps = []; }
                else { ps = ps.concat(); }
                if(p) { ps.unshift(p); }
                var tid = d.id.toString(),
                    m = this._model.data,
                    df = this._model.default_state,
                    i, j, c, e,
                    tmp = {
                        id			: tid,
                        text		: d.text || '',
                        icon		: d.icon !== undefined ? d.icon : true,
                        parent		: p,
                        parents		: ps,
                        children	: d.children || [],
                        children_d	: d.children_d || [],
                        data		: d.data,
                        state		: { },
                        li_attr		: { id : false },
                        a_attr		: { href : '#' },
                        original	: false
                    };
                for(i in df) {
                    if(df.hasOwnProperty(i)) {
                        tmp.state[i] = df[i];
                    }
                }
                if(d && d.data && d.data.jstree && d.data.jstree.icon) {
                    tmp.icon = d.data.jstree.icon;
                }
                if(tmp.icon === undefined || tmp.icon === null || tmp.icon === "") {
                    tmp.icon = true;
                }
                if(d && d.data) {
                    tmp.data = d.data;
                    if(d.data.jstree) {
                        for(i in d.data.jstree) {
                            if(d.data.jstree.hasOwnProperty(i)) {
                                tmp.state[i] = d.data.jstree[i];
                            }
                        }
                    }
                }
                if(d && typeof d.state === 'object') {
                    for (i in d.state) {
                        if(d.state.hasOwnProperty(i)) {
                            tmp.state[i] = d.state[i];
                        }
                    }
                }
                if(d && typeof d.li_attr === 'object') {
                    for (i in d.li_attr) {
                        if(d.li_attr.hasOwnProperty(i)) {
                            tmp.li_attr[i] = d.li_attr[i];
                        }
                    }
                }
                if(!tmp.li_attr.id) {
                    tmp.li_attr.id = tid;
                }
                if(d && typeof d.a_attr === 'object') {
                    for (i in d.a_attr) {
                        if(d.a_attr.hasOwnProperty(i)) {
                            tmp.a_attr[i] = d.a_attr[i];
                        }
                    }
                }
                if(d && d.children && d.children === true) {
                    tmp.state.loaded = false;
                    tmp.children = [];
                    tmp.children_d = [];
                }
                m[tmp.id] = tmp;
                for(i = 0, j = tmp.children.length; i < j; i++) {
                    c = this._parse_model_from_flat_json(m[tmp.children[i]], tmp.id, ps);
                    e = m[c];
                    tmp.children_d.push(c);
                    if(e.children_d.length) {
                        tmp.children_d = tmp.children_d.concat(e.children_d);
                    }
                }
                delete d.data;
                delete d.children;
                m[tmp.id].original = d;
                if(tmp.state.selected) {
                    this._data.core.selected.push(tmp.id);
                }
                return tmp.id;
            },
            /**
             * parses a node from a JSON object and appends it to the in memory tree model. Used internally.
             * @private
             * @name _parse_model_from_json(d [, p, ps])
             * @param  {Object} d the JSON object to parse
             * @param  {String} p the parent ID
             * @param  {Array} ps list of all parents
             * @return {String} the ID of the object added to the model
             */
            _parse_model_from_json : function (d, p, ps) {
                if(!ps) { ps = []; }
                else { ps = ps.concat(); }
                if(p) { ps.unshift(p); }
                var tid = false, i, j, c, e, m = this._model.data, df = this._model.default_state, tmp;
                do {
                    tid = 'j' + this._id + '_' + (++this._cnt);
                } while(m[tid]);
    
                tmp = {
                    id			: false,
                    text		: typeof d === 'string' ? d : '',
                    icon		: typeof d === 'object' && d.icon !== undefined ? d.icon : true,
                    parent		: p,
                    parents		: ps,
                    children	: [],
                    children_d	: [],
                    data		: null,
                    state		: { },
                    li_attr		: { id : false },
                    a_attr		: { href : '#' },
                    original	: false
                };
                for(i in df) {
                    if(df.hasOwnProperty(i)) {
                        tmp.state[i] = df[i];
                    }
                }
                if(d && (d.id || d.id === 0)) { tmp.id = d.id.toString(); }
                if(d && d.text) { tmp.text = d.text; }
                if(d && d.data && d.data.jstree && d.data.jstree.icon) {
                    tmp.icon = d.data.jstree.icon;
                }
                if(tmp.icon === undefined || tmp.icon === null || tmp.icon === "") {
                    tmp.icon = true;
                }
                if(d && d.data) {
                    tmp.data = d.data;
                    if(d.data.jstree) {
                        for(i in d.data.jstree) {
                            if(d.data.jstree.hasOwnProperty(i)) {
                                tmp.state[i] = d.data.jstree[i];
                            }
                        }
                    }
                }
                if(d && typeof d.state === 'object') {
                    for (i in d.state) {
                        if(d.state.hasOwnProperty(i)) {
                            tmp.state[i] = d.state[i];
                        }
                    }
                }
                if(d && typeof d.li_attr === 'object') {
                    for (i in d.li_attr) {
                        if(d.li_attr.hasOwnProperty(i)) {
                            tmp.li_attr[i] = d.li_attr[i];
                        }
                    }
                }
                if(tmp.li_attr.id && !(tmp.id || tmp.id === 0)) {
                    tmp.id = tmp.li_attr.id.toString();
                }
                if(!(tmp.id || tmp.id === 0)) {
                    tmp.id = tid;
                }
                if(!tmp.li_attr.id) {
                    tmp.li_attr.id = tmp.id;
                }
                if(d && typeof d.a_attr === 'object') {
                    for (i in d.a_attr) {
                        if(d.a_attr.hasOwnProperty(i)) {
                            tmp.a_attr[i] = d.a_attr[i];
                        }
                    }
                }
                if(d && d.children && d.children.length) {
                    for(i = 0, j = d.children.length; i < j; i++) {
                        c = this._parse_model_from_json(d.children[i], tmp.id, ps);
                        e = m[c];
                        tmp.children.push(c);
                        if(e.children_d.length) {
                            tmp.children_d = tmp.children_d.concat(e.children_d);
                        }
                    }
                    tmp.children_d = tmp.children.concat(tmp.children_d);
                }
                if(d && d.children && d.children === true) {
                    tmp.state.loaded = false;
                    tmp.children = [];
                    tmp.children_d = [];
                }
                delete d.data;
                delete d.children;
                tmp.original = d;
                m[tmp.id] = tmp;
                if(tmp.state.selected) {
                    this._data.core.selected.push(tmp.id);
                }
                return tmp.id;
            },
            /**
             * redraws all nodes that need to be redrawn. Used internally.
             * @private
             * @name _redraw()
             * @trigger redraw.jstree
             */
            _redraw : function () {
                var nodes = this._model.force_full_redraw ? this._model.data[$.jstree.root].children.concat([]) : this._model.changed.concat([]),
                    f = document.createElement('UL'), tmp, i, j, fe = this._data.core.focused;
                for(i = 0, j = nodes.length; i < j; i++) {
                    tmp = this.redraw_node(nodes[i], true, this._model.force_full_redraw);
                    if(tmp && this._model.force_full_redraw) {
                        f.appendChild(tmp);
                    }
                }
                if(this._model.force_full_redraw) {
                    f.className = this.get_container_ul()[0].className;
                    f.setAttribute('role','presentation');
                    this.element.empty().append(f);
                    //this.get_container_ul()[0].appendChild(f);
                }
                if(fe !== null && this.settings.core.restore_focus) {
                    tmp = this.get_node(fe, true);
                    if(tmp && tmp.length && tmp.children('.jstree-anchor')[0] !== document.activeElement) {
                        tmp.children('.jstree-anchor').trigger('focus');
                    }
                    else {
                        this._data.core.focused = null;
                    }
                }
                this._model.force_full_redraw = false;
                this._model.changed = [];
                /**
                 * triggered after nodes are redrawn
                 * @event
                 * @name redraw.jstree
                 * @param {array} nodes the redrawn nodes
                 */
                this.trigger('redraw', { "nodes" : nodes });
            },
            /**
             * redraws all nodes that need to be redrawn or optionally - the whole tree
             * @name redraw([full])
             * @param {Boolean} full if set to `true` all nodes are redrawn.
             */
            redraw : function (full) {
                if(full) {
                    this._model.force_full_redraw = true;
                }
                //if(this._model.redraw_timeout) {
                //	clearTimeout(this._model.redraw_timeout);
                //}
                //this._model.redraw_timeout = setTimeout($.proxy(this._redraw, this),0);
                this._redraw();
            },
            /**
             * redraws a single node's children. Used internally.
             * @private
             * @name draw_children(node)
             * @param {mixed} node the node whose children will be redrawn
             */
            draw_children : function (node) {
                var obj = this.get_node(node),
                    i = false,
                    j = false,
                    k = false,
                    d = document;
                if(!obj) { return false; }
                if(obj.id === $.jstree.root) { return this.redraw(true); }
                node = this.get_node(node, true);
                if(!node || !node.length) { return false; } // TODO: quick toggle
    
                node.children('.jstree-children').remove();
                node = node[0];
                if(obj.children.length && obj.state.loaded) {
                    k = d.createElement('UL');
                    k.setAttribute('role', 'group');
                    k.className = 'jstree-children';
                    for(i = 0, j = obj.children.length; i < j; i++) {
                        k.appendChild(this.redraw_node(obj.children[i], true, true));
                    }
                    node.appendChild(k);
                }
            },
            /**
             * redraws a single node. Used internally.
             * @private
             * @name redraw_node(node, deep, is_callback, force_render)
             * @param {mixed} node the node to redraw
             * @param {Boolean} deep should child nodes be redrawn too
             * @param {Boolean} is_callback is this a recursion call
             * @param {Boolean} force_render should children of closed parents be drawn anyway
             */
            redraw_node : function (node, deep, is_callback, force_render) {
                var obj = this.get_node(node),
                    par = false,
                    ind = false,
                    old = false,
                    i = false,
                    j = false,
                    k = false,
                    c = '',
                    d = document,
                    m = this._model.data,
                    f = false,
                    s = false,
                    tmp = null,
                    t = 0,
                    l = 0,
                    has_children = false,
                    last_sibling = false;
                if(!obj) { return false; }
                if(obj.id === $.jstree.root) {  return this.redraw(true); }
                deep = deep || obj.children.length === 0;
                node = !document.querySelector ? document.getElementById(obj.id) : this.element[0].querySelector('#' + ("0123456789".indexOf(obj.id[0]) !== -1 ? '\\3' + obj.id[0] + ' ' + obj.id.substr(1).replace($.jstree.idregex,'\\$&') : obj.id.replace($.jstree.idregex,'\\$&')) ); //, this.element);
                if(!node) {
                    deep = true;
                    //node = d.createElement('LI');
                    if(!is_callback) {
                        par = obj.parent !== $.jstree.root ? $('#' + obj.parent.replace($.jstree.idregex,'\\$&'), this.element)[0] : null;
                        if(par !== null && (!par || !m[obj.parent].state.opened)) {
                            return false;
                        }
                        ind = $.inArray(obj.id, par === null ? m[$.jstree.root].children : m[obj.parent].children);
                    }
                }
                else {
                    node = $(node);
                    if(!is_callback) {
                        par = node.parent().parent()[0];
                        if(par === this.element[0]) {
                            par = null;
                        }
                        ind = node.index();
                    }
                    // m[obj.id].data = node.data(); // use only node's data, no need to touch jquery storage
                    if(!deep && obj.children.length && !node.children('.jstree-children').length) {
                        deep = true;
                    }
                    if(!deep) {
                        old = node.children('.jstree-children')[0];
                    }
                    f = node.children('.jstree-anchor')[0] === document.activeElement;
                    node.remove();
                    //node = d.createElement('LI');
                    //node = node[0];
                }
                node = this._data.core.node.cloneNode(true);
                // node is DOM, deep is boolean
    
                c = 'jstree-node ';
                for(i in obj.li_attr) {
                    if(obj.li_attr.hasOwnProperty(i)) {
                        if(i === 'id') { continue; }
                        if(i !== 'class') {
                            node.setAttribute(i, obj.li_attr[i]);
                        }
                        else {
                            c += obj.li_attr[i];
                        }
                    }
                }
                if(!obj.a_attr.id) {
                    obj.a_attr.id = obj.id + '_anchor';
                }
                node.childNodes[1].setAttribute('aria-selected', !!obj.state.selected);
                node.childNodes[1].setAttribute('aria-level', obj.parents.length);
                if(this.settings.core.compute_elements_positions) {
                    node.childNodes[1].setAttribute('aria-setsize', m[obj.parent].children.length);
                    node.childNodes[1].setAttribute('aria-posinset', m[obj.parent].children.indexOf(obj.id) + 1);
                }
                if(obj.state.disabled) {
                    node.childNodes[1].setAttribute('aria-disabled', true);
                }
    
                for(i = 0, j = obj.children.length; i < j; i++) {
                    if(!m[obj.children[i]].state.hidden) {
                        has_children = true;
                        break;
                    }
                }
                if(obj.parent !== null && m[obj.parent] && !obj.state.hidden) {
                    i = $.inArray(obj.id, m[obj.parent].children);
                    last_sibling = obj.id;
                    if(i !== -1) {
                        i++;
                        for(j = m[obj.parent].children.length; i < j; i++) {
                            if(!m[m[obj.parent].children[i]].state.hidden) {
                                last_sibling = m[obj.parent].children[i];
                            }
                            if(last_sibling !== obj.id) {
                                break;
                            }
                        }
                    }
                }
    
                if(obj.state.hidden) {
                    c += ' jstree-hidden';
                }
                if (obj.state.loading) {
                    c += ' jstree-loading';
                }
                if(obj.state.loaded && !has_children) {
                    c += ' jstree-leaf';
                }
                else {
                    c += obj.state.opened && obj.state.loaded ? ' jstree-open' : ' jstree-closed';
                    node.childNodes[1].setAttribute('aria-expanded', (obj.state.opened && obj.state.loaded) );
                }
                if(last_sibling === obj.id) {
                    c += ' jstree-last';
                }
                node.id = obj.id;
                node.className = c;
                c = ( obj.state.selected ? ' jstree-clicked' : '') + ( obj.state.disabled ? ' jstree-disabled' : '');
                for(j in obj.a_attr) {
                    if(obj.a_attr.hasOwnProperty(j)) {
                        if(j === 'href' && obj.a_attr[j] === '#') { continue; }
                        if(j !== 'class') {
                            node.childNodes[1].setAttribute(j, obj.a_attr[j]);
                        }
                        else {
                            c += ' ' + obj.a_attr[j];
                        }
                    }
                }
                if(c.length) {
                    node.childNodes[1].className = 'jstree-anchor ' + c;
                }
                if((obj.icon && obj.icon !== true) || obj.icon === false) {
                    if(obj.icon === false) {
                        node.childNodes[1].childNodes[0].className += ' jstree-themeicon-hidden';
                    }
                    else if(obj.icon.indexOf('/') === -1 && obj.icon.indexOf('.') === -1) {
                        node.childNodes[1].childNodes[0].className += ' ' + obj.icon + ' jstree-themeicon-custom';
                    }
                    else {
                        node.childNodes[1].childNodes[0].style.backgroundImage = 'url("'+obj.icon+'")';
                        node.childNodes[1].childNodes[0].style.backgroundPosition = 'center center';
                        node.childNodes[1].childNodes[0].style.backgroundSize = 'auto';
                        node.childNodes[1].childNodes[0].className += ' jstree-themeicon-custom';
                    }
                }
    
                if(this.settings.core.force_text) {
                    node.childNodes[1].appendChild(d.createTextNode(obj.text));
                }
                else {
                    node.childNodes[1].innerHTML += obj.text;
                }
    
    
                if(deep && obj.children.length && (obj.state.opened || force_render) && obj.state.loaded) {
                    k = d.createElement('UL');
                    k.setAttribute('role', 'group');
                    k.className = 'jstree-children';
                    for(i = 0, j = obj.children.length; i < j; i++) {
                        k.appendChild(this.redraw_node(obj.children[i], deep, true));
                    }
                    node.appendChild(k);
                }
                if(old) {
                    node.appendChild(old);
                }
                if(!is_callback) {
                    // append back using par / ind
                    if(!par) {
                        par = this.element[0];
                    }
                    for(i = 0, j = par.childNodes.length; i < j; i++) {
                        if(par.childNodes[i] && par.childNodes[i].className && par.childNodes[i].className.indexOf('jstree-children') !== -1) {
                            tmp = par.childNodes[i];
                            break;
                        }
                    }
                    if(!tmp) {
                        tmp = d.createElement('UL');
                        tmp.setAttribute('role', 'group');
                        tmp.className = 'jstree-children';
                        par.appendChild(tmp);
                    }
                    par = tmp;
    
                    if(ind < par.childNodes.length) {
                        par.insertBefore(node, par.childNodes[ind]);
                    }
                    else {
                        par.appendChild(node);
                    }
                    if(f) {
                        t = this.element[0].scrollTop;
                        l = this.element[0].scrollLeft;
                        node.childNodes[1].focus();
                        this.element[0].scrollTop = t;
                        this.element[0].scrollLeft = l;
                    }
                }
                if(obj.state.opened && !obj.state.loaded) {
                    obj.state.opened = false;
                    setTimeout(function () {
                        this.open_node(obj.id, false, 0);
                    }.bind(this), 0);
                }
                return node;
            },
            /**
             * opens a node, revealing its children. If the node is not loaded it will be loaded and opened once ready.
             * @name open_node(obj [, callback, animation])
             * @param {mixed} obj the node to open
             * @param {Function} callback a function to execute once the node is opened
             * @param {Number} animation the animation duration in milliseconds when opening the node (overrides the `core.animation` setting). Use `false` for no animation.
             * @trigger open_node.jstree, after_open.jstree, before_open.jstree
             */
            open_node : function (obj, callback, animation) {
                var t1, t2, d, t;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.open_node(obj[t1], callback, animation);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) {
                    return false;
                }
                animation = animation === undefined ? this.settings.core.animation : animation;
                if(!this.is_closed(obj)) {
                    if(callback) {
                        callback.call(this, obj, false);
                    }
                    return false;
                }
                if(!this.is_loaded(obj)) {
                    if(this.is_loading(obj)) {
                        return setTimeout(function () {
                            this.open_node(obj, callback, animation);
                        }.bind(this), 500);
                    }
                    this.load_node(obj, function (o, ok) {
                        return ok ? this.open_node(o, callback, animation) : (callback ? callback.call(this, o, false) : false);
                    });
                }
                else {
                    d = this.get_node(obj, true);
                    t = this;
                    if(d.length) {
                        if(animation && d.children(".jstree-children").length) {
                            d.children(".jstree-children").stop(true, true);
                        }
                        if(obj.children.length && !this._firstChild(d.children('.jstree-children')[0])) {
                            this.draw_children(obj);
                            //d = this.get_node(obj, true);
                        }
                        if(!animation) {
                            this.trigger('before_open', { "node" : obj });
                            d[0].className = d[0].className.replace('jstree-closed', 'jstree-open');
                            d[0].childNodes[1].setAttribute("aria-expanded", true);
                        }
                        else {
                            this.trigger('before_open', { "node" : obj });
                            d
                                .children(".jstree-children").css("display","none").end()
                                .removeClass("jstree-closed").addClass("jstree-open")
                                    .children('.jstree-anchor').attr("aria-expanded", true).end()
                                .children(".jstree-children").stop(true, true)
                                    .slideDown(animation, function () {
                                        this.style.display = "";
                                        if (t.element) {
                                            t.trigger("after_open", { "node" : obj });
                                        }
                                    });
                        }
                    }
                    obj.state.opened = true;
                    if(callback) {
                        callback.call(this, obj, true);
                    }
                    if(!d.length) {
                        /**
                         * triggered when a node is about to be opened (if the node is supposed to be in the DOM, it will be, but it won't be visible yet)
                         * @event
                         * @name before_open.jstree
                         * @param {Object} node the opened node
                         */
                        this.trigger('before_open', { "node" : obj });
                    }
                    /**
                     * triggered when a node is opened (if there is an animation it will not be completed yet)
                     * @event
                     * @name open_node.jstree
                     * @param {Object} node the opened node
                     */
                    this.trigger('open_node', { "node" : obj });
                    if(!animation || !d.length) {
                        /**
                         * triggered when a node is opened and the animation is complete
                         * @event
                         * @name after_open.jstree
                         * @param {Object} node the opened node
                         */
                        this.trigger("after_open", { "node" : obj });
                    }
                    return true;
                }
            },
            /**
             * opens every parent of a node (node should be loaded)
             * @name _open_to(obj)
             * @param {mixed} obj the node to reveal
             * @private
             */
            _open_to : function (obj) {
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) {
                    return false;
                }
                var i, j, p = obj.parents;
                for(i = 0, j = p.length; i < j; i+=1) {
                    if(i !== $.jstree.root) {
                        this.open_node(p[i], false, 0);
                    }
                }
                return $('#' + obj.id.replace($.jstree.idregex,'\\$&'), this.element);
            },
            /**
             * closes a node, hiding its children
             * @name close_node(obj [, animation])
             * @param {mixed} obj the node to close
             * @param {Number} animation the animation duration in milliseconds when closing the node (overrides the `core.animation` setting). Use `false` for no animation.
             * @trigger close_node.jstree, after_close.jstree
             */
            close_node : function (obj, animation) {
                var t1, t2, t, d;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.close_node(obj[t1], animation);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) {
                    return false;
                }
                if(this.is_closed(obj)) {
                    return false;
                }
                animation = animation === undefined ? this.settings.core.animation : animation;
                t = this;
                d = this.get_node(obj, true);
    
                obj.state.opened = false;
                /**
                 * triggered when a node is closed (if there is an animation it will not be complete yet)
                 * @event
                 * @name close_node.jstree
                 * @param {Object} node the closed node
                 */
                this.trigger('close_node',{ "node" : obj });
                if(!d.length) {
                    /**
                     * triggered when a node is closed and the animation is complete
                     * @event
                     * @name after_close.jstree
                     * @param {Object} node the closed node
                     */
                    this.trigger("after_close", { "node" : obj });
                }
                else {
                    if(!animation) {
                        d[0].className = d[0].className.replace('jstree-open', 'jstree-closed');
                        d.children('.jstree-anchor').attr("aria-expanded", false);
                        d.children('.jstree-children').remove();
                        this.trigger("after_close", { "node" : obj });
                    }
                    else {
                        d
                            .children(".jstree-children").attr("style","display:block !important").end()
                            .removeClass("jstree-open").addClass("jstree-closed")
                                .children('.jstree-anchor').attr("aria-expanded", false).end()
                            .children(".jstree-children").stop(true, true).slideUp(animation, function () {
                                this.style.display = "";
                                d.children('.jstree-children').remove();
                                if (t.element) {
                                    t.trigger("after_close", { "node" : obj });
                                }
                            });
                    }
                }
            },
            /**
             * toggles a node - closing it if it is open, opening it if it is closed
             * @name toggle_node(obj)
             * @param {mixed} obj the node to toggle
             */
            toggle_node : function (obj) {
                var t1, t2;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.toggle_node(obj[t1]);
                    }
                    return true;
                }
                if(this.is_closed(obj)) {
                    return this.open_node(obj);
                }
                if(this.is_open(obj)) {
                    return this.close_node(obj);
                }
            },
            /**
             * opens all nodes within a node (or the tree), revealing their children. If the node is not loaded it will be loaded and opened once ready.
             * @name open_all([obj, animation, original_obj])
             * @param {mixed} obj the node to open recursively, omit to open all nodes in the tree
             * @param {Number} animation the animation duration in milliseconds when opening the nodes, the default is no animation
             * @param {jQuery} reference to the node that started the process (internal use)
             * @trigger open_all.jstree
             */
            open_all : function (obj, animation, original_obj) {
                if(!obj) { obj = $.jstree.root; }
                obj = this.get_node(obj);
                if(!obj) { return false; }
                var dom = obj.id === $.jstree.root ? this.get_container_ul() : this.get_node(obj, true), i, j, _this;
                if(!dom.length) {
                    for(i = 0, j = obj.children_d.length; i < j; i++) {
                        if(this.is_closed(this._model.data[obj.children_d[i]])) {
                            this._model.data[obj.children_d[i]].state.opened = true;
                        }
                    }
                    return this.trigger('open_all', { "node" : obj });
                }
                original_obj = original_obj || dom;
                _this = this;
                dom = this.is_closed(obj) ? dom.find('.jstree-closed').addBack() : dom.find('.jstree-closed');
                dom.each(function () {
                    _this.open_node(
                        this,
                        function(node, status) { if(status && this.is_parent(node)) { this.open_all(node, animation, original_obj); } },
                        animation || 0
                    );
                });
                if(original_obj.find('.jstree-closed').length === 0) {
                    /**
                     * triggered when an `open_all` call completes
                     * @event
                     * @name open_all.jstree
                     * @param {Object} node the opened node
                     */
                    this.trigger('open_all', { "node" : this.get_node(original_obj) });
                }
            },
            /**
             * closes all nodes within a node (or the tree), revealing their children
             * @name close_all([obj, animation])
             * @param {mixed} obj the node to close recursively, omit to close all nodes in the tree
             * @param {Number} animation the animation duration in milliseconds when closing the nodes, the default is no animation
             * @trigger close_all.jstree
             */
            close_all : function (obj, animation) {
                if(!obj) { obj = $.jstree.root; }
                obj = this.get_node(obj);
                if(!obj) { return false; }
                var dom = obj.id === $.jstree.root ? this.get_container_ul() : this.get_node(obj, true),
                    _this = this, i, j;
                if(dom.length) {
                    dom = this.is_open(obj) ? dom.find('.jstree-open').addBack() : dom.find('.jstree-open');
                    $(dom.get().reverse()).each(function () { _this.close_node(this, animation || 0); });
                }
                for(i = 0, j = obj.children_d.length; i < j; i++) {
                    this._model.data[obj.children_d[i]].state.opened = false;
                }
                /**
                 * triggered when an `close_all` call completes
                 * @event
                 * @name close_all.jstree
                 * @param {Object} node the closed node
                 */
                this.trigger('close_all', { "node" : obj });
            },
            /**
             * checks if a node is disabled (not selectable)
             * @name is_disabled(obj)
             * @param  {mixed} obj
             * @return {Boolean}
             */
            is_disabled : function (obj) {
                obj = this.get_node(obj);
                return obj && obj.state && obj.state.disabled;
            },
            /**
             * enables a node - so that it can be selected
             * @name enable_node(obj)
             * @param {mixed} obj the node to enable
             * @trigger enable_node.jstree
             */
            enable_node : function (obj) {
                var t1, t2;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.enable_node(obj[t1]);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) {
                    return false;
                }
                obj.state.disabled = false;
                this.get_node(obj,true).children('.jstree-anchor').removeClass('jstree-disabled').attr('aria-disabled', false);
                /**
                 * triggered when an node is enabled
                 * @event
                 * @name enable_node.jstree
                 * @param {Object} node the enabled node
                 */
                this.trigger('enable_node', { 'node' : obj });
            },
            /**
             * disables a node - so that it can not be selected
             * @name disable_node(obj)
             * @param {mixed} obj the node to disable
             * @trigger disable_node.jstree
             */
            disable_node : function (obj) {
                var t1, t2;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.disable_node(obj[t1]);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) {
                    return false;
                }
                obj.state.disabled = true;
                this.get_node(obj,true).children('.jstree-anchor').addClass('jstree-disabled').attr('aria-disabled', true);
                /**
                 * triggered when an node is disabled
                 * @event
                 * @name disable_node.jstree
                 * @param {Object} node the disabled node
                 */
                this.trigger('disable_node', { 'node' : obj });
            },
            /**
             * determines if a node is hidden
             * @name is_hidden(obj)
             * @param {mixed} obj the node
             */
            is_hidden : function (obj) {
                obj = this.get_node(obj);
                return obj.state.hidden === true;
            },
            /**
             * hides a node - it is still in the structure but will not be visible
             * @name hide_node(obj)
             * @param {mixed} obj the node to hide
             * @param {Boolean} skip_redraw internal parameter controlling if redraw is called
             * @trigger hide_node.jstree
             */
            hide_node : function (obj, skip_redraw) {
                var t1, t2;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.hide_node(obj[t1], true);
                    }
                    if (!skip_redraw) {
                        this.redraw();
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) {
                    return false;
                }
                if(!obj.state.hidden) {
                    obj.state.hidden = true;
                    this._node_changed(obj.parent);
                    if(!skip_redraw) {
                        this.redraw();
                    }
                    /**
                     * triggered when an node is hidden
                     * @event
                     * @name hide_node.jstree
                     * @param {Object} node the hidden node
                     */
                    this.trigger('hide_node', { 'node' : obj });
                }
            },
            /**
             * shows a node
             * @name show_node(obj)
             * @param {mixed} obj the node to show
             * @param {Boolean} skip_redraw internal parameter controlling if redraw is called
             * @trigger show_node.jstree
             */
            show_node : function (obj, skip_redraw) {
                var t1, t2;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.show_node(obj[t1], true);
                    }
                    if (!skip_redraw) {
                        this.redraw();
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) {
                    return false;
                }
                if(obj.state.hidden) {
                    obj.state.hidden = false;
                    this._node_changed(obj.parent);
                    if(!skip_redraw) {
                        this.redraw();
                    }
                    /**
                     * triggered when an node is shown
                     * @event
                     * @name show_node.jstree
                     * @param {Object} node the shown node
                     */
                    this.trigger('show_node', { 'node' : obj });
                }
            },
            /**
             * hides all nodes
             * @name hide_all()
             * @trigger hide_all.jstree
             */
            hide_all : function (skip_redraw) {
                var i, m = this._model.data, ids = [];
                for(i in m) {
                    if(m.hasOwnProperty(i) && i !== $.jstree.root && !m[i].state.hidden) {
                        m[i].state.hidden = true;
                        ids.push(i);
                    }
                }
                this._model.force_full_redraw = true;
                if(!skip_redraw) {
                    this.redraw();
                }
                /**
                 * triggered when all nodes are hidden
                 * @event
                 * @name hide_all.jstree
                 * @param {Array} nodes the IDs of all hidden nodes
                 */
                this.trigger('hide_all', { 'nodes' : ids });
                return ids;
            },
            /**
             * shows all nodes
             * @name show_all()
             * @trigger show_all.jstree
             */
            show_all : function (skip_redraw) {
                var i, m = this._model.data, ids = [];
                for(i in m) {
                    if(m.hasOwnProperty(i) && i !== $.jstree.root && m[i].state.hidden) {
                        m[i].state.hidden = false;
                        ids.push(i);
                    }
                }
                this._model.force_full_redraw = true;
                if(!skip_redraw) {
                    this.redraw();
                }
                /**
                 * triggered when all nodes are shown
                 * @event
                 * @name show_all.jstree
                 * @param {Array} nodes the IDs of all shown nodes
                 */
                this.trigger('show_all', { 'nodes' : ids });
                return ids;
            },
            /**
             * called when a node is selected by the user. Used internally.
             * @private
             * @name activate_node(obj, e)
             * @param {mixed} obj the node
             * @param {Object} e the related event
             * @trigger activate_node.jstree, changed.jstree
             */
            activate_node : function (obj, e) {
                if(this.is_disabled(obj)) {
                    return false;
                }
                if(!e || typeof e !== 'object') {
                    e = {};
                }
    
                // ensure last_clicked is still in the DOM, make it fresh (maybe it was moved?) and make sure it is still selected, if not - make last_clicked the last selected node
                this._data.core.last_clicked = this._data.core.last_clicked && this._data.core.last_clicked.id !== undefined ? this.get_node(this._data.core.last_clicked.id) : null;
                if(this._data.core.last_clicked && !this._data.core.last_clicked.state.selected) { this._data.core.last_clicked = null; }
                if(!this._data.core.last_clicked && this._data.core.selected.length) { this._data.core.last_clicked = this.get_node(this._data.core.selected[this._data.core.selected.length - 1]); }
    
                if(!this.settings.core.multiple || (!e.metaKey && !e.ctrlKey && !e.shiftKey) || (e.shiftKey && (!this._data.core.last_clicked || !this.get_parent(obj) || this.get_parent(obj) !== this._data.core.last_clicked.parent ) )) {
                    if(!this.settings.core.multiple && (e.metaKey || e.ctrlKey || e.shiftKey) && this.is_selected(obj)) {
                        this.deselect_node(obj, false, e);
                    }
                    else {
                        if (this.settings.core.allow_reselect || !this.is_selected(obj) || this._data.core.selected.length !== 1) {
                            this.deselect_all(true);
                            this.select_node(obj, false, false, e);
                        }
                        this._data.core.last_clicked = this.get_node(obj);
                    }
                }
                else {
                    if(e.shiftKey) {
                        var o = this.get_node(obj).id,
                            l = this._data.core.last_clicked.id,
                            p = this.get_node(this._data.core.last_clicked.parent).children,
                            c = false,
                            i, j;
                        for(i = 0, j = p.length; i < j; i += 1) {
                            // separate IFs work whem o and l are the same
                            if(p[i] === o) {
                                c = !c;
                            }
                            if(p[i] === l) {
                                c = !c;
                            }
                            if(!this.is_disabled(p[i]) && (c || p[i] === o || p[i] === l)) {
                                if (!this.is_hidden(p[i])) {
                                    this.select_node(p[i], true, false, e);
                                }
                            }
                            else {
                                if (!e.ctrlKey) {
                                    this.deselect_node(p[i], true, e);
                                }
                            }
                        }
                        this.trigger('changed', { 'action' : 'select_node', 'node' : this.get_node(obj), 'selected' : this._data.core.selected, 'event' : e });
                    }
                    else {
                        if(!this.is_selected(obj)) {
                            if (e.ctrlKey) {
                                this._data.core.last_clicked = this.get_node(obj);
                            }
                            this.select_node(obj, false, false, e);
                        }
                        else {
                            this.deselect_node(obj, false, e);
                        }
                    }
                }
                /**
                 * triggered when an node is clicked or intercated with by the user
                 * @event
                 * @name activate_node.jstree
                 * @param {Object} node
                 * @param {Object} event the ooriginal event (if any) which triggered the call (may be an empty object)
                 */
                this.trigger('activate_node', { 'node' : this.get_node(obj), 'event' : e });
            },
            /**
             * applies the hover state on a node, called when a node is hovered by the user. Used internally.
             * @private
             * @name hover_node(obj)
             * @param {mixed} obj
             * @trigger hover_node.jstree
             */
            hover_node : function (obj) {
                obj = this.get_node(obj, true);
                if(!obj || !obj.length || obj.children('.jstree-hovered').length) {
                    return false;
                }
                var o = this.element.find('.jstree-hovered'), t = this.element;
                if(o && o.length) { this.dehover_node(o); }
    
                obj.children('.jstree-anchor').addClass('jstree-hovered');
                /**
                 * triggered when an node is hovered
                 * @event
                 * @name hover_node.jstree
                 * @param {Object} node
                 */
                this.trigger('hover_node', { 'node' : this.get_node(obj) });
                setTimeout(function () { t.attr('aria-activedescendant', obj[0].id); }, 0);
            },
            /**
             * removes the hover state from a nodecalled when a node is no longer hovered by the user. Used internally.
             * @private
             * @name dehover_node(obj)
             * @param {mixed} obj
             * @trigger dehover_node.jstree
             */
            dehover_node : function (obj) {
                obj = this.get_node(obj, true);
                if(!obj || !obj.length || !obj.children('.jstree-hovered').length) {
                    return false;
                }
                obj.children('.jstree-anchor').removeClass('jstree-hovered');
                /**
                 * triggered when an node is no longer hovered
                 * @event
                 * @name dehover_node.jstree
                 * @param {Object} node
                 */
                this.trigger('dehover_node', { 'node' : this.get_node(obj) });
            },
            /**
             * select a node
             * @name select_node(obj [, supress_event, prevent_open])
             * @param {mixed} obj an array can be used to select multiple nodes
             * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered
             * @param {Boolean} prevent_open if set to `true` parents of the selected node won't be opened
             * @trigger select_node.jstree, changed.jstree
             */
            select_node : function (obj, supress_event, prevent_open, e) {
                var dom, t1, t2, th;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.select_node(obj[t1], supress_event, prevent_open, e);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) {
                    return false;
                }
                dom = this.get_node(obj, true);
                if(!obj.state.selected) {
                    obj.state.selected = true;
                    this._data.core.selected.push(obj.id);
                    if(!prevent_open) {
                        dom = this._open_to(obj);
                    }
                    if(dom && dom.length) {
                        dom.children('.jstree-anchor').addClass('jstree-clicked').attr('aria-selected', true);
                    }
                    /**
                     * triggered when an node is selected
                     * @event
                     * @name select_node.jstree
                     * @param {Object} node
                     * @param {Array} selected the current selection
                     * @param {Object} event the event (if any) that triggered this select_node
                     */
                    this.trigger('select_node', { 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });
                    if(!supress_event) {
                        /**
                         * triggered when selection changes
                         * @event
                         * @name changed.jstree
                         * @param {Object} node
                         * @param {Object} action the action that caused the selection to change
                         * @param {Array} selected the current selection
                         * @param {Object} event the event (if any) that triggered this changed event
                         */
                        this.trigger('changed', { 'action' : 'select_node', 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });
                    }
                }
            },
            /**
             * deselect a node
             * @name deselect_node(obj [, supress_event])
             * @param {mixed} obj an array can be used to deselect multiple nodes
             * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered
             * @trigger deselect_node.jstree, changed.jstree
             */
            deselect_node : function (obj, supress_event, e) {
                var t1, t2, dom;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.deselect_node(obj[t1], supress_event, e);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) {
                    return false;
                }
                dom = this.get_node(obj, true);
                if(obj.state.selected) {
                    obj.state.selected = false;
                    this._data.core.selected = $.vakata.array_remove_item(this._data.core.selected, obj.id);
                    if(dom.length) {
                        dom.children('.jstree-anchor').removeClass('jstree-clicked').attr('aria-selected', false);
                    }
                    /**
                     * triggered when an node is deselected
                     * @event
                     * @name deselect_node.jstree
                     * @param {Object} node
                     * @param {Array} selected the current selection
                     * @param {Object} event the event (if any) that triggered this deselect_node
                     */
                    this.trigger('deselect_node', { 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });
                    if(!supress_event) {
                        this.trigger('changed', { 'action' : 'deselect_node', 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });
                    }
                }
            },
            /**
             * select all nodes in the tree
             * @name select_all([supress_event])
             * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered
             * @trigger select_all.jstree, changed.jstree
             */
            select_all : function (supress_event) {
                var tmp = this._data.core.selected.concat([]), i, j;
                this._data.core.selected = this._model.data[$.jstree.root].children_d.concat();
                for(i = 0, j = this._data.core.selected.length; i < j; i++) {
                    if(this._model.data[this._data.core.selected[i]]) {
                        this._model.data[this._data.core.selected[i]].state.selected = true;
                    }
                }
                this.redraw(true);
                /**
                 * triggered when all nodes are selected
                 * @event
                 * @name select_all.jstree
                 * @param {Array} selected the current selection
                 */
                this.trigger('select_all', { 'selected' : this._data.core.selected });
                if(!supress_event) {
                    this.trigger('changed', { 'action' : 'select_all', 'selected' : this._data.core.selected, 'old_selection' : tmp });
                }
            },
            /**
             * deselect all selected nodes
             * @name deselect_all([supress_event])
             * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered
             * @trigger deselect_all.jstree, changed.jstree
             */
            deselect_all : function (supress_event) {
                var tmp = this._data.core.selected.concat([]), i, j;
                for(i = 0, j = this._data.core.selected.length; i < j; i++) {
                    if(this._model.data[this._data.core.selected[i]]) {
                        this._model.data[this._data.core.selected[i]].state.selected = false;
                    }
                }
                this._data.core.selected = [];
                this.element.find('.jstree-clicked').removeClass('jstree-clicked').attr('aria-selected', false);
                /**
                 * triggered when all nodes are deselected
                 * @event
                 * @name deselect_all.jstree
                 * @param {Object} node the previous selection
                 * @param {Array} selected the current selection
                 */
                this.trigger('deselect_all', { 'selected' : this._data.core.selected, 'node' : tmp });
                if(!supress_event) {
                    this.trigger('changed', { 'action' : 'deselect_all', 'selected' : this._data.core.selected, 'old_selection' : tmp });
                }
            },
            /**
             * checks if a node is selected
             * @name is_selected(obj)
             * @param  {mixed}  obj
             * @return {Boolean}
             */
            is_selected : function (obj) {
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) {
                    return false;
                }
                return obj.state.selected;
            },
            /**
             * get an array of all selected nodes
             * @name get_selected([full])
             * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
             * @return {Array}
             */
            get_selected : function (full) {
                return full ? $.map(this._data.core.selected, function (i) { return this.get_node(i); }.bind(this)) : this._data.core.selected.slice();
            },
            /**
             * get an array of all top level selected nodes (ignoring children of selected nodes)
             * @name get_top_selected([full])
             * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
             * @return {Array}
             */
            get_top_selected : function (full) {
                var tmp = this.get_selected(true),
                    obj = {}, i, j, k, l;
                for(i = 0, j = tmp.length; i < j; i++) {
                    obj[tmp[i].id] = tmp[i];
                }
                for(i = 0, j = tmp.length; i < j; i++) {
                    for(k = 0, l = tmp[i].children_d.length; k < l; k++) {
                        if(obj[tmp[i].children_d[k]]) {
                            delete obj[tmp[i].children_d[k]];
                        }
                    }
                }
                tmp = [];
                for(i in obj) {
                    if(obj.hasOwnProperty(i)) {
                        tmp.push(i);
                    }
                }
                return full ? $.map(tmp, function (i) { return this.get_node(i); }.bind(this)) : tmp;
            },
            /**
             * get an array of all bottom level selected nodes (ignoring selected parents)
             * @name get_bottom_selected([full])
             * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
             * @return {Array}
             */
            get_bottom_selected : function (full) {
                var tmp = this.get_selected(true),
                    obj = [], i, j;
                for(i = 0, j = tmp.length; i < j; i++) {
                    if(!tmp[i].children.length) {
                        obj.push(tmp[i].id);
                    }
                }
                return full ? $.map(obj, function (i) { return this.get_node(i); }.bind(this)) : obj;
            },
            /**
             * gets the current state of the tree so that it can be restored later with `set_state(state)`. Used internally.
             * @name get_state()
             * @private
             * @return {Object}
             */
            get_state : function () {
                var state	= {
                    'core' : {
                        'open' : [],
                        'loaded' : [],
                        'scroll' : {
                            'left' : this.element.scrollLeft(),
                            'top' : this.element.scrollTop()
                        },
                        /*!
                        'themes' : {
                            'name' : this.get_theme(),
                            'icons' : this._data.core.themes.icons,
                            'dots' : this._data.core.themes.dots
                        },
                        */
                        'selected' : []
                    }
                }, i;
                for(i in this._model.data) {
                    if(this._model.data.hasOwnProperty(i)) {
                        if(i !== $.jstree.root) {
                            if(this._model.data[i].state.loaded && this.settings.core.loaded_state) {
                                state.core.loaded.push(i);
                            }
                            if(this._model.data[i].state.opened) {
                                state.core.open.push(i);
                            }
                            if(this._model.data[i].state.selected) {
                                state.core.selected.push(i);
                            }
                        }
                    }
                }
                return state;
            },
            /**
             * sets the state of the tree. Used internally.
             * @name set_state(state [, callback])
             * @private
             * @param {Object} state the state to restore. Keep in mind this object is passed by reference and jstree will modify it.
             * @param {Function} callback an optional function to execute once the state is restored.
             * @trigger set_state.jstree
             */
            set_state : function (state, callback) {
                if(state) {
                    if(state.core && state.core.selected && state.core.initial_selection === undefined) {
                        state.core.initial_selection = this._data.core.selected.concat([]).sort().join(',');
                    }
                    if(state.core) {
                        var res, n, t, _this, i;
                        if(state.core.loaded) {
                            if(!this.settings.core.loaded_state || !$.vakata.is_array(state.core.loaded) || !state.core.loaded.length) {
                                delete state.core.loaded;
                                this.set_state(state, callback);
                            }
                            else {
                                this._load_nodes(state.core.loaded, function (nodes) {
                                    delete state.core.loaded;
                                    this.set_state(state, callback);
                                });
                            }
                            return false;
                        }
                        if(state.core.open) {
                            if(!$.vakata.is_array(state.core.open) || !state.core.open.length) {
                                delete state.core.open;
                                this.set_state(state, callback);
                            }
                            else {
                                this._load_nodes(state.core.open, function (nodes) {
                                    this.open_node(nodes, false, 0);
                                    delete state.core.open;
                                    this.set_state(state, callback);
                                });
                            }
                            return false;
                        }
                        if(state.core.scroll) {
                            if(state.core.scroll && state.core.scroll.left !== undefined) {
                                this.element.scrollLeft(state.core.scroll.left);
                            }
                            if(state.core.scroll && state.core.scroll.top !== undefined) {
                                this.element.scrollTop(state.core.scroll.top);
                            }
                            delete state.core.scroll;
                            this.set_state(state, callback);
                            return false;
                        }
                        if(state.core.selected) {
                            _this = this;
                            if (state.core.initial_selection === undefined ||
                                state.core.initial_selection === this._data.core.selected.concat([]).sort().join(',')
                            ) {
                                this.deselect_all();
                                $.each(state.core.selected, function (i, v) {
                                    _this.select_node(v, false, true);
                                });
                            }
                            delete state.core.initial_selection;
                            delete state.core.selected;
                            this.set_state(state, callback);
                            return false;
                        }
                        for(i in state) {
                            if(state.hasOwnProperty(i) && i !== "core" && $.inArray(i, this.settings.plugins) === -1) {
                                delete state[i];
                            }
                        }
                        if($.isEmptyObject(state.core)) {
                            delete state.core;
                            this.set_state(state, callback);
                            return false;
                        }
                    }
                    if($.isEmptyObject(state)) {
                        state = null;
                        if(callback) { callback.call(this); }
                        /**
                         * triggered when a `set_state` call completes
                         * @event
                         * @name set_state.jstree
                         */
                        this.trigger('set_state');
                        return false;
                    }
                    return true;
                }
                return false;
            },
            /**
             * refreshes the tree - all nodes are reloaded with calls to `load_node`.
             * @name refresh()
             * @param {Boolean} skip_loading an option to skip showing the loading indicator
             * @param {Mixed} forget_state if set to `true` state will not be reapplied, if set to a function (receiving the current state as argument) the result of that function will be used as state
             * @trigger refresh.jstree
             */
            refresh : function (skip_loading, forget_state) {
                this._data.core.state = forget_state === true ? {} : this.get_state();
                if(forget_state && $.vakata.is_function(forget_state)) { this._data.core.state = forget_state.call(this, this._data.core.state); }
                this._cnt = 0;
                this._model.data = {};
                this._model.data[$.jstree.root] = {
                    id : $.jstree.root,
                    parent : null,
                    parents : [],
                    children : [],
                    children_d : [],
                    state : { loaded : false }
                };
                this._data.core.selected = [];
                this._data.core.last_clicked = null;
                this._data.core.focused = null;
    
                var c = this.get_container_ul()[0].className;
                if(!skip_loading) {
                    this.element.html("<"+"ul class='"+c+"' role='group'><"+"li class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='none' id='j"+this._id+"_loading'><i class='jstree-icon jstree-ocl'></i><"+"a class='jstree-anchor' role='treeitem' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>" + this.get_string("Loading ...") + "</a></li></ul>");
                    this.element.attr('aria-activedescendant','j'+this._id+'_loading');
                }
                this.load_node($.jstree.root, function (o, s) {
                    if(s) {
                        this.get_container_ul()[0].className = c;
                        if(this._firstChild(this.get_container_ul()[0])) {
                            this.element.attr('aria-activedescendant',this._firstChild(this.get_container_ul()[0]).id);
                        }
                        this.set_state($.extend(true, {}, this._data.core.state), function () {
                            /**
                             * triggered when a `refresh` call completes
                             * @event
                             * @name refresh.jstree
                             */
                            this.trigger('refresh');
                        });
                    }
                    this._data.core.state = null;
                });
            },
            /**
             * refreshes a node in the tree (reload its children) all opened nodes inside that node are reloaded with calls to `load_node`.
             * @name refresh_node(obj)
             * @param  {mixed} obj the node
             * @trigger refresh_node.jstree
             */
            refresh_node : function (obj) {
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) { return false; }
                var opened = [], to_load = [], s = this._data.core.selected.concat([]);
                to_load.push(obj.id);
                if(obj.state.opened === true) { opened.push(obj.id); }
                this.get_node(obj, true).find('.jstree-open').each(function() { to_load.push(this.id); opened.push(this.id); });
                this._load_nodes(to_load, function (nodes) {
                    this.open_node(opened, false, 0);
                    this.select_node(s);
                    /**
                     * triggered when a node is refreshed
                     * @event
                     * @name refresh_node.jstree
                     * @param {Object} node - the refreshed node
                     * @param {Array} nodes - an array of the IDs of the nodes that were reloaded
                     */
                    this.trigger('refresh_node', { 'node' : obj, 'nodes' : nodes });
                }.bind(this), false, true);
            },
            /**
             * set (change) the ID of a node
             * @name set_id(obj, id)
             * @param  {mixed} obj the node
             * @param  {String} id the new ID
             * @return {Boolean}
             * @trigger set_id.jstree
             */
            set_id : function (obj, id) {
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) { return false; }
                var i, j, m = this._model.data, old = obj.id;
                id = id.toString();
                // update parents (replace current ID with new one in children and children_d)
                m[obj.parent].children[$.inArray(obj.id, m[obj.parent].children)] = id;
                for(i = 0, j = obj.parents.length; i < j; i++) {
                    m[obj.parents[i]].children_d[$.inArray(obj.id, m[obj.parents[i]].children_d)] = id;
                }
                // update children (replace current ID with new one in parent and parents)
                for(i = 0, j = obj.children.length; i < j; i++) {
                    m[obj.children[i]].parent = id;
                }
                for(i = 0, j = obj.children_d.length; i < j; i++) {
                    m[obj.children_d[i]].parents[$.inArray(obj.id, m[obj.children_d[i]].parents)] = id;
                }
                i = $.inArray(obj.id, this._data.core.selected);
                if(i !== -1) { this._data.core.selected[i] = id; }
                // update model and obj itself (obj.id, this._model.data[KEY])
                i = this.get_node(obj.id, true);
                if(i) {
                    i.attr('id', id); //.children('.jstree-anchor').attr('id', id + '_anchor').end().attr('aria-labelledby', id + '_anchor');
                    if(this.element.attr('aria-activedescendant') === obj.id) {
                        this.element.attr('aria-activedescendant', id);
                    }
                }
                delete m[obj.id];
                obj.id = id;
                obj.li_attr.id = id;
                m[id] = obj;
                /**
                 * triggered when a node id value is changed
                 * @event
                 * @name set_id.jstree
                 * @param {Object} node
                 * @param {String} old the old id
                 */
                this.trigger('set_id',{ "node" : obj, "new" : obj.id, "old" : old });
                return true;
            },
            /**
             * get the text value of a node
             * @name get_text(obj)
             * @param  {mixed} obj the node
             * @return {String}
             */
            get_text : function (obj) {
                obj = this.get_node(obj);
                return (!obj || obj.id === $.jstree.root) ? false : obj.text;
            },
            /**
             * set the text value of a node. Used internally, please use `rename_node(obj, val)`.
             * @private
             * @name set_text(obj, val)
             * @param  {mixed} obj the node, you can pass an array to set the text on multiple nodes
             * @param  {String} val the new text value
             * @return {Boolean}
             * @trigger set_text.jstree
             */
            set_text : function (obj, val) {
                var t1, t2;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.set_text(obj[t1], val);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) { return false; }
                obj.text = val;
                if(this.get_node(obj, true).length) {
                    this.redraw_node(obj.id);
                }
                /**
                 * triggered when a node text value is changed
                 * @event
                 * @name set_text.jstree
                 * @param {Object} obj
                 * @param {String} text the new value
                 */
                this.trigger('set_text',{ "obj" : obj, "text" : val });
                return true;
            },
            /**
             * gets a JSON representation of a node (or the whole tree)
             * @name get_json([obj, options])
             * @param  {mixed} obj
             * @param  {Object} options
             * @param  {Boolean} options.no_state do not return state information
             * @param  {Boolean} options.no_id do not return ID
             * @param  {Boolean} options.no_children do not include children
             * @param  {Boolean} options.no_data do not include node data
             * @param  {Boolean} options.no_li_attr do not include LI attributes
             * @param  {Boolean} options.no_a_attr do not include A attributes
             * @param  {Boolean} options.flat return flat JSON instead of nested
             * @return {Object}
             */
            get_json : function (obj, options, flat) {
                obj = this.get_node(obj || $.jstree.root);
                if(!obj) { return false; }
                if(options && options.flat && !flat) { flat = []; }
                var tmp = {
                    'id' : obj.id,
                    'text' : obj.text,
                    'icon' : this.get_icon(obj),
                    'li_attr' : $.extend(true, {}, obj.li_attr),
                    'a_attr' : $.extend(true, {}, obj.a_attr),
                    'state' : {},
                    'data' : options && options.no_data ? false : $.extend(true, $.vakata.is_array(obj.data)?[]:{}, obj.data)
                    //( this.get_node(obj, true).length ? this.get_node(obj, true).data() : obj.data ),
                }, i, j;
                if(options && options.flat) {
                    tmp.parent = obj.parent;
                }
                else {
                    tmp.children = [];
                }
                if(!options || !options.no_state) {
                    for(i in obj.state) {
                        if(obj.state.hasOwnProperty(i)) {
                            tmp.state[i] = obj.state[i];
                        }
                    }
                } else {
                    delete tmp.state;
                }
                if(options && options.no_li_attr) {
                    delete tmp.li_attr;
                }
                if(options && options.no_a_attr) {
                    delete tmp.a_attr;
                }
                if(options && options.no_id) {
                    delete tmp.id;
                    if(tmp.li_attr && tmp.li_attr.id) {
                        delete tmp.li_attr.id;
                    }
                    if(tmp.a_attr && tmp.a_attr.id) {
                        delete tmp.a_attr.id;
                    }
                }
                if(options && options.flat && obj.id !== $.jstree.root) {
                    flat.push(tmp);
                }
                if(!options || !options.no_children) {
                    for(i = 0, j = obj.children.length; i < j; i++) {
                        if(options && options.flat) {
                            this.get_json(obj.children[i], options, flat);
                        }
                        else {
                            tmp.children.push(this.get_json(obj.children[i], options));
                        }
                    }
                }
                return options && options.flat ? flat : (obj.id === $.jstree.root ? tmp.children : tmp);
            },
            /**
             * create a new node (do not confuse with load_node)
             * @name create_node([par, node, pos, callback, is_loaded])
             * @param  {mixed}   par       the parent node (to create a root node use either "#" (string) or `null`)
             * @param  {mixed}   node      the data for the new node (a valid JSON object, or a simple string with the name)
             * @param  {mixed}   pos       the index at which to insert the node, "first" and "last" are also supported, default is "last"
             * @param  {Function} callback a function to be called once the node is created
             * @param  {Boolean} is_loaded internal argument indicating if the parent node was succesfully loaded
             * @return {String}            the ID of the newly create node
             * @trigger model.jstree, create_node.jstree
             */
            create_node : function (par, node, pos, callback, is_loaded) {
                if(par === null) { par = $.jstree.root; }
                par = this.get_node(par);
                if(!par) { return false; }
                pos = pos === undefined ? "last" : pos;
                if(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {
                    return this.load_node(par, function () { this.create_node(par, node, pos, callback, true); });
                }
                if(!node) { node = { "text" : this.get_string('New node') }; }
                if(typeof node === "string") {
                    node = { "text" : node };
                } else {
                    node = $.extend(true, {}, node);
                }
                if(node.text === undefined) { node.text = this.get_string('New node'); }
                var tmp, dpc, i, j;
    
                if(par.id === $.jstree.root) {
                    if(pos === "before") { pos = "first"; }
                    if(pos === "after") { pos = "last"; }
                }
                switch(pos) {
                    case "before":
                        tmp = this.get_node(par.parent);
                        pos = $.inArray(par.id, tmp.children);
                        par = tmp;
                        break;
                    case "after" :
                        tmp = this.get_node(par.parent);
                        pos = $.inArray(par.id, tmp.children) + 1;
                        par = tmp;
                        break;
                    case "inside":
                    case "first":
                        pos = 0;
                        break;
                    case "last":
                        pos = par.children.length;
                        break;
                    default:
                        if(!pos) { pos = 0; }
                        break;
                }
                if(pos > par.children.length) { pos = par.children.length; }
                if(node.id === undefined) { node.id = true; }
                if(!this.check("create_node", node, par, pos)) {
                    this.settings.core.error.call(this, this._data.core.last_error);
                    return false;
                }
                if(node.id === true) { delete node.id; }
                node = this._parse_model_from_json(node, par.id, par.parents.concat());
                if(!node) { return false; }
                tmp = this.get_node(node);
                dpc = [];
                dpc.push(node);
                dpc = dpc.concat(tmp.children_d);
                this.trigger('model', { "nodes" : dpc, "parent" : par.id });
    
                par.children_d = par.children_d.concat(dpc);
                for(i = 0, j = par.parents.length; i < j; i++) {
                    this._model.data[par.parents[i]].children_d = this._model.data[par.parents[i]].children_d.concat(dpc);
                }
                node = tmp;
                tmp = [];
                for(i = 0, j = par.children.length; i < j; i++) {
                    tmp[i >= pos ? i+1 : i] = par.children[i];
                }
                tmp[pos] = node.id;
                par.children = tmp;
    
                this.redraw_node(par, true);
                /**
                 * triggered when a node is created
                 * @event
                 * @name create_node.jstree
                 * @param {Object} node
                 * @param {String} parent the parent's ID
                 * @param {Number} position the position of the new node among the parent's children
                 */
                this.trigger('create_node', { "node" : this.get_node(node), "parent" : par.id, "position" : pos });
                if(callback) { callback.call(this, this.get_node(node)); }
                return node.id;
            },
            /**
             * set the text value of a node
             * @name rename_node(obj, val)
             * @param  {mixed} obj the node, you can pass an array to rename multiple nodes to the same name
             * @param  {String} val the new text value
             * @return {Boolean}
             * @trigger rename_node.jstree
             */
            rename_node : function (obj, val) {
                var t1, t2, old;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.rename_node(obj[t1], val);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) { return false; }
                old = obj.text;
                if(!this.check("rename_node", obj, this.get_parent(obj), val)) {
                    this.settings.core.error.call(this, this._data.core.last_error);
                    return false;
                }
                this.set_text(obj, val); // .apply(this, Array.prototype.slice.call(arguments))
                /**
                 * triggered when a node is renamed
                 * @event
                 * @name rename_node.jstree
                 * @param {Object} node
                 * @param {String} text the new value
                 * @param {String} old the old value
                 */
                this.trigger('rename_node', { "node" : obj, "text" : val, "old" : old });
                return true;
            },
            /**
             * remove a node
             * @name delete_node(obj)
             * @param  {mixed} obj the node, you can pass an array to delete multiple nodes
             * @return {Boolean}
             * @trigger delete_node.jstree, changed.jstree
             */
            delete_node : function (obj) {
                var t1, t2, par, pos, tmp, i, j, k, l, c, top, lft;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.delete_node(obj[t1]);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) { return false; }
                par = this.get_node(obj.parent);
                pos = $.inArray(obj.id, par.children);
                c = false;
                if(!this.check("delete_node", obj, par, pos)) {
                    this.settings.core.error.call(this, this._data.core.last_error);
                    return false;
                }
                if(pos !== -1) {
                    par.children = $.vakata.array_remove(par.children, pos);
                }
                tmp = obj.children_d.concat([]);
                tmp.push(obj.id);
                for(i = 0, j = obj.parents.length; i < j; i++) {
                    this._model.data[obj.parents[i]].children_d = $.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function (v) {
                        return $.inArray(v, tmp) === -1;
                    });
                }
                for(k = 0, l = tmp.length; k < l; k++) {
                    if(this._model.data[tmp[k]].state.selected) {
                        c = true;
                        break;
                    }
                }
                if (c) {
                    this._data.core.selected = $.vakata.array_filter(this._data.core.selected, function (v) {
                        return $.inArray(v, tmp) === -1;
                    });
                }
                /**
                 * triggered when a node is deleted
                 * @event
                 * @name delete_node.jstree
                 * @param {Object} node
                 * @param {String} parent the parent's ID
                 */
                this.trigger('delete_node', { "node" : obj, "parent" : par.id });
                if(c) {
                    this.trigger('changed', { 'action' : 'delete_node', 'node' : obj, 'selected' : this._data.core.selected, 'parent' : par.id });
                }
                for(k = 0, l = tmp.length; k < l; k++) {
                    delete this._model.data[tmp[k]];
                }
                if($.inArray(this._data.core.focused, tmp) !== -1) {
                    this._data.core.focused = null;
                    top = this.element[0].scrollTop;
                    lft = this.element[0].scrollLeft;
                    if(par.id === $.jstree.root) {
                        if (this._model.data[$.jstree.root].children[0]) {
                            this.get_node(this._model.data[$.jstree.root].children[0], true).children('.jstree-anchor').trigger('focus');
                        }
                    }
                    else {
                        this.get_node(par, true).children('.jstree-anchor').trigger('focus');
                    }
                    this.element[0].scrollTop  = top;
                    this.element[0].scrollLeft = lft;
                }
                this.redraw_node(par, true);
                return true;
            },
            /**
             * check if an operation is premitted on the tree. Used internally.
             * @private
             * @name check(chk, obj, par, pos)
             * @param  {String} chk the operation to check, can be "create_node", "rename_node", "delete_node", "copy_node" or "move_node"
             * @param  {mixed} obj the node
             * @param  {mixed} par the parent
             * @param  {mixed} pos the position to insert at, or if "rename_node" - the new name
             * @param  {mixed} more some various additional information, for example if a "move_node" operations is triggered by DND this will be the hovered node
             * @return {Boolean}
             */
            check : function (chk, obj, par, pos, more) {
                obj = obj && obj.id ? obj : this.get_node(obj);
                par = par && par.id ? par : this.get_node(par);
                var tmp = chk.match(/^(move_node|copy_node|create_node)$/i) ? par : obj,
                    chc = this.settings.core.check_callback;
                if(chk === "move_node" || chk === "copy_node") {
                    if((!more || !more.is_multi) && (chk === "move_node" && $.inArray(obj.id, par.children) === pos)) {
                        this._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_08', 'reason' : 'Moving node to its current position', 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };
                        return false;
                    }
                    if((!more || !more.is_multi) && (obj.id === par.id || (chk === "move_node" && $.inArray(obj.id, par.children) === pos) || $.inArray(par.id, obj.children_d) !== -1)) {
                        this._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_01', 'reason' : 'Moving parent inside child', 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };
                        return false;
                    }
                }
                if(tmp && tmp.data) { tmp = tmp.data; }
                if(tmp && tmp.functions && (tmp.functions[chk] === false || tmp.functions[chk] === true)) {
                    if(tmp.functions[chk] === false) {
                        this._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_02', 'reason' : 'Node data prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };
                    }
                    return tmp.functions[chk];
                }
                if(chc === false || ($.vakata.is_function(chc) && chc.call(this, chk, obj, par, pos, more) === false) || (chc && chc[chk] === false)) {
                    this._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_03', 'reason' : 'User config for core.check_callback prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };
                    return false;
                }
                return true;
            },
            /**
             * get the last error
             * @name last_error()
             * @return {Object}
             */
            last_error : function () {
                return this._data.core.last_error;
            },
            /**
             * move a node to a new parent
             * @name move_node(obj, par [, pos, callback, is_loaded])
             * @param  {mixed} obj the node to move, pass an array to move multiple nodes
             * @param  {mixed} par the new parent
             * @param  {mixed} pos the position to insert at (besides integer values, "first" and "last" are supported, as well as "before" and "after"), defaults to integer `0`
             * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position
             * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded
             * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn
             * @param  {Boolean} instance internal parameter indicating if the node comes from another instance
             * @trigger move_node.jstree
             */
            move_node : function (obj, par, pos, callback, is_loaded, skip_redraw, origin) {
                var t1, t2, old_par, old_pos, new_par, old_ins, is_multi, dpc, tmp, i, j, k, l, p;
    
                par = this.get_node(par);
                pos = pos === undefined ? 0 : pos;
                if(!par) { return false; }
                if(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {
                    return this.load_node(par, function () { this.move_node(obj, par, pos, callback, true, false, origin); });
                }
    
                if($.vakata.is_array(obj)) {
                    if(obj.length === 1) {
                        obj = obj[0];
                    }
                    else {
                        //obj = obj.slice();
                        for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                            if((tmp = this.move_node(obj[t1], par, pos, callback, is_loaded, false, origin))) {
                                par = tmp;
                                pos = "after";
                            }
                        }
                        this.redraw();
                        return true;
                    }
                }
                obj = obj && (obj.id !== undefined) ? obj : this.get_node(obj);
    
                if(!obj || obj.id === $.jstree.root) { return false; }
    
                old_par = (obj.parent || $.jstree.root).toString();
                new_par = (!pos.toString().match(/^(before|after)$/) || par.id === $.jstree.root) ? par : this.get_node(par.parent);
                old_ins = origin ? origin : (this._model.data[obj.id] ? this : $.jstree.reference(obj.id));
                is_multi = !old_ins || !old_ins._id || (this._id !== old_ins._id);
                old_pos = old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $.inArray(obj.id, old_ins._model.data[old_par].children) : -1;
                if(old_ins && old_ins._id) {
                    obj = old_ins._model.data[obj.id];
                }
    
                if(is_multi) {
                    if((tmp = this.copy_node(obj, par, pos, callback, is_loaded, false, origin))) {
                        if(old_ins) { old_ins.delete_node(obj); }
                        return tmp;
                    }
                    return false;
                }
                //var m = this._model.data;
                if(par.id === $.jstree.root) {
                    if(pos === "before") { pos = "first"; }
                    if(pos === "after") { pos = "last"; }
                }
                switch(pos) {
                    case "before":
                        pos = $.inArray(par.id, new_par.children);
                        break;
                    case "after" :
                        pos = $.inArray(par.id, new_par.children) + 1;
                        break;
                    case "inside":
                    case "first":
                        pos = 0;
                        break;
                    case "last":
                        pos = new_par.children.length;
                        break;
                    default:
                        if(!pos) { pos = 0; }
                        break;
                }
                if(pos > new_par.children.length) { pos = new_par.children.length; }
                if(!this.check("move_node", obj, new_par, pos, { 'core' : true, 'origin' : origin, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id) })) {
                    this.settings.core.error.call(this, this._data.core.last_error);
                    return false;
                }
                if(obj.parent === new_par.id) {
                    dpc = new_par.children.concat();
                    tmp = $.inArray(obj.id, dpc);
                    if(tmp !== -1) {
                        dpc = $.vakata.array_remove(dpc, tmp);
                        if(pos > tmp) { pos--; }
                    }
                    tmp = [];
                    for(i = 0, j = dpc.length; i < j; i++) {
                        tmp[i >= pos ? i+1 : i] = dpc[i];
                    }
                    tmp[pos] = obj.id;
                    new_par.children = tmp;
                    this._node_changed(new_par.id);
                    this.redraw(new_par.id === $.jstree.root);
                }
                else {
                    // clean old parent and up
                    tmp = obj.children_d.concat();
                    tmp.push(obj.id);
                    for(i = 0, j = obj.parents.length; i < j; i++) {
                        dpc = [];
                        p = old_ins._model.data[obj.parents[i]].children_d;
                        for(k = 0, l = p.length; k < l; k++) {
                            if($.inArray(p[k], tmp) === -1) {
                                dpc.push(p[k]);
                            }
                        }
                        old_ins._model.data[obj.parents[i]].children_d = dpc;
                    }
                    old_ins._model.data[old_par].children = $.vakata.array_remove_item(old_ins._model.data[old_par].children, obj.id);
    
                    // insert into new parent and up
                    for(i = 0, j = new_par.parents.length; i < j; i++) {
                        this._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(tmp);
                    }
                    dpc = [];
                    for(i = 0, j = new_par.children.length; i < j; i++) {
                        dpc[i >= pos ? i+1 : i] = new_par.children[i];
                    }
                    dpc[pos] = obj.id;
                    new_par.children = dpc;
                    new_par.children_d.push(obj.id);
                    new_par.children_d = new_par.children_d.concat(obj.children_d);
    
                    // update object
                    obj.parent = new_par.id;
                    tmp = new_par.parents.concat();
                    tmp.unshift(new_par.id);
                    p = obj.parents.length;
                    obj.parents = tmp;
    
                    // update object children
                    tmp = tmp.concat();
                    for(i = 0, j = obj.children_d.length; i < j; i++) {
                        this._model.data[obj.children_d[i]].parents = this._model.data[obj.children_d[i]].parents.slice(0,p*-1);
                        Array.prototype.push.apply(this._model.data[obj.children_d[i]].parents, tmp);
                    }
    
                    if(old_par === $.jstree.root || new_par.id === $.jstree.root) {
                        this._model.force_full_redraw = true;
                    }
                    if(!this._model.force_full_redraw) {
                        this._node_changed(old_par);
                        this._node_changed(new_par.id);
                    }
                    if(!skip_redraw) {
                        this.redraw();
                    }
                }
                if(callback) { callback.call(this, obj, new_par, pos); }
                /**
                 * triggered when a node is moved
                 * @event
                 * @name move_node.jstree
                 * @param {Object} node
                 * @param {String} parent the parent's ID
                 * @param {Number} position the position of the node among the parent's children
                 * @param {String} old_parent the old parent of the node
                 * @param {Number} old_position the old position of the node
                 * @param {Boolean} is_multi do the node and new parent belong to different instances
                 * @param {jsTree} old_instance the instance the node came from
                 * @param {jsTree} new_instance the instance of the new parent
                 */
                this.trigger('move_node', { "node" : obj, "parent" : new_par.id, "position" : pos, "old_parent" : old_par, "old_position" : old_pos, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id), 'old_instance' : old_ins, 'new_instance' : this });
                return obj.id;
            },
            /**
             * copy a node to a new parent
             * @name copy_node(obj, par [, pos, callback, is_loaded])
             * @param  {mixed} obj the node to copy, pass an array to copy multiple nodes
             * @param  {mixed} par the new parent
             * @param  {mixed} pos the position to insert at (besides integer values, "first" and "last" are supported, as well as "before" and "after"), defaults to integer `0`
             * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position
             * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded
             * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn
             * @param  {Boolean} instance internal parameter indicating if the node comes from another instance
             * @trigger model.jstree copy_node.jstree
             */
            copy_node : function (obj, par, pos, callback, is_loaded, skip_redraw, origin) {
                var t1, t2, dpc, tmp, i, j, node, old_par, new_par, old_ins, is_multi;
    
                par = this.get_node(par);
                pos = pos === undefined ? 0 : pos;
                if(!par) { return false; }
                if(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {
                    return this.load_node(par, function () { this.copy_node(obj, par, pos, callback, true, false, origin); });
                }
    
                if($.vakata.is_array(obj)) {
                    if(obj.length === 1) {
                        obj = obj[0];
                    }
                    else {
                        //obj = obj.slice();
                        for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                            if((tmp = this.copy_node(obj[t1], par, pos, callback, is_loaded, true, origin))) {
                                par = tmp;
                                pos = "after";
                            }
                        }
                        this.redraw();
                        return true;
                    }
                }
                obj = obj && (obj.id !== undefined) ? obj : this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) { return false; }
    
                old_par = (obj.parent || $.jstree.root).toString();
                new_par = (!pos.toString().match(/^(before|after)$/) || par.id === $.jstree.root) ? par : this.get_node(par.parent);
                old_ins = origin ? origin : (this._model.data[obj.id] ? this : $.jstree.reference(obj.id));
                is_multi = !old_ins || !old_ins._id || (this._id !== old_ins._id);
    
                if(old_ins && old_ins._id) {
                    obj = old_ins._model.data[obj.id];
                }
    
                if(par.id === $.jstree.root) {
                    if(pos === "before") { pos = "first"; }
                    if(pos === "after") { pos = "last"; }
                }
                switch(pos) {
                    case "before":
                        pos = $.inArray(par.id, new_par.children);
                        break;
                    case "after" :
                        pos = $.inArray(par.id, new_par.children) + 1;
                        break;
                    case "inside":
                    case "first":
                        pos = 0;
                        break;
                    case "last":
                        pos = new_par.children.length;
                        break;
                    default:
                        if(!pos) { pos = 0; }
                        break;
                }
                if(pos > new_par.children.length) { pos = new_par.children.length; }
                if(!this.check("copy_node", obj, new_par, pos, { 'core' : true, 'origin' : origin, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id) })) {
                    this.settings.core.error.call(this, this._data.core.last_error);
                    return false;
                }
                node = old_ins ? old_ins.get_json(obj, { no_id : true, no_data : true, no_state : true }) : obj;
                if(!node) { return false; }
                if(node.id === true) { delete node.id; }
                node = this._parse_model_from_json(node, new_par.id, new_par.parents.concat());
                if(!node) { return false; }
                tmp = this.get_node(node);
                if(obj && obj.state && obj.state.loaded === false) { tmp.state.loaded = false; }
                dpc = [];
                dpc.push(node);
                dpc = dpc.concat(tmp.children_d);
                this.trigger('model', { "nodes" : dpc, "parent" : new_par.id });
    
                // insert into new parent and up
                for(i = 0, j = new_par.parents.length; i < j; i++) {
                    this._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(dpc);
                }
                dpc = [];
                for(i = 0, j = new_par.children.length; i < j; i++) {
                    dpc[i >= pos ? i+1 : i] = new_par.children[i];
                }
                dpc[pos] = tmp.id;
                new_par.children = dpc;
                new_par.children_d.push(tmp.id);
                new_par.children_d = new_par.children_d.concat(tmp.children_d);
    
                if(new_par.id === $.jstree.root) {
                    this._model.force_full_redraw = true;
                }
                if(!this._model.force_full_redraw) {
                    this._node_changed(new_par.id);
                }
                if(!skip_redraw) {
                    this.redraw(new_par.id === $.jstree.root);
                }
                if(callback) { callback.call(this, tmp, new_par, pos); }
                /**
                 * triggered when a node is copied
                 * @event
                 * @name copy_node.jstree
                 * @param {Object} node the copied node
                 * @param {Object} original the original node
                 * @param {String} parent the parent's ID
                 * @param {Number} position the position of the node among the parent's children
                 * @param {String} old_parent the old parent of the node
                 * @param {Number} old_position the position of the original node
                 * @param {Boolean} is_multi do the node and new parent belong to different instances
                 * @param {jsTree} old_instance the instance the node came from
                 * @param {jsTree} new_instance the instance of the new parent
                 */
                this.trigger('copy_node', { "node" : tmp, "original" : obj, "parent" : new_par.id, "position" : pos, "old_parent" : old_par, "old_position" : old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $.inArray(obj.id, old_ins._model.data[old_par].children) : -1,'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id), 'old_instance' : old_ins, 'new_instance' : this });
                return tmp.id;
            },
            /**
             * cut a node (a later call to `paste(obj)` would move the node)
             * @name cut(obj)
             * @param  {mixed} obj multiple objects can be passed using an array
             * @trigger cut.jstree
             */
            cut : function (obj) {
                if(!obj) { obj = this._data.core.selected.concat(); }
                if(!$.vakata.is_array(obj)) { obj = [obj]; }
                if(!obj.length) { return false; }
                var tmp = [], o, t1, t2;
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                    o = this.get_node(obj[t1]);
                    if(o && (o.id || o.id === 0) && o.id !== $.jstree.root) { tmp.push(o); }
                }
                if(!tmp.length) { return false; }
                ccp_node = tmp;
                ccp_inst = this;
                ccp_mode = 'move_node';
                /**
                 * triggered when nodes are added to the buffer for moving
                 * @event
                 * @name cut.jstree
                 * @param {Array} node
                 */
                this.trigger('cut', { "node" : obj });
            },
            /**
             * copy a node (a later call to `paste(obj)` would copy the node)
             * @name copy(obj)
             * @param  {mixed} obj multiple objects can be passed using an array
             * @trigger copy.jstree
             */
            copy : function (obj) {
                if(!obj) { obj = this._data.core.selected.concat(); }
                if(!$.vakata.is_array(obj)) { obj = [obj]; }
                if(!obj.length) { return false; }
                var tmp = [], o, t1, t2;
                for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                    o = this.get_node(obj[t1]);
                    if(o && (o.id !== undefined) && o.id !== $.jstree.root) { tmp.push(o); }
                }
                if(!tmp.length) { return false; }
                ccp_node = tmp;
                ccp_inst = this;
                ccp_mode = 'copy_node';
                /**
                 * triggered when nodes are added to the buffer for copying
                 * @event
                 * @name copy.jstree
                 * @param {Array} node
                 */
                this.trigger('copy', { "node" : obj });
            },
            /**
             * get the current buffer (any nodes that are waiting for a paste operation)
             * @name get_buffer()
             * @return {Object} an object consisting of `mode` ("copy_node" or "move_node"), `node` (an array of objects) and `inst` (the instance)
             */
            get_buffer : function () {
                return { 'mode' : ccp_mode, 'node' : ccp_node, 'inst' : ccp_inst };
            },
            /**
             * check if there is something in the buffer to paste
             * @name can_paste()
             * @return {Boolean}
             */
            can_paste : function () {
                return ccp_mode !== false && ccp_node !== false; // && ccp_inst._model.data[ccp_node];
            },
            /**
             * copy or move the previously cut or copied nodes to a new parent
             * @name paste(obj [, pos])
             * @param  {mixed} obj the new parent
             * @param  {mixed} pos the position to insert at (besides integer, "first" and "last" are supported), defaults to integer `0`
             * @trigger paste.jstree
             */
            paste : function (obj, pos) {
                obj = this.get_node(obj);
                if(!obj || !ccp_mode || !ccp_mode.match(/^(copy_node|move_node)$/) || !ccp_node) { return false; }
                if(this[ccp_mode](ccp_node, obj, pos, false, false, false, ccp_inst)) {
                    /**
                     * triggered when paste is invoked
                     * @event
                     * @name paste.jstree
                     * @param {String} parent the ID of the receiving node
                     * @param {Array} node the nodes in the buffer
                     * @param {String} mode the performed operation - "copy_node" or "move_node"
                     */
                    this.trigger('paste', { "parent" : obj.id, "node" : ccp_node, "mode" : ccp_mode });
                }
                ccp_node = false;
                ccp_mode = false;
                ccp_inst = false;
            },
            /**
             * clear the buffer of previously copied or cut nodes
             * @name clear_buffer()
             * @trigger clear_buffer.jstree
             */
            clear_buffer : function () {
                ccp_node = false;
                ccp_mode = false;
                ccp_inst = false;
                /**
                 * triggered when the copy / cut buffer is cleared
                 * @event
                 * @name clear_buffer.jstree
                 */
                this.trigger('clear_buffer');
            },
            /**
             * put a node in edit mode (input field to rename the node)
             * @name edit(obj [, default_text, callback])
             * @param  {mixed} obj
             * @param  {String} default_text the text to populate the input with (if omitted or set to a non-string value the node's text value is used)
             * @param  {Function} callback a function to be called once the text box is blurred, it is called in the instance's scope and receives the node, a status parameter (true if the rename is successful, false otherwise), a boolean indicating if the user cancelled the edit and the original unescaped value provided by the user. You can also access the node's title using .text
             */
            edit : function (obj, default_text, callback) {
                var rtl, w, a, s, t, h1, h2, fn, tmp, cancel = false;
                obj = this.get_node(obj);
                if(!obj) { return false; }
                if(!this.check("edit", obj, this.get_parent(obj))) {
                    this.settings.core.error.call(this, this._data.core.last_error);
                    return false;
                }
                tmp = obj;
                default_text = typeof default_text === 'string' ? default_text : obj.text;
                this.set_text(obj, "");
                obj = this._open_to(obj);
                tmp.text = default_text;
    
                rtl = this._data.core.rtl;
                w  = this.element.width();
                this._data.core.focused = tmp.id;
                a  = obj.children('.jstree-anchor').trigger('focus');
                s  = $('<span></span>');
                /*!
                oi = obj.children("i:visible"),
                ai = a.children("i:visible"),
                w1 = oi.width() * oi.length,
                w2 = ai.width() * ai.length,
                */
                t  = default_text;
                h1 = $("<"+"div></div>", { css : { "position" : "absolute", "top" : "-200px", "left" : (rtl ? "0px" : "-1000px"), "visibility" : "hidden" } }).appendTo(document.body);
                h2 = $("<"+"input />", {
                            "value" : t,
                            "class" : "jstree-rename-input",
                            // "size" : t.length,
                            "css" : {
                                "padding" : "0",
                                "border" : "1px solid silver",
                                "box-sizing" : "border-box",
                                "display" : "inline-block",
                                "height" : (this._data.core.li_height) + "px",
                                "lineHeight" : (this._data.core.li_height) + "px",
                                "width" : "150px" // will be set a bit further down
                            },
                            "blur" : function (e) {
                                e.stopImmediatePropagation();
                                e.preventDefault();
                                var i = s.children(".jstree-rename-input"),
                                    v = i.val(),
                                    f = this.settings.core.force_text,
                                    nv;
                                if(v === "") { v = t; }
                                h1.remove();
                                s.replaceWith(a);
                                s.remove();
                                t = f ? t : $('<div></div>').append($.parseHTML(t)).html();
                                obj = this.get_node(obj);
                                this.set_text(obj, t);
                                nv = !!this.rename_node(obj, f ? $('<div></div>').text(v).text() : $('<div></div>').append($.parseHTML(v)).html());
                                if(!nv) {
                                    this.set_text(obj, t); // move this up? and fix #483
                                }
                                this._data.core.focused = tmp.id;
                                setTimeout(function () {
                                    var node = this.get_node(tmp.id, true);
                                    if(node.length) {
                                        this._data.core.focused = tmp.id;
                                        node.children('.jstree-anchor').trigger('focus');
                                    }
                                }.bind(this), 0);
                                if(callback) {
                                    callback.call(this, tmp, nv, cancel, v);
                                }
                                h2 = null;
                            }.bind(this),
                            "keydown" : function (e) {
                                var key = e.which;
                                if(key === 27) {
                                    cancel = true;
                                    this.value = t;
                                }
                                if(key === 27 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40 || key === 32) {
                                    e.stopImmediatePropagation();
                                }
                                if(key === 27 || key === 13) {
                                    e.preventDefault();
                                    this.blur();
                                }
                            },
                            "click" : function (e) { e.stopImmediatePropagation(); },
                            "mousedown" : function (e) { e.stopImmediatePropagation(); },
                            "keyup" : function (e) {
                                h2.width(Math.min(h1.text("pW" + this.value).width(),w));
                            },
                            "keypress" : function(e) {
                                if(e.which === 13) { return false; }
                            }
                        });
                    fn = {
                            fontFamily		: a.css('fontFamily')		|| '',
                            fontSize		: a.css('fontSize')			|| '',
                            fontWeight		: a.css('fontWeight')		|| '',
                            fontStyle		: a.css('fontStyle')		|| '',
                            fontStretch		: a.css('fontStretch')		|| '',
                            fontVariant		: a.css('fontVariant')		|| '',
                            letterSpacing	: a.css('letterSpacing')	|| '',
                            wordSpacing		: a.css('wordSpacing')		|| ''
                    };
                s.attr('class', a.attr('class')).append(a.contents().clone()).append(h2);
                a.replaceWith(s);
                h1.css(fn);
                h2.css(fn).width(Math.min(h1.text("pW" + h2[0].value).width(),w))[0].select();
                $(document).one('mousedown.jstree touchstart.jstree dnd_start.vakata', function (e) {
                    if (h2 && e.target !== h2) {
                        $(h2).trigger('blur');
                    }
                });
            },
    
    
            /**
             * changes the theme
             * @name set_theme(theme_name [, theme_url])
             * @param {String} theme_name the name of the new theme to apply
             * @param {mixed} theme_url  the location of the CSS file for this theme. Omit or set to `false` if you manually included the file. Set to `true` to autoload from the `core.themes.dir` directory.
             * @trigger set_theme.jstree
             */
            set_theme : function (theme_name, theme_url) {
                if(!theme_name) { return false; }
                if(theme_url === true) {
                    var dir = this.settings.core.themes.dir;
                    if(!dir) { dir = $.jstree.path + '/themes'; }
                    theme_url = dir + '/' + theme_name + '/style.css';
                }
                if(theme_url && $.inArray(theme_url, themes_loaded) === -1) {
                    $('head').append('<'+'link rel="stylesheet" href="' + theme_url + '" type="text/css" />');
                    themes_loaded.push(theme_url);
                }
                if(this._data.core.themes.name) {
                    this.element.removeClass('jstree-' + this._data.core.themes.name);
                }
                this._data.core.themes.name = theme_name;
                this.element.addClass('jstree-' + theme_name);
                this.element[this.settings.core.themes.responsive ? 'addClass' : 'removeClass' ]('jstree-' + theme_name + '-responsive');
                /**
                 * triggered when a theme is set
                 * @event
                 * @name set_theme.jstree
                 * @param {String} theme the new theme
                 */
                this.trigger('set_theme', { 'theme' : theme_name });
            },
            /**
             * gets the name of the currently applied theme name
             * @name get_theme()
             * @return {String}
             */
            get_theme : function () { return this._data.core.themes.name; },
            /**
             * changes the theme variant (if the theme has variants)
             * @name set_theme_variant(variant_name)
             * @param {String|Boolean} variant_name the variant to apply (if `false` is used the current variant is removed)
             */
            set_theme_variant : function (variant_name) {
                if(this._data.core.themes.variant) {
                    this.element.removeClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);
                }
                this._data.core.themes.variant = variant_name;
                if(variant_name) {
                    this.element.addClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);
                }
            },
            /**
             * gets the name of the currently applied theme variant
             * @name get_theme()
             * @return {String}
             */
            get_theme_variant : function () { return this._data.core.themes.variant; },
            /**
             * shows a striped background on the container (if the theme supports it)
             * @name show_stripes()
             */
            show_stripes : function () {
                this._data.core.themes.stripes = true;
                this.get_container_ul().addClass("jstree-striped");
                /**
                 * triggered when stripes are shown
                 * @event
                 * @name show_stripes.jstree
                 */
                this.trigger('show_stripes');
            },
            /**
             * hides the striped background on the container
             * @name hide_stripes()
             */
            hide_stripes : function () {
                this._data.core.themes.stripes = false;
                this.get_container_ul().removeClass("jstree-striped");
                /**
                 * triggered when stripes are hidden
                 * @event
                 * @name hide_stripes.jstree
                 */
                this.trigger('hide_stripes');
            },
            /**
             * toggles the striped background on the container
             * @name toggle_stripes()
             */
            toggle_stripes : function () { if(this._data.core.themes.stripes) { this.hide_stripes(); } else { this.show_stripes(); } },
            /**
             * shows the connecting dots (if the theme supports it)
             * @name show_dots()
             */
            show_dots : function () {
                this._data.core.themes.dots = true;
                this.get_container_ul().removeClass("jstree-no-dots");
                /**
                 * triggered when dots are shown
                 * @event
                 * @name show_dots.jstree
                 */
                this.trigger('show_dots');
            },
            /**
             * hides the connecting dots
             * @name hide_dots()
             */
            hide_dots : function () {
                this._data.core.themes.dots = false;
                this.get_container_ul().addClass("jstree-no-dots");
                /**
                 * triggered when dots are hidden
                 * @event
                 * @name hide_dots.jstree
                 */
                this.trigger('hide_dots');
            },
            /**
             * toggles the connecting dots
             * @name toggle_dots()
             */
            toggle_dots : function () { if(this._data.core.themes.dots) { this.hide_dots(); } else { this.show_dots(); } },
            /**
             * show the node icons
             * @name show_icons()
             */
            show_icons : function () {
                this._data.core.themes.icons = true;
                this.get_container_ul().removeClass("jstree-no-icons");
                /**
                 * triggered when icons are shown
                 * @event
                 * @name show_icons.jstree
                 */
                this.trigger('show_icons');
            },
            /**
             * hide the node icons
             * @name hide_icons()
             */
            hide_icons : function () {
                this._data.core.themes.icons = false;
                this.get_container_ul().addClass("jstree-no-icons");
                /**
                 * triggered when icons are hidden
                 * @event
                 * @name hide_icons.jstree
                 */
                this.trigger('hide_icons');
            },
            /**
             * toggle the node icons
             * @name toggle_icons()
             */
            toggle_icons : function () { if(this._data.core.themes.icons) { this.hide_icons(); } else { this.show_icons(); } },
            /**
             * show the node ellipsis
             * @name show_icons()
             */
            show_ellipsis : function () {
                this._data.core.themes.ellipsis = true;
                this.get_container_ul().addClass("jstree-ellipsis");
                /**
                 * triggered when ellisis is shown
                 * @event
                 * @name show_ellipsis.jstree
                 */
                this.trigger('show_ellipsis');
            },
            /**
             * hide the node ellipsis
             * @name hide_ellipsis()
             */
            hide_ellipsis : function () {
                this._data.core.themes.ellipsis = false;
                this.get_container_ul().removeClass("jstree-ellipsis");
                /**
                 * triggered when ellisis is hidden
                 * @event
                 * @name hide_ellipsis.jstree
                 */
                this.trigger('hide_ellipsis');
            },
            /**
             * toggle the node ellipsis
             * @name toggle_icons()
             */
            toggle_ellipsis : function () { if(this._data.core.themes.ellipsis) { this.hide_ellipsis(); } else { this.show_ellipsis(); } },
            /**
             * set the node icon for a node
             * @name set_icon(obj, icon)
             * @param {mixed} obj
             * @param {String} icon the new icon - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class
             */
            set_icon : function (obj, icon) {
                var t1, t2, dom, old;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.set_icon(obj[t1], icon);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) { return false; }
                old = obj.icon;
                obj.icon = icon === true || icon === null || icon === undefined || icon === '' ? true : icon;
                dom = this.get_node(obj, true).children(".jstree-anchor").children(".jstree-themeicon");
                if(icon === false) {
                    dom.removeClass('jstree-themeicon-custom ' + old).css("background","").removeAttr("rel");
                    this.hide_icon(obj);
                }
                else if(icon === true || icon === null || icon === undefined || icon === '') {
                    dom.removeClass('jstree-themeicon-custom ' + old).css("background","").removeAttr("rel");
                    if(old === false) { this.show_icon(obj); }
                }
                else if(icon.indexOf("/") === -1 && icon.indexOf(".") === -1) {
                    dom.removeClass(old).css("background","");
                    dom.addClass(icon + ' jstree-themeicon-custom').attr("rel",icon);
                    if(old === false) { this.show_icon(obj); }
                }
                else {
                    dom.removeClass(old).css("background","");
                    dom.addClass('jstree-themeicon-custom').css("background", "url('" + icon + "') center center no-repeat").attr("rel",icon);
                    if(old === false) { this.show_icon(obj); }
                }
                return true;
            },
            /**
             * get the node icon for a node
             * @name get_icon(obj)
             * @param {mixed} obj
             * @return {String}
             */
            get_icon : function (obj) {
                obj = this.get_node(obj);
                return (!obj || obj.id === $.jstree.root) ? false : obj.icon;
            },
            /**
             * hide the icon on an individual node
             * @name hide_icon(obj)
             * @param {mixed} obj
             */
            hide_icon : function (obj) {
                var t1, t2;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.hide_icon(obj[t1]);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj === $.jstree.root) { return false; }
                obj.icon = false;
                this.get_node(obj, true).children(".jstree-anchor").children(".jstree-themeicon").addClass('jstree-themeicon-hidden');
                return true;
            },
            /**
             * show the icon on an individual node
             * @name show_icon(obj)
             * @param {mixed} obj
             */
            show_icon : function (obj) {
                var t1, t2, dom;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.show_icon(obj[t1]);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj === $.jstree.root) { return false; }
                dom = this.get_node(obj, true);
                obj.icon = dom.length ? dom.children(".jstree-anchor").children(".jstree-themeicon").attr('rel') : true;
                if(!obj.icon) { obj.icon = true; }
                dom.children(".jstree-anchor").children(".jstree-themeicon").removeClass('jstree-themeicon-hidden');
                return true;
            }
        };
    
        // helpers
        $.vakata = {};
        // collect attributes
        $.vakata.attributes = function(node, with_values) {
            node = $(node)[0];
            var attr = with_values ? {} : [];
            if(node && node.attributes) {
                $.each(node.attributes, function (i, v) {
                    if($.inArray(v.name.toLowerCase(),['style','contenteditable','hasfocus','tabindex']) !== -1) { return; }
                    if(v.value !== null && $.vakata.trim(v.value) !== '') {
                        if(with_values) { attr[v.name] = v.value; }
                        else { attr.push(v.name); }
                    }
                });
            }
            return attr;
        };
        $.vakata.array_unique = function(array) {
            var a = [], i, j, l, o = {};
            for(i = 0, l = array.length; i < l; i++) {
                if(o[array[i]] === undefined) {
                    a.push(array[i]);
                    o[array[i]] = true;
                }
            }
            return a;
        };
        // remove item from array
        $.vakata.array_remove = function(array, from) {
            array.splice(from, 1);
            return array;
            //var rest = array.slice((to || from) + 1 || array.length);
            //array.length = from < 0 ? array.length + from : from;
            //array.push.apply(array, rest);
            //return array;
        };
        // remove item from array
        $.vakata.array_remove_item = function(array, item) {
            var tmp = $.inArray(item, array);
            return tmp !== -1 ? $.vakata.array_remove(array, tmp) : array;
        };
        $.vakata.array_filter = function(c,a,b,d,e) {
            if (c.filter) {
                return c.filter(a, b);
            }
            d=[];
            for (e in c) {
                if (~~e+''===e+'' && e>=0 && a.call(b,c[e],+e,c)) {
                    d.push(c[e]);
                }
            }
            return d;
        };
        $.vakata.trim = function (text) {
            return String.prototype.trim ? 
                String.prototype.trim.call(text.toString()) :
                text.toString().replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
        };
        $.vakata.is_function = function(obj) {
            return typeof obj === "function" && typeof obj.nodeType !== "number";
        };
        $.vakata.is_array = Array.isArray || function (obj) {
            return Object.prototype.toString.call(obj) === "[object Array]";
        };
    
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind#polyfill
        if (!Function.prototype.bind) {
            Function.prototype.bind = function () {
                var thatFunc = this, thatArg = arguments[0];
                var args = Array.prototype.slice.call(arguments, 1);
                if (typeof thatFunc !== 'function') {
                    // closest thing possible to the ECMAScript 5
                    // internal IsCallable function
                    throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
                }
                return function(){
                    var funcArgs = args.concat(Array.prototype.slice.call(arguments));
                    return thatFunc.apply(thatArg, funcArgs);
                };
            };
        }
    
    
    /**
     * ### Changed plugin
     *
     * This plugin adds more information to the `changed.jstree` event. The new data is contained in the `changed` event data property, and contains a lists of `selected` and `deselected` nodes.
     */
    
        $.jstree.plugins.changed = function (options, parent) {
            var last = [];
            this.trigger = function (ev, data) {
                var i, j;
                if(!data) {
                    data = {};
                }
                if(ev.replace('.jstree','') === 'changed') {
                    data.changed = { selected : [], deselected : [] };
                    var tmp = {};
                    for(i = 0, j = last.length; i < j; i++) {
                        tmp[last[i]] = 1;
                    }
                    for(i = 0, j = data.selected.length; i < j; i++) {
                        if(!tmp[data.selected[i]]) {
                            data.changed.selected.push(data.selected[i]);
                        }
                        else {
                            tmp[data.selected[i]] = 2;
                        }
                    }
                    for(i = 0, j = last.length; i < j; i++) {
                        if(tmp[last[i]] === 1) {
                            data.changed.deselected.push(last[i]);
                        }
                    }
                    last = data.selected.slice();
                }
                /**
                 * triggered when selection changes (the "changed" plugin enhances the original event with more data)
                 * @event
                 * @name changed.jstree
                 * @param {Object} node
                 * @param {Object} action the action that caused the selection to change
                 * @param {Array} selected the current selection
                 * @param {Object} changed an object containing two properties `selected` and `deselected` - both arrays of node IDs, which were selected or deselected since the last changed event
                 * @param {Object} event the event (if any) that triggered this changed event
                 * @plugin changed
                 */
                parent.trigger.call(this, ev, data);
            };
            this.refresh = function (skip_loading, forget_state) {
                last = [];
                return parent.refresh.apply(this, arguments);
            };
        };
    
    /**
     * ### Checkbox plugin
     *
     * This plugin renders checkbox icons in front of each node, making multiple selection much easier.
     * It also supports tri-state behavior, meaning that if a node has a few of its children checked it will be rendered as undetermined, and state will be propagated up.
     */
    
        var _i = document.createElement('I');
        _i.className = 'jstree-icon jstree-checkbox';
        _i.setAttribute('role', 'presentation');
        /**
         * stores all defaults for the checkbox plugin
         * @name $.jstree.defaults.checkbox
         * @plugin checkbox
         */
        $.jstree.defaults.checkbox = {
            /**
             * a boolean indicating if checkboxes should be visible (can be changed at a later time using `show_checkboxes()` and `hide_checkboxes`). Defaults to `true`.
             * @name $.jstree.defaults.checkbox.visible
             * @plugin checkbox
             */
            visible				: true,
            /**
             * a boolean indicating if checkboxes should cascade down and have an undetermined state. Defaults to `true`.
             * @name $.jstree.defaults.checkbox.three_state
             * @plugin checkbox
             */
            three_state			: true,
            /**
             * a boolean indicating if clicking anywhere on the node should act as clicking on the checkbox. Defaults to `true`.
             * @name $.jstree.defaults.checkbox.whole_node
             * @plugin checkbox
             */
            whole_node			: true,
            /**
             * a boolean indicating if the selected style of a node should be kept, or removed. Defaults to `true`.
             * @name $.jstree.defaults.checkbox.keep_selected_style
             * @plugin checkbox
             */
            keep_selected_style	: true,
            /**
             * This setting controls how cascading and undetermined nodes are applied.
             * If 'up' is in the string - cascading up is enabled, if 'down' is in the string - cascading down is enabled, if 'undetermined' is in the string - undetermined nodes will be used.
             * If `three_state` is set to `true` this setting is automatically set to 'up+down+undetermined'. Defaults to ''.
             * @name $.jstree.defaults.checkbox.cascade
             * @plugin checkbox
             */
            cascade				: '',
            /**
             * This setting controls if checkbox are bound to the general tree selection or to an internal array maintained by the checkbox plugin. Defaults to `true`, only set to `false` if you know exactly what you are doing.
             * @name $.jstree.defaults.checkbox.tie_selection
             * @plugin checkbox
             */
            tie_selection		: true,
    
            /**
             * This setting controls if cascading down affects disabled checkboxes
             * @name $.jstree.defaults.checkbox.cascade_to_disabled
             * @plugin checkbox
             */
            cascade_to_disabled : true,
    
            /**
             * This setting controls if cascading down affects hidden checkboxes
             * @name $.jstree.defaults.checkbox.cascade_to_hidden
             * @plugin checkbox
             */
            cascade_to_hidden : true
        };
        $.jstree.plugins.checkbox = function (options, parent) {
            this.bind = function () {
                parent.bind.call(this);
                this._data.checkbox.uto = false;
                this._data.checkbox.selected = [];
                if(this.settings.checkbox.three_state) {
                    this.settings.checkbox.cascade = 'up+down+undetermined';
                }
                this.element
                    .on("init.jstree", function () {
                            this._data.checkbox.visible = this.settings.checkbox.visible;
                            if(!this.settings.checkbox.keep_selected_style) {
                                this.element.addClass('jstree-checkbox-no-clicked');
                            }
                            if(this.settings.checkbox.tie_selection) {
                                this.element.addClass('jstree-checkbox-selection');
                            }
                        }.bind(this))
                    .on("loading.jstree", function () {
                            this[ this._data.checkbox.visible ? 'show_checkboxes' : 'hide_checkboxes' ]();
                        }.bind(this));
                if(this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {
                    this.element
                        .on('changed.jstree uncheck_node.jstree check_node.jstree uncheck_all.jstree check_all.jstree move_node.jstree copy_node.jstree redraw.jstree open_node.jstree', function () {
                                // only if undetermined is in setting
                                if(this._data.checkbox.uto) { clearTimeout(this._data.checkbox.uto); }
                                this._data.checkbox.uto = setTimeout(this._undetermined.bind(this), 50);
                            }.bind(this));
                }
                if(!this.settings.checkbox.tie_selection) {
                    this.element
                        .on('model.jstree', function (e, data) {
                            var m = this._model.data,
                                p = m[data.parent],
                                dpc = data.nodes,
                                i, j;
                            for(i = 0, j = dpc.length; i < j; i++) {
                                m[dpc[i]].state.checked = m[dpc[i]].state.checked || (m[dpc[i]].original && m[dpc[i]].original.state && m[dpc[i]].original.state.checked);
                                if(m[dpc[i]].state.checked) {
                                    this._data.checkbox.selected.push(dpc[i]);
                                }
                            }
                        }.bind(this));
                }
                if(this.settings.checkbox.cascade.indexOf('up') !== -1 || this.settings.checkbox.cascade.indexOf('down') !== -1) {
                    this.element
                        .on('model.jstree', function (e, data) {
                                var m = this._model.data,
                                    p = m[data.parent],
                                    dpc = data.nodes,
                                    chd = [],
                                    c, i, j, k, l, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection;
    
                                if(s.indexOf('down') !== -1) {
                                    // apply down
                                    if(p.state[ t ? 'selected' : 'checked' ]) {
                                        for(i = 0, j = dpc.length; i < j; i++) {
                                            m[dpc[i]].state[ t ? 'selected' : 'checked' ] = true;
                                        }
    
                                        this._data[ t ? 'core' : 'checkbox' ].selected = this._data[ t ? 'core' : 'checkbox' ].selected.concat(dpc);
                                    }
                                    else {
                                        for(i = 0, j = dpc.length; i < j; i++) {
                                            if(m[dpc[i]].state[ t ? 'selected' : 'checked' ]) {
                                                for(k = 0, l = m[dpc[i]].children_d.length; k < l; k++) {
                                                    m[m[dpc[i]].children_d[k]].state[ t ? 'selected' : 'checked' ] = true;
                                                }
                                                this._data[ t ? 'core' : 'checkbox' ].selected = this._data[ t ? 'core' : 'checkbox' ].selected.concat(m[dpc[i]].children_d);
                                            }
                                        }
                                    }
                                }
    
                                if(s.indexOf('up') !== -1) {
                                    // apply up
                                    for(i = 0, j = p.children_d.length; i < j; i++) {
                                        if(!m[p.children_d[i]].children.length) {
                                            chd.push(m[p.children_d[i]].parent);
                                        }
                                    }
                                    chd = $.vakata.array_unique(chd);
                                    for(k = 0, l = chd.length; k < l; k++) {
                                        p = m[chd[k]];
                                        while(p && p.id !== $.jstree.root) {
                                            c = 0;
                                            for(i = 0, j = p.children.length; i < j; i++) {
                                                c += m[p.children[i]].state[ t ? 'selected' : 'checked' ];
                                            }
                                            if(c === j) {
                                                p.state[ t ? 'selected' : 'checked' ] = true;
                                                this._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);
                                                tmp = this.get_node(p, true);
                                                if(tmp && tmp.length) {
                                                    tmp.children('.jstree-anchor').attr('aria-selected', true).addClass( t ? 'jstree-clicked' : 'jstree-checked');
                                                }
                                            }
                                            else {
                                                break;
                                            }
                                            p = this.get_node(p.parent);
                                        }
                                    }
                                }
    
                                this._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected);
                            }.bind(this))
                        .on(this.settings.checkbox.tie_selection ? 'select_node.jstree' : 'check_node.jstree', function (e, data) {
                                var self = this,
                                    obj = data.node,
                                    m = this._model.data,
                                    par = this.get_node(obj.parent),
                                    i, j, c, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection,
                                    sel = {}, cur = this._data[ t ? 'core' : 'checkbox' ].selected;
    
                                for (i = 0, j = cur.length; i < j; i++) {
                                    sel[cur[i]] = true;
                                }
    
                                // apply down
                                if(s.indexOf('down') !== -1) {
                                    //this._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected.concat(obj.children_d));
                                    var selectedIds = this._cascade_new_checked_state(obj.id, true);
                                    var temp = obj.children_d.concat(obj.id);
                                    for (i = 0, j = temp.length; i < j; i++) {
                                        if (selectedIds.indexOf(temp[i]) > -1) {
                                            sel[temp[i]] = true;
                                        }
                                        else {
                                            delete sel[temp[i]];
                                        }
                                    }
                                }
    
                                // apply up
                                if(s.indexOf('up') !== -1) {
                                    while(par && par.id !== $.jstree.root) {
                                        c = 0;
                                        for(i = 0, j = par.children.length; i < j; i++) {
                                            c += m[par.children[i]].state[ t ? 'selected' : 'checked' ];
                                        }
                                        if(c === j) {
                                            par.state[ t ? 'selected' : 'checked' ] = true;
                                            sel[par.id] = true;
                                            //this._data[ t ? 'core' : 'checkbox' ].selected.push(par.id);
                                            tmp = this.get_node(par, true);
                                            if(tmp && tmp.length) {
                                                tmp.children('.jstree-anchor').attr('aria-selected', true).addClass(t ? 'jstree-clicked' : 'jstree-checked');
                                            }
                                        }
                                        else {
                                            break;
                                        }
                                        par = this.get_node(par.parent);
                                    }
                                }
    
                                cur = [];
                                for (i in sel) {
                                    if (sel.hasOwnProperty(i)) {
                                        cur.push(i);
                                    }
                                }
                                this._data[ t ? 'core' : 'checkbox' ].selected = cur;
                            }.bind(this))
                        .on(this.settings.checkbox.tie_selection ? 'deselect_all.jstree' : 'uncheck_all.jstree', function (e, data) {
                                var obj = this.get_node($.jstree.root),
                                    m = this._model.data,
                                    i, j, tmp;
                                for(i = 0, j = obj.children_d.length; i < j; i++) {
                                    tmp = m[obj.children_d[i]];
                                    if(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {
                                        tmp.original.state.undetermined = false;
                                    }
                                }
                            }.bind(this))
                        .on(this.settings.checkbox.tie_selection ? 'deselect_node.jstree' : 'uncheck_node.jstree', function (e, data) {
                                var self = this,
                                    obj = data.node,
                                    dom = this.get_node(obj, true),
                                    i, j, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection,
                                    cur = this._data[ t ? 'core' : 'checkbox' ].selected, sel = {},
                                    stillSelectedIds = [],
                                    allIds = obj.children_d.concat(obj.id);
    
                                // apply down
                                if(s.indexOf('down') !== -1) {
                                    var selectedIds = this._cascade_new_checked_state(obj.id, false);
    
                                    cur = $.vakata.array_filter(cur, function(id) {
                                        return allIds.indexOf(id) === -1 || selectedIds.indexOf(id) > -1;
                                    });
                                }
    
                                // only apply up if cascade up is enabled and if this node is not selected
                                // (if all child nodes are disabled and cascade_to_disabled === false then this node will till be selected).
                                if(s.indexOf('up') !== -1 && cur.indexOf(obj.id) === -1) {
                                    for(i = 0, j = obj.parents.length; i < j; i++) {
                                        tmp = this._model.data[obj.parents[i]];
                                        tmp.state[ t ? 'selected' : 'checked' ] = false;
                                        if(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {
                                            tmp.original.state.undetermined = false;
                                        }
                                        tmp = this.get_node(obj.parents[i], true);
                                        if(tmp && tmp.length) {
                                            tmp.children('.jstree-anchor').attr('aria-selected', false).removeClass(t ? 'jstree-clicked' : 'jstree-checked');
                                        }
                                    }
    
                                    cur = $.vakata.array_filter(cur, function(id) {
                                        return obj.parents.indexOf(id) === -1;
                                    });
                                }
    
                                this._data[ t ? 'core' : 'checkbox' ].selected = cur;
                            }.bind(this));
                }
                if(this.settings.checkbox.cascade.indexOf('up') !== -1) {
                    this.element
                        .on('delete_node.jstree', function (e, data) {
                                // apply up (whole handler)
                                var p = this.get_node(data.parent),
                                    m = this._model.data,
                                    i, j, c, tmp, t = this.settings.checkbox.tie_selection;
                                while(p && p.id !== $.jstree.root && !p.state[ t ? 'selected' : 'checked' ]) {
                                    c = 0;
                                    for(i = 0, j = p.children.length; i < j; i++) {
                                        c += m[p.children[i]].state[ t ? 'selected' : 'checked' ];
                                    }
                                    if(j > 0 && c === j) {
                                        p.state[ t ? 'selected' : 'checked' ] = true;
                                        this._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);
                                        tmp = this.get_node(p, true);
                                        if(tmp && tmp.length) {
                                            tmp.children('.jstree-anchor').attr('aria-selected', true).addClass(t ? 'jstree-clicked' : 'jstree-checked');
                                        }
                                    }
                                    else {
                                        break;
                                    }
                                    p = this.get_node(p.parent);
                                }
                            }.bind(this))
                        .on('move_node.jstree', function (e, data) {
                                // apply up (whole handler)
                                var is_multi = data.is_multi,
                                    old_par = data.old_parent,
                                    new_par = this.get_node(data.parent),
                                    m = this._model.data,
                                    p, c, i, j, tmp, t = this.settings.checkbox.tie_selection;
                                if(!is_multi) {
                                    p = this.get_node(old_par);
                                    while(p && p.id !== $.jstree.root && !p.state[ t ? 'selected' : 'checked' ]) {
                                        c = 0;
                                        for(i = 0, j = p.children.length; i < j; i++) {
                                            c += m[p.children[i]].state[ t ? 'selected' : 'checked' ];
                                        }
                                        if(j > 0 && c === j) {
                                            p.state[ t ? 'selected' : 'checked' ] = true;
                                            this._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);
                                            tmp = this.get_node(p, true);
                                            if(tmp && tmp.length) {
                                                tmp.children('.jstree-anchor').attr('aria-selected', true).addClass(t ? 'jstree-clicked' : 'jstree-checked');
                                            }
                                        }
                                        else {
                                            break;
                                        }
                                        p = this.get_node(p.parent);
                                    }
                                }
                                p = new_par;
                                while(p && p.id !== $.jstree.root) {
                                    c = 0;
                                    for(i = 0, j = p.children.length; i < j; i++) {
                                        c += m[p.children[i]].state[ t ? 'selected' : 'checked' ];
                                    }
                                    if(c === j) {
                                        if(!p.state[ t ? 'selected' : 'checked' ]) {
                                            p.state[ t ? 'selected' : 'checked' ] = true;
                                            this._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);
                                            tmp = this.get_node(p, true);
                                            if(tmp && tmp.length) {
                                                tmp.children('.jstree-anchor').attr('aria-selected', true).addClass(t ? 'jstree-clicked' : 'jstree-checked');
                                            }
                                        }
                                    }
                                    else {
                                        if(p.state[ t ? 'selected' : 'checked' ]) {
                                            p.state[ t ? 'selected' : 'checked' ] = false;
                                            this._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_remove_item(this._data[ t ? 'core' : 'checkbox' ].selected, p.id);
                                            tmp = this.get_node(p, true);
                                            if(tmp && tmp.length) {
                                                tmp.children('.jstree-anchor').attr('aria-selected', false).removeClass(t ? 'jstree-clicked' : 'jstree-checked');
                                            }
                                        }
                                        else {
                                            break;
                                        }
                                    }
                                    p = this.get_node(p.parent);
                                }
                            }.bind(this));
                }
            };
            /**
             * get an array of all nodes whose state is "undetermined"
             * @name get_undetermined([full])
             * @param  {boolean} full: if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
             * @return {Array}
             * @plugin checkbox
             */
            this.get_undetermined = function (full) {
                if (this.settings.checkbox.cascade.indexOf('undetermined') === -1) {
                    return [];
                }
                var i, j, k, l, o = {}, m = this._model.data, t = this.settings.checkbox.tie_selection, s = this._data[ t ? 'core' : 'checkbox' ].selected, p = [], tt = this, r = [];
                for(i = 0, j = s.length; i < j; i++) {
                    if(m[s[i]] && m[s[i]].parents) {
                        for(k = 0, l = m[s[i]].parents.length; k < l; k++) {
                            if(o[m[s[i]].parents[k]] !== undefined) {
                                break;
                            }
                            if(m[s[i]].parents[k] !== $.jstree.root) {
                                o[m[s[i]].parents[k]] = true;
                                p.push(m[s[i]].parents[k]);
                            }
                        }
                    }
                }
                // attempt for server side undetermined state
                this.element.find('.jstree-closed').not(':has(.jstree-children)')
                    .each(function () {
                        var tmp = tt.get_node(this), tmp2;
                        
                        if(!tmp) { return; }
                        
                        if(!tmp.state.loaded) {
                            if(tmp.original && tmp.original.state && tmp.original.state.undetermined && tmp.original.state.undetermined === true) {
                                if(o[tmp.id] === undefined && tmp.id !== $.jstree.root) {
                                    o[tmp.id] = true;
                                    p.push(tmp.id);
                                }
                                for(k = 0, l = tmp.parents.length; k < l; k++) {
                                    if(o[tmp.parents[k]] === undefined && tmp.parents[k] !== $.jstree.root) {
                                        o[tmp.parents[k]] = true;
                                        p.push(tmp.parents[k]);
                                    }
                                }
                            }
                        }
                        else {
                            for(i = 0, j = tmp.children_d.length; i < j; i++) {
                                tmp2 = m[tmp.children_d[i]];
                                if(!tmp2.state.loaded && tmp2.original && tmp2.original.state && tmp2.original.state.undetermined && tmp2.original.state.undetermined === true) {
                                    if(o[tmp2.id] === undefined && tmp2.id !== $.jstree.root) {
                                        o[tmp2.id] = true;
                                        p.push(tmp2.id);
                                    }
                                    for(k = 0, l = tmp2.parents.length; k < l; k++) {
                                        if(o[tmp2.parents[k]] === undefined && tmp2.parents[k] !== $.jstree.root) {
                                            o[tmp2.parents[k]] = true;
                                            p.push(tmp2.parents[k]);
                                        }
                                    }
                                }
                            }
                        }
                    });
                for (i = 0, j = p.length; i < j; i++) {
                    if(!m[p[i]].state[ t ? 'selected' : 'checked' ]) {
                        r.push(full ? m[p[i]] : p[i]);
                    }
                }
                return r;
            };
            /**
             * set the undetermined state where and if necessary. Used internally.
             * @private
             * @name _undetermined()
             * @plugin checkbox
             */
            this._undetermined = function () {
                if(this.element === null) { return; }
                var p = this.get_undetermined(false), i, j, s;
    
                this.element.find('.jstree-undetermined').removeClass('jstree-undetermined');
                for (i = 0, j = p.length; i < j; i++) {
                    s = this.get_node(p[i], true);
                    if(s && s.length) {
                        s.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-undetermined');
                    }
                }
            };
            this.redraw_node = function(obj, deep, is_callback, force_render) {
                obj = parent.redraw_node.apply(this, arguments);
                if(obj) {
                    var i, j, tmp = null, icon = null;
                    for(i = 0, j = obj.childNodes.length; i < j; i++) {
                        if(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf("jstree-anchor") !== -1) {
                            tmp = obj.childNodes[i];
                            break;
                        }
                    }
                    if(tmp) {
                        if(!this.settings.checkbox.tie_selection && this._model.data[obj.id].state.checked) { tmp.className += ' jstree-checked'; }
                        icon = _i.cloneNode(false);
                        if(this._model.data[obj.id].state.checkbox_disabled) { icon.className += ' jstree-checkbox-disabled'; }
                        tmp.insertBefore(icon, tmp.childNodes[0]);
                    }
                }
                if(!is_callback && this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {
                    if(this._data.checkbox.uto) { clearTimeout(this._data.checkbox.uto); }
                    this._data.checkbox.uto = setTimeout(this._undetermined.bind(this), 50);
                }
                return obj;
            };
            /**
             * show the node checkbox icons
             * @name show_checkboxes()
             * @plugin checkbox
             */
            this.show_checkboxes = function () { this._data.core.themes.checkboxes = true; this.get_container_ul().removeClass("jstree-no-checkboxes"); };
            /**
             * hide the node checkbox icons
             * @name hide_checkboxes()
             * @plugin checkbox
             */
            this.hide_checkboxes = function () { this._data.core.themes.checkboxes = false; this.get_container_ul().addClass("jstree-no-checkboxes"); };
            /**
             * toggle the node icons
             * @name toggle_checkboxes()
             * @plugin checkbox
             */
            this.toggle_checkboxes = function () { if(this._data.core.themes.checkboxes) { this.hide_checkboxes(); } else { this.show_checkboxes(); } };
            /**
             * checks if a node is in an undetermined state
             * @name is_undetermined(obj)
             * @param  {mixed} obj
             * @return {Boolean}
             */
            this.is_undetermined = function (obj) {
                obj = this.get_node(obj);
                var s = this.settings.checkbox.cascade, i, j, t = this.settings.checkbox.tie_selection, d = this._data[ t ? 'core' : 'checkbox' ].selected, m = this._model.data;
                if(!obj || obj.state[ t ? 'selected' : 'checked' ] === true || s.indexOf('undetermined') === -1 || (s.indexOf('down') === -1 && s.indexOf('up') === -1)) {
                    return false;
                }
                if(!obj.state.loaded && obj.original.state.undetermined === true) {
                    return true;
                }
                for(i = 0, j = obj.children_d.length; i < j; i++) {
                    if($.inArray(obj.children_d[i], d) !== -1 || (!m[obj.children_d[i]].state.loaded && m[obj.children_d[i]].original.state.undetermined)) {
                        return true;
                    }
                }
                return false;
            };
            /**
             * disable a node's checkbox
             * @name disable_checkbox(obj)
             * @param {mixed} obj an array can be used too
             * @trigger disable_checkbox.jstree
             * @plugin checkbox
             */
            this.disable_checkbox = function (obj) {
                var t1, t2, dom;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.disable_checkbox(obj[t1]);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) {
                    return false;
                }
                dom = this.get_node(obj, true);
                if(!obj.state.checkbox_disabled) {
                    obj.state.checkbox_disabled = true;
                    if(dom && dom.length) {
                        dom.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-checkbox-disabled');
                    }
                    /**
                     * triggered when an node's checkbox is disabled
                     * @event
                     * @name disable_checkbox.jstree
                     * @param {Object} node
                     * @plugin checkbox
                     */
                    this.trigger('disable_checkbox', { 'node' : obj });
                }
            };
            /**
             * enable a node's checkbox
             * @name enable_checkbox(obj)
             * @param {mixed} obj an array can be used too
             * @trigger enable_checkbox.jstree
             * @plugin checkbox
             */
            this.enable_checkbox = function (obj) {
                var t1, t2, dom;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.enable_checkbox(obj[t1]);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) {
                    return false;
                }
                dom = this.get_node(obj, true);
                if(obj.state.checkbox_disabled) {
                    obj.state.checkbox_disabled = false;
                    if(dom && dom.length) {
                        dom.children('.jstree-anchor').children('.jstree-checkbox').removeClass('jstree-checkbox-disabled');
                    }
                    /**
                     * triggered when an node's checkbox is enabled
                     * @event
                     * @name enable_checkbox.jstree
                     * @param {Object} node
                     * @plugin checkbox
                     */
                    this.trigger('enable_checkbox', { 'node' : obj });
                }
            };
    
            this.activate_node = function (obj, e) {
                if($(e.target).hasClass('jstree-checkbox-disabled')) {
                    return false;
                }
                if(this.settings.checkbox.tie_selection && (this.settings.checkbox.whole_node || $(e.target).hasClass('jstree-checkbox'))) {
                    e.ctrlKey = true;
                }
                if(this.settings.checkbox.tie_selection || (!this.settings.checkbox.whole_node && !$(e.target).hasClass('jstree-checkbox'))) {
                    return parent.activate_node.call(this, obj, e);
                }
                if(this.is_disabled(obj)) {
                    return false;
                }
                if(this.is_checked(obj)) {
                    this.uncheck_node(obj, e);
                }
                else {
                    this.check_node(obj, e);
                }
                this.trigger('activate_node', { 'node' : this.get_node(obj) });
            };
            this.delete_node = function (obj) {
                if(this.settings.checkbox.tie_selection || $.vakata.is_array(obj)) {
                    return parent.delete_node.call(this, obj);
                }
                var tmp, k, l, c = false;
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) { return false; }
                tmp = obj.children_d.concat([]);
                tmp.push(obj.id);
                for(k = 0, l = tmp.length; k < l; k++) {
                    if(this._model.data[tmp[k]].state.checked) {
                        c = true;
                        break;
                    }
                }
                if (c) {
                    this._data.checkbox.selected = $.vakata.array_filter(this._data.checkbox.selected, function (v) {
                        return $.inArray(v, tmp) === -1;
                    });
                }
                return parent.delete_node.call(this, obj);
            };
    
            /**
             * Cascades checked state to a node and all its descendants. This function does NOT affect hidden and disabled nodes (or their descendants).
             * However if these unaffected nodes are already selected their ids will be included in the returned array.
             * @private
             * @name _cascade_new_checked_state(id, checkedState)
             * @param {string} id the node ID
             * @param {bool} checkedState should the nodes be checked or not
             * @returns {Array} Array of all node id's (in this tree branch) that are checked.
             */
            this._cascade_new_checked_state = function (id, checkedState) {
                var self = this;
                var t = this.settings.checkbox.tie_selection;
                var node = this._model.data[id];
                var selectedNodeIds = [];
                var selectedChildrenIds = [], i, j, selectedChildIds;
    
                if (
                    (this.settings.checkbox.cascade_to_disabled || !node.state.disabled) &&
                    (this.settings.checkbox.cascade_to_hidden || !node.state.hidden)
                ) {
                    //First try and check/uncheck the children
                    if (node.children) {
                        for (i = 0, j = node.children.length; i < j; i++) {
                            var childId = node.children[i];
                            selectedChildIds = self._cascade_new_checked_state(childId, checkedState);
                            selectedNodeIds = selectedNodeIds.concat(selectedChildIds);
                            if (selectedChildIds.indexOf(childId) > -1) {
                                selectedChildrenIds.push(childId);
                            }
                        }
                    }
    
                    var dom = self.get_node(node, true);
    
                    //A node's state is undetermined if some but not all of it's children are checked/selected .
                    var undetermined = selectedChildrenIds.length > 0 && selectedChildrenIds.length < node.children.length;
    
                    if(node.original && node.original.state && node.original.state.undetermined) {
                        node.original.state.undetermined = undetermined;
                    }
    
                    //If a node is undetermined then remove selected class
                    if (undetermined) {
                        node.state[ t ? 'selected' : 'checked' ] = false;
                        dom.children('.jstree-anchor').attr('aria-selected', false).removeClass(t ? 'jstree-clicked' : 'jstree-checked');
                    }
                    //Otherwise, if the checkedState === true (i.e. the node is being checked now) and all of the node's children are checked (if it has any children),
                    //check the node and style it correctly.
                    else if (checkedState && selectedChildrenIds.length === node.children.length) {
                        node.state[ t ? 'selected' : 'checked' ] = checkedState;
                        selectedNodeIds.push(node.id);
    
                        dom.children('.jstree-anchor').attr('aria-selected', true).addClass(t ? 'jstree-clicked' : 'jstree-checked');
                    }
                    else {
                        node.state[ t ? 'selected' : 'checked' ] = false;
                        dom.children('.jstree-anchor').attr('aria-selected', false).removeClass(t ? 'jstree-clicked' : 'jstree-checked');
                    }
                }
                else {
                    selectedChildIds = this.get_checked_descendants(id);
    
                    if (node.state[ t ? 'selected' : 'checked' ]) {
                        selectedChildIds.push(node.id);
                    }
    
                    selectedNodeIds = selectedNodeIds.concat(selectedChildIds);
                }
    
                return selectedNodeIds;
            };
    
            /**
             * Gets ids of nodes selected in branch (of tree) specified by id (does not include the node specified by id)
             * @name get_checked_descendants(obj)
             * @param {string} id the node ID
             * @return {Array} array of IDs
             * @plugin checkbox
             */
            this.get_checked_descendants = function (id) {
                var self = this;
                var t = self.settings.checkbox.tie_selection;
                var node = self._model.data[id];
    
                return $.vakata.array_filter(node.children_d, function(_id) {
                    return self._model.data[_id].state[ t ? 'selected' : 'checked' ];
                });
            };
    
            /**
             * check a node (only if tie_selection in checkbox settings is false, otherwise select_node will be called internally)
             * @name check_node(obj)
             * @param {mixed} obj an array can be used to check multiple nodes
             * @trigger check_node.jstree
             * @plugin checkbox
             */
            this.check_node = function (obj, e) {
                if(this.settings.checkbox.tie_selection) { return this.select_node(obj, false, true, e); }
                var dom, t1, t2, th;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.check_node(obj[t1], e);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) {
                    return false;
                }
                dom = this.get_node(obj, true);
                if(!obj.state.checked) {
                    obj.state.checked = true;
                    this._data.checkbox.selected.push(obj.id);
                    if(dom && dom.length) {
                        dom.children('.jstree-anchor').addClass('jstree-checked');
                    }
                    /**
                     * triggered when an node is checked (only if tie_selection in checkbox settings is false)
                     * @event
                     * @name check_node.jstree
                     * @param {Object} node
                     * @param {Array} selected the current selection
                     * @param {Object} event the event (if any) that triggered this check_node
                     * @plugin checkbox
                     */
                    this.trigger('check_node', { 'node' : obj, 'selected' : this._data.checkbox.selected, 'event' : e });
                }
            };
            /**
             * uncheck a node (only if tie_selection in checkbox settings is false, otherwise deselect_node will be called internally)
             * @name uncheck_node(obj)
             * @param {mixed} obj an array can be used to uncheck multiple nodes
             * @trigger uncheck_node.jstree
             * @plugin checkbox
             */
            this.uncheck_node = function (obj, e) {
                if(this.settings.checkbox.tie_selection) { return this.deselect_node(obj, false, e); }
                var t1, t2, dom;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.uncheck_node(obj[t1], e);
                    }
                    return true;
                }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) {
                    return false;
                }
                dom = this.get_node(obj, true);
                if(obj.state.checked) {
                    obj.state.checked = false;
                    this._data.checkbox.selected = $.vakata.array_remove_item(this._data.checkbox.selected, obj.id);
                    if(dom.length) {
                        dom.children('.jstree-anchor').removeClass('jstree-checked');
                    }
                    /**
                     * triggered when an node is unchecked (only if tie_selection in checkbox settings is false)
                     * @event
                     * @name uncheck_node.jstree
                     * @param {Object} node
                     * @param {Array} selected the current selection
                     * @param {Object} event the event (if any) that triggered this uncheck_node
                     * @plugin checkbox
                     */
                    this.trigger('uncheck_node', { 'node' : obj, 'selected' : this._data.checkbox.selected, 'event' : e });
                }
            };
            
            /**
             * checks all nodes in the tree (only if tie_selection in checkbox settings is false, otherwise select_all will be called internally)
             * @name check_all()
             * @trigger check_all.jstree, changed.jstree
             * @plugin checkbox
             */
            this.check_all = function () {
                if(this.settings.checkbox.tie_selection) { return this.select_all(); }
                var tmp = this._data.checkbox.selected.concat([]), i, j;
                this._data.checkbox.selected = this._model.data[$.jstree.root].children_d.concat();
                for(i = 0, j = this._data.checkbox.selected.length; i < j; i++) {
                    if(this._model.data[this._data.checkbox.selected[i]]) {
                        this._model.data[this._data.checkbox.selected[i]].state.checked = true;
                    }
                }
                this.redraw(true);
                /**
                 * triggered when all nodes are checked (only if tie_selection in checkbox settings is false)
                 * @event
                 * @name check_all.jstree
                 * @param {Array} selected the current selection
                 * @plugin checkbox
                 */
                this.trigger('check_all', { 'selected' : this._data.checkbox.selected });
            };
            /**
             * uncheck all checked nodes (only if tie_selection in checkbox settings is false, otherwise deselect_all will be called internally)
             * @name uncheck_all()
             * @trigger uncheck_all.jstree
             * @plugin checkbox
             */
            this.uncheck_all = function () {
                if(this.settings.checkbox.tie_selection) { return this.deselect_all(); }
                var tmp = this._data.checkbox.selected.concat([]), i, j;
                for(i = 0, j = this._data.checkbox.selected.length; i < j; i++) {
                    if(this._model.data[this._data.checkbox.selected[i]]) {
                        this._model.data[this._data.checkbox.selected[i]].state.checked = false;
                    }
                }
                this._data.checkbox.selected = [];
                this.element.find('.jstree-checked').removeClass('jstree-checked');
                /**
                 * triggered when all nodes are unchecked (only if tie_selection in checkbox settings is false)
                 * @event
                 * @name uncheck_all.jstree
                 * @param {Object} node the previous selection
                 * @param {Array} selected the current selection
                 * @plugin checkbox
                 */
                this.trigger('uncheck_all', { 'selected' : this._data.checkbox.selected, 'node' : tmp });
            };
            /**
             * checks if a node is checked (if tie_selection is on in the settings this function will return the same as is_selected)
             * @name is_checked(obj)
             * @param  {mixed}  obj
             * @return {Boolean}
             * @plugin checkbox
             */
            this.is_checked = function (obj) {
                if(this.settings.checkbox.tie_selection) { return this.is_selected(obj); }
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) { return false; }
                return obj.state.checked;
            };
            /**
             * get an array of all checked nodes (if tie_selection is on in the settings this function will return the same as get_selected)
             * @name get_checked([full])
             * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
             * @return {Array}
             * @plugin checkbox
             */
            this.get_checked = function (full) {
                if(this.settings.checkbox.tie_selection) { return this.get_selected(full); }
                return full ? $.map(this._data.checkbox.selected, function (i) { return this.get_node(i); }.bind(this)) : this._data.checkbox.selected.slice();
            };
            /**
             * get an array of all top level checked nodes (ignoring children of checked nodes) (if tie_selection is on in the settings this function will return the same as get_top_selected)
             * @name get_top_checked([full])
             * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
             * @return {Array}
             * @plugin checkbox
             */
            this.get_top_checked = function (full) {
                if(this.settings.checkbox.tie_selection) { return this.get_top_selected(full); }
                var tmp = this.get_checked(true),
                    obj = {}, i, j, k, l;
                for(i = 0, j = tmp.length; i < j; i++) {
                    obj[tmp[i].id] = tmp[i];
                }
                for(i = 0, j = tmp.length; i < j; i++) {
                    for(k = 0, l = tmp[i].children_d.length; k < l; k++) {
                        if(obj[tmp[i].children_d[k]]) {
                            delete obj[tmp[i].children_d[k]];
                        }
                    }
                }
                tmp = [];
                for(i in obj) {
                    if(obj.hasOwnProperty(i)) {
                        tmp.push(i);
                    }
                }
                return full ? $.map(tmp, function (i) { return this.get_node(i); }.bind(this)) : tmp;
            };
            /**
             * get an array of all bottom level checked nodes (ignoring selected parents) (if tie_selection is on in the settings this function will return the same as get_bottom_selected)
             * @name get_bottom_checked([full])
             * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned
             * @return {Array}
             * @plugin checkbox
             */
            this.get_bottom_checked = function (full) {
                if(this.settings.checkbox.tie_selection) { return this.get_bottom_selected(full); }
                var tmp = this.get_checked(true),
                    obj = [], i, j;
                for(i = 0, j = tmp.length; i < j; i++) {
                    if(!tmp[i].children.length) {
                        obj.push(tmp[i].id);
                    }
                }
                return full ? $.map(obj, function (i) { return this.get_node(i); }.bind(this)) : obj;
            };
            this.load_node = function (obj, callback) {
                var k, l, i, j, c, tmp;
                if(!$.vakata.is_array(obj) && !this.settings.checkbox.tie_selection) {
                    tmp = this.get_node(obj);
                    if(tmp && tmp.state.loaded) {
                        for(k = 0, l = tmp.children_d.length; k < l; k++) {
                            if(this._model.data[tmp.children_d[k]].state.checked) {
                                c = true;
                                this._data.checkbox.selected = $.vakata.array_remove_item(this._data.checkbox.selected, tmp.children_d[k]);
                            }
                        }
                    }
                }
                return parent.load_node.apply(this, arguments);
            };
            this.get_state = function () {
                var state = parent.get_state.apply(this, arguments);
                if(this.settings.checkbox.tie_selection) { return state; }
                state.checkbox = this._data.checkbox.selected.slice();
                return state;
            };
            this.set_state = function (state, callback) {
                var res = parent.set_state.apply(this, arguments);
                if(res && state.checkbox) {
                    if(!this.settings.checkbox.tie_selection) {
                        this.uncheck_all();
                        var _this = this;
                        $.each(state.checkbox, function (i, v) {
                            _this.check_node(v);
                        });
                    }
                    delete state.checkbox;
                    this.set_state(state, callback);
                    return false;
                }
                return res;
            };
            this.refresh = function (skip_loading, forget_state) {
                if(this.settings.checkbox.tie_selection) {
                    this._data.checkbox.selected = [];
                }
                return parent.refresh.apply(this, arguments);
            };
        };
    
        // include the checkbox plugin by default
        // $.jstree.defaults.plugins.push("checkbox");
    
    
    /**
     * ### Conditionalselect plugin
     *
     * This plugin allows defining a callback to allow or deny node selection by user input (activate node method).
     */
    
        /**
         * a callback (function) which is invoked in the instance's scope and receives two arguments - the node and the event that triggered the `activate_node` call. Returning false prevents working with the node, returning true allows invoking activate_node. Defaults to returning `true`.
         * @name $.jstree.defaults.checkbox.visible
         * @plugin checkbox
         */
        $.jstree.defaults.conditionalselect = function () { return true; };
        $.jstree.plugins.conditionalselect = function (options, parent) {
            // own function
            this.activate_node = function (obj, e) {
                if(this.settings.conditionalselect.call(this, this.get_node(obj), e)) {
                    return parent.activate_node.call(this, obj, e);
                }
            };
        };
    
    
    /**
     * ### Contextmenu plugin
     *
     * Shows a context menu when a node is right-clicked.
     */
    
        /**
         * stores all defaults for the contextmenu plugin
         * @name $.jstree.defaults.contextmenu
         * @plugin contextmenu
         */
        $.jstree.defaults.contextmenu = {
            /**
             * a boolean indicating if the node should be selected when the context menu is invoked on it. Defaults to `true`.
             * @name $.jstree.defaults.contextmenu.select_node
             * @plugin contextmenu
             */
            select_node : true,
            /**
             * a boolean indicating if the menu should be shown aligned with the node. Defaults to `true`, otherwise the mouse coordinates are used.
             * @name $.jstree.defaults.contextmenu.show_at_node
             * @plugin contextmenu
             */
            show_at_node : true,
            /**
             * an object of actions, or a function that accepts a node and a callback function and calls the callback function with an object of actions available for that node (you can also return the items too).
             *
             * Each action consists of a key (a unique name) and a value which is an object with the following properties (only label and action are required). Once a menu item is activated the `action` function will be invoked with an object containing the following keys: item - the contextmenu item definition as seen below, reference - the DOM node that was used (the tree node), element - the contextmenu DOM element, position - an object with x/y properties indicating the position of the menu.
             *
             * * `separator_before` - a boolean indicating if there should be a separator before this item
             * * `separator_after` - a boolean indicating if there should be a separator after this item
             * * `_disabled` - a boolean indicating if this action should be disabled
             * * `label` - a string - the name of the action (could be a function returning a string)
             * * `title` - a string - an optional tooltip for the item
             * * `action` - a function to be executed if this item is chosen, the function will receive 
             * * `icon` - a string, can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class
             * * `shortcut` - keyCode which will trigger the action if the menu is open (for example `113` for rename, which equals F2)
             * * `shortcut_label` - shortcut label (like for example `F2` for rename)
             * * `submenu` - an object with the same structure as $.jstree.defaults.contextmenu.items which can be used to create a submenu - each key will be rendered as a separate option in a submenu that will appear once the current item is hovered
             *
             * @name $.jstree.defaults.contextmenu.items
             * @plugin contextmenu
             */
            items : function (o, cb) { // Could be an object directly
                return {
                    "create" : {
                        "separator_before"	: false,
                        "separator_after"	: true,
                        "_disabled"			: false, //(this.check("create_node", data.reference, {}, "last")),
                        "label"				: "Create",
                        "action"			: function (data) {
                            var inst = $.jstree.reference(data.reference),
                                obj = inst.get_node(data.reference);
                            inst.create_node(obj, {}, "last", function (new_node) {
                                try {
                                    inst.edit(new_node);
                                } catch (ex) {
                                    setTimeout(function () { inst.edit(new_node); },0);
                                }
                            });
                        }
                    },
                    "rename" : {
                        "separator_before"	: false,
                        "separator_after"	: false,
                        "_disabled"			: false, //(this.check("rename_node", data.reference, this.get_parent(data.reference), "")),
                        "label"				: "Rename",
                        /*!
                        "shortcut"			: 113,
                        "shortcut_label"	: 'F2',
                        "icon"				: "glyphicon glyphicon-leaf",
                        */
                        "action"			: function (data) {
                            var inst = $.jstree.reference(data.reference),
                                obj = inst.get_node(data.reference);
                            inst.edit(obj);
                        }
                    },
                    "remove" : {
                        "separator_before"	: false,
                        "icon"				: false,
                        "separator_after"	: false,
                        "_disabled"			: false, //(this.check("delete_node", data.reference, this.get_parent(data.reference), "")),
                        "label"				: "Delete",
                        "action"			: function (data) {
                            var inst = $.jstree.reference(data.reference),
                                obj = inst.get_node(data.reference);
                            if(inst.is_selected(obj)) {
                                inst.delete_node(inst.get_selected());
                            }
                            else {
                                inst.delete_node(obj);
                            }
                        }
                    },
                    "ccp" : {
                        "separator_before"	: true,
                        "icon"				: false,
                        "separator_after"	: false,
                        "label"				: "Edit",
                        "action"			: false,
                        "submenu" : {
                            "cut" : {
                                "separator_before"	: false,
                                "separator_after"	: false,
                                "label"				: "Cut",
                                "action"			: function (data) {
                                    var inst = $.jstree.reference(data.reference),
                                        obj = inst.get_node(data.reference);
                                    if(inst.is_selected(obj)) {
                                        inst.cut(inst.get_top_selected());
                                    }
                                    else {
                                        inst.cut(obj);
                                    }
                                }
                            },
                            "copy" : {
                                "separator_before"	: false,
                                "icon"				: false,
                                "separator_after"	: false,
                                "label"				: "Copy",
                                "action"			: function (data) {
                                    var inst = $.jstree.reference(data.reference),
                                        obj = inst.get_node(data.reference);
                                    if(inst.is_selected(obj)) {
                                        inst.copy(inst.get_top_selected());
                                    }
                                    else {
                                        inst.copy(obj);
                                    }
                                }
                            },
                            "paste" : {
                                "separator_before"	: false,
                                "icon"				: false,
                                "_disabled"			: function (data) {
                                    return !$.jstree.reference(data.reference).can_paste();
                                },
                                "separator_after"	: false,
                                "label"				: "Paste",
                                "action"			: function (data) {
                                    var inst = $.jstree.reference(data.reference),
                                        obj = inst.get_node(data.reference);
                                    inst.paste(obj);
                                }
                            }
                        }
                    }
                };
            }
        };
    
        $.jstree.plugins.contextmenu = function (options, parent) {
            this.bind = function () {
                parent.bind.call(this);
    
                var last_ts = 0, cto = null, ex, ey;
                this.element
                    .on("init.jstree loading.jstree ready.jstree", function () {
                            this.get_container_ul().addClass('jstree-contextmenu');
                        }.bind(this))
                    .on("contextmenu.jstree", ".jstree-anchor", function (e, data) {
                            if (e.target.tagName.toLowerCase() === 'input') {
                                return;
                            }
                            e.preventDefault();
                            last_ts = e.ctrlKey ? +new Date() : 0;
                            if(data || cto) {
                                last_ts = (+new Date()) + 10000;
                            }
                            if(cto) {
                                clearTimeout(cto);
                            }
                            if(!this.is_loading(e.currentTarget)) {
                                this.show_contextmenu(e.currentTarget, e.pageX, e.pageY, e);
                            }
                        }.bind(this))
                    .on("click.jstree", ".jstree-anchor", function (e) {
                            if(this._data.contextmenu.visible && (!last_ts || (+new Date()) - last_ts > 250)) { // work around safari & macOS ctrl+click
                                $.vakata.context.hide();
                            }
                            last_ts = 0;
                        }.bind(this))
                    .on("touchstart.jstree", ".jstree-anchor", function (e) {
                            if(!e.originalEvent || !e.originalEvent.changedTouches || !e.originalEvent.changedTouches[0]) {
                                return;
                            }
                            ex = e.originalEvent.changedTouches[0].clientX;
                            ey = e.originalEvent.changedTouches[0].clientY;
                            cto = setTimeout(function () {
                                $(e.currentTarget).trigger('contextmenu', true);
                            }, 750);
                        })
                    .on('touchmove.vakata.jstree', function (e) {
                            if(cto && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0] && (Math.abs(ex - e.originalEvent.changedTouches[0].clientX) > 10 || Math.abs(ey - e.originalEvent.changedTouches[0].clientY) > 10)) {
                                clearTimeout(cto);
                                $.vakata.context.hide();
                            }
                        })
                    .on('touchend.vakata.jstree', function (e) {
                            if(cto) {
                                clearTimeout(cto);
                            }
                        });
    
                /*!
                if(!('oncontextmenu' in document.body) && ('ontouchstart' in document.body)) {
                    var el = null, tm = null;
                    this.element
                        .on("touchstart", ".jstree-anchor", function (e) {
                            el = e.currentTarget;
                            tm = +new Date();
                            $(document).one("touchend", function (e) {
                                e.target = document.elementFromPoint(e.originalEvent.targetTouches[0].pageX - window.pageXOffset, e.originalEvent.targetTouches[0].pageY - window.pageYOffset);
                                e.currentTarget = e.target;
                                tm = ((+(new Date())) - tm);
                                if(e.target === el && tm > 600 && tm < 1000) {
                                    e.preventDefault();
                                    $(el).trigger('contextmenu', e);
                                }
                                el = null;
                                tm = null;
                            });
                        });
                }
                */
                $(document).on("context_hide.vakata.jstree", function (e, data) {
                    this._data.contextmenu.visible = false;
                    $(data.reference).removeClass('jstree-context');
                }.bind(this));
            };
            this.teardown = function () {
                if(this._data.contextmenu.visible) {
                    $.vakata.context.hide();
                }
                $(document).off("context_hide.vakata.jstree");
                parent.teardown.call(this);
            };
    
            /**
             * prepare and show the context menu for a node
             * @name show_contextmenu(obj [, x, y])
             * @param {mixed} obj the node
             * @param {Number} x the x-coordinate relative to the document to show the menu at
             * @param {Number} y the y-coordinate relative to the document to show the menu at
             * @param {Object} e the event if available that triggered the contextmenu
             * @plugin contextmenu
             * @trigger show_contextmenu.jstree
             */
            this.show_contextmenu = function (obj, x, y, e) {
                obj = this.get_node(obj);
                if(!obj || obj.id === $.jstree.root) { return false; }
                var s = this.settings.contextmenu,
                    d = this.get_node(obj, true),
                    a = d.children(".jstree-anchor"),
                    o = false,
                    i = false;
                if(s.show_at_node || x === undefined || y === undefined) {
                    o = a.offset();
                    x = o.left;
                    y = o.top + this._data.core.li_height;
                }
                if(this.settings.contextmenu.select_node && !this.is_selected(obj)) {
                    this.activate_node(obj, e);
                }
    
                i = s.items;
                if($.vakata.is_function(i)) {
                    i = i.call(this, obj, function (i) {
                        this._show_contextmenu(obj, x, y, i);
                    }.bind(this));
                }
                if($.isPlainObject(i)) {
                    this._show_contextmenu(obj, x, y, i);
                }
            };
            /**
             * show the prepared context menu for a node
             * @name _show_contextmenu(obj, x, y, i)
             * @param {mixed} obj the node
             * @param {Number} x the x-coordinate relative to the document to show the menu at
             * @param {Number} y the y-coordinate relative to the document to show the menu at
             * @param {Number} i the object of items to show
             * @plugin contextmenu
             * @trigger show_contextmenu.jstree
             * @private
             */
            this._show_contextmenu = function (obj, x, y, i) {
                var d = this.get_node(obj, true),
                    a = d.children(".jstree-anchor");
                $(document).one("context_show.vakata.jstree", function (e, data) {
                    var cls = 'jstree-contextmenu jstree-' + this.get_theme() + '-contextmenu';
                    $(data.element).addClass(cls);
                    a.addClass('jstree-context');
                }.bind(this));
                this._data.contextmenu.visible = true;
                $.vakata.context.show(a, { 'x' : x, 'y' : y }, i);
                /**
                 * triggered when the contextmenu is shown for a node
                 * @event
                 * @name show_contextmenu.jstree
                 * @param {Object} node the node
                 * @param {Number} x the x-coordinate of the menu relative to the document
                 * @param {Number} y the y-coordinate of the menu relative to the document
                 * @plugin contextmenu
                 */
                this.trigger('show_contextmenu', { "node" : obj, "x" : x, "y" : y });
            };
        };
    
        // contextmenu helper
        (function ($) {
            var right_to_left = false,
                vakata_context = {
                    element		: false,
                    reference	: false,
                    position_x	: 0,
                    position_y	: 0,
                    items		: [],
                    html		: "",
                    is_visible	: false
                };
    
            $.vakata.context = {
                settings : {
                    hide_onmouseleave	: 0,
                    icons				: true
                },
                _trigger : function (event_name) {
                    $(document).triggerHandler("context_" + event_name + ".vakata", {
                        "reference"	: vakata_context.reference,
                        "element"	: vakata_context.element,
                        "position"	: {
                            "x" : vakata_context.position_x,
                            "y" : vakata_context.position_y
                        }
                    });
                },
                _execute : function (i) {
                    i = vakata_context.items[i];
                    return i && (!i._disabled || ($.vakata.is_function(i._disabled) && !i._disabled({ "item" : i, "reference" : vakata_context.reference, "element" : vakata_context.element }))) && i.action ? i.action.call(null, {
                                "item"		: i,
                                "reference"	: vakata_context.reference,
                                "element"	: vakata_context.element,
                                "position"	: {
                                    "x" : vakata_context.position_x,
                                    "y" : vakata_context.position_y
                                }
                            }) : false;
                },
                _parse : function (o, is_callback) {
                    if(!o) { return false; }
                    if(!is_callback) {
                        vakata_context.html		= "";
                        vakata_context.items	= [];
                    }
                    var str = "",
                        sep = false,
                        tmp;
    
                    if(is_callback) { str += "<"+"ul>"; }
                    $.each(o, function (i, val) {
                        if(!val) { return true; }
                        vakata_context.items.push(val);
                        if(!sep && val.separator_before) {
                            str += "<"+"li class='vakata-context-separator'><"+"a href='#' " + ($.vakata.context.settings.icons ? '' : 'class="vakata-context-no-icons"') + ">&#160;<"+"/a><"+"/li>";
                        }
                        sep = false;
                        str += "<"+"li class='" + (val._class || "") + (val._disabled === true || ($.vakata.is_function(val._disabled) && val._disabled({ "item" : val, "reference" : vakata_context.reference, "element" : vakata_context.element })) ? " vakata-contextmenu-disabled " : "") + "' "+(val.shortcut?" data-shortcut='"+val.shortcut+"' ":'')+">";
                        str += "<"+"a href='#' rel='" + (vakata_context.items.length - 1) + "' " + (val.title ? "title='" + val.title + "'" : "") + ">";
                        if($.vakata.context.settings.icons) {
                            str += "<"+"i ";
                            if(val.icon) {
                                if(val.icon.indexOf("/") !== -1 || val.icon.indexOf(".") !== -1) { str += " style='background:url(\"" + val.icon + "\") center center no-repeat' "; }
                                else { str += " class='" + val.icon + "' "; }
                            }
                            str += "><"+"/i><"+"span class='vakata-contextmenu-sep'>&#160;<"+"/span>";
                        }
                        str += ($.vakata.is_function(val.label) ? val.label({ "item" : i, "reference" : vakata_context.reference, "element" : vakata_context.element }) : val.label) + (val.shortcut?' <span class="vakata-contextmenu-shortcut vakata-contextmenu-shortcut-'+val.shortcut+'">'+ (val.shortcut_label || '') +'</span>':'') + "<"+"/a>";
                        if(val.submenu) {
                            tmp = $.vakata.context._parse(val.submenu, true);
                            if(tmp) { str += tmp; }
                        }
                        str += "<"+"/li>";
                        if(val.separator_after) {
                            str += "<"+"li class='vakata-context-separator'><"+"a href='#' " + ($.vakata.context.settings.icons ? '' : 'class="vakata-context-no-icons"') + ">&#160;<"+"/a><"+"/li>";
                            sep = true;
                        }
                    });
                    str  = str.replace(/<li class\='vakata-context-separator'\><\/li\>$/,"");
                    if(is_callback) { str += "</ul>"; }
                    /**
                     * triggered on the document when the contextmenu is parsed (HTML is built)
                     * @event
                     * @plugin contextmenu
                     * @name context_parse.vakata
                     * @param {jQuery} reference the element that was right clicked
                     * @param {jQuery} element the DOM element of the menu itself
                     * @param {Object} position the x & y coordinates of the menu
                     */
                    if(!is_callback) { vakata_context.html = str; $.vakata.context._trigger("parse"); }
                    return str.length > 10 ? str : false;
                },
                _show_submenu : function (o) {
                    o = $(o);
                    if(!o.length || !o.children("ul").length) { return; }
                    var e = o.children("ul"),
                        xl = o.offset().left,
                        x = xl + o.outerWidth(),
                        y = o.offset().top,
                        w = e.width(),
                        h = e.height(),
                        dw = $(window).width() + $(window).scrollLeft(),
                        dh = $(window).height() + $(window).scrollTop();
                    // може да се спести е една проверка - дали няма някой от класовете вече нагоре
                    if(right_to_left) {
                        o[x - (w + 10 + o.outerWidth()) < 0 ? "addClass" : "removeClass"]("vakata-context-left");
                    }
                    else {
                        o[x + w > dw  && xl > dw - x ? "addClass" : "removeClass"]("vakata-context-right");
                    }
                    if(y + h + 10 > dh) {
                        e.css("bottom","-1px");
                    }
    
                    //if does not fit - stick it to the side
                    if (o.hasClass('vakata-context-right')) {
                        if (xl < w) {
                            e.css("margin-right", xl - w);
                        }
                    } else {
                        if (dw - x < w) {
                            e.css("margin-left", dw - x - w);
                        }
                    }
    
                    e.show();
                },
                show : function (reference, position, data) {
                    var o, e, x, y, w, h, dw, dh, cond = true;
                    if(vakata_context.element && vakata_context.element.length) {
                        vakata_context.element.width('');
                    }
                    switch(cond) {
                        case (!position && !reference):
                            return false;
                        case (!!position && !!reference):
                            vakata_context.reference	= reference;
                            vakata_context.position_x	= position.x;
                            vakata_context.position_y	= position.y;
                            break;
                        case (!position && !!reference):
                            vakata_context.reference	= reference;
                            o = reference.offset();
                            vakata_context.position_x	= o.left + reference.outerHeight();
                            vakata_context.position_y	= o.top;
                            break;
                        case (!!position && !reference):
                            vakata_context.position_x	= position.x;
                            vakata_context.position_y	= position.y;
                            break;
                    }
                    if(!!reference && !data && $(reference).data('vakata_contextmenu')) {
                        data = $(reference).data('vakata_contextmenu');
                    }
                    if($.vakata.context._parse(data)) {
                        vakata_context.element.html(vakata_context.html);
                    }
                    if(vakata_context.items.length) {
                        vakata_context.element.appendTo(document.body);
                        e = vakata_context.element;
                        x = vakata_context.position_x;
                        y = vakata_context.position_y;
                        w = e.width();
                        h = e.height();
                        dw = $(window).width() + $(window).scrollLeft();
                        dh = $(window).height() + $(window).scrollTop();
                        if(right_to_left) {
                            x -= (e.outerWidth() - $(reference).outerWidth());
                            if(x < $(window).scrollLeft() + 20) {
                                x = $(window).scrollLeft() + 20;
                            }
                        }
                        if(x + w + 20 > dw) {
                            x = dw - (w + 20);
                        }
                        if(y + h + 20 > dh) {
                            y = dh - (h + 20);
                        }
    
                        vakata_context.element
                            .css({ "left" : x, "top" : y })
                            .show()
                            .find('a').first().trigger('focus').parent().addClass("vakata-context-hover");
                        vakata_context.is_visible = true;
                        /**
                         * triggered on the document when the contextmenu is shown
                         * @event
                         * @plugin contextmenu
                         * @name context_show.vakata
                         * @param {jQuery} reference the element that was right clicked
                         * @param {jQuery} element the DOM element of the menu itself
                         * @param {Object} position the x & y coordinates of the menu
                         */
                        $.vakata.context._trigger("show");
                    }
                },
                hide : function () {
                    if(vakata_context.is_visible) {
                        vakata_context.element.hide().find("ul").hide().end().find(':focus').trigger('blur').end().detach();
                        vakata_context.is_visible = false;
                        /**
                         * triggered on the document when the contextmenu is hidden
                         * @event
                         * @plugin contextmenu
                         * @name context_hide.vakata
                         * @param {jQuery} reference the element that was right clicked
                         * @param {jQuery} element the DOM element of the menu itself
                         * @param {Object} position the x & y coordinates of the menu
                         */
                        $.vakata.context._trigger("hide");
                    }
                }
            };
            $(function () {
                right_to_left = $(document.body).css("direction") === "rtl";
                var to = false;
    
                vakata_context.element = $("<ul class='vakata-context'></ul>");
                vakata_context.element
                    .on("mouseenter", "li", function (e) {
                        e.stopImmediatePropagation();
    
                        if($.contains(this, e.relatedTarget)) {
                            // премахнато заради delegate mouseleave по-долу
                            // $(this).find(".vakata-context-hover").removeClass("vakata-context-hover");
                            return;
                        }
    
                        if(to) { clearTimeout(to); }
                        vakata_context.element.find(".vakata-context-hover").removeClass("vakata-context-hover").end();
    
                        $(this)
                            .siblings().find("ul").hide().end().end()
                            .parentsUntil(".vakata-context", "li").addBack().addClass("vakata-context-hover");
                        $.vakata.context._show_submenu(this);
                    })
                    // тестово - дали не натоварва?
                    .on("mouseleave", "li", function (e) {
                        if($.contains(this, e.relatedTarget)) { return; }
                        $(this).find(".vakata-context-hover").addBack().removeClass("vakata-context-hover");
                    })
                    .on("mouseleave", function (e) {
                        $(this).find(".vakata-context-hover").removeClass("vakata-context-hover");
                        if($.vakata.context.settings.hide_onmouseleave) {
                            to = setTimeout(
                                (function (t) {
                                    return function () { $.vakata.context.hide(); };
                                }(this)), $.vakata.context.settings.hide_onmouseleave);
                        }
                    })
                    .on("click", "a", function (e) {
                        e.preventDefault();
                    //})
                    //.on("mouseup", "a", function (e) {
                        if(!$(this).trigger('blur').parent().hasClass("vakata-context-disabled") && $.vakata.context._execute($(this).attr("rel")) !== false) {
                            $.vakata.context.hide();
                        }
                    })
                    .on('keydown', 'a', function (e) {
                            var o = null;
                            switch(e.which) {
                                case 13:
                                case 32:
                                    e.type = "click";
                                    e.preventDefault();
                                    $(e.currentTarget).trigger(e);
                                    break;
                                case 37:
                                    if(vakata_context.is_visible) {
                                        vakata_context.element.find(".vakata-context-hover").last().closest("li").first().find("ul").hide().find(".vakata-context-hover").removeClass("vakata-context-hover").end().end().children('a').trigger('focus');
                                        e.stopImmediatePropagation();
                                        e.preventDefault();
                                    }
                                    break;
                                case 38:
                                    if(vakata_context.is_visible) {
                                        o = vakata_context.element.find("ul:visible").addBack().last().children(".vakata-context-hover").removeClass("vakata-context-hover").prevAll("li:not(.vakata-context-separator)").first();
                                        if(!o.length) { o = vakata_context.element.find("ul:visible").addBack().last().children("li:not(.vakata-context-separator)").last(); }
                                        o.addClass("vakata-context-hover").children('a').trigger('focus');
                                        e.stopImmediatePropagation();
                                        e.preventDefault();
                                    }
                                    break;
                                case 39:
                                    if(vakata_context.is_visible) {
                                        vakata_context.element.find(".vakata-context-hover").last().children("ul").show().children("li:not(.vakata-context-separator)").removeClass("vakata-context-hover").first().addClass("vakata-context-hover").children('a').trigger('focus');
                                        e.stopImmediatePropagation();
                                        e.preventDefault();
                                    }
                                    break;
                                case 40:
                                    if(vakata_context.is_visible) {
                                        o = vakata_context.element.find("ul:visible").addBack().last().children(".vakata-context-hover").removeClass("vakata-context-hover").nextAll("li:not(.vakata-context-separator)").first();
                                        if(!o.length) { o = vakata_context.element.find("ul:visible").addBack().last().children("li:not(.vakata-context-separator)").first(); }
                                        o.addClass("vakata-context-hover").children('a').trigger('focus');
                                        e.stopImmediatePropagation();
                                        e.preventDefault();
                                    }
                                    break;
                                case 27:
                                    $.vakata.context.hide();
                                    e.preventDefault();
                                    break;
                                default:
                                    //console.log(e.which);
                                    break;
                            }
                        })
                    .on('keydown', function (e) {
                        e.preventDefault();
                        var a = vakata_context.element.find('.vakata-contextmenu-shortcut-' + e.which).parent();
                        if(a.parent().not('.vakata-context-disabled')) {
                            a.trigger('click');
                        }
                    });
    
                $(document)
                    .on("mousedown.vakata.jstree", function (e) {
                        if(vakata_context.is_visible && vakata_context.element[0] !== e.target  && !$.contains(vakata_context.element[0], e.target)) {
                            $.vakata.context.hide();
                        }
                    })
                    .on("context_show.vakata.jstree", function (e, data) {
                        vakata_context.element.find("li:has(ul)").children("a").addClass("vakata-context-parent");
                        if(right_to_left) {
                            vakata_context.element.addClass("vakata-context-rtl").css("direction", "rtl");
                        }
                        // also apply a RTL class?
                        vakata_context.element.find("ul").hide().end();
                    });
            });
        }($));
        // $.jstree.defaults.plugins.push("contextmenu");
    
    
    /**
     * ### Drag'n'drop plugin
     *
     * Enables dragging and dropping of nodes in the tree, resulting in a move or copy operations.
     */
    
        /**
         * stores all defaults for the drag'n'drop plugin
         * @name $.jstree.defaults.dnd
         * @plugin dnd
         */
        $.jstree.defaults.dnd = {
            /**
             * a boolean indicating if a copy should be possible while dragging (by pressint the meta key or Ctrl). Defaults to `true`.
             * @name $.jstree.defaults.dnd.copy
             * @plugin dnd
             */
            copy : true,
            /**
             * a number indicating how long a node should remain hovered while dragging to be opened. Defaults to `500`.
             * @name $.jstree.defaults.dnd.open_timeout
             * @plugin dnd
             */
            open_timeout : 500,
            /**
             * a function invoked each time a node is about to be dragged, invoked in the tree's scope and receives the nodes about to be dragged as an argument (array) and the event that started the drag - return `false` to prevent dragging
             * @name $.jstree.defaults.dnd.is_draggable
             * @plugin dnd
             */
            is_draggable : true,
            /**
             * a boolean indicating if checks should constantly be made while the user is dragging the node (as opposed to checking only on drop), default is `true`
             * @name $.jstree.defaults.dnd.check_while_dragging
             * @plugin dnd
             */
            check_while_dragging : true,
            /**
             * a boolean indicating if nodes from this tree should only be copied with dnd (as opposed to moved), default is `false`
             * @name $.jstree.defaults.dnd.always_copy
             * @plugin dnd
             */
            always_copy : false,
            /**
             * when dropping a node "inside", this setting indicates the position the node should go to - it can be an integer or a string: "first" (same as 0) or "last", default is `0`
             * @name $.jstree.defaults.dnd.inside_pos
             * @plugin dnd
             */
            inside_pos : 0,
            /**
             * when starting the drag on a node that is selected this setting controls if all selected nodes are dragged or only the single node, default is `true`, which means all selected nodes are dragged when the drag is started on a selected node
             * @name $.jstree.defaults.dnd.drag_selection
             * @plugin dnd
             */
            drag_selection : true,
            /**
             * controls whether dnd works on touch devices. If left as boolean true dnd will work the same as in desktop browsers, which in some cases may impair scrolling. If set to boolean false dnd will not work on touch devices. There is a special third option - string "selected" which means only selected nodes can be dragged on touch devices.
             * @name $.jstree.defaults.dnd.touch
             * @plugin dnd
             */
            touch : true,
            /**
             * controls whether items can be dropped anywhere on the node, not just on the anchor, by default only the node anchor is a valid drop target. Works best with the wholerow plugin. If enabled on mobile depending on the interface it might be hard for the user to cancel the drop, since the whole tree container will be a valid drop target.
             * @name $.jstree.defaults.dnd.large_drop_target
             * @plugin dnd
             */
            large_drop_target : false,
            /**
             * controls whether a drag can be initiated from any part of the node and not just the text/icon part, works best with the wholerow plugin. Keep in mind it can cause problems with tree scrolling on mobile depending on the interface - in that case set the touch option to "selected".
             * @name $.jstree.defaults.dnd.large_drag_target
             * @plugin dnd
             */
            large_drag_target : false,
            /**
             * controls whether use HTML5 dnd api instead of classical. That will allow better integration of dnd events with other HTML5 controls.
             * @reference http://caniuse.com/#feat=dragndrop
             * @name $.jstree.defaults.dnd.use_html5
             * @plugin dnd
             */
            use_html5: false,
            /**
             * controls whether items can be dropped anywhere on the tree.
             * @name $.jstree.defaults.dnd.blank_space_drop
             * @plugin dnd
             */
            blank_space_drop: false
        };
        var drg, elm;
        // TODO: now check works by checking for each node individually, how about max_children, unique, etc?
        $.jstree.plugins.dnd = function (options, parent) {
            this.init = function (el, options) {
                parent.init.call(this, el, options);
                this.settings.dnd.use_html5 = this.settings.dnd.use_html5 && ('draggable' in document.createElement('span'));
            };
            this.bind = function () {
                parent.bind.call(this);
    
                this.element
                    .on(this.settings.dnd.use_html5 ? 'dragstart.jstree' : 'mousedown.jstree touchstart.jstree', this.settings.dnd.large_drag_target ? '.jstree-node' : '.jstree-anchor', function (e) {
                            if(this.settings.dnd.large_drag_target && $(e.target).closest('.jstree-node')[0] !== e.currentTarget) {
                                return true;
                            }
                            if(e.type === "touchstart" && (!this.settings.dnd.touch || (this.settings.dnd.touch === 'selected' && !$(e.currentTarget).closest('.jstree-node').children('.jstree-anchor').hasClass('jstree-clicked')))) {
                                return true;
                            }
                            var obj = this.get_node(e.target),
                                mlt = this.is_selected(obj) && this.settings.dnd.drag_selection ? this.get_top_selected().length : 1,
                                txt = (mlt > 1 ? mlt + ' ' + this.get_string('nodes') : this.get_text(e.currentTarget));
                            if(this.settings.core.force_text) {
                                txt = $.vakata.html.escape(txt);
                            }
                            if(obj && (obj.id || obj.id === 0) && obj.id !== $.jstree.root && (e.which === 1 || e.type === "touchstart" || e.type === "dragstart") &&
                                (this.settings.dnd.is_draggable === true || ($.vakata.is_function(this.settings.dnd.is_draggable) && this.settings.dnd.is_draggable.call(this, (mlt > 1 ? this.get_top_selected(true) : [obj]), e)))
                            ) {
                                drg = { 'jstree' : true, 'origin' : this, 'obj' : this.get_node(obj,true), 'nodes' : mlt > 1 ? this.get_top_selected() : [obj.id] };
                                elm = e.currentTarget;
                                if (this.settings.dnd.use_html5) {
                                    $.vakata.dnd._trigger('start', e, { 'helper': $(), 'element': elm, 'data': drg });
                                } else {
                                    this.element.trigger('mousedown.jstree');
                                    return $.vakata.dnd.start(e, drg, '<div id="jstree-dnd" class="jstree-' + this.get_theme() + ' jstree-' + this.get_theme() + '-' + this.get_theme_variant() + ' ' + ( this.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ) + '"><i class="jstree-icon jstree-er"></i>' + txt + '<ins class="jstree-copy">+</ins></div>');
                                }
                            }
                        }.bind(this));
                if (this.settings.dnd.use_html5) {
                    this.element
                        .on('dragover.jstree', function (e) {
                                e.preventDefault();
                                $.vakata.dnd._trigger('move', e, { 'helper': $(), 'element': elm, 'data': drg });
                                return false;
                            })
                        //.on('dragenter.jstree', this.settings.dnd.large_drop_target ? '.jstree-node' : '.jstree-anchor', $.proxy(function (e) {
                        //		e.preventDefault();
                        //		$.vakata.dnd._trigger('move', e, { 'helper': $(), 'element': elm, 'data': drg });
                        //		return false;
                        //	}, this))
                        .on('drop.jstree', function (e) {
                                e.preventDefault();
                                $.vakata.dnd._trigger('stop', e, { 'helper': $(), 'element': elm, 'data': drg });
                                return false;
                            }.bind(this));
                }
            };
            this.redraw_node = function(obj, deep, callback, force_render) {
                obj = parent.redraw_node.apply(this, arguments);
                if (obj && this.settings.dnd.use_html5) {
                    if (this.settings.dnd.large_drag_target) {
                        obj.setAttribute('draggable', true);
                    } else {
                        var i, j, tmp = null;
                        for(i = 0, j = obj.childNodes.length; i < j; i++) {
                            if(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf("jstree-anchor") !== -1) {
                                tmp = obj.childNodes[i];
                                break;
                            }
                        }
                        if(tmp) {
                            tmp.setAttribute('draggable', true);
                        }
                    }
                }
                return obj;
            };
        };
    
        $(function() {
            // bind only once for all instances
            var lastmv = false,
                laster = false,
                lastev = false,
                opento = false,
                marker = $('<div id="jstree-marker">&#160;</div>').hide(); //.appendTo('body');
    
            $(document)
                .on('dragover.vakata.jstree', function (e) {
                    if (elm) {
                        $.vakata.dnd._trigger('move', e, { 'helper': $(), 'element': elm, 'data': drg });
                    }
                })
                .on('drop.vakata.jstree', function (e) {
                    if (elm) {
                        $.vakata.dnd._trigger('stop', e, { 'helper': $(), 'element': elm, 'data': drg });
                        elm = null;
                        drg = null;
                    }
                })
                .on('dnd_start.vakata.jstree', function (e, data) {
                    lastmv = false;
                    lastev = false;
                    if(!data || !data.data || !data.data.jstree) { return; }
                    marker.appendTo(document.body); //.show();
                })
                .on('dnd_move.vakata.jstree', function (e, data) {
                    var isDifferentNode = data.event.target !== lastev.target;
                    if(opento) {
                        if (!data.event || data.event.type !== 'dragover' || isDifferentNode) {
                            clearTimeout(opento);
                        }
                    }
                    if(!data || !data.data || !data.data.jstree) { return; }
    
                    // if we are hovering the marker image do nothing (can happen on "inside" drags)
                    if(data.event.target.id && data.event.target.id === 'jstree-marker') {
                        return;
                    }
                    lastev = data.event;
    
                    var ins = $.jstree.reference(data.event.target),
                        ref = false,
                        off = false,
                        rel = false,
                        tmp, l, t, h, p, i, o, ok, t1, t2, op, ps, pr, ip, tm, is_copy, pn, c;
                    // if we are over an instance
                    if(ins && ins._data && ins._data.dnd) {
                        marker.attr('class', 'jstree-' + ins.get_theme() + ( ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ));
                        is_copy = data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)));
                        data.helper
                            .children().attr('class', 'jstree-' + ins.get_theme() + ' jstree-' + ins.get_theme() + '-' + ins.get_theme_variant() + ' ' + ( ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ))
                            .find('.jstree-copy').first()[ is_copy ? 'show' : 'hide' ]();
    
                        // if are hovering the container itself add a new root node
                        //console.log(data.event);
                        if( (data.event.target === ins.element[0] || data.event.target === ins.get_container_ul()[0]) && (ins.get_container_ul().children().length === 0 || ins.settings.dnd.blank_space_drop)) {
                            ok = true;
                            for(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {
                                ok = ok && ins.check( (data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ) ? "copy_node" : "move_node"), (data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1]), $.jstree.root, 'last', { 'dnd' : true, 'ref' : ins.get_node($.jstree.root), 'pos' : 'i', 'origin' : data.data.origin, 'is_multi' : (data.data.origin && data.data.origin !== ins), 'is_foreign' : (!data.data.origin) });
                                if(!ok) { break; }
                            }
                            if(ok) {
                                lastmv = { 'ins' : ins, 'par' : $.jstree.root, 'pos' : 'last' };
                                marker.hide();
                                data.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');
                                if (data.event.originalEvent && data.event.originalEvent.dataTransfer) {
                                    data.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';
                                }
                                return;
                            }
                        }
                        else {
                            // if we are hovering a tree node
                            ref = ins.settings.dnd.large_drop_target ? $(data.event.target).closest('.jstree-node').children('.jstree-anchor') : $(data.event.target).closest('.jstree-anchor');
                            
                            if(ref && ref.length && ref.parent().is('.jstree-closed, .jstree-open, .jstree-leaf')) {
                                off = ref.offset();
                                rel = (data.event.pageY !== undefined ? data.event.pageY : data.event.originalEvent.pageY) - off.top;
                                h = ref.outerHeight();
                                if(rel < h / 3) {
                                    o = ['b', 'i', 'a'];
                                }
                                else if(rel > h - h / 3) {
                                    o = ['a', 'i', 'b'];
                                }
                                else {
                                    o = rel > h / 2 ? ['i', 'a', 'b'] : ['i', 'b', 'a'];
                                }
                                $.each(o, function (j, v) {
                                    switch(v) {
                                        case 'b':
                                            l = off.left - 6;
                                            t = off.top;
                                            p = ins.get_parent(ref);
                                            i = ref.parent().index();
                                            c = 'jstree-below';
                                            break;
                                        case 'i':
                                            ip = ins.settings.dnd.inside_pos;
                                            tm = ins.get_node(ref.parent());
                                            l = off.left - 2;
                                            t = off.top + h / 2 + 1;
                                            p = tm.id;
                                            i = ip === 'first' ? 0 : (ip === 'last' ? tm.children.length : Math.min(ip, tm.children.length));
                                            c = 'jstree-inside';
                                            break;
                                        case 'a':
                                            l = off.left - 6;
                                            t = off.top + h;
                                            p = ins.get_parent(ref);
                                            i = ref.parent().index() + 1;
                                            c = 'jstree-above';
                                            break;
                                    }
                                    ok = true;
                                    for(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {
                                        op = data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey))) ? "copy_node" : "move_node";
                                        ps = i;
                                        if(op === "move_node" && v === 'a' && (data.data.origin && data.data.origin === ins) && p === ins.get_parent(data.data.nodes[t1])) {
                                            pr = ins.get_node(p);
                                            if(ps > $.inArray(data.data.nodes[t1], pr.children)) {
                                                ps -= 1;
                                            }
                                        }
                                        ok = ok && ( (ins && ins.settings && ins.settings.dnd && ins.settings.dnd.check_while_dragging === false) || ins.check(op, (data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1]), p, ps, { 'dnd' : true, 'ref' : ins.get_node(ref.parent()), 'pos' : v, 'origin' : data.data.origin, 'is_multi' : (data.data.origin && data.data.origin !== ins), 'is_foreign' : (!data.data.origin) }) );
                                        if(!ok) {
                                            if(ins && ins.last_error) { laster = ins.last_error(); }
                                            break;
                                        }
                                    }
                                    if(v === 'i' && ref.parent().is('.jstree-closed') && ins.settings.dnd.open_timeout) {
                                        if (!data.event || data.event.type !== 'dragover' || isDifferentNode) {
                                            if (opento) { clearTimeout(opento); }
                                            opento = setTimeout((function (x, z) { return function () { x.open_node(z); }; }(ins, ref)), ins.settings.dnd.open_timeout);
                                        }
                                    }
                                    if(ok) {
                                        pn = ins.get_node(p, true);
                                        if (!pn.hasClass('.jstree-dnd-parent')) {
                                            $('.jstree-dnd-parent').removeClass('jstree-dnd-parent');
                                            pn.addClass('jstree-dnd-parent');
                                        }
                                        lastmv = { 'ins' : ins, 'par' : p, 'pos' : v === 'i' && ip === 'last' && i === 0 && !ins.is_loaded(tm) ? 'last' : i };
                                        marker.css({ 'left' : l + 'px', 'top' : t + 'px' }).show();
                                        marker.removeClass('jstree-above jstree-inside jstree-below').addClass(c);
                                        data.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');
                                        if (data.event.originalEvent && data.event.originalEvent.dataTransfer) {
                                            data.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';
                                        }
                                        laster = {};
                                        o = true;
                                        return false;
                                    }
                                });
                                if(o === true) { return; }
                            }
                        }
                    }
                    $('.jstree-dnd-parent').removeClass('jstree-dnd-parent');
                    lastmv = false;
                    data.helper.find('.jstree-icon').removeClass('jstree-ok').addClass('jstree-er');
                    if (data.event.originalEvent && data.event.originalEvent.dataTransfer) {
                        //data.event.originalEvent.dataTransfer.dropEffect = 'none';
                    }
                    marker.hide();
                })
                .on('dnd_scroll.vakata.jstree', function (e, data) {
                    if(!data || !data.data || !data.data.jstree) { return; }
                    marker.hide();
                    lastmv = false;
                    lastev = false;
                    data.helper.find('.jstree-icon').first().removeClass('jstree-ok').addClass('jstree-er');
                })
                .on('dnd_stop.vakata.jstree', function (e, data) {
                    $('.jstree-dnd-parent').removeClass('jstree-dnd-parent');
                    if(opento) { clearTimeout(opento); }
                    if(!data || !data.data || !data.data.jstree) { return; }
                    marker.hide().detach();
                    var i, j, nodes = [];
                    if(lastmv) {
                        for(i = 0, j = data.data.nodes.length; i < j; i++) {
                            nodes[i] = data.data.origin ? data.data.origin.get_node(data.data.nodes[i]) : data.data.nodes[i];
                        }
                        lastmv.ins[ data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey))) ? 'copy_node' : 'move_node' ](nodes, lastmv.par, lastmv.pos, false, false, false, data.data.origin);
                    }
                    else {
                        i = $(data.event.target).closest('.jstree');
                        if(i.length && laster && laster.error && laster.error === 'check') {
                            i = i.jstree(true);
                            if(i) {
                                i.settings.core.error.call(this, laster);
                            }
                        }
                    }
                    lastev = false;
                    lastmv = false;
                })
                .on('keyup.jstree keydown.jstree', function (e, data) {
                    data = $.vakata.dnd._get();
                    if(data && data.data && data.data.jstree) {
                        if (e.type === "keyup" && e.which === 27) {
                            if (opento) { clearTimeout(opento); }
                            lastmv = false;
                            laster = false;
                            lastev = false;
                            opento = false;
                            marker.hide().detach();
                            $.vakata.dnd._clean();
                        } else {
                            data.helper.find('.jstree-copy').first()[ data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (e.metaKey || e.ctrlKey))) ? 'show' : 'hide' ]();
                            if(lastev) {
                                lastev.metaKey = e.metaKey;
                                lastev.ctrlKey = e.ctrlKey;
                                $.vakata.dnd._trigger('move', lastev);
                            }
                        }
                    }
                });
        });
    
        // helpers
        (function ($) {
            $.vakata.html = {
                div : $('<div></div>'),
                escape : function (str) {
                    return $.vakata.html.div.text(str).html();
                },
                strip : function (str) {
                    return $.vakata.html.div.empty().append($.parseHTML(str)).text();
                }
            };
            // private variable
            var vakata_dnd = {
                element	: false,
                target	: false,
                is_down	: false,
                is_drag	: false,
                helper	: false,
                helper_w: 0,
                data	: false,
                init_x	: 0,
                init_y	: 0,
                scroll_l: 0,
                scroll_t: 0,
                scroll_e: false,
                scroll_i: false,
                is_touch: false
            };
            $.vakata.dnd = {
                settings : {
                    scroll_speed		: 10,
                    scroll_proximity	: 20,
                    helper_left			: 5,
                    helper_top			: 10,
                    threshold			: 5,
                    threshold_touch		: 10
                },
                _trigger : function (event_name, e, data) {
                    if (data === undefined) {
                        data = $.vakata.dnd._get();
                    }
                    data.event = e;
                    $(document).triggerHandler("dnd_" + event_name + ".vakata", data);
                },
                _get : function () {
                    return {
                        "data"		: vakata_dnd.data,
                        "element"	: vakata_dnd.element,
                        "helper"	: vakata_dnd.helper
                    };
                },
                _clean : function () {
                    if(vakata_dnd.helper) { vakata_dnd.helper.remove(); }
                    if(vakata_dnd.scroll_i) { clearInterval(vakata_dnd.scroll_i); vakata_dnd.scroll_i = false; }
                    vakata_dnd = {
                        element	: false,
                        target	: false,
                        is_down	: false,
                        is_drag	: false,
                        helper	: false,
                        helper_w: 0,
                        data	: false,
                        init_x	: 0,
                        init_y	: 0,
                        scroll_l: 0,
                        scroll_t: 0,
                        scroll_e: false,
                        scroll_i: false,
                        is_touch: false
                    };
                    elm = null;
                    $(document).off("mousemove.vakata.jstree touchmove.vakata.jstree", $.vakata.dnd.drag);
                    $(document).off("mouseup.vakata.jstree touchend.vakata.jstree", $.vakata.dnd.stop);
                },
                _scroll : function (init_only) {
                    if(!vakata_dnd.scroll_e || (!vakata_dnd.scroll_l && !vakata_dnd.scroll_t)) {
                        if(vakata_dnd.scroll_i) { clearInterval(vakata_dnd.scroll_i); vakata_dnd.scroll_i = false; }
                        return false;
                    }
                    if(!vakata_dnd.scroll_i) {
                        vakata_dnd.scroll_i = setInterval($.vakata.dnd._scroll, 100);
                        return false;
                    }
                    if(init_only === true) { return false; }
    
                    var i = vakata_dnd.scroll_e.scrollTop(),
                        j = vakata_dnd.scroll_e.scrollLeft();
                    vakata_dnd.scroll_e.scrollTop(i + vakata_dnd.scroll_t * $.vakata.dnd.settings.scroll_speed);
                    vakata_dnd.scroll_e.scrollLeft(j + vakata_dnd.scroll_l * $.vakata.dnd.settings.scroll_speed);
                    if(i !== vakata_dnd.scroll_e.scrollTop() || j !== vakata_dnd.scroll_e.scrollLeft()) {
                        /**
                         * triggered on the document when a drag causes an element to scroll
                         * @event
                         * @plugin dnd
                         * @name dnd_scroll.vakata
                         * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start
                         * @param {DOM} element the DOM element being dragged
                         * @param {jQuery} helper the helper shown next to the mouse
                         * @param {jQuery} event the element that is scrolling
                         */
                        $.vakata.dnd._trigger("scroll", vakata_dnd.scroll_e);
                    }
                },
                start : function (e, data, html) {
                    if(e.type === "touchstart" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {
                        e.pageX = e.originalEvent.changedTouches[0].pageX;
                        e.pageY = e.originalEvent.changedTouches[0].pageY;
                        e.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);
                    }
                    if(vakata_dnd.is_drag) { $.vakata.dnd.stop({}); }
                    try {
                        e.currentTarget.unselectable = "on";
                        e.currentTarget.onselectstart = function() { return false; };
                        if(e.currentTarget.style) {
                            e.currentTarget.style.touchAction = "none";
                            e.currentTarget.style.msTouchAction = "none";
                            e.currentTarget.style.MozUserSelect = "none";
                        }
                    } catch(ignore) { }
                    vakata_dnd.init_x	= e.pageX;
                    vakata_dnd.init_y	= e.pageY;
                    vakata_dnd.data		= data;
                    vakata_dnd.is_down	= true;
                    vakata_dnd.element	= e.currentTarget;
                    vakata_dnd.target	= e.target;
                    vakata_dnd.is_touch	= e.type === "touchstart";
                    if(html !== false) {
                        vakata_dnd.helper = $("<div id='vakata-dnd'></div>").html(html).css({
                            "display"		: "block",
                            "margin"		: "0",
                            "padding"		: "0",
                            "position"		: "absolute",
                            "top"			: "-2000px",
                            "lineHeight"	: "16px",
                            "zIndex"		: "10000"
                        });
                    }
                    $(document).on("mousemove.vakata.jstree touchmove.vakata.jstree", $.vakata.dnd.drag);
                    $(document).on("mouseup.vakata.jstree touchend.vakata.jstree", $.vakata.dnd.stop);
                    return false;
                },
                drag : function (e) {
                    if(e.type === "touchmove" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {
                        e.pageX = e.originalEvent.changedTouches[0].pageX;
                        e.pageY = e.originalEvent.changedTouches[0].pageY;
                        e.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);
                    }
                    if(!vakata_dnd.is_down) { return; }
                    if(!vakata_dnd.is_drag) {
                        if(
                            Math.abs(e.pageX - vakata_dnd.init_x) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold) ||
                            Math.abs(e.pageY - vakata_dnd.init_y) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold)
                        ) {
                            if(vakata_dnd.helper) {
                                vakata_dnd.helper.appendTo(document.body);
                                vakata_dnd.helper_w = vakata_dnd.helper.outerWidth();
                            }
                            vakata_dnd.is_drag = true;
                            $(vakata_dnd.target).one('click.vakata', false);
                            /**
                             * triggered on the document when a drag starts
                             * @event
                             * @plugin dnd
                             * @name dnd_start.vakata
                             * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start
                             * @param {DOM} element the DOM element being dragged
                             * @param {jQuery} helper the helper shown next to the mouse
                             * @param {Object} event the event that caused the start (probably mousemove)
                             */
                            $.vakata.dnd._trigger("start", e);
                        }
                        else { return; }
                    }
    
                    var d  = false, w  = false,
                        dh = false, wh = false,
                        dw = false, ww = false,
                        dt = false, dl = false,
                        ht = false, hl = false;
    
                    vakata_dnd.scroll_t = 0;
                    vakata_dnd.scroll_l = 0;
                    vakata_dnd.scroll_e = false;
                    $($(e.target).parentsUntil("body").addBack().get().reverse())
                        .filter(function () {
                            return	this.ownerDocument && (/^auto|scroll$/).test($(this).css("overflow")) &&
                                    (this.scrollHeight > this.offsetHeight || this.scrollWidth > this.offsetWidth);
                        })
                        .each(function () {
                            var t = $(this), o = t.offset();
                            if(this.scrollHeight > this.offsetHeight) {
                                if(o.top + t.height() - e.pageY < $.vakata.dnd.settings.scroll_proximity)	{ vakata_dnd.scroll_t = 1; }
                                if(e.pageY - o.top < $.vakata.dnd.settings.scroll_proximity)				{ vakata_dnd.scroll_t = -1; }
                            }
                            if(this.scrollWidth > this.offsetWidth) {
                                if(o.left + t.width() - e.pageX < $.vakata.dnd.settings.scroll_proximity)	{ vakata_dnd.scroll_l = 1; }
                                if(e.pageX - o.left < $.vakata.dnd.settings.scroll_proximity)				{ vakata_dnd.scroll_l = -1; }
                            }
                            if(vakata_dnd.scroll_t || vakata_dnd.scroll_l) {
                                vakata_dnd.scroll_e = $(this);
                                return false;
                            }
                        });
    
                    if(!vakata_dnd.scroll_e) {
                        d  = $(document); w = $(window);
                        dh = d.height(); wh = w.height();
                        dw = d.width(); ww = w.width();
                        dt = d.scrollTop(); dl = d.scrollLeft();
                        if(dh > wh && e.pageY - dt < $.vakata.dnd.settings.scroll_proximity)		{ vakata_dnd.scroll_t = -1;  }
                        if(dh > wh && wh - (e.pageY - dt) < $.vakata.dnd.settings.scroll_proximity)	{ vakata_dnd.scroll_t = 1; }
                        if(dw > ww && e.pageX - dl < $.vakata.dnd.settings.scroll_proximity)		{ vakata_dnd.scroll_l = -1; }
                        if(dw > ww && ww - (e.pageX - dl) < $.vakata.dnd.settings.scroll_proximity)	{ vakata_dnd.scroll_l = 1; }
                        if(vakata_dnd.scroll_t || vakata_dnd.scroll_l) {
                            vakata_dnd.scroll_e = d;
                        }
                    }
                    if(vakata_dnd.scroll_e) { $.vakata.dnd._scroll(true); }
    
                    if(vakata_dnd.helper) {
                        ht = parseInt(e.pageY + $.vakata.dnd.settings.helper_top, 10);
                        hl = parseInt(e.pageX + $.vakata.dnd.settings.helper_left, 10);
                        if(dh && ht + 25 > dh) { ht = dh - 50; }
                        if(dw && hl + vakata_dnd.helper_w > dw) { hl = dw - (vakata_dnd.helper_w + 2); }
                        vakata_dnd.helper.css({
                            left	: hl + "px",
                            top		: ht + "px"
                        });
                    }
                    /**
                     * triggered on the document when a drag is in progress
                     * @event
                     * @plugin dnd
                     * @name dnd_move.vakata
                     * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start
                     * @param {DOM} element the DOM element being dragged
                     * @param {jQuery} helper the helper shown next to the mouse
                     * @param {Object} event the event that caused this to trigger (most likely mousemove)
                     */
                    $.vakata.dnd._trigger("move", e);
                    return false;
                },
                stop : function (e) {
                    if(e.type === "touchend" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {
                        e.pageX = e.originalEvent.changedTouches[0].pageX;
                        e.pageY = e.originalEvent.changedTouches[0].pageY;
                        e.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);
                    }
                    if(vakata_dnd.is_drag) {
                        /**
                         * triggered on the document when a drag stops (the dragged element is dropped)
                         * @event
                         * @plugin dnd
                         * @name dnd_stop.vakata
                         * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start
                         * @param {DOM} element the DOM element being dragged
                         * @param {jQuery} helper the helper shown next to the mouse
                         * @param {Object} event the event that caused the stop
                         */
                        if (e.target !== vakata_dnd.target) {
                            $(vakata_dnd.target).off('click.vakata');
                        }
                        $.vakata.dnd._trigger("stop", e);
                    }
                    else {
                        if(e.type === "touchend" && e.target === vakata_dnd.target) {
                            var to = setTimeout(function () { $(e.target).trigger('click'); }, 100);
                            $(e.target).one('click', function() { if(to) { clearTimeout(to); } });
                        }
                    }
                    $.vakata.dnd._clean();
                    return false;
                }
            };
        }($));
    
        // include the dnd plugin by default
        // $.jstree.defaults.plugins.push("dnd");
    
    
    /**
     * ### Massload plugin
     *
     * Adds massload functionality to jsTree, so that multiple nodes can be loaded in a single request (only useful with lazy loading).
     */
    
        /**
         * massload configuration
         *
         * It is possible to set this to a standard jQuery-like AJAX config.
         * In addition to the standard jQuery ajax options here you can supply functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node IDs need to be loaded, the return value of those functions will be used.
         *
         * You can also set this to a function, that function will receive the node IDs being loaded as argument and a second param which is a function (callback) which should be called with the result.
         *
         * Both the AJAX and the function approach rely on the same return value - an object where the keys are the node IDs, and the value is the children of that node as an array.
         *
         *	{
         *		"id1" : [{ "text" : "Child of ID1", "id" : "c1" }, { "text" : "Another child of ID1", "id" : "c2" }],
         *		"id2" : [{ "text" : "Child of ID2", "id" : "c3" }]
         *	}
         * 
         * @name $.jstree.defaults.massload
         * @plugin massload
         */
        $.jstree.defaults.massload = null;
        $.jstree.plugins.massload = function (options, parent) {
            this.init = function (el, options) {
                this._data.massload = {};
                parent.init.call(this, el, options);
            };
            this._load_nodes = function (nodes, callback, is_callback, force_reload) {
                var s = this.settings.massload,				
                    toLoad = [],
                    m = this._model.data,
                    i, j, dom;
                if (!is_callback) {
                    for(i = 0, j = nodes.length; i < j; i++) {
                        if(!m[nodes[i]] || ( (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed) || force_reload) ) {
                            toLoad.push(nodes[i]);
                            dom = this.get_node(nodes[i], true);
                            if (dom && dom.length) {
                                dom.addClass("jstree-loading").attr('aria-busy',true);
                            }
                        }
                    }
                    this._data.massload = {};
                    if (toLoad.length) {
                        if($.vakata.is_function(s)) {
                            return s.call(this, toLoad, function (data) {
                                var i, j;
                                if(data) {
                                    for(i in data) {
                                        if(data.hasOwnProperty(i)) {
                                            this._data.massload[i] = data[i];
                                        }
                                    }
                                }
                                for(i = 0, j = nodes.length; i < j; i++) {
                                    dom = this.get_node(nodes[i], true);
                                    if (dom && dom.length) {
                                        dom.removeClass("jstree-loading").attr('aria-busy',false);
                                    }
                                }
                                parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
                            }.bind(this));
                        }
                        if(typeof s === 'object' && s && s.url) {
                            s = $.extend(true, {}, s);
                            if($.vakata.is_function(s.url)) {
                                s.url = s.url.call(this, toLoad);
                            }
                            if($.vakata.is_function(s.data)) {
                                s.data = s.data.call(this, toLoad);
                            }
                            return $.ajax(s)
                                .done(function (data,t,x) {
                                        var i, j;
                                        if(data) {
                                            for(i in data) {
                                                if(data.hasOwnProperty(i)) {
                                                    this._data.massload[i] = data[i];
                                                }
                                            }
                                        }
                                        for(i = 0, j = nodes.length; i < j; i++) {
                                            dom = this.get_node(nodes[i], true);
                                            if (dom && dom.length) {
                                                dom.removeClass("jstree-loading").attr('aria-busy',false);
                                            }
                                        }
                                        parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
                                    }.bind(this))
                                .fail(function (f) {
                                        parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
                                    }.bind(this));
                        }
                    }
                }
                return parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
            };
            this._load_node = function (obj, callback) {
                var data = this._data.massload[obj.id],
                    rslt = null, dom;
                if(data) {
                    rslt = this[typeof data === 'string' ? '_append_html_data' : '_append_json_data'](
                        obj,
                        typeof data === 'string' ? $($.parseHTML(data)).filter(function () { return this.nodeType !== 3; }) : data,
                        function (status) { callback.call(this, status); }
                    );
                    dom = this.get_node(obj.id, true);
                    if (dom && dom.length) {
                        dom.removeClass("jstree-loading").attr('aria-busy',false);
                    }
                    delete this._data.massload[obj.id];
                    return rslt;
                }
                return parent._load_node.call(this, obj, callback);
            };
        };
    
    
    /**
     * ### Search plugin
     *
     * Adds search functionality to jsTree.
     */
    
        /**
         * stores all defaults for the search plugin
         * @name $.jstree.defaults.search
         * @plugin search
         */
        $.jstree.defaults.search = {
            /**
             * a jQuery-like AJAX config, which jstree uses if a server should be queried for results.
             *
             * A `str` (which is the search string) parameter will be added with the request, an optional `inside` parameter will be added if the search is limited to a node id. The expected result is a JSON array with nodes that need to be opened so that matching nodes will be revealed.
             * Leave this setting as `false` to not query the server. You can also set this to a function, which will be invoked in the instance's scope and receive 3 parameters - the search string, the callback to call with the array of nodes to load, and the optional node ID to limit the search to
             * @name $.jstree.defaults.search.ajax
             * @plugin search
             */
            ajax : false,
            /**
             * Indicates if the search should be fuzzy or not (should `chnd3` match `child node 3`). Default is `false`.
             * @name $.jstree.defaults.search.fuzzy
             * @plugin search
             */
            fuzzy : false,
            /**
             * Indicates if the search should be case sensitive. Default is `false`.
             * @name $.jstree.defaults.search.case_sensitive
             * @plugin search
             */
            case_sensitive : false,
            /**
             * Indicates if the tree should be filtered (by default) to show only matching nodes (keep in mind this can be a heavy on large trees in old browsers).
             * This setting can be changed at runtime when calling the search method. Default is `false`.
             * @name $.jstree.defaults.search.show_only_matches
             * @plugin search
             */
            show_only_matches : false,
            /**
             * Indicates if the children of matched element are shown (when show_only_matches is true)
             * This setting can be changed at runtime when calling the search method. Default is `false`.
             * @name $.jstree.defaults.search.show_only_matches_children
             * @plugin search
             */
            show_only_matches_children : false,
            /**
             * Indicates if all nodes opened to reveal the search result, should be closed when the search is cleared or a new search is performed. Default is `true`.
             * @name $.jstree.defaults.search.close_opened_onclear
             * @plugin search
             */
            close_opened_onclear : true,
            /**
             * Indicates if only leaf nodes should be included in search results. Default is `false`.
             * @name $.jstree.defaults.search.search_leaves_only
             * @plugin search
             */
            search_leaves_only : false,
            /**
             * If set to a function it wil be called in the instance's scope with two arguments - search string and node (where node will be every node in the structure, so use with caution).
             * If the function returns a truthy value the node will be considered a match (it might not be displayed if search_only_leaves is set to true and the node is not a leaf). Default is `false`.
             * @name $.jstree.defaults.search.search_callback
             * @plugin search
             */
            search_callback : false
        };
    
        $.jstree.plugins.search = function (options, parent) {
            this.bind = function () {
                parent.bind.call(this);
    
                this._data.search.str = "";
                this._data.search.dom = $();
                this._data.search.res = [];
                this._data.search.opn = [];
                this._data.search.som = false;
                this._data.search.smc = false;
                this._data.search.hdn = [];
    
                this.element
                    .on("search.jstree", function (e, data) {
                            if(this._data.search.som && data.res.length) {
                                var m = this._model.data, i, j, p = [], k, l;
                                for(i = 0, j = data.res.length; i < j; i++) {
                                    if(m[data.res[i]] && !m[data.res[i]].state.hidden) {
                                        p.push(data.res[i]);
                                        p = p.concat(m[data.res[i]].parents);
                                        if(this._data.search.smc) {
                                            for (k = 0, l = m[data.res[i]].children_d.length; k < l; k++) {
                                                if (m[m[data.res[i]].children_d[k]] && !m[m[data.res[i]].children_d[k]].state.hidden) {
                                                    p.push(m[data.res[i]].children_d[k]);
                                                }
                                            }
                                        }
                                    }
                                }
                                p = $.vakata.array_remove_item($.vakata.array_unique(p), $.jstree.root);
                                this._data.search.hdn = this.hide_all(true);
                                this.show_node(p, true);
                                this.redraw(true);
                            }
                        }.bind(this))
                    .on("clear_search.jstree", function (e, data) {
                            if(this._data.search.som && data.res.length) {
                                this.show_node(this._data.search.hdn, true);
                                this.redraw(true);
                            }
                        }.bind(this));
            };
            /**
             * used to search the tree nodes for a given string
             * @name search(str [, skip_async])
             * @param {String} str the search string
             * @param {Boolean} skip_async if set to true server will not be queried even if configured
             * @param {Boolean} show_only_matches if set to true only matching nodes will be shown (keep in mind this can be very slow on large trees or old browsers)
             * @param {mixed} inside an optional node to whose children to limit the search
             * @param {Boolean} append if set to true the results of this search are appended to the previous search
             * @plugin search
             * @trigger search.jstree
             */
            this.search = function (str, skip_async, show_only_matches, inside, append, show_only_matches_children) {
                if(str === false || $.vakata.trim(str.toString()) === "") {
                    return this.clear_search();
                }
                inside = this.get_node(inside);
                inside = inside && (inside.id || inside.id === 0) ? inside.id : null;
                str = str.toString();
                var s = this.settings.search,
                    a = s.ajax ? s.ajax : false,
                    m = this._model.data,
                    f = null,
                    r = [],
                    p = [], i, j;
                if(this._data.search.res.length && !append) {
                    this.clear_search();
                }
                if(show_only_matches === undefined) {
                    show_only_matches = s.show_only_matches;
                }
                if(show_only_matches_children === undefined) {
                    show_only_matches_children = s.show_only_matches_children;
                }
                if(!skip_async && a !== false) {
                    if($.vakata.is_function(a)) {
                        return a.call(this, str, function (d) {
                                if(d && d.d) { d = d.d; }
                                this._load_nodes(!$.vakata.is_array(d) ? [] : $.vakata.array_unique(d), function () {
                                    this.search(str, true, show_only_matches, inside, append, show_only_matches_children);
                                });
                            }.bind(this), inside);
                    }
                    else {
                        a = $.extend({}, a);
                        if(!a.data) { a.data = {}; }
                        a.data.str = str;
                        if(inside) {
                            a.data.inside = inside;
                        }
                        if (this._data.search.lastRequest) {
                            this._data.search.lastRequest.abort();
                        }
                        this._data.search.lastRequest = $.ajax(a)
                            .fail(function () {
                                this._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'search', 'id' : 'search_01', 'reason' : 'Could not load search parents', 'data' : JSON.stringify(a) };
                                this.settings.core.error.call(this, this._data.core.last_error);
                            }.bind(this))
                            .done(function (d) {
                                if(d && d.d) { d = d.d; }
                                this._load_nodes(!$.vakata.is_array(d) ? [] : $.vakata.array_unique(d), function () {
                                    this.search(str, true, show_only_matches, inside, append, show_only_matches_children);
                                });
                            }.bind(this));
                        return this._data.search.lastRequest;
                    }
                }
                if(!append) {
                    this._data.search.str = str;
                    this._data.search.dom = $();
                    this._data.search.res = [];
                    this._data.search.opn = [];
                    this._data.search.som = show_only_matches;
                    this._data.search.smc = show_only_matches_children;
                }
    
                f = new $.vakata.search(str, true, { caseSensitive : s.case_sensitive, fuzzy : s.fuzzy });
                $.each(m[inside ? inside : $.jstree.root].children_d, function (ii, i) {
                    var v = m[i];
                    if(v.text && !v.state.hidden && (!s.search_leaves_only || (v.state.loaded && v.children.length === 0)) && ( (s.search_callback && s.search_callback.call(this, str, v)) || (!s.search_callback && f.search(v.text).isMatch) ) ) {
                        r.push(i);
                        p = p.concat(v.parents);
                    }
                });
                if(r.length) {
                    p = $.vakata.array_unique(p);
                    for(i = 0, j = p.length; i < j; i++) {
                        if(p[i] !== $.jstree.root && m[p[i]] && this.open_node(p[i], null, 0) === true) {
                            this._data.search.opn.push(p[i]);
                        }
                    }
                    if(!append) {
                        this._data.search.dom = $(this.element[0].querySelectorAll('#' + $.map(r, function (v) { return "0123456789".indexOf(v[0]) !== -1 ? '\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\$&') : v.replace($.jstree.idregex,'\\$&'); }).join(', #')));
                        this._data.search.res = r;
                    }
                    else {
                        this._data.search.dom = this._data.search.dom.add($(this.element[0].querySelectorAll('#' + $.map(r, function (v) { return "0123456789".indexOf(v[0]) !== -1 ? '\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\$&') : v.replace($.jstree.idregex,'\\$&'); }).join(', #'))));
                        this._data.search.res = $.vakata.array_unique(this._data.search.res.concat(r));
                    }
                    this._data.search.dom.children(".jstree-anchor").addClass('jstree-search');
                }
                /**
                 * triggered after search is complete
                 * @event
                 * @name search.jstree
                 * @param {jQuery} nodes a jQuery collection of matching nodes
                 * @param {String} str the search string
                 * @param {Array} res a collection of objects represeing the matching nodes
                 * @plugin search
                 */
                this.trigger('search', { nodes : this._data.search.dom, str : str, res : this._data.search.res, show_only_matches : show_only_matches });
            };
            /**
             * used to clear the last search (removes classes and shows all nodes if filtering is on)
             * @name clear_search()
             * @plugin search
             * @trigger clear_search.jstree
             */
            this.clear_search = function () {
                if(this.settings.search.close_opened_onclear) {
                    this.close_node(this._data.search.opn, 0);
                }
                /**
                 * triggered after search is complete
                 * @event
                 * @name clear_search.jstree
                 * @param {jQuery} nodes a jQuery collection of matching nodes (the result from the last search)
                 * @param {String} str the search string (the last search string)
                 * @param {Array} res a collection of objects represeing the matching nodes (the result from the last search)
                 * @plugin search
                 */
                this.trigger('clear_search', { 'nodes' : this._data.search.dom, str : this._data.search.str, res : this._data.search.res });
                if(this._data.search.res.length) {
                    this._data.search.dom = $(this.element[0].querySelectorAll('#' + $.map(this._data.search.res, function (v) {
                        return "0123456789".indexOf(v[0]) !== -1 ? '\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\$&') : v.replace($.jstree.idregex,'\\$&');
                    }).join(', #')));
                    this._data.search.dom.children(".jstree-anchor").removeClass("jstree-search");
                }
                this._data.search.str = "";
                this._data.search.res = [];
                this._data.search.opn = [];
                this._data.search.dom = $();
            };
    
            this.redraw_node = function(obj, deep, callback, force_render) {
                obj = parent.redraw_node.apply(this, arguments);
                if(obj) {
                    if($.inArray(obj.id, this._data.search.res) !== -1) {
                        var i, j, tmp = null;
                        for(i = 0, j = obj.childNodes.length; i < j; i++) {
                            if(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf("jstree-anchor") !== -1) {
                                tmp = obj.childNodes[i];
                                break;
                            }
                        }
                        if(tmp) {
                            tmp.className += ' jstree-search';
                        }
                    }
                }
                return obj;
            };
        };
    
        // helpers
        (function ($) {
            // from http://kiro.me/projects/fuse.html
            $.vakata.search = function(pattern, txt, options) {
                options = options || {};
                options = $.extend({}, $.vakata.search.defaults, options);
                if(options.fuzzy !== false) {
                    options.fuzzy = true;
                }
                pattern = options.caseSensitive ? pattern : pattern.toLowerCase();
                var MATCH_LOCATION	= options.location,
                    MATCH_DISTANCE	= options.distance,
                    MATCH_THRESHOLD	= options.threshold,
                    patternLen = pattern.length,
                    matchmask, pattern_alphabet, match_bitapScore, search;
                if(patternLen > 32) {
                    options.fuzzy = false;
                }
                if(options.fuzzy) {
                    matchmask = 1 << (patternLen - 1);
                    pattern_alphabet = (function () {
                        var mask = {},
                            i = 0;
                        for (i = 0; i < patternLen; i++) {
                            mask[pattern.charAt(i)] = 0;
                        }
                        for (i = 0; i < patternLen; i++) {
                            mask[pattern.charAt(i)] |= 1 << (patternLen - i - 1);
                        }
                        return mask;
                    }());
                    match_bitapScore = function (e, x) {
                        var accuracy = e / patternLen,
                            proximity = Math.abs(MATCH_LOCATION - x);
                        if(!MATCH_DISTANCE) {
                            return proximity ? 1.0 : accuracy;
                        }
                        return accuracy + (proximity / MATCH_DISTANCE);
                    };
                }
                search = function (text) {
                    text = options.caseSensitive ? text.toString() : text.toString().toLowerCase();
                    if(pattern === text || text.indexOf(pattern) !== -1) {
                        return {
                            isMatch: true,
                            score: 0
                        };
                    }
                    if(!options.fuzzy) {
                        return {
                            isMatch: false,
                            score: 1
                        };
                    }
                    var i, j,
                        textLen = text.length,
                        scoreThreshold = MATCH_THRESHOLD,
                        bestLoc = text.indexOf(pattern, MATCH_LOCATION),
                        binMin, binMid,
                        binMax = patternLen + textLen,
                        lastRd, start, finish, rd, charMatch,
                        score = 1,
                        locations = [];
                    if (bestLoc !== -1) {
                        scoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);
                        bestLoc = text.lastIndexOf(pattern, MATCH_LOCATION + patternLen);
                        if (bestLoc !== -1) {
                            scoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);
                        }
                    }
                    bestLoc = -1;
                    for (i = 0; i < patternLen; i++) {
                        binMin = 0;
                        binMid = binMax;
                        while (binMin < binMid) {
                            if (match_bitapScore(i, MATCH_LOCATION + binMid) <= scoreThreshold) {
                                binMin = binMid;
                            } else {
                                binMax = binMid;
                            }
                            binMid = Math.floor((binMax - binMin) / 2 + binMin);
                        }
                        binMax = binMid;
                        start = Math.max(1, MATCH_LOCATION - binMid + 1);
                        finish = Math.min(MATCH_LOCATION + binMid, textLen) + patternLen;
                        rd = new Array(finish + 2);
                        rd[finish + 1] = (1 << i) - 1;
                        for (j = finish; j >= start; j--) {
                            charMatch = pattern_alphabet[text.charAt(j - 1)];
                            if (i === 0) {
                                rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;
                            } else {
                                rd[j] = ((rd[j + 1] << 1) | 1) & charMatch | (((lastRd[j + 1] | lastRd[j]) << 1) | 1) | lastRd[j + 1];
                            }
                            if (rd[j] & matchmask) {
                                score = match_bitapScore(i, j - 1);
                                if (score <= scoreThreshold) {
                                    scoreThreshold = score;
                                    bestLoc = j - 1;
                                    locations.push(bestLoc);
                                    if (bestLoc > MATCH_LOCATION) {
                                        start = Math.max(1, 2 * MATCH_LOCATION - bestLoc);
                                    } else {
                                        break;
                                    }
                                }
                            }
                        }
                        if (match_bitapScore(i + 1, MATCH_LOCATION) > scoreThreshold) {
                            break;
                        }
                        lastRd = rd;
                    }
                    return {
                        isMatch: bestLoc >= 0,
                        score: score
                    };
                };
                return txt === true ? { 'search' : search } : search(txt);
            };
            $.vakata.search.defaults = {
                location : 0,
                distance : 100,
                threshold : 0.6,
                fuzzy : false,
                caseSensitive : false
            };
        }($));
    
        // include the search plugin by default
        // $.jstree.defaults.plugins.push("search");
    
    
    /**
     * ### Sort plugin
     *
     * Automatically sorts all siblings in the tree according to a sorting function.
     */
    
        /**
         * the settings function used to sort the nodes.
         * It is executed in the tree's context, accepts two nodes as arguments and should return `1` or `-1`.
         * @name $.jstree.defaults.sort
         * @plugin sort
         */
        $.jstree.defaults.sort = function (a, b) {
            //return this.get_type(a) === this.get_type(b) ? (this.get_text(a) > this.get_text(b) ? 1 : -1) : this.get_type(a) >= this.get_type(b);
            return this.get_text(a) > this.get_text(b) ? 1 : -1;
        };
        $.jstree.plugins.sort = function (options, parent) {
            this.bind = function () {
                parent.bind.call(this);
                this.element
                    .on("model.jstree", function (e, data) {
                            this.sort(data.parent, true);
                        }.bind(this))
                    .on("rename_node.jstree create_node.jstree", function (e, data) {
                            this.sort(data.parent || data.node.parent, false);
                            this.redraw_node(data.parent || data.node.parent, true);
                        }.bind(this))
                    .on("move_node.jstree copy_node.jstree", function (e, data) {
                            this.sort(data.parent, false);
                            this.redraw_node(data.parent, true);
                        }.bind(this));
            };
            /**
             * used to sort a node's children
             * @private
             * @name sort(obj [, deep])
             * @param  {mixed} obj the node
             * @param {Boolean} deep if set to `true` nodes are sorted recursively.
             * @plugin sort
             * @trigger search.jstree
             */
            this.sort = function (obj, deep) {
                var i, j;
                obj = this.get_node(obj);
                if(obj && obj.children && obj.children.length) {
                    obj.children.sort(this.settings.sort.bind(this));
                    if(deep) {
                        for(i = 0, j = obj.children_d.length; i < j; i++) {
                            this.sort(obj.children_d[i], false);
                        }
                    }
                }
            };
        };
    
        // include the sort plugin by default
        // $.jstree.defaults.plugins.push("sort");
    
    /**
     * ### State plugin
     *
     * Saves the state of the tree (selected nodes, opened nodes) on the user's computer using available options (localStorage, cookies, etc)
     */
    
        var to = false;
        /**
         * stores all defaults for the state plugin
         * @name $.jstree.defaults.state
         * @plugin state
         */
        $.jstree.defaults.state = {
            /**
             * A string for the key to use when saving the current tree (change if using multiple trees in your project). Defaults to `jstree`.
             * @name $.jstree.defaults.state.key
             * @plugin state
             */
            key		: 'jstree',
            /**
             * A space separated list of events that trigger a state save. Defaults to `changed.jstree open_node.jstree close_node.jstree`.
             * @name $.jstree.defaults.state.events
             * @plugin state
             */
            events	: 'changed.jstree open_node.jstree close_node.jstree check_node.jstree uncheck_node.jstree',
            /**
             * Time in milliseconds after which the state will expire. Defaults to 'false' meaning - no expire.
             * @name $.jstree.defaults.state.ttl
             * @plugin state
             */
            ttl		: false,
            /**
             * A function that will be executed prior to restoring state with one argument - the state object. Can be used to clear unwanted parts of the state.
             * @name $.jstree.defaults.state.filter
             * @plugin state
             */
            filter	: false,
            /**
             * Should loaded nodes be restored (setting this to true means that it is possible that the whole tree will be loaded for some users - use with caution). Defaults to `false`
             * @name $.jstree.defaults.state.preserve_loaded
             * @plugin state
             */
            preserve_loaded : false
        };
        $.jstree.plugins.state = function (options, parent) {
            this.bind = function () {
                parent.bind.call(this);
                var bind = function () {
                    this.element.on(this.settings.state.events, function () {
                        if(to) { clearTimeout(to); }
                        to = setTimeout(function () { this.save_state(); }.bind(this), 100);
                    }.bind(this));
                    /**
                     * triggered when the state plugin is finished restoring the state (and immediately after ready if there is no state to restore).
                     * @event
                     * @name state_ready.jstree
                     * @plugin state
                     */
                    this.trigger('state_ready');
                }.bind(this);
                this.element
                    .on("ready.jstree", function (e, data) {
                            this.element.one("restore_state.jstree", bind);
                            if(!this.restore_state()) { bind(); }
                        }.bind(this));
            };
            /**
             * save the state
             * @name save_state()
             * @plugin state
             */
            this.save_state = function () {
                var tm = this.get_state();
                if (!this.settings.state.preserve_loaded) {
                    delete tm.core.loaded;
                }
                var st = { 'state' : tm, 'ttl' : this.settings.state.ttl, 'sec' : +(new Date()) };
                $.vakata.storage.set(this.settings.state.key, JSON.stringify(st));
            };
            /**
             * restore the state from the user's computer
             * @name restore_state()
             * @plugin state
             */
            this.restore_state = function () {
                var k = $.vakata.storage.get(this.settings.state.key);
                if(!!k) { try { k = JSON.parse(k); } catch(ex) { return false; } }
                if(!!k && k.ttl && k.sec && +(new Date()) - k.sec > k.ttl) { return false; }
                if(!!k && k.state) { k = k.state; }
                if(!!k && $.vakata.is_function(this.settings.state.filter)) { k = this.settings.state.filter.call(this, k); }
                if(!!k) {
                    if (!this.settings.state.preserve_loaded) {
                        delete k.core.loaded;
                    }
                    this.element.one("set_state.jstree", function (e, data) { data.instance.trigger('restore_state', { 'state' : $.extend(true, {}, k) }); });
                    this.set_state(k);
                    return true;
                }
                return false;
            };
            /**
             * clear the state on the user's computer
             * @name clear_state()
             * @plugin state
             */
            this.clear_state = function () {
                return $.vakata.storage.del(this.settings.state.key);
            };
        };
    
        (function ($, undefined) {
            $.vakata.storage = {
                // simply specifying the functions in FF throws an error
                set : function (key, val) { return window.localStorage.setItem(key, val); },
                get : function (key) { return window.localStorage.getItem(key); },
                del : function (key) { return window.localStorage.removeItem(key); }
            };
        }($));
    
        // include the state plugin by default
        // $.jstree.defaults.plugins.push("state");
    
    /**
     * ### Types plugin
     *
     * Makes it possible to add predefined types for groups of nodes, which make it possible to easily control nesting rules and icon for each group.
     */
    
        /**
         * An object storing all types as key value pairs, where the key is the type name and the value is an object that could contain following keys (all optional).
         *
         * * `max_children` the maximum number of immediate children this node type can have. Do not specify or set to `-1` for unlimited.
         * * `max_depth` the maximum number of nesting this node type can have. A value of `1` would mean that the node can have children, but no grandchildren. Do not specify or set to `-1` for unlimited.
         * * `valid_children` an array of node type strings, that nodes of this type can have as children. Do not specify or set to `-1` for no limits.
         * * `icon` a string - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class. Omit to use the default icon from your theme.
         * * `li_attr` an object of values which will be used to add HTML attributes on the resulting LI DOM node (merged with the node's own data)
         * * `a_attr` an object of values which will be used to add HTML attributes on the resulting A DOM node (merged with the node's own data)
         *
         * There are two predefined types:
         *
         * * `#` represents the root of the tree, for example `max_children` would control the maximum number of root nodes.
         * * `default` represents the default node - any settings here will be applied to all nodes that do not have a type specified.
         *
         * @name $.jstree.defaults.types
         * @plugin types
         */
        $.jstree.defaults.types = {
            'default' : {}
        };
        $.jstree.defaults.types[$.jstree.root] = {};
    
        $.jstree.plugins.types = function (options, parent) {
            this.init = function (el, options) {
                var i, j;
                if(options && options.types && options.types['default']) {
                    for(i in options.types) {
                        if(i !== "default" && i !== $.jstree.root && options.types.hasOwnProperty(i)) {
                            for(j in options.types['default']) {
                                if(options.types['default'].hasOwnProperty(j) && options.types[i][j] === undefined) {
                                    options.types[i][j] = options.types['default'][j];
                                }
                            }
                        }
                    }
                }
                parent.init.call(this, el, options);
                this._model.data[$.jstree.root].type = $.jstree.root;
            };
            this.refresh = function (skip_loading, forget_state) {
                parent.refresh.call(this, skip_loading, forget_state);
                this._model.data[$.jstree.root].type = $.jstree.root;
            };
            this.bind = function () {
                this.element
                    .on('model.jstree', function (e, data) {
                            var m = this._model.data,
                                dpc = data.nodes,
                                t = this.settings.types,
                                i, j, c = 'default', k;
                            for(i = 0, j = dpc.length; i < j; i++) {
                                c = 'default';
                                if(m[dpc[i]].original && m[dpc[i]].original.type && t[m[dpc[i]].original.type]) {
                                    c = m[dpc[i]].original.type;
                                }
                                if(m[dpc[i]].data && m[dpc[i]].data.jstree && m[dpc[i]].data.jstree.type && t[m[dpc[i]].data.jstree.type]) {
                                    c = m[dpc[i]].data.jstree.type;
                                }
                                m[dpc[i]].type = c;
                                if(m[dpc[i]].icon === true && t[c].icon !== undefined) {
                                    m[dpc[i]].icon = t[c].icon;
                                }
                                if(t[c].li_attr !== undefined && typeof t[c].li_attr === 'object') {
                                    for (k in t[c].li_attr) {
                                        if (t[c].li_attr.hasOwnProperty(k)) {
                                            if (k === 'id') {
                                                continue;
                                            }
                                            else if (m[dpc[i]].li_attr[k] === undefined) {
                                                m[dpc[i]].li_attr[k] = t[c].li_attr[k];
                                            }
                                            else if (k === 'class') {
                                                m[dpc[i]].li_attr['class'] = t[c].li_attr['class'] + ' ' + m[dpc[i]].li_attr['class'];
                                            }
                                        }
                                    }
                                }
                                if(t[c].a_attr !== undefined && typeof t[c].a_attr === 'object') {
                                    for (k in t[c].a_attr) {
                                        if (t[c].a_attr.hasOwnProperty(k)) {
                                            if (k === 'id') {
                                                continue;
                                            }
                                            else if (m[dpc[i]].a_attr[k] === undefined) {
                                                m[dpc[i]].a_attr[k] = t[c].a_attr[k];
                                            }
                                            else if (k === 'href' && m[dpc[i]].a_attr[k] === '#') {
                                                m[dpc[i]].a_attr['href'] = t[c].a_attr['href'];
                                            }
                                            else if (k === 'class') {
                                                m[dpc[i]].a_attr['class'] = t[c].a_attr['class'] + ' ' + m[dpc[i]].a_attr['class'];
                                            }
                                        }
                                    }
                                }
                            }
                            m[$.jstree.root].type = $.jstree.root;
                        }.bind(this));
                parent.bind.call(this);
            };
            this.get_json = function (obj, options, flat) {
                var i, j,
                    m = this._model.data,
                    opt = options ? $.extend(true, {}, options, {no_id:false}) : {},
                    tmp = parent.get_json.call(this, obj, opt, flat);
                if(tmp === false) { return false; }
                if($.vakata.is_array(tmp)) {
                    for(i = 0, j = tmp.length; i < j; i++) {
                        tmp[i].type = (tmp[i].id || tmp[i].id === 0) && m[tmp[i].id] && m[tmp[i].id].type ? m[tmp[i].id].type : "default";
                        if(options && options.no_id) {
                            delete tmp[i].id;
                            if(tmp[i].li_attr && tmp[i].li_attr.id) {
                                delete tmp[i].li_attr.id;
                            }
                            if(tmp[i].a_attr && tmp[i].a_attr.id) {
                                delete tmp[i].a_attr.id;
                            }
                        }
                    }
                }
                else {
                    tmp.type = (tmp.id || tmp.id === 0) && m[tmp.id] && m[tmp.id].type ? m[tmp.id].type : "default";
                    if(options && options.no_id) {
                        tmp = this._delete_ids(tmp);
                    }
                }
                return tmp;
            };
            this._delete_ids = function (tmp) {
                if($.vakata.is_array(tmp)) {
                    for(var i = 0, j = tmp.length; i < j; i++) {
                        tmp[i] = this._delete_ids(tmp[i]);
                    }
                    return tmp;
                }
                delete tmp.id;
                if(tmp.li_attr && tmp.li_attr.id) {
                    delete tmp.li_attr.id;
                }
                if(tmp.a_attr && tmp.a_attr.id) {
                    delete tmp.a_attr.id;
                }
                if(tmp.children && $.vakata.is_array(tmp.children)) {
                    tmp.children = this._delete_ids(tmp.children);
                }
                return tmp;
            };
            this.check = function (chk, obj, par, pos, more) {
                if(parent.check.call(this, chk, obj, par, pos, more) === false) { return false; }
                obj = obj && (obj.id || obj.id === 0) ? obj : this.get_node(obj);
                par = par && (par.id || par.id === 0) ? par : this.get_node(par);
                var m = obj && (obj.id || obj.id === 0) ? (more && more.origin ? more.origin : $.jstree.reference(obj.id)) : null, tmp, d, i, j;
                m = m && m._model && m._model.data ? m._model.data : null;
                switch(chk) {
                    case "create_node":
                    case "move_node":
                    case "copy_node":
                        if(chk !== 'move_node' || $.inArray(obj.id, par.children) === -1) {
                            tmp = this.get_rules(par);
                            if(tmp.max_children !== undefined && tmp.max_children !== -1 && tmp.max_children === par.children.length) {
                                this._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_01', 'reason' : 'max_children prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && (obj.id || obj.id === 0) ? obj.id : false, 'par' : par && (par.id || par.id === 0) ? par.id : false }) };
                                return false;
                            }
                            if(tmp.valid_children !== undefined && tmp.valid_children !== -1 && $.inArray((obj.type || 'default'), tmp.valid_children) === -1) {
                                this._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_02', 'reason' : 'valid_children prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && (obj.id || obj.id === 0) ? obj.id : false, 'par' : par && (par.id || par.id === 0) ? par.id : false }) };
                                return false;
                            }
                            if(m && obj.children_d && obj.parents) {
                                d = 0;
                                for(i = 0, j = obj.children_d.length; i < j; i++) {
                                    d = Math.max(d, m[obj.children_d[i]].parents.length);
                                }
                                d = d - obj.parents.length + 1;
                            }
                            if(d <= 0 || d === undefined) { d = 1; }
                            do {
                                if(tmp.max_depth !== undefined && tmp.max_depth !== -1 && tmp.max_depth < d) {
                                    this._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_03', 'reason' : 'max_depth prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && (obj.id || obj.id === 0) ? obj.id : false, 'par' : par && (par.id || par.id === 0) ? par.id : false }) };
                                    return false;
                                }
                                par = this.get_node(par.parent);
                                tmp = this.get_rules(par);
                                d++;
                            } while(par);
                        }
                        break;
                }
                return true;
            };
            /**
             * used to retrieve the type settings object for a node
             * @name get_rules(obj)
             * @param {mixed} obj the node to find the rules for
             * @return {Object}
             * @plugin types
             */
            this.get_rules = function (obj) {
                obj = this.get_node(obj);
                if(!obj) { return false; }
                var tmp = this.get_type(obj, true);
                if(tmp.max_depth === undefined) { tmp.max_depth = -1; }
                if(tmp.max_children === undefined) { tmp.max_children = -1; }
                if(tmp.valid_children === undefined) { tmp.valid_children = -1; }
                return tmp;
            };
            /**
             * used to retrieve the type string or settings object for a node
             * @name get_type(obj [, rules])
             * @param {mixed} obj the node to find the rules for
             * @param {Boolean} rules if set to `true` instead of a string the settings object will be returned
             * @return {String|Object}
             * @plugin types
             */
            this.get_type = function (obj, rules) {
                obj = this.get_node(obj);
                return (!obj) ? false : ( rules ? $.extend({ 'type' : obj.type }, this.settings.types[obj.type]) : obj.type);
            };
            /**
             * used to change a node's type
             * @name set_type(obj, type)
             * @param {mixed} obj the node to change
             * @param {String} type the new type
             * @plugin types
             */
            this.set_type = function (obj, type) {
                var m = this._model.data, t, t1, t2, old_type, old_icon, k, d, a;
                if($.vakata.is_array(obj)) {
                    obj = obj.slice();
                    for(t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                        this.set_type(obj[t1], type);
                    }
                    return true;
                }
                t = this.settings.types;
                obj = this.get_node(obj);
                if(!t[type] || !obj) { return false; }
                d = this.get_node(obj, true);
                if (d && d.length) {
                    a = d.children('.jstree-anchor');
                }
                old_type = obj.type;
                old_icon = this.get_icon(obj);
                obj.type = type;
                if(old_icon === true || !t[old_type] || (t[old_type].icon !== undefined && old_icon === t[old_type].icon)) {
                    this.set_icon(obj, t[type].icon !== undefined ? t[type].icon : true);
                }
    
                // remove old type props
                if(t[old_type] && t[old_type].li_attr !== undefined && typeof t[old_type].li_attr === 'object') {
                    for (k in t[old_type].li_attr) {
                        if (t[old_type].li_attr.hasOwnProperty(k)) {
                            if (k === 'id') {
                                continue;
                            }
                            else if (k === 'class') {
                                m[obj.id].li_attr['class'] = (m[obj.id].li_attr['class'] || '').replace(t[old_type].li_attr[k], '');
                                if (d) { d.removeClass(t[old_type].li_attr[k]); }
                            }
                            else if (m[obj.id].li_attr[k] === t[old_type].li_attr[k]) {
                                m[obj.id].li_attr[k] = null;
                                if (d) { d.removeAttr(k); }
                            }
                        }
                    }
                }
                if(t[old_type] && t[old_type].a_attr !== undefined && typeof t[old_type].a_attr === 'object') {
                    for (k in t[old_type].a_attr) {
                        if (t[old_type].a_attr.hasOwnProperty(k)) {
                            if (k === 'id') {
                                continue;
                            }
                            else if (k === 'class') {
                                m[obj.id].a_attr['class'] = (m[obj.id].a_attr['class'] || '').replace(t[old_type].a_attr[k], '');
                                if (a) { a.removeClass(t[old_type].a_attr[k]); }
                            }
                            else if (m[obj.id].a_attr[k] === t[old_type].a_attr[k]) {
                                if (k === 'href') {
                                    m[obj.id].a_attr[k] = '#';
                                    if (a) { a.attr('href', '#'); }
                                }
                                else {
                                    delete m[obj.id].a_attr[k];
                                    if (a) { a.removeAttr(k); }
                                }
                            }
                        }
                    }
                }
    
                // add new props
                if(t[type].li_attr !== undefined && typeof t[type].li_attr === 'object') {
                    for (k in t[type].li_attr) {
                        if (t[type].li_attr.hasOwnProperty(k)) {
                            if (k === 'id') {
                                continue;
                            }
                            else if (m[obj.id].li_attr[k] === undefined) {
                                m[obj.id].li_attr[k] = t[type].li_attr[k];
                                if (d) {
                                    if (k === 'class') {
                                        d.addClass(t[type].li_attr[k]);
                                    }
                                    else {
                                        d.attr(k, t[type].li_attr[k]);
                                    }
                                }
                            }
                            else if (k === 'class') {
                                m[obj.id].li_attr['class'] = t[type].li_attr[k] + ' ' + m[obj.id].li_attr['class'];
                                if (d) { d.addClass(t[type].li_attr[k]); }
                            }
                        }
                    }
                }
                if(t[type].a_attr !== undefined && typeof t[type].a_attr === 'object') {
                    for (k in t[type].a_attr) {
                        if (t[type].a_attr.hasOwnProperty(k)) {
                            if (k === 'id') {
                                continue;
                            }
                            else if (m[obj.id].a_attr[k] === undefined) {
                                m[obj.id].a_attr[k] = t[type].a_attr[k];
                                if (a) {
                                    if (k === 'class') {
                                        a.addClass(t[type].a_attr[k]);
                                    }
                                    else {
                                        a.attr(k, t[type].a_attr[k]);
                                    }
                                }
                            }
                            else if (k === 'href' && m[obj.id].a_attr[k] === '#') {
                                m[obj.id].a_attr['href'] = t[type].a_attr['href'];
                                if (a) { a.attr('href', t[type].a_attr['href']); }
                            }
                            else if (k === 'class') {
                                m[obj.id].a_attr['class'] = t[type].a_attr['class'] + ' ' + m[obj.id].a_attr['class'];
                                if (a) { a.addClass(t[type].a_attr[k]); }
                            }
                        }
                    }
                }
    
                return true;
            };
        };
        // include the types plugin by default
        // $.jstree.defaults.plugins.push("types");
    
    
    /**
     * ### Unique plugin
     *
     * Enforces that no nodes with the same name can coexist as siblings.
     */
    
        /**
         * stores all defaults for the unique plugin
         * @name $.jstree.defaults.unique
         * @plugin unique
         */
        $.jstree.defaults.unique = {
            /**
             * Indicates if the comparison should be case sensitive. Default is `false`.
             * @name $.jstree.defaults.unique.case_sensitive
             * @plugin unique
             */
            case_sensitive : false,
            /**
             * Indicates if white space should be trimmed before the comparison. Default is `false`.
             * @name $.jstree.defaults.unique.trim_whitespace
             * @plugin unique
             */
            trim_whitespace : false,
            /**
             * A callback executed in the instance's scope when a new node is created with no name and a node with the default name already exists, the two arguments are the conflicting name and the counter. The default will produce results like `New node (2)`.
             * @name $.jstree.defaults.unique.duplicate
             * @plugin unique
             */
            duplicate : function (name, counter) {
                return name + ' (' + counter + ')';
            }
        };
    
        $.jstree.plugins.unique = function (options, parent) {
            this.check = function (chk, obj, par, pos, more) {
                if(parent.check.call(this, chk, obj, par, pos, more) === false) { return false; }
                obj = obj && (obj.id || obj.id === 0) ? obj : this.get_node(obj);
                par = par && (par.id || par.id === 0) ? par : this.get_node(par);
                if(!par || !par.children) { return true; }
                var n = chk === "rename_node" ? pos : obj.text,
                    c = [],
                    s = this.settings.unique.case_sensitive,
                    w = this.settings.unique.trim_whitespace,
                    m = this._model.data, i, j, t;
                for(i = 0, j = par.children.length; i < j; i++) {
                    t = m[par.children[i]].text;
                    if (!s) {
                        t = t.toLowerCase();
                    }
                    if (w) {
                        t = t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
                    }
                    c.push(t);
                }
                if(!s) { n = n.toLowerCase(); }
                if (w) { n = n.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, ''); }
                switch(chk) {
                    case "delete_node":
                        return true;
                    case "rename_node":
                        t = obj.text || '';
                        if (!s) {
                            t = t.toLowerCase();
                        }
                        if (w) {
                            t = t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
                        }
                        i = ($.inArray(n, c) === -1 || (obj.text && t === n));
                        if(!i) {
                            this._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_01', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && (obj.id || obj.id === 0) ? obj.id : false, 'par' : par && (par.id || par.id === 0) ? par.id : false }) };
                        }
                        return i;
                    case "create_node":
                        i = ($.inArray(n, c) === -1);
                        if(!i) {
                            this._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_04', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && (obj.id || obj.id === 0) ? obj.id : false, 'par' : par && (par.id || par.id === 0) ? par.id : false }) };
                        }
                        return i;
                    case "copy_node":
                        i = ($.inArray(n, c) === -1);
                        if(!i) {
                            this._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_02', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && (obj.id || obj.id === 0) ? obj.id : false, 'par' : par && (par.id || par.id === 0) ? par.id : false }) };
                        }
                        return i;
                    case "move_node":
                        i = ( (obj.parent === par.id && (!more || !more.is_multi)) || $.inArray(n, c) === -1);
                        if(!i) {
                            this._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_03', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && (obj.id || obj.id === 0) ? obj.id : false, 'par' : par && (par.id || par.id === 0) ? par.id : false }) };
                        }
                        return i;
                }
                return true;
            };
            this.create_node = function (par, node, pos, callback, is_loaded) {
                if(!node || (typeof node === 'object' && node.text === undefined)) {
                    if(par === null) {
                        par = $.jstree.root;
                    }
                    par = this.get_node(par);
                    if(!par) {
                        return parent.create_node.call(this, par, node, pos, callback, is_loaded);
                    }
                    pos = pos === undefined ? "last" : pos;
                    if(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {
                        return parent.create_node.call(this, par, node, pos, callback, is_loaded);
                    }
                    if(!node) { node = {}; }
                    var tmp, n, dpc, i, j, m = this._model.data, s = this.settings.unique.case_sensitive, w = this.settings.unique.trim_whitespace, cb = this.settings.unique.duplicate, t;
                    n = tmp = this.get_string('New node');
                    dpc = [];
                    for(i = 0, j = par.children.length; i < j; i++) {
                        t = m[par.children[i]].text;
                        if (!s) {
                            t = t.toLowerCase();
                        }
                        if (w) {
                            t = t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
                        }
                        dpc.push(t);
                    }
                    i = 1;
                    t = n;
                    if (!s) {
                        t = t.toLowerCase();
                    }
                    if (w) {
                        t = t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
                    }
                    while($.inArray(t, dpc) !== -1) {
                        n = cb.call(this, tmp, (++i)).toString();
                        t = n;
                        if (!s) {
                            t = t.toLowerCase();
                        }
                        if (w) {
                            t = t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
                        }
                    }
                    node.text = n;
                }
                return parent.create_node.call(this, par, node, pos, callback, is_loaded);
            };
        };
    
        // include the unique plugin by default
        // $.jstree.defaults.plugins.push("unique");
    
    
    /**
     * ### Wholerow plugin
     *
     * Makes each node appear block level. Making selection easier. May cause slow down for large trees in old browsers.
     */
    
        var div = document.createElement('DIV');
        div.setAttribute('unselectable','on');
        div.setAttribute('role','presentation');
        div.className = 'jstree-wholerow';
        div.innerHTML = '&#160;';
        $.jstree.plugins.wholerow = function (options, parent) {
            this.bind = function () {
                parent.bind.call(this);
    
                this.element
                    .on('ready.jstree set_state.jstree', function () {
                            this.hide_dots();
                        }.bind(this))
                    .on("init.jstree loading.jstree ready.jstree", function () {
                            //div.style.height = this._data.core.li_height + 'px';
                            this.get_container_ul().addClass('jstree-wholerow-ul');
                        }.bind(this))
                    .on("deselect_all.jstree", function (e, data) {
                            this.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');
                        }.bind(this))
                    .on("changed.jstree", function (e, data) {
                            this.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');
                            var tmp = false, i, j;
                            for(i = 0, j = data.selected.length; i < j; i++) {
                                tmp = this.get_node(data.selected[i], true);
                                if(tmp && tmp.length) {
                                    tmp.children('.jstree-wholerow').addClass('jstree-wholerow-clicked');
                                }
                            }
                        }.bind(this))
                    .on("open_node.jstree", function (e, data) {
                            this.get_node(data.node, true).find('.jstree-clicked').parent().children('.jstree-wholerow').addClass('jstree-wholerow-clicked');
                        }.bind(this))
                    .on("hover_node.jstree dehover_node.jstree", function (e, data) {
                            if(e.type === "hover_node" && this.is_disabled(data.node)) { return; }
                            this.get_node(data.node, true).children('.jstree-wholerow')[e.type === "hover_node"?"addClass":"removeClass"]('jstree-wholerow-hovered');
                        }.bind(this))
                    .on("contextmenu.jstree", ".jstree-wholerow", function (e) {
                            if (this._data.contextmenu) {
                                e.preventDefault();
                                var tmp = $.Event('contextmenu', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey, pageX : e.pageX, pageY : e.pageY });
                                $(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(tmp);
                            }
                        }.bind(this))
                    /*!
                    .on("mousedown.jstree touchstart.jstree", ".jstree-wholerow", function (e) {
                            if(e.target === e.currentTarget) {
                                var a = $(e.currentTarget).closest(".jstree-node").children(".jstree-anchor");
                                e.target = a[0];
                                a.trigger(e);
                            }
                        })
                    */
                    .on("click.jstree", ".jstree-wholerow", function (e) {
                            e.stopImmediatePropagation();
                            var tmp = $.Event('click', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });
                            $(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(tmp).trigger('focus');
                        })
                    .on("dblclick.jstree", ".jstree-wholerow", function (e) {
                            e.stopImmediatePropagation();
                            var tmp = $.Event('dblclick', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });
                            $(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(tmp).trigger('focus');
                        })
                    .on("click.jstree", ".jstree-leaf > .jstree-ocl", function (e) {
                            e.stopImmediatePropagation();
                            var tmp = $.Event('click', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });
                            $(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(tmp).trigger('focus');
                        }.bind(this))
                    .on("mouseover.jstree", ".jstree-wholerow, .jstree-icon", function (e) {
                            e.stopImmediatePropagation();
                            if(!this.is_disabled(e.currentTarget)) {
                                this.hover_node(e.currentTarget);
                            }
                            return false;
                        }.bind(this))
                    .on("mouseleave.jstree", ".jstree-node", function (e) {
                            this.dehover_node(e.currentTarget);
                        }.bind(this));
            };
            this.teardown = function () {
                if(this.settings.wholerow) {
                    this.element.find(".jstree-wholerow").remove();
                }
                parent.teardown.call(this);
            };
            this.redraw_node = function(obj, deep, callback, force_render) {
                obj = parent.redraw_node.apply(this, arguments);
                if(obj) {
                    var tmp = div.cloneNode(true);
                    //tmp.style.height = this._data.core.li_height + 'px';
                    if($.inArray(obj.id, this._data.core.selected) !== -1) { tmp.className += ' jstree-wholerow-clicked'; }
                    if(this._data.core.focused && this._data.core.focused === obj.id) { tmp.className += ' jstree-wholerow-hovered'; }
                    obj.insertBefore(tmp, obj.childNodes[0]);
                }
                return obj;
            };
        };
        // include the wholerow plugin by default
        // $.jstree.defaults.plugins.push("wholerow");
        if(window.customElements && Object && Object.create) {
            var proto = Object.create(HTMLElement.prototype);
            proto.createdCallback = function () {
                var c = { core : {}, plugins : [] }, i;
                for(i in $.jstree.plugins) {
                    if($.jstree.plugins.hasOwnProperty(i) && this.attributes[i]) {
                        c.plugins.push(i);
                        if(this.getAttribute(i) && JSON.parse(this.getAttribute(i))) {
                            c[i] = JSON.parse(this.getAttribute(i));
                        }
                    }
                }
                for(i in $.jstree.defaults.core) {
                    if($.jstree.defaults.core.hasOwnProperty(i) && this.attributes[i]) {
                        c.core[i] = JSON.parse(this.getAttribute(i)) || this.getAttribute(i);
                    }
                }
                $(this).jstree(c);
            };
            // proto.attributeChangedCallback = function (name, previous, value) { };
            try {
                window.customElements.define("vakata-jstree", function() {}, { prototype: proto });
            } catch (ignore) { }
        }
    
    }));
    },{"jquery":416}],418:[function(require,module,exports){
    (function (global){(function (){
    /**
     * @license
     * Lodash <https://lodash.com/>
     * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */
    ;(function() {
    
      /** Used as a safe reference for `undefined` in pre-ES5 environments. */
      var undefined;
    
      /** Used as the semantic version number. */
      var VERSION = '4.17.21';
    
      /** Used as the size to enable large array optimizations. */
      var LARGE_ARRAY_SIZE = 200;
    
      /** Error message constants. */
      var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
          FUNC_ERROR_TEXT = 'Expected a function',
          INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
    
      /** Used to stand-in for `undefined` hash values. */
      var HASH_UNDEFINED = '__lodash_hash_undefined__';
    
      /** Used as the maximum memoize cache size. */
      var MAX_MEMOIZE_SIZE = 500;
    
      /** Used as the internal argument placeholder. */
      var PLACEHOLDER = '__lodash_placeholder__';
    
      /** Used to compose bitmasks for cloning. */
      var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG = 4;
    
      /** Used to compose bitmasks for value comparisons. */
      var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;
    
      /** Used to compose bitmasks for function metadata. */
      var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_BOUND_FLAG = 4,
          WRAP_CURRY_FLAG = 8,
          WRAP_CURRY_RIGHT_FLAG = 16,
          WRAP_PARTIAL_FLAG = 32,
          WRAP_PARTIAL_RIGHT_FLAG = 64,
          WRAP_ARY_FLAG = 128,
          WRAP_REARG_FLAG = 256,
          WRAP_FLIP_FLAG = 512;
    
      /** Used as default options for `_.truncate`. */
      var DEFAULT_TRUNC_LENGTH = 30,
          DEFAULT_TRUNC_OMISSION = '...';
    
      /** Used to detect hot functions by number of calls within a span of milliseconds. */
      var HOT_COUNT = 800,
          HOT_SPAN = 16;
    
      /** Used to indicate the type of lazy iteratees. */
      var LAZY_FILTER_FLAG = 1,
          LAZY_MAP_FLAG = 2,
          LAZY_WHILE_FLAG = 3;
    
      /** Used as references for various `Number` constants. */
      var INFINITY = 1 / 0,
          MAX_SAFE_INTEGER = 9007199254740991,
          MAX_INTEGER = 1.7976931348623157e+308,
          NAN = 0 / 0;
    
      /** Used as references for the maximum length and index of an array. */
      var MAX_ARRAY_LENGTH = 4294967295,
          MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
          HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    
      /** Used to associate wrap methods with their bit flags. */
      var wrapFlags = [
        ['ary', WRAP_ARY_FLAG],
        ['bind', WRAP_BIND_FLAG],
        ['bindKey', WRAP_BIND_KEY_FLAG],
        ['curry', WRAP_CURRY_FLAG],
        ['curryRight', WRAP_CURRY_RIGHT_FLAG],
        ['flip', WRAP_FLIP_FLAG],
        ['partial', WRAP_PARTIAL_FLAG],
        ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
        ['rearg', WRAP_REARG_FLAG]
      ];
    
      /** `Object#toString` result references. */
      var argsTag = '[object Arguments]',
          arrayTag = '[object Array]',
          asyncTag = '[object AsyncFunction]',
          boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          domExcTag = '[object DOMException]',
          errorTag = '[object Error]',
          funcTag = '[object Function]',
          genTag = '[object GeneratorFunction]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          nullTag = '[object Null]',
          objectTag = '[object Object]',
          promiseTag = '[object Promise]',
          proxyTag = '[object Proxy]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          symbolTag = '[object Symbol]',
          undefinedTag = '[object Undefined]',
          weakMapTag = '[object WeakMap]',
          weakSetTag = '[object WeakSet]';
    
      var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]',
          float32Tag = '[object Float32Array]',
          float64Tag = '[object Float64Array]',
          int8Tag = '[object Int8Array]',
          int16Tag = '[object Int16Array]',
          int32Tag = '[object Int32Array]',
          uint8Tag = '[object Uint8Array]',
          uint8ClampedTag = '[object Uint8ClampedArray]',
          uint16Tag = '[object Uint16Array]',
          uint32Tag = '[object Uint32Array]';
    
      /** Used to match empty string literals in compiled template source. */
      var reEmptyStringLeading = /\b__p \+= '';/g,
          reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
          reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    
      /** Used to match HTML entities and HTML characters. */
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
          reUnescapedHtml = /[&<>"']/g,
          reHasEscapedHtml = RegExp(reEscapedHtml.source),
          reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    
      /** Used to match template delimiters. */
      var reEscape = /<%-([\s\S]+?)%>/g,
          reEvaluate = /<%([\s\S]+?)%>/g,
          reInterpolate = /<%=([\s\S]+?)%>/g;
    
      /** Used to match property names within property paths. */
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          reIsPlainProp = /^\w*$/,
          rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    
      /**
       * Used to match `RegExp`
       * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
       */
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
          reHasRegExpChar = RegExp(reRegExpChar.source);
    
      /** Used to match leading whitespace. */
      var reTrimStart = /^\s+/;
    
      /** Used to match a single whitespace character. */
      var reWhitespace = /\s/;
    
      /** Used to match wrap detail comments. */
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
          reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
          reSplitDetails = /,? & /;
    
      /** Used to match words composed of alphanumeric characters. */
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    
      /**
       * Used to validate the `validate` option in `_.template` variable.
       *
       * Forbids characters which could potentially change the meaning of the function argument definition:
       * - "()," (modification of function parameters)
       * - "=" (default value)
       * - "[]{}" (destructuring of function parameters)
       * - "/" (beginning of a comment)
       * - whitespace
       */
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
    
      /** Used to match backslashes in property paths. */
      var reEscapeChar = /\\(\\)?/g;
    
      /**
       * Used to match
       * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
       */
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    
      /** Used to match `RegExp` flags from their coerced string values. */
      var reFlags = /\w*$/;
    
      /** Used to detect bad signed hexadecimal string values. */
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    
      /** Used to detect binary string values. */
      var reIsBinary = /^0b[01]+$/i;
    
      /** Used to detect host constructors (Safari). */
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
    
      /** Used to detect octal string values. */
      var reIsOctal = /^0o[0-7]+$/i;
    
      /** Used to detect unsigned integer values. */
      var reIsUint = /^(?:0|[1-9]\d*)$/;
    
      /** Used to match Latin Unicode letters (excluding mathematical operators). */
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    
      /** Used to ensure capturing order of template delimiters. */
      var reNoMatch = /($^)/;
    
      /** Used to match unescaped characters in compiled string literals. */
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    
      /** Used to compose unicode character classes. */
      var rsAstralRange = '\\ud800-\\udfff',
          rsComboMarksRange = '\\u0300-\\u036f',
          reComboHalfMarksRange = '\\ufe20-\\ufe2f',
          rsComboSymbolsRange = '\\u20d0-\\u20ff',
          rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
          rsDingbatRange = '\\u2700-\\u27bf',
          rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
          rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
          rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
          rsPunctuationRange = '\\u2000-\\u206f',
          rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
          rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
          rsVarRange = '\\ufe0e\\ufe0f',
          rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    
      /** Used to compose unicode capture groups. */
      var rsApos = "['\u2019]",
          rsAstral = '[' + rsAstralRange + ']',
          rsBreak = '[' + rsBreakRange + ']',
          rsCombo = '[' + rsComboRange + ']',
          rsDigits = '\\d+',
          rsDingbat = '[' + rsDingbatRange + ']',
          rsLower = '[' + rsLowerRange + ']',
          rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
          rsFitz = '\\ud83c[\\udffb-\\udfff]',
          rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
          rsNonAstral = '[^' + rsAstralRange + ']',
          rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
          rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
          rsUpper = '[' + rsUpperRange + ']',
          rsZWJ = '\\u200d';
    
      /** Used to compose unicode regexes. */
      var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
          rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
          rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
          rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
          reOptMod = rsModifier + '?',
          rsOptVar = '[' + rsVarRange + ']?',
          rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
          rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
          rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
          rsSeq = rsOptVar + reOptMod + rsOptJoin,
          rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
          rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
    
      /** Used to match apostrophes. */
      var reApos = RegExp(rsApos, 'g');
    
      /**
       * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
       * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
       */
      var reComboMark = RegExp(rsCombo, 'g');
    
      /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
      var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
    
      /** Used to match complex or compound words. */
      var reUnicodeWord = RegExp([
        rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
        rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
        rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
        rsUpper + '+' + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join('|'), 'g');
    
      /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
      var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');
    
      /** Used to detect strings that need a more robust regexp to match words. */
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    
      /** Used to assign default `context` object properties. */
      var contextProps = [
        'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
        'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
        'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
        'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
        '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
      ];
    
      /** Used to make template sourceURLs easier to identify. */
      var templateCounter = -1;
    
      /** Used to identify `toStringTag` values of typed arrays. */
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
      typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
      typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
      typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
      typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
      typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
      typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
      typedArrayTags[errorTag] = typedArrayTags[funcTag] =
      typedArrayTags[mapTag] = typedArrayTags[numberTag] =
      typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
      typedArrayTags[setTag] = typedArrayTags[stringTag] =
      typedArrayTags[weakMapTag] = false;
    
      /** Used to identify `toStringTag` values supported by `_.clone`. */
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] =
      cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
      cloneableTags[boolTag] = cloneableTags[dateTag] =
      cloneableTags[float32Tag] = cloneableTags[float64Tag] =
      cloneableTags[int8Tag] = cloneableTags[int16Tag] =
      cloneableTags[int32Tag] = cloneableTags[mapTag] =
      cloneableTags[numberTag] = cloneableTags[objectTag] =
      cloneableTags[regexpTag] = cloneableTags[setTag] =
      cloneableTags[stringTag] = cloneableTags[symbolTag] =
      cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
      cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] =
      cloneableTags[weakMapTag] = false;
    
      /** Used to map Latin Unicode letters to basic Latin letters. */
      var deburredLetters = {
        // Latin-1 Supplement block.
        '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
        '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
        '\xc7': 'C',  '\xe7': 'c',
        '\xd0': 'D',  '\xf0': 'd',
        '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
        '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
        '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
        '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
        '\xd1': 'N',  '\xf1': 'n',
        '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
        '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
        '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
        '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
        '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
        '\xc6': 'Ae', '\xe6': 'ae',
        '\xde': 'Th', '\xfe': 'th',
        '\xdf': 'ss',
        // Latin Extended-A block.
        '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
        '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
        '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
        '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
        '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
        '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
        '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
        '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
        '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
        '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
        '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
        '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
        '\u0134': 'J',  '\u0135': 'j',
        '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
        '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
        '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
        '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
        '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
        '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
        '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
        '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
        '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
        '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
        '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
        '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
        '\u0163': 't',  '\u0165': 't', '\u0167': 't',
        '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
        '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
        '\u0174': 'W',  '\u0175': 'w',
        '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
        '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
        '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
        '\u0132': 'IJ', '\u0133': 'ij',
        '\u0152': 'Oe', '\u0153': 'oe',
        '\u0149': "'n", '\u017f': 's'
      };
    
      /** Used to map characters to HTML entities. */
      var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
      };
    
      /** Used to map HTML entities to characters. */
      var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'"
      };
    
      /** Used to escape characters for inclusion in compiled string literals. */
      var stringEscapes = {
        '\\': '\\',
        "'": "'",
        '\n': 'n',
        '\r': 'r',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
      };
    
      /** Built-in method references without a dependency on `root`. */
      var freeParseFloat = parseFloat,
          freeParseInt = parseInt;
    
      /** Detect free variable `global` from Node.js. */
      var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    
      /** Detect free variable `self`. */
      var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    
      /** Used as a reference to the global object. */
      var root = freeGlobal || freeSelf || Function('return this')();
    
      /** Detect free variable `exports`. */
      var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    
      /** Detect free variable `module`. */
      var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
    
      /** Detect the popular CommonJS extension `module.exports`. */
      var moduleExports = freeModule && freeModule.exports === freeExports;
    
      /** Detect free variable `process` from Node.js. */
      var freeProcess = moduleExports && freeGlobal.process;
    
      /** Used to access faster Node.js helpers. */
      var nodeUtil = (function() {
        try {
          // Use `util.types` for Node.js 10+.
          var types = freeModule && freeModule.require && freeModule.require('util').types;
    
          if (types) {
            return types;
          }
    
          // Legacy `process.binding('util')` for Node.js < 10.
          return freeProcess && freeProcess.binding && freeProcess.binding('util');
        } catch (e) {}
      }());
    
      /* Node.js helper references. */
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
          nodeIsDate = nodeUtil && nodeUtil.isDate,
          nodeIsMap = nodeUtil && nodeUtil.isMap,
          nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
          nodeIsSet = nodeUtil && nodeUtil.isSet,
          nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    
      /*--------------------------------------------------------------------------*/
    
      /**
       * A faster alternative to `Function#apply`, this function invokes `func`
       * with the `this` binding of `thisArg` and the arguments of `args`.
       *
       * @private
       * @param {Function} func The function to invoke.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} args The arguments to invoke `func` with.
       * @returns {*} Returns the result of `func`.
       */
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0: return func.call(thisArg);
          case 1: return func.call(thisArg, args[0]);
          case 2: return func.call(thisArg, args[0], args[1]);
          case 3: return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
    
      /**
       * A specialized version of `baseAggregator` for arrays.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform keys.
       * @param {Object} accumulator The initial aggregated object.
       * @returns {Function} Returns `accumulator`.
       */
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1,
            length = array == null ? 0 : array.length;
    
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
    
      /**
       * A specialized version of `_.forEach` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns `array`.
       */
      function arrayEach(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length;
    
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
    
      /**
       * A specialized version of `_.forEachRight` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns `array`.
       */
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
    
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
    
      /**
       * A specialized version of `_.every` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       */
      function arrayEvery(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length;
    
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
    
      /**
       * A specialized version of `_.filter` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function arrayFilter(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];
    
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
    
      /**
       * A specialized version of `_.includes` for arrays without support for
       * specifying an index to search from.
       *
       * @private
       * @param {Array} [array] The array to inspect.
       * @param {*} target The value to search for.
       * @returns {boolean} Returns `true` if `target` is found, else `false`.
       */
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
    
      /**
       * This function is like `arrayIncludes` except that it accepts a comparator.
       *
       * @private
       * @param {Array} [array] The array to inspect.
       * @param {*} target The value to search for.
       * @param {Function} comparator The comparator invoked per element.
       * @returns {boolean} Returns `true` if `target` is found, else `false`.
       */
      function arrayIncludesWith(array, value, comparator) {
        var index = -1,
            length = array == null ? 0 : array.length;
    
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
    
      /**
       * A specialized version of `_.map` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function arrayMap(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length);
    
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
    
      /**
       * Appends the elements of `values` to `array`.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to append.
       * @returns {Array} Returns `array`.
       */
      function arrayPush(array, values) {
        var index = -1,
            length = values.length,
            offset = array.length;
    
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
    
      /**
       * A specialized version of `_.reduce` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {boolean} [initAccum] Specify using the first element of `array` as
       *  the initial value.
       * @returns {*} Returns the accumulated value.
       */
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1,
            length = array == null ? 0 : array.length;
    
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
    
      /**
       * A specialized version of `_.reduceRight` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {boolean} [initAccum] Specify using the last element of `array` as
       *  the initial value.
       * @returns {*} Returns the accumulated value.
       */
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
    
      /**
       * A specialized version of `_.some` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function arraySome(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length;
    
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
    
      /**
       * Gets the size of an ASCII `string`.
       *
       * @private
       * @param {string} string The string inspect.
       * @returns {number} Returns the string size.
       */
      var asciiSize = baseProperty('length');
    
      /**
       * Converts an ASCII `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function asciiToArray(string) {
        return string.split('');
      }
    
      /**
       * Splits an ASCII `string` into an array of its words.
       *
       * @private
       * @param {string} The string to inspect.
       * @returns {Array} Returns the words of `string`.
       */
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
    
      /**
       * The base implementation of methods like `_.findKey` and `_.findLastKey`,
       * without support for iteratee shorthands, which iterates over `collection`
       * using `eachFunc`.
       *
       * @private
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} predicate The function invoked per iteration.
       * @param {Function} eachFunc The function to iterate over `collection`.
       * @returns {*} Returns the found element or its key, else `undefined`.
       */
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection) {
          if (predicate(value, key, collection)) {
            result = key;
            return false;
          }
        });
        return result;
      }
    
      /**
       * The base implementation of `_.findIndex` and `_.findLastIndex` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} predicate The function invoked per iteration.
       * @param {number} fromIndex The index to search from.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length,
            index = fromIndex + (fromRight ? 1 : -1);
    
        while ((fromRight ? index-- : ++index < length)) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
    
      /**
       * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseIndexOf(array, value, fromIndex) {
        return value === value
          ? strictIndexOf(array, value, fromIndex)
          : baseFindIndex(array, baseIsNaN, fromIndex);
      }
    
      /**
       * This function is like `baseIndexOf` except that it accepts a comparator.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @param {Function} comparator The comparator invoked per element.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1,
            length = array.length;
    
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
    
      /**
       * The base implementation of `_.isNaN` without support for number objects.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       */
      function baseIsNaN(value) {
        return value !== value;
      }
    
      /**
       * The base implementation of `_.mean` and `_.meanBy` without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {number} Returns the mean.
       */
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? (baseSum(array, iteratee) / length) : NAN;
      }
    
      /**
       * The base implementation of `_.property` without support for deep paths.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @returns {Function} Returns the new accessor function.
       */
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined : object[key];
        };
      }
    
      /**
       * The base implementation of `_.propertyOf` without support for deep paths.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       */
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined : object[key];
        };
      }
    
      /**
       * The base implementation of `_.reduce` and `_.reduceRight`, without support
       * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} accumulator The initial value.
       * @param {boolean} initAccum Specify using the first or last element of
       *  `collection` as the initial value.
       * @param {Function} eachFunc The function to iterate over `collection`.
       * @returns {*} Returns the accumulated value.
       */
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection) {
          accumulator = initAccum
            ? (initAccum = false, value)
            : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
      }
    
      /**
       * The base implementation of `_.sortBy` which uses `comparer` to define the
       * sort order of `array` and replaces criteria objects with their corresponding
       * values.
       *
       * @private
       * @param {Array} array The array to sort.
       * @param {Function} comparer The function to define sort order.
       * @returns {Array} Returns `array`.
       */
      function baseSortBy(array, comparer) {
        var length = array.length;
    
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
    
      /**
       * The base implementation of `_.sum` and `_.sumBy` without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {number} Returns the sum.
       */
      function baseSum(array, iteratee) {
        var result,
            index = -1,
            length = array.length;
    
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined) {
            result = result === undefined ? current : (result + current);
          }
        }
        return result;
      }
    
      /**
       * The base implementation of `_.times` without support for iteratee shorthands
       * or max array length checks.
       *
       * @private
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       */
      function baseTimes(n, iteratee) {
        var index = -1,
            result = Array(n);
    
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
    
      /**
       * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
       * of key-value pairs for `object` corresponding to the property names of `props`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} props The property names to get values for.
       * @returns {Object} Returns the key-value pairs.
       */
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
    
      /**
       * The base implementation of `_.trim`.
       *
       * @private
       * @param {string} string The string to trim.
       * @returns {string} Returns the trimmed string.
       */
      function baseTrim(string) {
        return string
          ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
          : string;
      }
    
      /**
       * The base implementation of `_.unary` without support for storing metadata.
       *
       * @private
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       */
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
    
      /**
       * The base implementation of `_.values` and `_.valuesIn` which creates an
       * array of `object` property values corresponding to the property names
       * of `props`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} props The property names to get values for.
       * @returns {Object} Returns the array of property values.
       */
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
    
      /**
       * Checks if a `cache` value for `key` exists.
       *
       * @private
       * @param {Object} cache The cache to query.
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function cacheHas(cache, key) {
        return cache.has(key);
      }
    
      /**
       * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
       * that is not found in the character symbols.
       *
       * @private
       * @param {Array} strSymbols The string symbols to inspect.
       * @param {Array} chrSymbols The character symbols to find.
       * @returns {number} Returns the index of the first unmatched string symbol.
       */
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1,
            length = strSymbols.length;
    
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
        return index;
      }
    
      /**
       * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
       * that is not found in the character symbols.
       *
       * @private
       * @param {Array} strSymbols The string symbols to inspect.
       * @param {Array} chrSymbols The character symbols to find.
       * @returns {number} Returns the index of the last unmatched string symbol.
       */
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
    
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
        return index;
      }
    
      /**
       * Gets the number of `placeholder` occurrences in `array`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} placeholder The placeholder to search for.
       * @returns {number} Returns the placeholder count.
       */
      function countHolders(array, placeholder) {
        var length = array.length,
            result = 0;
    
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
    
      /**
       * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
       * letters to basic Latin letters.
       *
       * @private
       * @param {string} letter The matched letter to deburr.
       * @returns {string} Returns the deburred letter.
       */
      var deburrLetter = basePropertyOf(deburredLetters);
    
      /**
       * Used by `_.escape` to convert characters to HTML entities.
       *
       * @private
       * @param {string} chr The matched character to escape.
       * @returns {string} Returns the escaped character.
       */
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
    
      /**
       * Used by `_.template` to escape characters for inclusion in compiled string literals.
       *
       * @private
       * @param {string} chr The matched character to escape.
       * @returns {string} Returns the escaped character.
       */
      function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
      }
    
      /**
       * Gets the value at `key` of `object`.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function getValue(object, key) {
        return object == null ? undefined : object[key];
      }
    
      /**
       * Checks if `string` contains Unicode symbols.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {boolean} Returns `true` if a symbol is found, else `false`.
       */
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
    
      /**
       * Checks if `string` contains a word composed of Unicode symbols.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {boolean} Returns `true` if a word is found, else `false`.
       */
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
    
      /**
       * Converts `iterator` to an array.
       *
       * @private
       * @param {Object} iterator The iterator to convert.
       * @returns {Array} Returns the converted array.
       */
      function iteratorToArray(iterator) {
        var data,
            result = [];
    
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
    
      /**
       * Converts `map` to its key-value pairs.
       *
       * @private
       * @param {Object} map The map to convert.
       * @returns {Array} Returns the key-value pairs.
       */
      function mapToArray(map) {
        var index = -1,
            result = Array(map.size);
    
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
    
      /**
       * Creates a unary function that invokes `func` with its argument transformed.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {Function} transform The argument transform.
       * @returns {Function} Returns the new function.
       */
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
    
      /**
       * Replaces all `placeholder` elements in `array` with an internal placeholder
       * and returns an array of their indexes.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {*} placeholder The placeholder to replace.
       * @returns {Array} Returns the new array of placeholder indexes.
       */
      function replaceHolders(array, placeholder) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];
    
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
    
      /**
       * Converts `set` to an array of its values.
       *
       * @private
       * @param {Object} set The set to convert.
       * @returns {Array} Returns the values.
       */
      function setToArray(set) {
        var index = -1,
            result = Array(set.size);
    
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
    
      /**
       * Converts `set` to its value-value pairs.
       *
       * @private
       * @param {Object} set The set to convert.
       * @returns {Array} Returns the value-value pairs.
       */
      function setToPairs(set) {
        var index = -1,
            result = Array(set.size);
    
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
    
      /**
       * A specialized version of `_.indexOf` which performs strict equality
       * comparisons of values, i.e. `===`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1,
            length = array.length;
    
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
    
      /**
       * A specialized version of `_.lastIndexOf` which performs strict equality
       * comparisons of values, i.e. `===`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
    
      /**
       * Gets the number of symbols in `string`.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {number} Returns the string size.
       */
      function stringSize(string) {
        return hasUnicode(string)
          ? unicodeSize(string)
          : asciiSize(string);
      }
    
      /**
       * Converts `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function stringToArray(string) {
        return hasUnicode(string)
          ? unicodeToArray(string)
          : asciiToArray(string);
      }
    
      /**
       * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
       * character of `string`.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {number} Returns the index of the last non-whitespace character.
       */
      function trimmedEndIndex(string) {
        var index = string.length;
    
        while (index-- && reWhitespace.test(string.charAt(index))) {}
        return index;
      }
    
      /**
       * Used by `_.unescape` to convert HTML entities to characters.
       *
       * @private
       * @param {string} chr The matched character to unescape.
       * @returns {string} Returns the unescaped character.
       */
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    
      /**
       * Gets the size of a Unicode `string`.
       *
       * @private
       * @param {string} string The string inspect.
       * @returns {number} Returns the string size.
       */
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
    
      /**
       * Converts a Unicode `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
    
      /**
       * Splits a Unicode `string` into an array of its words.
       *
       * @private
       * @param {string} The string to inspect.
       * @returns {Array} Returns the words of `string`.
       */
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
    
      /*--------------------------------------------------------------------------*/
    
      /**
       * Create a new pristine `lodash` function using the `context` object.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Util
       * @param {Object} [context=root] The context object.
       * @returns {Function} Returns a new `lodash` function.
       * @example
       *
       * _.mixin({ 'foo': _.constant('foo') });
       *
       * var lodash = _.runInContext();
       * lodash.mixin({ 'bar': lodash.constant('bar') });
       *
       * _.isFunction(_.foo);
       * // => true
       * _.isFunction(_.bar);
       * // => false
       *
       * lodash.isFunction(lodash.foo);
       * // => false
       * lodash.isFunction(lodash.bar);
       * // => true
       *
       * // Create a suped-up `defer` in Node.js.
       * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
       */
      var runInContext = (function runInContext(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
    
        /** Built-in constructor references. */
        var Array = context.Array,
            Date = context.Date,
            Error = context.Error,
            Function = context.Function,
            Math = context.Math,
            Object = context.Object,
            RegExp = context.RegExp,
            String = context.String,
            TypeError = context.TypeError;
    
        /** Used for built-in method references. */
        var arrayProto = Array.prototype,
            funcProto = Function.prototype,
            objectProto = Object.prototype;
    
        /** Used to detect overreaching core-js shims. */
        var coreJsData = context['__core-js_shared__'];
    
        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;
    
        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;
    
        /** Used to generate unique IDs. */
        var idCounter = 0;
    
        /** Used to detect methods masquerading as native. */
        var maskSrcKey = (function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
          return uid ? ('Symbol(src)_1.' + uid) : '';
        }());
    
        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;
    
        /** Used to infer the `Object` constructor. */
        var objectCtorString = funcToString.call(Object);
    
        /** Used to restore the original `_` reference in `_.noConflict`. */
        var oldDash = root._;
    
        /** Used to detect if a method is native. */
        var reIsNative = RegExp('^' +
          funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
          .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
        );
    
        /** Built-in value references. */
        var Buffer = moduleExports ? context.Buffer : undefined,
            Symbol = context.Symbol,
            Uint8Array = context.Uint8Array,
            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
            getPrototype = overArg(Object.getPrototypeOf, Object),
            objectCreate = Object.create,
            propertyIsEnumerable = objectProto.propertyIsEnumerable,
            splice = arrayProto.splice,
            spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
            symIterator = Symbol ? Symbol.iterator : undefined,
            symToStringTag = Symbol ? Symbol.toStringTag : undefined;
    
        var defineProperty = (function() {
          try {
            var func = getNative(Object, 'defineProperty');
            func({}, '', {});
            return func;
          } catch (e) {}
        }());
    
        /** Mocked built-ins. */
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
            ctxNow = Date && Date.now !== root.Date.now && Date.now,
            ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
    
        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeCeil = Math.ceil,
            nativeFloor = Math.floor,
            nativeGetSymbols = Object.getOwnPropertySymbols,
            nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
            nativeIsFinite = context.isFinite,
            nativeJoin = arrayProto.join,
            nativeKeys = overArg(Object.keys, Object),
            nativeMax = Math.max,
            nativeMin = Math.min,
            nativeNow = Date.now,
            nativeParseInt = context.parseInt,
            nativeRandom = Math.random,
            nativeReverse = arrayProto.reverse;
    
        /* Built-in method references that are verified to be native. */
        var DataView = getNative(context, 'DataView'),
            Map = getNative(context, 'Map'),
            Promise = getNative(context, 'Promise'),
            Set = getNative(context, 'Set'),
            WeakMap = getNative(context, 'WeakMap'),
            nativeCreate = getNative(Object, 'create');
    
        /** Used to store function metadata. */
        var metaMap = WeakMap && new WeakMap;
    
        /** Used to lookup unminified function names. */
        var realNames = {};
    
        /** Used to detect maps, sets, and weakmaps. */
        var dataViewCtorString = toSource(DataView),
            mapCtorString = toSource(Map),
            promiseCtorString = toSource(Promise),
            setCtorString = toSource(Set),
            weakMapCtorString = toSource(WeakMap);
    
        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
            symbolToString = symbolProto ? symbolProto.toString : undefined;
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates a `lodash` object which wraps `value` to enable implicit method
         * chain sequences. Methods that operate on and return arrays, collections,
         * and functions can be chained together. Methods that retrieve a single value
         * or may return a primitive value will automatically end the chain sequence
         * and return the unwrapped value. Otherwise, the value must be unwrapped
         * with `_#value`.
         *
         * Explicit chain sequences, which must be unwrapped with `_#value`, may be
         * enabled using `_.chain`.
         *
         * The execution of chained methods is lazy, that is, it's deferred until
         * `_#value` is implicitly or explicitly called.
         *
         * Lazy evaluation allows several methods to support shortcut fusion.
         * Shortcut fusion is an optimization to merge iteratee calls; this avoids
         * the creation of intermediate arrays and can greatly reduce the number of
         * iteratee executions. Sections of a chain sequence qualify for shortcut
         * fusion if the section is applied to an array and iteratees accept only
         * one argument. The heuristic for whether a section qualifies for shortcut
         * fusion is subject to change.
         *
         * Chaining is supported in custom builds as long as the `_#value` method is
         * directly or indirectly included in the build.
         *
         * In addition to lodash methods, wrappers have `Array` and `String` methods.
         *
         * The wrapper `Array` methods are:
         * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
         *
         * The wrapper `String` methods are:
         * `replace` and `split`
         *
         * The wrapper methods that support shortcut fusion are:
         * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
         * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
         * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
         *
         * The chainable wrapper methods are:
         * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
         * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
         * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
         * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
         * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
         * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
         * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
         * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
         * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
         * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
         * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
         * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
         * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
         * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
         * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
         * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
         * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
         * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
         * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
         * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
         * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
         * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
         * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
         * `zipObject`, `zipObjectDeep`, and `zipWith`
         *
         * The wrapper methods that are **not** chainable by default are:
         * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
         * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
         * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
         * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
         * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
         * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
         * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
         * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
         * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
         * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
         * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
         * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
         * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
         * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
         * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
         * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
         * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
         * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
         * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
         * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
         * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
         * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
         * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
         * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
         * `upperFirst`, `value`, and `words`
         *
         * @name _
         * @constructor
         * @category Seq
         * @param {*} value The value to wrap in a `lodash` instance.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var wrapped = _([1, 2, 3]);
         *
         * // Returns an unwrapped value.
         * wrapped.reduce(_.add);
         * // => 6
         *
         * // Returns a wrapped value.
         * var squares = wrapped.map(square);
         *
         * _.isArray(squares);
         * // => false
         *
         * _.isArray(squares.value());
         * // => true
         */
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, '__wrapped__')) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
    
        /**
         * The base implementation of `_.create` without support for assigning
         * properties to the created object.
         *
         * @private
         * @param {Object} proto The object to inherit from.
         * @returns {Object} Returns the new object.
         */
        var baseCreate = (function() {
          function object() {}
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result = new object;
            object.prototype = undefined;
            return result;
          };
        }());
    
        /**
         * The function whose prototype chain sequence wrappers inherit from.
         *
         * @private
         */
        function baseLodash() {
          // No operation performed.
        }
    
        /**
         * The base constructor for creating `lodash` wrapper objects.
         *
         * @private
         * @param {*} value The value to wrap.
         * @param {boolean} [chainAll] Enable explicit method chain sequences.
         */
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined;
        }
    
        /**
         * By default, the template delimiters used by lodash are like those in
         * embedded Ruby (ERB) as well as ES2015 template strings. Change the
         * following template settings to use alternative delimiters.
         *
         * @static
         * @memberOf _
         * @type {Object}
         */
        lodash.templateSettings = {
    
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          'escape': reEscape,
    
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          'evaluate': reEvaluate,
    
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          'interpolate': reInterpolate,
    
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          'variable': '',
    
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          'imports': {
    
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            '_': lodash
          }
        };
    
        // Ensure wrappers are instances of `baseLodash`.
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
    
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
         *
         * @private
         * @constructor
         * @param {*} value The value to wrap.
         */
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
    
        /**
         * Creates a clone of the lazy wrapper object.
         *
         * @private
         * @name clone
         * @memberOf LazyWrapper
         * @returns {Object} Returns the cloned `LazyWrapper` object.
         */
        function lazyClone() {
          var result = new LazyWrapper(this.__wrapped__);
          result.__actions__ = copyArray(this.__actions__);
          result.__dir__ = this.__dir__;
          result.__filtered__ = this.__filtered__;
          result.__iteratees__ = copyArray(this.__iteratees__);
          result.__takeCount__ = this.__takeCount__;
          result.__views__ = copyArray(this.__views__);
          return result;
        }
    
        /**
         * Reverses the direction of lazy iteration.
         *
         * @private
         * @name reverse
         * @memberOf LazyWrapper
         * @returns {Object} Returns the new reversed `LazyWrapper` object.
         */
        function lazyReverse() {
          if (this.__filtered__) {
            var result = new LazyWrapper(this);
            result.__dir__ = -1;
            result.__filtered__ = true;
          } else {
            result = this.clone();
            result.__dir__ *= -1;
          }
          return result;
        }
    
        /**
         * Extracts the unwrapped value from its lazy wrapper.
         *
         * @private
         * @name value
         * @memberOf LazyWrapper
         * @returns {*} Returns the unwrapped value.
         */
        function lazyValue() {
          var array = this.__wrapped__.value(),
              dir = this.__dir__,
              isArr = isArray(array),
              isRight = dir < 0,
              arrLength = isArr ? array.length : 0,
              view = getView(0, arrLength, this.__views__),
              start = view.start,
              end = view.end,
              length = end - start,
              index = isRight ? end : (start - 1),
              iteratees = this.__iteratees__,
              iterLength = iteratees.length,
              resIndex = 0,
              takeCount = nativeMin(length, this.__takeCount__);
    
          if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result = [];
    
          outer:
          while (length-- && resIndex < takeCount) {
            index += dir;
    
            var iterIndex = -1,
                value = array[index];
    
            while (++iterIndex < iterLength) {
              var data = iteratees[iterIndex],
                  iteratee = data.iteratee,
                  type = data.type,
                  computed = iteratee(value);
    
              if (type == LAZY_MAP_FLAG) {
                value = computed;
              } else if (!computed) {
                if (type == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result[resIndex++] = value;
          }
          return result;
        }
    
        // Ensure `LazyWrapper` is an instance of `baseLodash`.
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates a hash object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Hash(entries) {
          var index = -1,
              length = entries == null ? 0 : entries.length;
    
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
    
        /**
         * Removes all key-value entries from the hash.
         *
         * @private
         * @name clear
         * @memberOf Hash
         */
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
    
        /**
         * Removes `key` and its value from the hash.
         *
         * @private
         * @name delete
         * @memberOf Hash
         * @param {Object} hash The hash to modify.
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function hashDelete(key) {
          var result = this.has(key) && delete this.__data__[key];
          this.size -= result ? 1 : 0;
          return result;
        }
    
        /**
         * Gets the hash value for `key`.
         *
         * @private
         * @name get
         * @memberOf Hash
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result = data[key];
            return result === HASH_UNDEFINED ? undefined : result;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }
    
        /**
         * Checks if a hash value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Hash
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
        }
    
        /**
         * Sets the hash `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Hash
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the hash instance.
         */
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
          return this;
        }
    
        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates an list cache object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function ListCache(entries) {
          var index = -1,
              length = entries == null ? 0 : entries.length;
    
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
    
        /**
         * Removes all key-value entries from the list cache.
         *
         * @private
         * @name clear
         * @memberOf ListCache
         */
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
    
        /**
         * Removes `key` and its value from the list cache.
         *
         * @private
         * @name delete
         * @memberOf ListCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function listCacheDelete(key) {
          var data = this.__data__,
              index = assocIndexOf(data, key);
    
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
    
        /**
         * Gets the list cache value for `key`.
         *
         * @private
         * @name get
         * @memberOf ListCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function listCacheGet(key) {
          var data = this.__data__,
              index = assocIndexOf(data, key);
    
          return index < 0 ? undefined : data[index][1];
        }
    
        /**
         * Checks if a list cache value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf ListCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
    
        /**
         * Sets the list cache `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf ListCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the list cache instance.
         */
        function listCacheSet(key, value) {
          var data = this.__data__,
              index = assocIndexOf(data, key);
    
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
    
        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates a map cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function MapCache(entries) {
          var index = -1,
              length = entries == null ? 0 : entries.length;
    
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
    
        /**
         * Removes all key-value entries from the map.
         *
         * @private
         * @name clear
         * @memberOf MapCache
         */
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            'hash': new Hash,
            'map': new (Map || ListCache),
            'string': new Hash
          };
        }
    
        /**
         * Removes `key` and its value from the map.
         *
         * @private
         * @name delete
         * @memberOf MapCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function mapCacheDelete(key) {
          var result = getMapData(this, key)['delete'](key);
          this.size -= result ? 1 : 0;
          return result;
        }
    
        /**
         * Gets the map value for `key`.
         *
         * @private
         * @name get
         * @memberOf MapCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
    
        /**
         * Checks if a map value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf MapCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
    
        /**
         * Sets the map `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf MapCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the map cache instance.
         */
        function mapCacheSet(key, value) {
          var data = getMapData(this, key),
              size = data.size;
    
          data.set(key, value);
          this.size += data.size == size ? 0 : 1;
          return this;
        }
    
        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
    
        /*------------------------------------------------------------------------*/
    
        /**
         *
         * Creates an array cache object to store unique values.
         *
         * @private
         * @constructor
         * @param {Array} [values] The values to cache.
         */
        function SetCache(values) {
          var index = -1,
              length = values == null ? 0 : values.length;
    
          this.__data__ = new MapCache;
          while (++index < length) {
            this.add(values[index]);
          }
        }
    
        /**
         * Adds `value` to the array cache.
         *
         * @private
         * @name add
         * @memberOf SetCache
         * @alias push
         * @param {*} value The value to cache.
         * @returns {Object} Returns the cache instance.
         */
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
    
        /**
         * Checks if `value` is in the array cache.
         *
         * @private
         * @name has
         * @memberOf SetCache
         * @param {*} value The value to search for.
         * @returns {number} Returns `true` if `value` is found, else `false`.
         */
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
    
        // Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates a stack cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
    
        /**
         * Removes all key-value entries from the stack.
         *
         * @private
         * @name clear
         * @memberOf Stack
         */
        function stackClear() {
          this.__data__ = new ListCache;
          this.size = 0;
        }
    
        /**
         * Removes `key` and its value from the stack.
         *
         * @private
         * @name delete
         * @memberOf Stack
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function stackDelete(key) {
          var data = this.__data__,
              result = data['delete'](key);
    
          this.size = data.size;
          return result;
        }
    
        /**
         * Gets the stack value for `key`.
         *
         * @private
         * @name get
         * @memberOf Stack
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function stackGet(key) {
          return this.__data__.get(key);
        }
    
        /**
         * Checks if a stack value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Stack
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function stackHas(key) {
          return this.__data__.has(key);
        }
    
        /**
         * Sets the stack `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Stack
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the stack cache instance.
         */
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
    
        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates an array of the enumerable property names of the array-like `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @param {boolean} inherited Specify returning inherited property names.
         * @returns {Array} Returns the array of property names.
         */
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value),
              isArg = !isArr && isArguments(value),
              isBuff = !isArr && !isArg && isBuffer(value),
              isType = !isArr && !isArg && !isBuff && isTypedArray(value),
              skipIndexes = isArr || isArg || isBuff || isType,
              result = skipIndexes ? baseTimes(value.length, String) : [],
              length = result.length;
    
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) &&
                !(skipIndexes && (
                   // Safari 9 has enumerable `arguments.length` in strict mode.
                   key == 'length' ||
                   // Node.js 0.10 has enumerable non-index properties on buffers.
                   (isBuff && (key == 'offset' || key == 'parent')) ||
                   // PhantomJS 2 has enumerable non-index properties on typed arrays.
                   (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                   // Skip index properties.
                   isIndex(key, length)
                ))) {
              result.push(key);
            }
          }
          return result;
        }
    
        /**
         * A specialized version of `_.sample` for arrays.
         *
         * @private
         * @param {Array} array The array to sample.
         * @returns {*} Returns the random element.
         */
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined;
        }
    
        /**
         * A specialized version of `_.sampleSize` for arrays.
         *
         * @private
         * @param {Array} array The array to sample.
         * @param {number} n The number of elements to sample.
         * @returns {Array} Returns the random elements.
         */
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
    
        /**
         * A specialized version of `_.shuffle` for arrays.
         *
         * @private
         * @param {Array} array The array to shuffle.
         * @returns {Array} Returns the new shuffled array.
         */
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
    
        /**
         * This function is like `assignValue` except that it doesn't assign
         * `undefined` values.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignMergeValue(object, key, value) {
          if ((value !== undefined && !eq(object[key], value)) ||
              (value === undefined && !(key in object))) {
            baseAssignValue(object, key, value);
          }
        }
    
        /**
         * Assigns `value` to `key` of `object` if the existing value is not equivalent
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
              (value === undefined && !(key in object))) {
            baseAssignValue(object, key, value);
          }
        }
    
        /**
         * Gets the index at which the `key` is found in `array` of key-value pairs.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} key The key to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
    
        /**
         * Aggregates elements of `collection` on `accumulator` with keys transformed
         * by `iteratee` and values set by `setter`.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform keys.
         * @param {Object} accumulator The initial aggregated object.
         * @returns {Function} Returns `accumulator`.
         */
        function baseAggregator(collection, setter, iteratee, accumulator) {
          baseEach(collection, function(value, key, collection) {
            setter(accumulator, value, iteratee(value), collection);
          });
          return accumulator;
        }
    
        /**
         * The base implementation of `_.assign` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
    
        /**
         * The base implementation of `_.assignIn` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
    
        /**
         * The base implementation of `assignValue` and `assignMergeValue` without
         * value checks.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function baseAssignValue(object, key, value) {
          if (key == '__proto__' && defineProperty) {
            defineProperty(object, key, {
              'configurable': true,
              'enumerable': true,
              'value': value,
              'writable': true
            });
          } else {
            object[key] = value;
          }
        }
    
        /**
         * The base implementation of `_.at` without support for individual paths.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {string[]} paths The property paths to pick.
         * @returns {Array} Returns the picked elements.
         */
        function baseAt(object, paths) {
          var index = -1,
              length = paths.length,
              result = Array(length),
              skip = object == null;
    
          while (++index < length) {
            result[index] = skip ? undefined : get(object, paths[index]);
          }
          return result;
        }
    
        /**
         * The base implementation of `_.clamp` which doesn't coerce arguments.
         *
         * @private
         * @param {number} number The number to clamp.
         * @param {number} [lower] The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the clamped number.
         */
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
    
        /**
         * The base implementation of `_.clone` and `_.cloneDeep` which tracks
         * traversed objects.
         *
         * @private
         * @param {*} value The value to clone.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Deep clone
         *  2 - Flatten inherited properties
         *  4 - Clone symbols
         * @param {Function} [customizer] The function to customize cloning.
         * @param {string} [key] The key of `value`.
         * @param {Object} [object] The parent object of `value`.
         * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
         * @returns {*} Returns the cloned value.
         */
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result,
              isDeep = bitmask & CLONE_DEEP_FLAG,
              isFlat = bitmask & CLONE_FLAT_FLAG,
              isFull = bitmask & CLONE_SYMBOLS_FLAG;
    
          if (customizer) {
            result = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result !== undefined) {
            return result;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result);
            }
          } else {
            var tag = getTag(value),
                isFunc = tag == funcTag || tag == genTag;
    
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
              result = (isFlat || isFunc) ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat
                  ? copySymbolsIn(value, baseAssignIn(result, value))
                  : copySymbols(value, baseAssign(result, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result = initCloneByTag(value, tag, isDeep);
            }
          }
          // Check for circular references and return its corresponding clone.
          stack || (stack = new Stack);
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result);
    
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key) {
              result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
          }
    
          var keysFunc = isFull
            ? (isFlat ? getAllKeysIn : getAllKeys)
            : (isFlat ? keysIn : keys);
    
          var props = isArr ? undefined : keysFunc(value);
          arrayEach(props || value, function(subValue, key) {
            if (props) {
              key = subValue;
              subValue = value[key];
            }
            // Recursively populate clone (susceptible to call stack limits).
            assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
          return result;
        }
    
        /**
         * The base implementation of `_.conforms` which doesn't clone `source`.
         *
         * @private
         * @param {Object} source The object of property predicates to conform to.
         * @returns {Function} Returns the new spec function.
         */
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
    
        /**
         * The base implementation of `_.conformsTo` which accepts `props` to check.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property predicates to conform to.
         * @returns {boolean} Returns `true` if `object` conforms, else `false`.
         */
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object(object);
          while (length--) {
            var key = props[length],
                predicate = source[key],
                value = object[key];
    
            if ((value === undefined && !(key in object)) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
    
        /**
         * The base implementation of `_.delay` and `_.defer` which accepts `args`
         * to provide to `func`.
         *
         * @private
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @param {Array} args The arguments to provide to `func`.
         * @returns {number|Object} Returns the timer id or timeout object.
         */
        function baseDelay(func, wait, args) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return setTimeout(function() { func.apply(undefined, args); }, wait);
        }
    
        /**
         * The base implementation of methods like `_.difference` without support
         * for excluding multiple arrays or iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Array} values The values to exclude.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         */
        function baseDifference(array, values, iteratee, comparator) {
          var index = -1,
              includes = arrayIncludes,
              isCommon = true,
              length = array.length,
              result = [],
              valuesLength = values.length;
    
          if (!length) {
            return result;
          }
          if (iteratee) {
            values = arrayMap(values, baseUnary(iteratee));
          }
          if (comparator) {
            includes = arrayIncludesWith;
            isCommon = false;
          }
          else if (values.length >= LARGE_ARRAY_SIZE) {
            includes = cacheHas;
            isCommon = false;
            values = new SetCache(values);
          }
          outer:
          while (++index < length) {
            var value = array[index],
                computed = iteratee == null ? value : iteratee(value);
    
            value = (comparator || value !== 0) ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result.push(value);
            }
            else if (!includes(values, computed, comparator)) {
              result.push(value);
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `_.forEach` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         */
        var baseEach = createBaseEach(baseForOwn);
    
        /**
         * The base implementation of `_.forEachRight` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         */
        var baseEachRight = createBaseEach(baseForOwnRight, true);
    
        /**
         * The base implementation of `_.every` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`
         */
        function baseEvery(collection, predicate) {
          var result = true;
          baseEach(collection, function(value, index, collection) {
            result = !!predicate(value, index, collection);
            return result;
          });
          return result;
        }
    
        /**
         * The base implementation of methods like `_.max` and `_.min` which accepts a
         * `comparator` to determine the extremum value.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The iteratee invoked per iteration.
         * @param {Function} comparator The comparator used to compare values.
         * @returns {*} Returns the extremum value.
         */
        function baseExtremum(array, iteratee, comparator) {
          var index = -1,
              length = array.length;
    
          while (++index < length) {
            var value = array[index],
                current = iteratee(value);
    
            if (current != null && (computed === undefined
                  ? (current === current && !isSymbol(current))
                  : comparator(current, computed)
                )) {
              var computed = current,
                  result = value;
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `_.fill` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to fill.
         * @param {*} value The value to fill `array` with.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns `array`.
         */
        function baseFill(array, value, start, end) {
          var length = array.length;
    
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : (length + start);
          }
          end = (end === undefined || end > length) ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
    
        /**
         * The base implementation of `_.filter` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function baseFilter(collection, predicate) {
          var result = [];
          baseEach(collection, function(value, index, collection) {
            if (predicate(value, index, collection)) {
              result.push(value);
            }
          });
          return result;
        }
    
        /**
         * The base implementation of `_.flatten` with support for restricting flattening.
         *
         * @private
         * @param {Array} array The array to flatten.
         * @param {number} depth The maximum recursion depth.
         * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
         * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
         * @param {Array} [result=[]] The initial result value.
         * @returns {Array} Returns the new flattened array.
         */
        function baseFlatten(array, depth, predicate, isStrict, result) {
          var index = -1,
              length = array.length;
    
          predicate || (predicate = isFlattenable);
          result || (result = []);
    
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                // Recursively flatten arrays (susceptible to call stack limits).
                baseFlatten(value, depth - 1, predicate, isStrict, result);
              } else {
                arrayPush(result, value);
              }
            } else if (!isStrict) {
              result[result.length] = value;
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `baseForOwn` which iterates over `object`
         * properties returned by `keysFunc` and invokes `iteratee` for each property.
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseFor = createBaseFor();
    
        /**
         * This function is like `baseFor` except that it iterates over properties
         * in the opposite order.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseForRight = createBaseFor(true);
    
        /**
         * The base implementation of `_.forOwn` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwn(object, iteratee) {
          return object && baseFor(object, iteratee, keys);
        }
    
        /**
         * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwnRight(object, iteratee) {
          return object && baseForRight(object, iteratee, keys);
        }
    
        /**
         * The base implementation of `_.functions` which creates an array of
         * `object` function property names filtered from `props`.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Array} props The property names to filter.
         * @returns {Array} Returns the function names.
         */
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
    
        /**
         * The base implementation of `_.get` without support for default values.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @returns {*} Returns the resolved value.
         */
        function baseGet(object, path) {
          path = castPath(path, object);
    
          var index = 0,
              length = path.length;
    
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return (index && index == length) ? object : undefined;
        }
    
        /**
         * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
         * `keysFunc` and `symbolsFunc` to get the enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @param {Function} symbolsFunc The function to get the symbols of `object`.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result = keysFunc(object);
          return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }
    
        /**
         * The base implementation of `getTag` without fallbacks for buggy environments.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
          }
          return (symToStringTag && symToStringTag in Object(value))
            ? getRawTag(value)
            : objectToString(value);
        }
    
        /**
         * The base implementation of `_.gt` which doesn't coerce arguments.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than `other`,
         *  else `false`.
         */
        function baseGt(value, other) {
          return value > other;
        }
    
        /**
         * The base implementation of `_.has` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
    
        /**
         * The base implementation of `_.hasIn` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHasIn(object, key) {
          return object != null && key in Object(object);
        }
    
        /**
         * The base implementation of `_.inRange` which doesn't coerce arguments.
         *
         * @private
         * @param {number} number The number to check.
         * @param {number} start The start of the range.
         * @param {number} end The end of the range.
         * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
         */
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
    
        /**
         * The base implementation of methods like `_.intersection`, without support
         * for iteratee shorthands, that accepts an array of arrays to inspect.
         *
         * @private
         * @param {Array} arrays The arrays to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of shared values.
         */
        function baseIntersection(arrays, iteratee, comparator) {
          var includes = comparator ? arrayIncludesWith : arrayIncludes,
              length = arrays[0].length,
              othLength = arrays.length,
              othIndex = othLength,
              caches = Array(othLength),
              maxLength = Infinity,
              result = [];
    
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee) {
              array = arrayMap(array, baseUnary(iteratee));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
              ? new SetCache(othIndex && array)
              : undefined;
          }
          array = arrays[0];
    
          var index = -1,
              seen = caches[0];
    
          outer:
          while (++index < length && result.length < maxLength) {
            var value = array[index],
                computed = iteratee ? iteratee(value) : value;
    
            value = (comparator || value !== 0) ? value : 0;
            if (!(seen
                  ? cacheHas(seen, computed)
                  : includes(result, computed, comparator)
                )) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (!(cache
                      ? cacheHas(cache, computed)
                      : includes(arrays[othIndex], computed, comparator))
                    ) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `_.invert` and `_.invertBy` which inverts
         * `object` with values transformed by `iteratee` and set by `setter`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform values.
         * @param {Object} accumulator The initial inverted object.
         * @returns {Function} Returns `accumulator`.
         */
        function baseInverter(object, setter, iteratee, accumulator) {
          baseForOwn(object, function(value, key, object) {
            setter(accumulator, iteratee(value), key, object);
          });
          return accumulator;
        }
    
        /**
         * The base implementation of `_.invoke` without support for individual
         * method arguments.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the method to invoke.
         * @param {Array} args The arguments to invoke the method with.
         * @returns {*} Returns the result of the invoked method.
         */
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined : apply(func, object, args);
        }
    
        /**
         * The base implementation of `_.isArguments`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         */
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
    
        /**
         * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
         */
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
    
        /**
         * The base implementation of `_.isDate` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
         */
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
    
        /**
         * The base implementation of `_.isEqual` which supports partial comparisons
         * and tracks traversed objects.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Unordered comparison
         *  2 - Partial comparison
         * @param {Function} [customizer] The function to customize comparisons.
         * @param {Object} [stack] Tracks traversed `value` and `other` objects.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         */
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
    
        /**
         * A specialized version of `baseIsEqual` for arrays and objects which performs
         * deep comparisons and tracks traversed objects enabling objects with circular
         * references to be compared.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} [stack] Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object),
              othIsArr = isArray(other),
              objTag = objIsArr ? arrayTag : getTag(object),
              othTag = othIsArr ? arrayTag : getTag(other);
    
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
    
          var objIsObj = objTag == objectTag,
              othIsObj = othTag == objectTag,
              isSameTag = objTag == othTag;
    
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack);
            return (objIsArr || isTypedArray(object))
              ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
              : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
    
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object,
                  othUnwrapped = othIsWrapped ? other.value() : other;
    
              stack || (stack = new Stack);
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack);
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
    
        /**
         * The base implementation of `_.isMap` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         */
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
    
        /**
         * The base implementation of `_.isMatch` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Array} matchData The property names, values, and compare flags to match.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         */
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length,
              length = index,
              noCustomizer = !customizer;
    
          if (object == null) {
            return !length;
          }
          object = Object(object);
          while (index--) {
            var data = matchData[index];
            if ((noCustomizer && data[2])
                  ? data[1] !== object[data[0]]
                  : !(data[0] in object)
                ) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0],
                objValue = object[key],
                srcValue = data[1];
    
            if (noCustomizer && data[2]) {
              if (objValue === undefined && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack;
              if (customizer) {
                var result = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result === undefined
                    ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                    : result
                  )) {
                return false;
              }
            }
          }
          return true;
        }
    
        /**
         * The base implementation of `_.isNative` without bad shim checks.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         */
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
    
        /**
         * The base implementation of `_.isRegExp` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
         */
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
    
        /**
         * The base implementation of `_.isSet` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         */
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
    
        /**
         * The base implementation of `_.isTypedArray` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         */
        function baseIsTypedArray(value) {
          return isObjectLike(value) &&
            isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
    
        /**
         * The base implementation of `_.iteratee`.
         *
         * @private
         * @param {*} [value=_.identity] The value to convert to an iteratee.
         * @returns {Function} Returns the iteratee.
         */
        function baseIteratee(value) {
          // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
          // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
          if (typeof value == 'function') {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == 'object') {
            return isArray(value)
              ? baseMatchesProperty(value[0], value[1])
              : baseMatches(value);
          }
          return property(value);
        }
    
        /**
         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result = [];
          for (var key in Object(object)) {
            if (hasOwnProperty.call(object, key) && key != 'constructor') {
              result.push(key);
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object),
              result = [];
    
          for (var key in object) {
            if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
              result.push(key);
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `_.lt` which doesn't coerce arguments.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than `other`,
         *  else `false`.
         */
        function baseLt(value, other) {
          return value < other;
        }
    
        /**
         * The base implementation of `_.map` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function baseMap(collection, iteratee) {
          var index = -1,
              result = isArrayLike(collection) ? Array(collection.length) : [];
    
          baseEach(collection, function(value, key, collection) {
            result[++index] = iteratee(value, key, collection);
          });
          return result;
        }
    
        /**
         * The base implementation of `_.matches` which doesn't clone `source`.
         *
         * @private
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
    
        /**
         * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
         *
         * @private
         * @param {string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return (objValue === undefined && objValue === srcValue)
              ? hasIn(object, path)
              : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
    
        /**
         * The base implementation of `_.merge` without support for multiple sources.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @param {number} srcIndex The index of `source`.
         * @param {Function} [customizer] The function to customize merged values.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         */
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack);
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            }
            else {
              var newValue = customizer
                ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
                : undefined;
    
              if (newValue === undefined) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
    
        /**
         * A specialized version of `baseMerge` for arrays and objects which performs
         * deep merges and tracks traversed objects enabling objects with circular
         * references to be merged.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @param {string} key The key of the value to merge.
         * @param {number} srcIndex The index of `source`.
         * @param {Function} mergeFunc The function to merge values.
         * @param {Function} [customizer] The function to customize assigned values.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         */
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key),
              srcValue = safeGet(source, key),
              stacked = stack.get(srcValue);
    
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer
            ? customizer(objValue, srcValue, (key + ''), object, source, stack)
            : undefined;
    
          var isCommon = newValue === undefined;
    
          if (isCommon) {
            var isArr = isArray(srcValue),
                isBuff = !isArr && isBuffer(srcValue),
                isTyped = !isArr && !isBuff && isTypedArray(srcValue);
    
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              }
              else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              }
              else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              }
              else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              }
              else {
                newValue = [];
              }
            }
            else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              }
              else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            }
            else {
              isCommon = false;
            }
          }
          if (isCommon) {
            // Recursively merge objects and arrays (susceptible to call stack limits).
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack['delete'](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
    
        /**
         * The base implementation of `_.nth` which doesn't coerce arguments.
         *
         * @private
         * @param {Array} array The array to query.
         * @param {number} n The index of the element to return.
         * @returns {*} Returns the nth element of `array`.
         */
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined;
        }
    
        /**
         * The base implementation of `_.orderBy` without param guards.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
         * @param {string[]} orders The sort orders of `iteratees`.
         * @returns {Array} Returns the new sorted array.
         */
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee) {
              if (isArray(iteratee)) {
                return function(value) {
                  return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                }
              }
              return iteratee;
            });
          } else {
            iteratees = [identity];
          }
    
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
    
          var result = baseMap(collection, function(value, key, collection) {
            var criteria = arrayMap(iteratees, function(iteratee) {
              return iteratee(value);
            });
            return { 'criteria': criteria, 'index': ++index, 'value': value };
          });
    
          return baseSortBy(result, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
    
        /**
         * The base implementation of `_.pick` without support for individual
         * property identifiers.
         *
         * @private
         * @param {Object} object The source object.
         * @param {string[]} paths The property paths to pick.
         * @returns {Object} Returns the new object.
         */
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
    
        /**
         * The base implementation of  `_.pickBy` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The source object.
         * @param {string[]} paths The property paths to pick.
         * @param {Function} predicate The function invoked per property.
         * @returns {Object} Returns the new object.
         */
        function basePickBy(object, paths, predicate) {
          var index = -1,
              length = paths.length,
              result = {};
    
          while (++index < length) {
            var path = paths[index],
                value = baseGet(object, path);
    
            if (predicate(value, path)) {
              baseSet(result, castPath(path, object), value);
            }
          }
          return result;
        }
    
        /**
         * A specialized version of `baseProperty` which supports deep paths.
         *
         * @private
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
    
        /**
         * The base implementation of `_.pullAllBy` without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns `array`.
         */
        function basePullAll(array, values, iteratee, comparator) {
          var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
              index = -1,
              length = values.length,
              seen = array;
    
          if (array === values) {
            values = copyArray(values);
          }
          if (iteratee) {
            seen = arrayMap(array, baseUnary(iteratee));
          }
          while (++index < length) {
            var fromIndex = 0,
                value = values[index],
                computed = iteratee ? iteratee(value) : value;
    
            while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
    
        /**
         * The base implementation of `_.pullAt` without support for individual
         * indexes or capturing the removed elements.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {number[]} indexes The indexes of elements to remove.
         * @returns {Array} Returns `array`.
         */
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0,
              lastIndex = length - 1;
    
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
    
        /**
         * The base implementation of `_.random` without support for returning
         * floating-point numbers.
         *
         * @private
         * @param {number} lower The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the random number.
         */
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
    
        /**
         * The base implementation of `_.range` and `_.rangeRight` which doesn't
         * coerce arguments.
         *
         * @private
         * @param {number} start The start of the range.
         * @param {number} end The end of the range.
         * @param {number} step The value to increment or decrement by.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Array} Returns the range of numbers.
         */
        function baseRange(start, end, step, fromRight) {
          var index = -1,
              length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
              result = Array(length);
    
          while (length--) {
            result[fromRight ? length : ++index] = start;
            start += step;
          }
          return result;
        }
    
        /**
         * The base implementation of `_.repeat` which doesn't coerce arguments.
         *
         * @private
         * @param {string} string The string to repeat.
         * @param {number} n The number of times to repeat the string.
         * @returns {string} Returns the repeated string.
         */
        function baseRepeat(string, n) {
          var result = '';
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result;
          }
          // Leverage the exponentiation by squaring algorithm for a faster repeat.
          // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
          do {
            if (n % 2) {
              result += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
    
          return result;
        }
    
        /**
         * The base implementation of `_.rest` which doesn't validate or coerce arguments.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @returns {Function} Returns the new function.
         */
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + '');
        }
    
        /**
         * The base implementation of `_.sample`.
         *
         * @private
         * @param {Array|Object} collection The collection to sample.
         * @returns {*} Returns the random element.
         */
        function baseSample(collection) {
          return arraySample(values(collection));
        }
    
        /**
         * The base implementation of `_.sampleSize` without param guards.
         *
         * @private
         * @param {Array|Object} collection The collection to sample.
         * @param {number} n The number of elements to sample.
         * @returns {Array} Returns the random elements.
         */
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
    
        /**
         * The base implementation of `_.set`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @param {Function} [customizer] The function to customize path creation.
         * @returns {Object} Returns `object`.
         */
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
    
          var index = -1,
              length = path.length,
              lastIndex = length - 1,
              nested = object;
    
          while (nested != null && ++index < length) {
            var key = toKey(path[index]),
                newValue = value;
    
            if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
              return object;
            }
    
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined;
              if (newValue === undefined) {
                newValue = isObject(objValue)
                  ? objValue
                  : (isIndex(path[index + 1]) ? [] : {});
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
    
        /**
         * The base implementation of `setData` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
    
        /**
         * The base implementation of `setToString` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, 'toString', {
            'configurable': true,
            'enumerable': false,
            'value': constant(string),
            'writable': true
          });
        };
    
        /**
         * The base implementation of `_.shuffle`.
         *
         * @private
         * @param {Array|Object} collection The collection to shuffle.
         * @returns {Array} Returns the new shuffled array.
         */
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
    
        /**
         * The base implementation of `_.slice` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseSlice(array, start, end) {
          var index = -1,
              length = array.length;
    
          if (start < 0) {
            start = -start > length ? 0 : (length + start);
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : ((end - start) >>> 0);
          start >>>= 0;
    
          var result = Array(length);
          while (++index < length) {
            result[index] = array[index + start];
          }
          return result;
        }
    
        /**
         * The base implementation of `_.some` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function baseSome(collection, predicate) {
          var result;
    
          baseEach(collection, function(value, index, collection) {
            result = predicate(value, index, collection);
            return !result;
          });
          return !!result;
        }
    
        /**
         * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
         * performs a binary search of `array` to determine the index at which `value`
         * should be inserted into `array` in order to maintain its sort order.
         *
         * @private
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {boolean} [retHighest] Specify returning the highest qualified index.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         */
        function baseSortedIndex(array, value, retHighest) {
          var low = 0,
              high = array == null ? low : array.length;
    
          if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = (low + high) >>> 1,
                  computed = array[mid];
    
              if (computed !== null && !isSymbol(computed) &&
                  (retHighest ? (computed <= value) : (computed < value))) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
    
        /**
         * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
         * which invokes `iteratee` for `value` and each element of `array` to compute
         * their sort ranking. The iteratee is invoked with one argument; (value).
         *
         * @private
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} iteratee The iteratee invoked per element.
         * @param {boolean} [retHighest] Specify returning the highest qualified index.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         */
        function baseSortedIndexBy(array, value, iteratee, retHighest) {
          var low = 0,
              high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
    
          value = iteratee(value);
          var valIsNaN = value !== value,
              valIsNull = value === null,
              valIsSymbol = isSymbol(value),
              valIsUndefined = value === undefined;
    
          while (low < high) {
            var mid = nativeFloor((low + high) / 2),
                computed = iteratee(array[mid]),
                othIsDefined = computed !== undefined,
                othIsNull = computed === null,
                othIsReflexive = computed === computed,
                othIsSymbol = isSymbol(computed);
    
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? (computed <= value) : (computed < value);
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
    
        /**
         * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         */
        function baseSortedUniq(array, iteratee) {
          var index = -1,
              length = array.length,
              resIndex = 0,
              result = [];
    
          while (++index < length) {
            var value = array[index],
                computed = iteratee ? iteratee(value) : value;
    
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `_.toNumber` which doesn't ensure correct
         * conversions of binary, hexadecimal, or octal string values.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {number} Returns the number.
         */
        function baseToNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
    
        /**
         * The base implementation of `_.toString` which doesn't convert nullish
         * values to empty strings.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {string} Returns the string.
         */
        function baseToString(value) {
          // Exit early for strings to avoid a performance hit in some environments.
          if (typeof value == 'string') {
            return value;
          }
          if (isArray(value)) {
            // Recursively convert values (susceptible to call stack limits).
            return arrayMap(value, baseToString) + '';
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : '';
          }
          var result = (value + '');
          return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }
    
        /**
         * The base implementation of `_.uniqBy` without support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         */
        function baseUniq(array, iteratee, comparator) {
          var index = -1,
              includes = arrayIncludes,
              length = array.length,
              isCommon = true,
              result = [],
              seen = result;
    
          if (comparator) {
            isCommon = false;
            includes = arrayIncludesWith;
          }
          else if (length >= LARGE_ARRAY_SIZE) {
            var set = iteratee ? null : createSet(array);
            if (set) {
              return setToArray(set);
            }
            isCommon = false;
            includes = cacheHas;
            seen = new SetCache;
          }
          else {
            seen = iteratee ? [] : result;
          }
          outer:
          while (++index < length) {
            var value = array[index],
                computed = iteratee ? iteratee(value) : value;
    
            value = (comparator || value !== 0) ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee) {
                seen.push(computed);
              }
              result.push(value);
            }
            else if (!includes(seen, computed, comparator)) {
              if (seen !== result) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
          return result;
        }
    
        /**
         * The base implementation of `_.unset`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The property path to unset.
         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
         */
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
    
        /**
         * The base implementation of `_.update`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to update.
         * @param {Function} updater The function to produce the updated value.
         * @param {Function} [customizer] The function to customize path creation.
         * @returns {Object} Returns `object`.
         */
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
    
        /**
         * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
         * without support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to query.
         * @param {Function} predicate The function invoked per iteration.
         * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length,
              index = fromRight ? length : -1;
    
          while ((fromRight ? index-- : ++index < length) &&
            predicate(array[index], index, array)) {}
    
          return isDrop
            ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
            : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
        }
    
        /**
         * The base implementation of `wrapperValue` which returns the result of
         * performing a sequence of actions on the unwrapped `value`, where each
         * successive action is supplied the return value of the previous.
         *
         * @private
         * @param {*} value The unwrapped value.
         * @param {Array} actions Actions to perform to resolve the unwrapped value.
         * @returns {*} Returns the resolved value.
         */
        function baseWrapperValue(value, actions) {
          var result = value;
          if (result instanceof LazyWrapper) {
            result = result.value();
          }
          return arrayReduce(actions, function(result, action) {
            return action.func.apply(action.thisArg, arrayPush([result], action.args));
          }, result);
        }
    
        /**
         * The base implementation of methods like `_.xor`, without support for
         * iteratee shorthands, that accepts an array of arrays to inspect.
         *
         * @private
         * @param {Array} arrays The arrays to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of values.
         */
        function baseXor(arrays, iteratee, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1,
              result = Array(length);
    
          while (++index < length) {
            var array = arrays[index],
                othIndex = -1;
    
            while (++othIndex < length) {
              if (othIndex != index) {
                result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result, 1), iteratee, comparator);
        }
    
        /**
         * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
         *
         * @private
         * @param {Array} props The property identifiers.
         * @param {Array} values The property values.
         * @param {Function} assignFunc The function to assign values.
         * @returns {Object} Returns the new object.
         */
        function baseZipObject(props, values, assignFunc) {
          var index = -1,
              length = props.length,
              valsLength = values.length,
              result = {};
    
          while (++index < length) {
            var value = index < valsLength ? values[index] : undefined;
            assignFunc(result, props[index], value);
          }
          return result;
        }
    
        /**
         * Casts `value` to an empty array if it's not an array like object.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {Array|Object} Returns the cast array-like object.
         */
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
    
        /**
         * Casts `value` to `identity` if it's not a function.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {Function} Returns cast function.
         */
        function castFunction(value) {
          return typeof value == 'function' ? value : identity;
        }
    
        /**
         * Casts `value` to a path array if it's not one.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {Object} [object] The object to query keys on.
         * @returns {Array} Returns the cast property path array.
         */
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
    
        /**
         * A `baseRest` alias which can be replaced with `identity` by module
         * replacement plugins.
         *
         * @private
         * @type {Function}
         * @param {Function} func The function to apply a rest parameter to.
         * @returns {Function} Returns the new function.
         */
        var castRest = baseRest;
    
        /**
         * Casts `array` to a slice if it's needed.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {number} start The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the cast slice.
         */
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined ? length : end;
          return (!start && end >= length) ? array : baseSlice(array, start, end);
        }
    
        /**
         * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
         *
         * @private
         * @param {number|Object} id The timer id or timeout object of the timer to clear.
         */
        var clearTimeout = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
    
        /**
         * Creates a clone of  `buffer`.
         *
         * @private
         * @param {Buffer} buffer The buffer to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Buffer} Returns the cloned buffer.
         */
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length,
              result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    
          buffer.copy(result);
          return result;
        }
    
        /**
         * Creates a clone of `arrayBuffer`.
         *
         * @private
         * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
         * @returns {ArrayBuffer} Returns the cloned array buffer.
         */
        function cloneArrayBuffer(arrayBuffer) {
          var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array(result).set(new Uint8Array(arrayBuffer));
          return result;
        }
    
        /**
         * Creates a clone of `dataView`.
         *
         * @private
         * @param {Object} dataView The data view to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned data view.
         */
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
    
        /**
         * Creates a clone of `regexp`.
         *
         * @private
         * @param {Object} regexp The regexp to clone.
         * @returns {Object} Returns the cloned regexp.
         */
        function cloneRegExp(regexp) {
          var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result.lastIndex = regexp.lastIndex;
          return result;
        }
    
        /**
         * Creates a clone of the `symbol` object.
         *
         * @private
         * @param {Object} symbol The symbol object to clone.
         * @returns {Object} Returns the cloned symbol object.
         */
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }
    
        /**
         * Creates a clone of `typedArray`.
         *
         * @private
         * @param {Object} typedArray The typed array to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned typed array.
         */
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
    
        /**
         * Compares values to sort them in ascending order.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {number} Returns the sort order indicator for `value`.
         */
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined,
                valIsNull = value === null,
                valIsReflexive = value === value,
                valIsSymbol = isSymbol(value);
    
            var othIsDefined = other !== undefined,
                othIsNull = other === null,
                othIsReflexive = other === other,
                othIsSymbol = isSymbol(other);
    
            if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                (valIsNull && othIsDefined && othIsReflexive) ||
                (!valIsDefined && othIsReflexive) ||
                !valIsReflexive) {
              return 1;
            }
            if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                (othIsNull && valIsDefined && valIsReflexive) ||
                (!othIsDefined && valIsReflexive) ||
                !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
    
        /**
         * Used by `_.orderBy` to compare multiple properties of a value to another
         * and stable sort them.
         *
         * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
         * specify an order of "desc" for descending or "asc" for ascending sort order
         * of corresponding values.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {boolean[]|string[]} orders The order to sort by for each property.
         * @returns {number} Returns the sort order indicator for `object`.
         */
        function compareMultiple(object, other, orders) {
          var index = -1,
              objCriteria = object.criteria,
              othCriteria = other.criteria,
              length = objCriteria.length,
              ordersLength = orders.length;
    
          while (++index < length) {
            var result = compareAscending(objCriteria[index], othCriteria[index]);
            if (result) {
              if (index >= ordersLength) {
                return result;
              }
              var order = orders[index];
              return result * (order == 'desc' ? -1 : 1);
            }
          }
          // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
          // that causes it, under certain circumstances, to provide the same value for
          // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
          // for more details.
          //
          // This also ensures a stable sort in V8 and other engines.
          // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
          return object.index - other.index;
        }
    
        /**
         * Creates an array that is the composition of partially applied arguments,
         * placeholders, and provided arguments into a single array of arguments.
         *
         * @private
         * @param {Array} args The provided arguments.
         * @param {Array} partials The arguments to prepend to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @params {boolean} [isCurried] Specify composing for a curried function.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1,
              argsLength = args.length,
              holdersLength = holders.length,
              leftIndex = -1,
              leftLength = partials.length,
              rangeLength = nativeMax(argsLength - holdersLength, 0),
              result = Array(leftLength + rangeLength),
              isUncurried = !isCurried;
    
          while (++leftIndex < leftLength) {
            result[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result[leftIndex++] = args[argsIndex++];
          }
          return result;
        }
    
        /**
         * This function is like `composeArgs` except that the arguments composition
         * is tailored for `_.partialRight`.
         *
         * @private
         * @param {Array} args The provided arguments.
         * @param {Array} partials The arguments to append to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @params {boolean} [isCurried] Specify composing for a curried function.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1,
              argsLength = args.length,
              holdersIndex = -1,
              holdersLength = holders.length,
              rightIndex = -1,
              rightLength = partials.length,
              rangeLength = nativeMax(argsLength - holdersLength, 0),
              result = Array(rangeLength + rightLength),
              isUncurried = !isCurried;
    
          while (++argsIndex < rangeLength) {
            result[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result;
        }
    
        /**
         * Copies the values of `source` to `array`.
         *
         * @private
         * @param {Array} source The array to copy values from.
         * @param {Array} [array=[]] The array to copy values to.
         * @returns {Array} Returns `array`.
         */
        function copyArray(source, array) {
          var index = -1,
              length = source.length;
    
          array || (array = Array(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
    
        /**
         * Copies properties of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy properties from.
         * @param {Array} props The property identifiers to copy.
         * @param {Object} [object={}] The object to copy properties to.
         * @param {Function} [customizer] The function to customize copied values.
         * @returns {Object} Returns `object`.
         */
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
    
          var index = -1,
              length = props.length;
    
          while (++index < length) {
            var key = props[index];
    
            var newValue = customizer
              ? customizer(object[key], source[key], key, object, source)
              : undefined;
    
            if (newValue === undefined) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
    
        /**
         * Copies own symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
    
        /**
         * Copies own and inherited symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
    
        /**
         * Creates a function like `_.groupBy`.
         *
         * @private
         * @param {Function} setter The function to set accumulator values.
         * @param {Function} [initializer] The accumulator object initializer.
         * @returns {Function} Returns the new aggregator function.
         */
        function createAggregator(setter, initializer) {
          return function(collection, iteratee) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator,
                accumulator = initializer ? initializer() : {};
    
            return func(collection, setter, getIteratee(iteratee, 2), accumulator);
          };
        }
    
        /**
         * Creates a function like `_.assign`.
         *
         * @private
         * @param {Function} assigner The function to assign values.
         * @returns {Function} Returns the new assigner function.
         */
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1,
                length = sources.length,
                customizer = length > 1 ? sources[length - 1] : undefined,
                guard = length > 2 ? sources[2] : undefined;
    
            customizer = (assigner.length > 3 && typeof customizer == 'function')
              ? (length--, customizer)
              : undefined;
    
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined : customizer;
              length = 1;
            }
            object = Object(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
    
        /**
         * Creates a `baseEach` or `baseEachRight` function.
         *
         * @private
         * @param {Function} eachFunc The function to iterate over a collection.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee);
            }
            var length = collection.length,
                index = fromRight ? length : -1,
                iterable = Object(collection);
    
            while ((fromRight ? index-- : ++index < length)) {
              if (iteratee(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
    
        /**
         * Creates a base function for methods like `_.forIn` and `_.forOwn`.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseFor(fromRight) {
          return function(object, iteratee, keysFunc) {
            var index = -1,
                iterable = Object(object),
                props = keysFunc(object),
                length = props.length;
    
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
    
        /**
         * Creates a function that wraps `func` to invoke it with the optional `this`
         * binding of `thisArg`.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG,
              Ctor = createCtor(func);
    
          function wrapper() {
            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
    
        /**
         * Creates a function like `_.lowerFirst`.
         *
         * @private
         * @param {string} methodName The name of the `String` case method to use.
         * @returns {Function} Returns the new case function.
         */
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
    
            var strSymbols = hasUnicode(string)
              ? stringToArray(string)
              : undefined;
    
            var chr = strSymbols
              ? strSymbols[0]
              : string.charAt(0);
    
            var trailing = strSymbols
              ? castSlice(strSymbols, 1).join('')
              : string.slice(1);
    
            return chr[methodName]() + trailing;
          };
        }
    
        /**
         * Creates a function like `_.camelCase`.
         *
         * @private
         * @param {Function} callback The function to combine each word.
         * @returns {Function} Returns the new compounder function.
         */
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
          };
        }
    
        /**
         * Creates a function that produces an instance of `Ctor` regardless of
         * whether it was invoked as part of a `new` expression or by `call` or `apply`.
         *
         * @private
         * @param {Function} Ctor The constructor to wrap.
         * @returns {Function} Returns the new wrapped function.
         */
        function createCtor(Ctor) {
          return function() {
            // Use a `switch` statement to work with class constructors. See
            // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
            // for more details.
            var args = arguments;
            switch (args.length) {
              case 0: return new Ctor;
              case 1: return new Ctor(args[0]);
              case 2: return new Ctor(args[0], args[1]);
              case 3: return new Ctor(args[0], args[1], args[2]);
              case 4: return new Ctor(args[0], args[1], args[2], args[3]);
              case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype),
                result = Ctor.apply(thisBinding, args);
    
            // Mimic the constructor's `return` behavior.
            // See https://es5.github.io/#x13.2.2 for more details.
            return isObject(result) ? result : thisBinding;
          };
        }
    
        /**
         * Creates a function that wraps `func` to enable currying.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {number} arity The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
    
          function wrapper() {
            var length = arguments.length,
                args = Array(length),
                index = length,
                placeholder = getHolder(wrapper);
    
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
              ? []
              : replaceHolders(args, placeholder);
    
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func, bitmask, createHybrid, wrapper.placeholder, undefined,
                args, holders, undefined, undefined, arity - length);
            }
            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
    
        /**
         * Creates a `_.find` or `_.findLast` function.
         *
         * @private
         * @param {Function} findIndexFunc The function to find the collection index.
         * @returns {Function} Returns the new find function.
         */
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object(collection);
            if (!isArrayLike(collection)) {
              var iteratee = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) { return iteratee(iterable[key], key, iterable); };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
          };
        }
    
        /**
         * Creates a `_.flow` or `_.flowRight` function.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new flow function.
         */
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length,
                index = length,
                prereq = LodashWrapper.prototype.thru;
    
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
    
              var funcName = getFuncName(func),
                  data = funcName == 'wrapper' ? getData(func) : undefined;
    
              if (data && isLaziable(data[0]) &&
                    data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                    !data[4].length && data[9] == 1
                  ) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = (func.length == 1 && isLaziable(func))
                  ? wrapper[funcName]()
                  : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments,
                  value = args[0];
    
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index = 0,
                  result = length ? funcs[index].apply(this, args) : value;
    
              while (++index < length) {
                result = funcs[index].call(this, result);
              }
              return result;
            };
          });
        }
    
        /**
         * Creates a function that wraps `func` to invoke it with optional `this`
         * binding of `thisArg`, partial application, and currying.
         *
         * @private
         * @param {Function|string} func The function or method name to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to prepend to those provided to
         *  the new function.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [partialsRight] The arguments to append to those provided
         *  to the new function.
         * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG,
              isBind = bitmask & WRAP_BIND_FLAG,
              isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
              isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
              isFlip = bitmask & WRAP_FLIP_FLAG,
              Ctor = isBindKey ? undefined : createCtor(func);
    
          function wrapper() {
            var length = arguments.length,
                args = Array(length),
                index = length;
    
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper),
                  holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func, bitmask, createHybrid, wrapper.placeholder, thisArg,
                args, newHolders, argPos, ary, arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this,
                fn = isBindKey ? thisBinding[func] : func;
    
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary < length) {
              args.length = ary;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
    
        /**
         * Creates a function like `_.invertBy`.
         *
         * @private
         * @param {Function} setter The function to set accumulator values.
         * @param {Function} toIteratee The function to resolve iteratees.
         * @returns {Function} Returns the new inverter function.
         */
        function createInverter(setter, toIteratee) {
          return function(object, iteratee) {
            return baseInverter(object, setter, toIteratee(iteratee), {});
          };
        }
    
        /**
         * Creates a function that performs a mathematical operation on two values.
         *
         * @private
         * @param {Function} operator The function to perform the operation.
         * @param {number} [defaultValue] The value used for `undefined` arguments.
         * @returns {Function} Returns the new mathematical operation function.
         */
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result;
            if (value === undefined && other === undefined) {
              return defaultValue;
            }
            if (value !== undefined) {
              result = value;
            }
            if (other !== undefined) {
              if (result === undefined) {
                return other;
              }
              if (typeof value == 'string' || typeof other == 'string') {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result = operator(value, other);
            }
            return result;
          };
        }
    
        /**
         * Creates a function like `_.over`.
         *
         * @private
         * @param {Function} arrayFunc The function to iterate over iteratees.
         * @returns {Function} Returns the new over function.
         */
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee) {
                return apply(iteratee, thisArg, args);
              });
            });
          });
        }
    
        /**
         * Creates the padding for `string` based on `length`. The `chars` string
         * is truncated if the number of characters exceeds `length`.
         *
         * @private
         * @param {number} length The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padding for `string`.
         */
        function createPadding(length, chars) {
          chars = chars === undefined ? ' ' : baseToString(chars);
    
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars)
            ? castSlice(stringToArray(result), 0, length).join('')
            : result.slice(0, length);
        }
    
        /**
         * Creates a function that wraps `func` to invoke it with the `this` binding
         * of `thisArg` and `partials` prepended to the arguments it receives.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} partials The arguments to prepend to those provided to
         *  the new function.
         * @returns {Function} Returns the new wrapped function.
         */
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG,
              Ctor = createCtor(func);
    
          function wrapper() {
            var argsIndex = -1,
                argsLength = arguments.length,
                leftIndex = -1,
                leftLength = partials.length,
                args = Array(leftLength + argsLength),
                fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
    
        /**
         * Creates a `_.range` or `_.rangeRight` function.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new range function.
         */
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
              end = step = undefined;
            }
            // Ensure the sign of `-0` is preserved.
            start = toFinite(start);
            if (end === undefined) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
    
        /**
         * Creates a function that performs a relational operation on two values.
         *
         * @private
         * @param {Function} operator The function to perform the operation.
         * @returns {Function} Returns the new relational operation function.
         */
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == 'string' && typeof other == 'string')) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
    
        /**
         * Creates a function that wraps `func` to continue currying.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {Function} wrapFunc The function to create the `func` wrapper.
         * @param {*} placeholder The placeholder value.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to prepend to those provided to
         *  the new function.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG,
              newHolders = isCurry ? holders : undefined,
              newHoldersRight = isCurry ? undefined : holders,
              newPartials = isCurry ? partials : undefined,
              newPartialsRight = isCurry ? undefined : partials;
    
          bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
    
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
            newHoldersRight, argPos, ary, arity
          ];
    
          var result = wrapFunc.apply(undefined, newData);
          if (isLaziable(func)) {
            setData(result, newData);
          }
          result.placeholder = placeholder;
          return setWrapToString(result, func, bitmask);
        }
    
        /**
         * Creates a function like `_.round`.
         *
         * @private
         * @param {string} methodName The name of the `Math` method to use when rounding.
         * @returns {Function} Returns the new round function.
         */
        function createRound(methodName) {
          var func = Math[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              // Shift with exponential notation to avoid floating-point issues.
              // See [MDN](https://mdn.io/round#Examples) for more details.
              var pair = (toString(number) + 'e').split('e'),
                  value = func(pair[0] + 'e' + (+pair[1] + precision));
    
              pair = (toString(value) + 'e').split('e');
              return +(pair[0] + 'e' + (+pair[1] - precision));
            }
            return func(number);
          };
        }
    
        /**
         * Creates a set object of `values`.
         *
         * @private
         * @param {Array} values The values to add to the set.
         * @returns {Object} Returns the new set.
         */
        var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
          return new Set(values);
        };
    
        /**
         * Creates a `_.toPairs` or `_.toPairsIn` function.
         *
         * @private
         * @param {Function} keysFunc The function to get the keys of a given object.
         * @returns {Function} Returns the new pairs function.
         */
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
    
        /**
         * Creates a function that either curries or invokes `func` with optional
         * `this` binding and partially applied arguments.
         *
         * @private
         * @param {Function|string} func The function or method name to wrap.
         * @param {number} bitmask The bitmask flags.
         *    1 - `_.bind`
         *    2 - `_.bindKey`
         *    4 - `_.curry` or `_.curryRight` of a bound function
         *    8 - `_.curry`
         *   16 - `_.curryRight`
         *   32 - `_.partial`
         *   64 - `_.partialRight`
         *  128 - `_.rearg`
         *  256 - `_.ary`
         *  512 - `_.flip`
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to be partially applied.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined;
          }
          ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
          arity = arity === undefined ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
    
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials,
                holdersRight = holders;
    
            partials = holders = undefined;
          }
          var data = isBindKey ? undefined : getData(func);
    
          var newData = [
            func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
            argPos, ary, arity
          ];
    
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined
            ? (isBindKey ? 0 : func.length)
            : nativeMax(newData[9] - length, 0);
    
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result = createPartial(func, bitmask, thisArg, partials);
          } else {
            result = createHybrid.apply(undefined, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result, newData), func, bitmask);
        }
    
        /**
         * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
         * of source objects to the destination object for all destination properties
         * that resolve to `undefined`.
         *
         * @private
         * @param {*} objValue The destination value.
         * @param {*} srcValue The source value.
         * @param {string} key The key of the property to assign.
         * @param {Object} object The parent object of `objValue`.
         * @returns {*} Returns the value to assign.
         */
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined ||
              (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            return srcValue;
          }
          return objValue;
        }
    
        /**
         * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
         * objects into destination objects that are passed thru.
         *
         * @private
         * @param {*} objValue The destination value.
         * @param {*} srcValue The source value.
         * @param {string} key The key of the property to merge.
         * @param {Object} object The parent object of `objValue`.
         * @param {Object} source The parent object of `srcValue`.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         * @returns {*} Returns the value to assign.
         */
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            // Recursively merge objects and arrays (susceptible to call stack limits).
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
            stack['delete'](srcValue);
          }
          return objValue;
        }
    
        /**
         * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
         * objects.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {string} key The key of the property to inspect.
         * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
         */
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined : value;
        }
    
        /**
         * A specialized version of `baseIsEqualDeep` for arrays with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Array} array The array to compare.
         * @param {Array} other The other array to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `array` and `other` objects.
         * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
         */
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              arrLength = array.length,
              othLength = other.length;
    
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          // Check that cyclic values are equal.
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1,
              result = true,
              seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;
    
          stack.set(array, other);
          stack.set(other, array);
    
          // Ignore non-index properties.
          while (++index < arrLength) {
            var arrValue = array[index],
                othValue = other[index];
    
            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, arrValue, index, other, array, stack)
                : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined) {
              if (compared) {
                continue;
              }
              result = false;
              break;
            }
            // Recursively compare arrays (susceptible to call stack limits).
            if (seen) {
              if (!arraySome(other, function(othValue, othIndex) {
                    if (!cacheHas(seen, othIndex) &&
                        (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                      return seen.push(othIndex);
                    }
                  })) {
                result = false;
                break;
              }
            } else if (!(
                  arrValue === othValue ||
                    equalFunc(arrValue, othValue, bitmask, customizer, stack)
                )) {
              result = false;
              break;
            }
          }
          stack['delete'](array);
          stack['delete'](other);
          return result;
        }
    
        /**
         * A specialized version of `baseIsEqualDeep` for comparing objects of
         * the same `toStringTag`.
         *
         * **Note:** This function only supports comparing values with tags of
         * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {string} tag The `toStringTag` of the objects to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if ((object.byteLength != other.byteLength) ||
                  (object.byteOffset != other.byteOffset)) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
    
            case arrayBufferTag:
              if ((object.byteLength != other.byteLength) ||
                  !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                return false;
              }
              return true;
    
            case boolTag:
            case dateTag:
            case numberTag:
              // Coerce booleans to `1` or `0` and dates to milliseconds.
              // Invalid dates are coerced to `NaN`.
              return eq(+object, +other);
    
            case errorTag:
              return object.name == other.name && object.message == other.message;
    
            case regexpTag:
            case stringTag:
              // Coerce regexes to strings and treat strings, primitives and objects,
              // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
              // for more details.
              return object == (other + '');
    
            case mapTag:
              var convert = mapToArray;
    
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
    
              if (object.size != other.size && !isPartial) {
                return false;
              }
              // Assume cyclic values are equal.
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
    
              // Recursively compare objects (susceptible to call stack limits).
              stack.set(object, other);
              var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack['delete'](object);
              return result;
    
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
    
        /**
         * A specialized version of `baseIsEqualDeep` for objects with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              objProps = getAllKeys(object),
              objLength = objProps.length,
              othProps = getAllKeys(other),
              othLength = othProps.length;
    
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          // Check that cyclic values are equal.
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result = true;
          stack.set(object, other);
          stack.set(other, object);
    
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key],
                othValue = other[key];
    
            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, objValue, key, other, object, stack)
                : customizer(objValue, othValue, key, object, other, stack);
            }
            // Recursively compare objects (susceptible to call stack limits).
            if (!(compared === undefined
                  ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                  : compared
                )) {
              result = false;
              break;
            }
            skipCtor || (skipCtor = key == 'constructor');
          }
          if (result && !skipCtor) {
            var objCtor = object.constructor,
                othCtor = other.constructor;
    
            // Non `Object` object instances with different constructors are not equal.
            if (objCtor != othCtor &&
                ('constructor' in object && 'constructor' in other) &&
                !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                  typeof othCtor == 'function' && othCtor instanceof othCtor)) {
              result = false;
            }
          }
          stack['delete'](object);
          stack['delete'](other);
          return result;
        }
    
        /**
         * A specialized version of `baseRest` which flattens the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @returns {Function} Returns the new function.
         */
        function flatRest(func) {
          return setToString(overRest(func, undefined, flatten), func + '');
        }
    
        /**
         * Creates an array of own enumerable property names and symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
    
        /**
         * Creates an array of own and inherited enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
    
        /**
         * Gets metadata for `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {*} Returns the metadata for `func`.
         */
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };
    
        /**
         * Gets the name of `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {string} Returns the function name.
         */
        function getFuncName(func) {
          var result = (func.name + ''),
              array = realNames[result],
              length = hasOwnProperty.call(realNames, result) ? array.length : 0;
    
          while (length--) {
            var data = array[length],
                otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result;
        }
    
        /**
         * Gets the argument placeholder value for `func`.
         *
         * @private
         * @param {Function} func The function to inspect.
         * @returns {*} Returns the placeholder value.
         */
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
          return object.placeholder;
        }
    
        /**
         * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
         * this function returns the custom method, otherwise it returns `baseIteratee`.
         * If arguments are provided, the chosen function is invoked with them and
         * its result is returned.
         *
         * @private
         * @param {*} [value] The value to convert to an iteratee.
         * @param {number} [arity] The arity of the created iteratee.
         * @returns {Function} Returns the chosen function or its result.
         */
        function getIteratee() {
          var result = lodash.iteratee || iteratee;
          result = result === iteratee ? baseIteratee : result;
          return arguments.length ? result(arguments[0], arguments[1]) : result;
        }
    
        /**
         * Gets the data for `map`.
         *
         * @private
         * @param {Object} map The map to query.
         * @param {string} key The reference key.
         * @returns {*} Returns the map data.
         */
        function getMapData(map, key) {
          var data = map.__data__;
          return isKeyable(key)
            ? data[typeof key == 'string' ? 'string' : 'hash']
            : data.map;
        }
    
        /**
         * Gets the property names, values, and compare flags of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the match data of `object`.
         */
        function getMatchData(object) {
          var result = keys(object),
              length = result.length;
    
          while (length--) {
            var key = result[length],
                value = object[key];
    
            result[length] = [key, value, isStrictComparable(value)];
          }
          return result;
        }
    
        /**
         * Gets the native function at `key` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the method to get.
         * @returns {*} Returns the function if it's native, else `undefined`.
         */
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined;
        }
    
        /**
         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the raw `toStringTag`.
         */
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag),
              tag = value[symToStringTag];
    
          try {
            value[symToStringTag] = undefined;
            var unmasked = true;
          } catch (e) {}
    
          var result = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result;
        }
    
        /**
         * Creates an array of the own enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
    
        /**
         * Creates an array of the own and inherited enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result = [];
          while (object) {
            arrayPush(result, getSymbols(object));
            object = getPrototype(object);
          }
          return result;
        };
    
        /**
         * Gets the `toStringTag` of `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        var getTag = baseGetTag;
    
        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
            (Map && getTag(new Map) != mapTag) ||
            (Promise && getTag(Promise.resolve()) != promiseTag) ||
            (Set && getTag(new Set) != setTag) ||
            (WeakMap && getTag(new WeakMap) != weakMapTag)) {
          getTag = function(value) {
            var result = baseGetTag(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : '';
    
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString: return dataViewTag;
                case mapCtorString: return mapTag;
                case promiseCtorString: return promiseTag;
                case setCtorString: return setTag;
                case weakMapCtorString: return weakMapTag;
              }
            }
            return result;
          };
        }
    
        /**
         * Gets the view, applying any `transforms` to the `start` and `end` positions.
         *
         * @private
         * @param {number} start The start of the view.
         * @param {number} end The end of the view.
         * @param {Array} transforms The transformations to apply to the view.
         * @returns {Object} Returns an object containing the `start` and `end`
         *  positions of the view.
         */
        function getView(start, end, transforms) {
          var index = -1,
              length = transforms.length;
    
          while (++index < length) {
            var data = transforms[index],
                size = data.size;
    
            switch (data.type) {
              case 'drop':      start += size; break;
              case 'dropRight': end -= size; break;
              case 'take':      end = nativeMin(end, start + size); break;
              case 'takeRight': start = nativeMax(start, end - size); break;
            }
          }
          return { 'start': start, 'end': end };
        }
    
        /**
         * Extracts wrapper details from the `source` body comment.
         *
         * @private
         * @param {string} source The source to inspect.
         * @returns {Array} Returns the wrapper details.
         */
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
    
        /**
         * Checks if `path` exists on `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @param {Function} hasFunc The function to check properties.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         */
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
    
          var index = -1,
              length = path.length,
              result = false;
    
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result || ++index != length) {
            return result;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) &&
            (isArray(object) || isArguments(object));
        }
    
        /**
         * Initializes an array clone.
         *
         * @private
         * @param {Array} array The array to clone.
         * @returns {Array} Returns the initialized clone.
         */
        function initCloneArray(array) {
          var length = array.length,
              result = new array.constructor(length);
    
          // Add properties assigned by `RegExp#exec`.
          if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
            result.index = array.index;
            result.input = array.input;
          }
          return result;
        }
    
        /**
         * Initializes an object clone.
         *
         * @private
         * @param {Object} object The object to clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneObject(object) {
          return (typeof object.constructor == 'function' && !isPrototype(object))
            ? baseCreate(getPrototype(object))
            : {};
        }
    
        /**
         * Initializes an object clone based on its `toStringTag`.
         *
         * **Note:** This function only supports cloning values with tags of
         * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
         *
         * @private
         * @param {Object} object The object to clone.
         * @param {string} tag The `toStringTag` of the object to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
    
            case boolTag:
            case dateTag:
              return new Ctor(+object);
    
            case dataViewTag:
              return cloneDataView(object, isDeep);
    
            case float32Tag: case float64Tag:
            case int8Tag: case int16Tag: case int32Tag:
            case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
              return cloneTypedArray(object, isDeep);
    
            case mapTag:
              return new Ctor;
    
            case numberTag:
            case stringTag:
              return new Ctor(object);
    
            case regexpTag:
              return cloneRegExp(object);
    
            case setTag:
              return new Ctor;
    
            case symbolTag:
              return cloneSymbol(object);
          }
        }
    
        /**
         * Inserts wrapper `details` in a comment at the top of the `source` body.
         *
         * @private
         * @param {string} source The source to modify.
         * @returns {Array} details The details to insert.
         * @returns {string} Returns the modified source.
         */
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
          details = details.join(length > 2 ? ', ' : ' ');
          return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
        }
    
        /**
         * Checks if `value` is a flattenable `arguments` object or array.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
         */
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) ||
            !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
    
        /**
         * Checks if `value` is a valid array-like index.
         *
         * @private
         * @param {*} value The value to check.
         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
         */
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
    
          return !!length &&
            (type == 'number' ||
              (type != 'symbol' && reIsUint.test(value))) &&
                (value > -1 && value % 1 == 0 && value < length);
        }
    
        /**
         * Checks if the given arguments are from an iteratee call.
         *
         * @private
         * @param {*} value The potential iteratee value argument.
         * @param {*} index The potential iteratee index or key argument.
         * @param {*} object The potential iteratee object argument.
         * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
         *  else `false`.
         */
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == 'number'
                ? (isArrayLike(object) && isIndex(index, object.length))
                : (type == 'string' && index in object)
              ) {
            return eq(object[index], value);
          }
          return false;
        }
    
        /**
         * Checks if `value` is a property name and not a property path.
         *
         * @private
         * @param {*} value The value to check.
         * @param {Object} [object] The object to query keys on.
         * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
         */
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == 'number' || type == 'symbol' || type == 'boolean' ||
              value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
            (object != null && value in Object(object));
        }
    
        /**
         * Checks if `value` is suitable for use as unique object key.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
         */
        function isKeyable(value) {
          var type = typeof value;
          return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
            ? (value !== '__proto__')
            : (value === null);
        }
    
        /**
         * Checks if `func` has a lazy counterpart.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
         *  else `false`.
         */
        function isLaziable(func) {
          var funcName = getFuncName(func),
              other = lodash[funcName];
    
          if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
    
        /**
         * Checks if `func` has its source masked.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` is masked, else `false`.
         */
        function isMasked(func) {
          return !!maskSrcKey && (maskSrcKey in func);
        }
    
        /**
         * Checks if `func` is capable of being masked.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
         */
        var isMaskable = coreJsData ? isFunction : stubFalse;
    
        /**
         * Checks if `value` is likely a prototype object.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
         */
        function isPrototype(value) {
          var Ctor = value && value.constructor,
              proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
    
          return value === proto;
        }
    
        /**
         * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` if suitable for strict
         *  equality comparisons, else `false`.
         */
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
    
        /**
         * A specialized version of `matchesProperty` for source values suitable
         * for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue &&
              (srcValue !== undefined || (key in Object(object)));
          };
        }
    
        /**
         * A specialized version of `_.memoize` which clears the memoized function's
         * cache when it exceeds `MAX_MEMOIZE_SIZE`.
         *
         * @private
         * @param {Function} func The function to have its output memoized.
         * @returns {Function} Returns the new memoized function.
         */
        function memoizeCapped(func) {
          var result = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
    
          var cache = result.cache;
          return result;
        }
    
        /**
         * Merges the function metadata of `source` into `data`.
         *
         * Merging metadata reduces the number of wrappers used to invoke a function.
         * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
         * may be applied regardless of execution order. Methods like `_.ary` and
         * `_.rearg` modify function arguments, making the order in which they are
         * executed important, preventing the merging of metadata. However, we make
         * an exception for a safe combined case where curried functions have `_.ary`
         * and or `_.rearg` applied.
         *
         * @private
         * @param {Array} data The destination metadata.
         * @param {Array} source The source metadata.
         * @returns {Array} Returns `data`.
         */
        function mergeData(data, source) {
          var bitmask = data[1],
              srcBitmask = source[1],
              newBitmask = bitmask | srcBitmask,
              isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
    
          var isCombo =
            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
            ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));
    
          // Exit early if metadata can't be merged.
          if (!(isCommon || isCombo)) {
            return data;
          }
          // Use source `thisArg` if available.
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            // Set when currying a bound function.
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          // Compose partial arguments.
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          // Compose partial right arguments.
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          // Use source `argPos` if available.
          value = source[7];
          if (value) {
            data[7] = value;
          }
          // Use source `ary` if it's smaller.
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          // Use source `arity` if one is not provided.
          if (data[9] == null) {
            data[9] = source[9];
          }
          // Use source `func` and merge bitmasks.
          data[0] = source[0];
          data[1] = newBitmask;
    
          return data;
        }
    
        /**
         * This function is like
         * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * except that it includes inherited enumerable properties.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function nativeKeysIn(object) {
          var result = [];
          if (object != null) {
            for (var key in Object(object)) {
              result.push(key);
            }
          }
          return result;
        }
    
        /**
         * Converts `value` to a string using `Object.prototype.toString`.
         *
         * @private
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         */
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
    
        /**
         * A specialized version of `baseRest` which transforms the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @param {Function} transform The rest array transform.
         * @returns {Function} Returns the new function.
         */
        function overRest(func, start, transform) {
          start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
          return function() {
            var args = arguments,
                index = -1,
                length = nativeMax(args.length - start, 0),
                array = Array(length);
    
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform(array);
            return apply(func, this, otherArgs);
          };
        }
    
        /**
         * Gets the parent value at `path` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} path The path to get the parent value of.
         * @returns {*} Returns the parent value.
         */
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
    
        /**
         * Reorder `array` according to the specified indexes where the element at
         * the first index is assigned as the first element, the element at
         * the second index is assigned as the second element, and so on.
         *
         * @private
         * @param {Array} array The array to reorder.
         * @param {Array} indexes The arranged array indexes.
         * @returns {Array} Returns `array`.
         */
        function reorder(array, indexes) {
          var arrLength = array.length,
              length = nativeMin(indexes.length, arrLength),
              oldArray = copyArray(array);
    
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
          }
          return array;
        }
    
        /**
         * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function safeGet(object, key) {
          if (key === 'constructor' && typeof object[key] === 'function') {
            return;
          }
    
          if (key == '__proto__') {
            return;
          }
    
          return object[key];
        }
    
        /**
         * Sets metadata for `func`.
         *
         * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
         * period of time, it will trip its breaker and transition to an identity
         * function to avoid garbage collection pauses in V8. See
         * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
         * for more details.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var setData = shortOut(baseSetData);
    
        /**
         * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
         *
         * @private
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @returns {number|Object} Returns the timer id or timeout object.
         */
        var setTimeout = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
    
        /**
         * Sets the `toString` method of `func` to return `string`.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var setToString = shortOut(baseSetToString);
    
        /**
         * Sets the `toString` method of `wrapper` to mimic the source of `reference`
         * with wrapper details in a comment at the top of the source body.
         *
         * @private
         * @param {Function} wrapper The function to modify.
         * @param {Function} reference The reference function.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @returns {Function} Returns `wrapper`.
         */
        function setWrapToString(wrapper, reference, bitmask) {
          var source = (reference + '');
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
    
        /**
         * Creates a function that'll short out and invoke `identity` instead
         * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
         * milliseconds.
         *
         * @private
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new shortable function.
         */
        function shortOut(func) {
          var count = 0,
              lastCalled = 0;
    
          return function() {
            var stamp = nativeNow(),
                remaining = HOT_SPAN - (stamp - lastCalled);
    
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined, arguments);
          };
        }
    
        /**
         * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
         *
         * @private
         * @param {Array} array The array to shuffle.
         * @param {number} [size=array.length] The size of `array`.
         * @returns {Array} Returns `array`.
         */
        function shuffleSelf(array, size) {
          var index = -1,
              length = array.length,
              lastIndex = length - 1;
    
          size = size === undefined ? length : size;
          while (++index < size) {
            var rand = baseRandom(index, lastIndex),
                value = array[rand];
    
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size;
          return array;
        }
    
        /**
         * Converts `string` to a property path array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the property path array.
         */
        var stringToPath = memoizeCapped(function(string) {
          var result = [];
          if (string.charCodeAt(0) === 46 /* . */) {
            result.push('');
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
          });
          return result;
        });
    
        /**
         * Converts `value` to a string key if it's not a string or symbol.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {string|symbol} Returns the key.
         */
        function toKey(value) {
          if (typeof value == 'string' || isSymbol(value)) {
            return value;
          }
          var result = (value + '');
          return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }
    
        /**
         * Converts `func` to its source code.
         *
         * @private
         * @param {Function} func The function to convert.
         * @returns {string} Returns the source code.
         */
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {}
            try {
              return (func + '');
            } catch (e) {}
          }
          return '';
        }
    
        /**
         * Updates wrapper `details` based on `bitmask` flags.
         *
         * @private
         * @returns {Array} details The details to modify.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @returns {Array} Returns `details`.
         */
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = '_.' + pair[0];
            if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
    
        /**
         * Creates a clone of `wrapper`.
         *
         * @private
         * @param {Object} wrapper The wrapper to clone.
         * @returns {Object} Returns the cloned wrapper.
         */
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result.__actions__ = copyArray(wrapper.__actions__);
          result.__index__  = wrapper.__index__;
          result.__values__ = wrapper.__values__;
          return result;
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates an array of elements split into groups the length of `size`.
         * If `array` can't be split evenly, the final chunk will be the remaining
         * elements.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to process.
         * @param {number} [size=1] The length of each chunk
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the new array of chunks.
         * @example
         *
         * _.chunk(['a', 'b', 'c', 'd'], 2);
         * // => [['a', 'b'], ['c', 'd']]
         *
         * _.chunk(['a', 'b', 'c', 'd'], 3);
         * // => [['a', 'b', 'c'], ['d']]
         */
        function chunk(array, size, guard) {
          if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
            size = 1;
          } else {
            size = nativeMax(toInteger(size), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size < 1) {
            return [];
          }
          var index = 0,
              resIndex = 0,
              result = Array(nativeCeil(length / size));
    
          while (index < length) {
            result[resIndex++] = baseSlice(array, index, (index += size));
          }
          return result;
        }
    
        /**
         * Creates an array with all falsey values removed. The values `false`, `null`,
         * `0`, `""`, `undefined`, and `NaN` are falsey.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to compact.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.compact([0, 1, false, 2, '', 3]);
         * // => [1, 2, 3]
         */
        function compact(array) {
          var index = -1,
              length = array == null ? 0 : array.length,
              resIndex = 0,
              result = [];
    
          while (++index < length) {
            var value = array[index];
            if (value) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
    
        /**
         * Creates a new array concatenating `array` with any additional arrays
         * and/or values.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to concatenate.
         * @param {...*} [values] The values to concatenate.
         * @returns {Array} Returns the new concatenated array.
         * @example
         *
         * var array = [1];
         * var other = _.concat(array, 2, [3], [[4]]);
         *
         * console.log(other);
         * // => [1, 2, 3, [4]]
         *
         * console.log(array);
         * // => [1]
         */
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array(length - 1),
              array = arguments[0],
              index = length;
    
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
    
        /**
         * Creates an array of `array` values not included in the other given arrays
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. The order and references of result values are
         * determined by the first array.
         *
         * **Note:** Unlike `_.pullAll`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.without, _.xor
         * @example
         *
         * _.difference([2, 1], [2, 3]);
         * // => [1]
         */
        var difference = baseRest(function(array, values) {
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
            : [];
        });
    
        /**
         * This method is like `_.difference` except that it accepts `iteratee` which
         * is invoked for each element of `array` and `values` to generate the criterion
         * by which they're compared. The order and references of result values are
         * determined by the first array. The iteratee is invoked with one argument:
         * (value).
         *
         * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
         * // => [{ 'x': 2 }]
         */
        var differenceBy = baseRest(function(array, values) {
          var iteratee = last(values);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined;
          }
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
            : [];
        });
    
        /**
         * This method is like `_.difference` except that it accepts `comparator`
         * which is invoked to compare elements of `array` to `values`. The order and
         * references of result values are determined by the first array. The comparator
         * is invoked with two arguments: (arrVal, othVal).
         *
         * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         *
         * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
         * // => [{ 'x': 2, 'y': 1 }]
         */
        var differenceWith = baseRest(function(array, values) {
          var comparator = last(values);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined;
          }
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
            : [];
        });
    
        /**
         * Creates a slice of `array` with `n` elements dropped from the beginning.
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to drop.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.drop([1, 2, 3]);
         * // => [2, 3]
         *
         * _.drop([1, 2, 3], 2);
         * // => [3]
         *
         * _.drop([1, 2, 3], 5);
         * // => []
         *
         * _.drop([1, 2, 3], 0);
         * // => [1, 2, 3]
         */
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
    
        /**
         * Creates a slice of `array` with `n` elements dropped from the end.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to drop.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.dropRight([1, 2, 3]);
         * // => [1, 2]
         *
         * _.dropRight([1, 2, 3], 2);
         * // => [1]
         *
         * _.dropRight([1, 2, 3], 5);
         * // => []
         *
         * _.dropRight([1, 2, 3], 0);
         * // => [1, 2, 3]
         */
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
    
        /**
         * Creates a slice of `array` excluding elements dropped from the end.
         * Elements are dropped until `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.dropRightWhile(users, function(o) { return !o.active; });
         * // => objects for ['barney']
         *
         * // The `_.matches` iteratee shorthand.
         * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
         * // => objects for ['barney', 'fred']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.dropRightWhile(users, ['active', false]);
         * // => objects for ['barney']
         *
         * // The `_.property` iteratee shorthand.
         * _.dropRightWhile(users, 'active');
         * // => objects for ['barney', 'fred', 'pebbles']
         */
        function dropRightWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3), true, true)
            : [];
        }
    
        /**
         * Creates a slice of `array` excluding elements dropped from the beginning.
         * Elements are dropped until `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.dropWhile(users, function(o) { return !o.active; });
         * // => objects for ['pebbles']
         *
         * // The `_.matches` iteratee shorthand.
         * _.dropWhile(users, { 'user': 'barney', 'active': false });
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.dropWhile(users, ['active', false]);
         * // => objects for ['pebbles']
         *
         * // The `_.property` iteratee shorthand.
         * _.dropWhile(users, 'active');
         * // => objects for ['barney', 'fred', 'pebbles']
         */
        function dropWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3), true)
            : [];
        }
    
        /**
         * Fills elements of `array` with `value` from `start` up to, but not
         * including, `end`.
         *
         * **Note:** This method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Array
         * @param {Array} array The array to fill.
         * @param {*} value The value to fill `array` with.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _.fill(array, 'a');
         * console.log(array);
         * // => ['a', 'a', 'a']
         *
         * _.fill(Array(3), 2);
         * // => [2, 2, 2]
         *
         * _.fill([4, 6, 8, 10], '*', 1, 3);
         * // => [4, '*', '*', 10]
         */
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
    
        /**
         * This method is like `_.find` except that it returns the index of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.findIndex(users, function(o) { return o.user == 'barney'; });
         * // => 0
         *
         * // The `_.matches` iteratee shorthand.
         * _.findIndex(users, { 'user': 'fred', 'active': false });
         * // => 1
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findIndex(users, ['active', false]);
         * // => 0
         *
         * // The `_.property` iteratee shorthand.
         * _.findIndex(users, 'active');
         * // => 2
         */
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
    
        /**
         * This method is like `_.findIndex` except that it iterates over elements
         * of `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=array.length-1] The index to search from.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
         * // => 2
         *
         * // The `_.matches` iteratee shorthand.
         * _.findLastIndex(users, { 'user': 'barney', 'active': true });
         * // => 0
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findLastIndex(users, ['active', false]);
         * // => 2
         *
         * // The `_.property` iteratee shorthand.
         * _.findLastIndex(users, 'active');
         * // => 0
         */
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined) {
            index = toInteger(fromIndex);
            index = fromIndex < 0
              ? nativeMax(length + index, 0)
              : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
    
        /**
         * Flattens `array` a single level deep.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flatten([1, [2, [3, [4]], 5]]);
         * // => [1, 2, [3, [4]], 5]
         */
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
    
        /**
         * Recursively flattens `array`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flattenDeep([1, [2, [3, [4]], 5]]);
         * // => [1, 2, 3, 4, 5]
         */
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
    
        /**
         * Recursively flatten `array` up to `depth` times.
         *
         * @static
         * @memberOf _
         * @since 4.4.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @param {number} [depth=1] The maximum recursion depth.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * var array = [1, [2, [3, [4]], 5]];
         *
         * _.flattenDepth(array, 1);
         * // => [1, 2, [3, [4]], 5]
         *
         * _.flattenDepth(array, 2);
         * // => [1, 2, 3, [4], 5]
         */
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
    
        /**
         * The inverse of `_.toPairs`; this method returns an object composed
         * from key-value `pairs`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} pairs The key-value pairs.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.fromPairs([['a', 1], ['b', 2]]);
         * // => { 'a': 1, 'b': 2 }
         */
        function fromPairs(pairs) {
          var index = -1,
              length = pairs == null ? 0 : pairs.length,
              result = {};
    
          while (++index < length) {
            var pair = pairs[index];
            result[pair[0]] = pair[1];
          }
          return result;
        }
    
        /**
         * Gets the first element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @alias first
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the first element of `array`.
         * @example
         *
         * _.head([1, 2, 3]);
         * // => 1
         *
         * _.head([]);
         * // => undefined
         */
        function head(array) {
          return (array && array.length) ? array[0] : undefined;
        }
    
        /**
         * Gets the index at which the first occurrence of `value` is found in `array`
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. If `fromIndex` is negative, it's used as the
         * offset from the end of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.indexOf([1, 2, 1, 2], 2);
         * // => 1
         *
         * // Search from the `fromIndex`.
         * _.indexOf([1, 2, 1, 2], 2, 2);
         * // => 3
         */
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
    
        /**
         * Gets all but the last element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.initial([1, 2, 3]);
         * // => [1, 2]
         */
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
    
        /**
         * Creates an array of unique values that are included in all given arrays
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. The order and references of result values are
         * determined by the first array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * _.intersection([2, 1], [2, 3]);
         * // => [2]
         */
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped)
            : [];
        });
    
        /**
         * This method is like `_.intersection` except that it accepts `iteratee`
         * which is invoked for each element of each `arrays` to generate the criterion
         * by which they're compared. The order and references of result values are
         * determined by the first array. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [2.1]
         *
         * // The `_.property` iteratee shorthand.
         * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }]
         */
        var intersectionBy = baseRest(function(arrays) {
          var iteratee = last(arrays),
              mapped = arrayMap(arrays, castArrayLikeObject);
    
          if (iteratee === last(mapped)) {
            iteratee = undefined;
          } else {
            mapped.pop();
          }
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped, getIteratee(iteratee, 2))
            : [];
        });
    
        /**
         * This method is like `_.intersection` except that it accepts `comparator`
         * which is invoked to compare elements of `arrays`. The order and references
         * of result values are determined by the first array. The comparator is
         * invoked with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.intersectionWith(objects, others, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }]
         */
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays),
              mapped = arrayMap(arrays, castArrayLikeObject);
    
          comparator = typeof comparator == 'function' ? comparator : undefined;
          if (comparator) {
            mapped.pop();
          }
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped, undefined, comparator)
            : [];
        });
    
        /**
         * Converts all elements in `array` into a string separated by `separator`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to convert.
         * @param {string} [separator=','] The element separator.
         * @returns {string} Returns the joined string.
         * @example
         *
         * _.join(['a', 'b', 'c'], '~');
         * // => 'a~b~c'
         */
        function join(array, separator) {
          return array == null ? '' : nativeJoin.call(array, separator);
        }
    
        /**
         * Gets the last element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the last element of `array`.
         * @example
         *
         * _.last([1, 2, 3]);
         * // => 3
         */
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined;
        }
    
        /**
         * This method is like `_.indexOf` except that it iterates over elements of
         * `array` from right to left.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=array.length-1] The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.lastIndexOf([1, 2, 1, 2], 2);
         * // => 3
         *
         * // Search from the `fromIndex`.
         * _.lastIndexOf([1, 2, 1, 2], 2, 2);
         * // => 1
         */
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value
            ? strictLastIndexOf(array, value, index)
            : baseFindIndex(array, baseIsNaN, index, true);
        }
    
        /**
         * Gets the element at index `n` of `array`. If `n` is negative, the nth
         * element from the end is returned.
         *
         * @static
         * @memberOf _
         * @since 4.11.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=0] The index of the element to return.
         * @returns {*} Returns the nth element of `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'd'];
         *
         * _.nth(array, 1);
         * // => 'b'
         *
         * _.nth(array, -2);
         * // => 'c';
         */
        function nth(array, n) {
          return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
        }
    
        /**
         * Removes all given values from `array` using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
         * to remove elements from an array by predicate.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {...*} [values] The values to remove.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
         *
         * _.pull(array, 'a', 'c');
         * console.log(array);
         * // => ['b', 'b']
         */
        var pull = baseRest(pullAll);
    
        /**
         * This method is like `_.pull` except that it accepts an array of values to remove.
         *
         * **Note:** Unlike `_.difference`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
         *
         * _.pullAll(array, ['a', 'c']);
         * console.log(array);
         * // => ['b', 'b']
         */
        function pullAll(array, values) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values)
            : array;
        }
    
        /**
         * This method is like `_.pullAll` except that it accepts `iteratee` which is
         * invoked for each element of `array` and `values` to generate the criterion
         * by which they're compared. The iteratee is invoked with one argument: (value).
         *
         * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
         *
         * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
         * console.log(array);
         * // => [{ 'x': 2 }]
         */
        function pullAllBy(array, values, iteratee) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values, getIteratee(iteratee, 2))
            : array;
        }
    
        /**
         * This method is like `_.pullAll` except that it accepts `comparator` which
         * is invoked to compare elements of `array` to `values`. The comparator is
         * invoked with two arguments: (arrVal, othVal).
         *
         * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
         *
         * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
         * console.log(array);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
         */
        function pullAllWith(array, values, comparator) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values, undefined, comparator)
            : array;
        }
    
        /**
         * Removes elements from `array` corresponding to `indexes` and returns an
         * array of removed elements.
         *
         * **Note:** Unlike `_.at`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {...(number|number[])} [indexes] The indexes of elements to remove.
         * @returns {Array} Returns the new array of removed elements.
         * @example
         *
         * var array = ['a', 'b', 'c', 'd'];
         * var pulled = _.pullAt(array, [1, 3]);
         *
         * console.log(array);
         * // => ['a', 'c']
         *
         * console.log(pulled);
         * // => ['b', 'd']
         */
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length,
              result = baseAt(array, indexes);
    
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
    
          return result;
        });
    
        /**
         * Removes all elements from `array` that `predicate` returns truthy for
         * and returns an array of the removed elements. The predicate is invoked
         * with three arguments: (value, index, array).
         *
         * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
         * to pull elements from an array by value.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new array of removed elements.
         * @example
         *
         * var array = [1, 2, 3, 4];
         * var evens = _.remove(array, function(n) {
         *   return n % 2 == 0;
         * });
         *
         * console.log(array);
         * // => [1, 3]
         *
         * console.log(evens);
         * // => [2, 4]
         */
        function remove(array, predicate) {
          var result = [];
          if (!(array && array.length)) {
            return result;
          }
          var index = -1,
              indexes = [],
              length = array.length;
    
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result;
        }
    
        /**
         * Reverses `array` so that the first element becomes the last, the second
         * element becomes the second to last, and so on.
         *
         * **Note:** This method mutates `array` and is based on
         * [`Array#reverse`](https://mdn.io/Array/reverse).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _.reverse(array);
         * // => [3, 2, 1]
         *
         * console.log(array);
         * // => [3, 2, 1]
         */
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
    
        /**
         * Creates a slice of `array` from `start` up to, but not including, `end`.
         *
         * **Note:** This method is used instead of
         * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
         * returned.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          }
          else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
    
        /**
         * Uses a binary search to determine the lowest index at which `value`
         * should be inserted into `array` in order to maintain its sort order.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * _.sortedIndex([30, 50], 40);
         * // => 1
         */
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
    
        /**
         * This method is like `_.sortedIndex` except that it accepts `iteratee`
         * which is invoked for `value` and each element of `array` to compute their
         * sort ranking. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * var objects = [{ 'x': 4 }, { 'x': 5 }];
         *
         * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
         * // => 0
         *
         * // The `_.property` iteratee shorthand.
         * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
         * // => 0
         */
        function sortedIndexBy(array, value, iteratee) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
        }
    
        /**
         * This method is like `_.indexOf` except that it performs a binary
         * search on a sorted `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
         * // => 1
         */
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
    
        /**
         * This method is like `_.sortedIndex` except that it returns the highest
         * index at which `value` should be inserted into `array` in order to
         * maintain its sort order.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
         * // => 4
         */
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
    
        /**
         * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
         * which is invoked for `value` and each element of `array` to compute their
         * sort ranking. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * var objects = [{ 'x': 4 }, { 'x': 5 }];
         *
         * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
         * // => 1
         *
         * // The `_.property` iteratee shorthand.
         * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
         * // => 1
         */
        function sortedLastIndexBy(array, value, iteratee) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
        }
    
        /**
         * This method is like `_.lastIndexOf` except that it performs a binary
         * search on a sorted `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
         * // => 3
         */
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
    
        /**
         * This method is like `_.uniq` except that it's designed and optimized
         * for sorted arrays.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.sortedUniq([1, 1, 2]);
         * // => [1, 2]
         */
        function sortedUniq(array) {
          return (array && array.length)
            ? baseSortedUniq(array)
            : [];
        }
    
        /**
         * This method is like `_.uniqBy` except that it's designed and optimized
         * for sorted arrays.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
         * // => [1.1, 2.3]
         */
        function sortedUniqBy(array, iteratee) {
          return (array && array.length)
            ? baseSortedUniq(array, getIteratee(iteratee, 2))
            : [];
        }
    
        /**
         * Gets all but the first element of `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.tail([1, 2, 3]);
         * // => [2, 3]
         */
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
    
        /**
         * Creates a slice of `array` with `n` elements taken from the beginning.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to take.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.take([1, 2, 3]);
         * // => [1]
         *
         * _.take([1, 2, 3], 2);
         * // => [1, 2]
         *
         * _.take([1, 2, 3], 5);
         * // => [1, 2, 3]
         *
         * _.take([1, 2, 3], 0);
         * // => []
         */
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
    
        /**
         * Creates a slice of `array` with `n` elements taken from the end.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to take.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.takeRight([1, 2, 3]);
         * // => [3]
         *
         * _.takeRight([1, 2, 3], 2);
         * // => [2, 3]
         *
         * _.takeRight([1, 2, 3], 5);
         * // => [1, 2, 3]
         *
         * _.takeRight([1, 2, 3], 0);
         * // => []
         */
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
    
        /**
         * Creates a slice of `array` with elements taken from the end. Elements are
         * taken until `predicate` returns falsey. The predicate is invoked with
         * three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.takeRightWhile(users, function(o) { return !o.active; });
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.matches` iteratee shorthand.
         * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
         * // => objects for ['pebbles']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.takeRightWhile(users, ['active', false]);
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.property` iteratee shorthand.
         * _.takeRightWhile(users, 'active');
         * // => []
         */
        function takeRightWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3), false, true)
            : [];
        }
    
        /**
         * Creates a slice of `array` with elements taken from the beginning. Elements
         * are taken until `predicate` returns falsey. The predicate is invoked with
         * three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.takeWhile(users, function(o) { return !o.active; });
         * // => objects for ['barney', 'fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.takeWhile(users, { 'user': 'barney', 'active': false });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.takeWhile(users, ['active', false]);
         * // => objects for ['barney', 'fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.takeWhile(users, 'active');
         * // => []
         */
        function takeWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3))
            : [];
        }
    
        /**
         * Creates an array of unique values, in order, from all given arrays using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * _.union([2], [1, 2]);
         * // => [2, 1]
         */
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
    
        /**
         * This method is like `_.union` except that it accepts `iteratee` which is
         * invoked for each element of each `arrays` to generate the criterion by
         * which uniqueness is computed. Result values are chosen from the first
         * array in which the value occurs. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * _.unionBy([2.1], [1.2, 2.3], Math.floor);
         * // => [2.1, 1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }, { 'x': 2 }]
         */
        var unionBy = baseRest(function(arrays) {
          var iteratee = last(arrays);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
        });
    
        /**
         * This method is like `_.union` except that it accepts `comparator` which
         * is invoked to compare elements of `arrays`. Result values are chosen from
         * the first array in which the value occurs. The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.unionWith(objects, others, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
         */
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == 'function' ? comparator : undefined;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
        });
    
        /**
         * Creates a duplicate-free version of an array, using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons, in which only the first occurrence of each element
         * is kept. The order of result values is determined by the order they occur
         * in the array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.uniq([2, 1, 2]);
         * // => [2, 1]
         */
        function uniq(array) {
          return (array && array.length) ? baseUniq(array) : [];
        }
    
        /**
         * This method is like `_.uniq` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * uniqueness is computed. The order of result values is determined by the
         * order they occur in the array. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
         * // => [2.1, 1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }, { 'x': 2 }]
         */
        function uniqBy(array, iteratee) {
          return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
        }
    
        /**
         * This method is like `_.uniq` except that it accepts `comparator` which
         * is invoked to compare elements of `array`. The order of result values is
         * determined by the order they occur in the array.The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.uniqWith(objects, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
         */
        function uniqWith(array, comparator) {
          comparator = typeof comparator == 'function' ? comparator : undefined;
          return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
        }
    
        /**
         * This method is like `_.zip` except that it accepts an array of grouped
         * elements and creates an array regrouping the elements to their pre-zip
         * configuration.
         *
         * @static
         * @memberOf _
         * @since 1.2.0
         * @category Array
         * @param {Array} array The array of grouped elements to process.
         * @returns {Array} Returns the new array of regrouped elements.
         * @example
         *
         * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
         * // => [['a', 1, true], ['b', 2, false]]
         *
         * _.unzip(zipped);
         * // => [['a', 'b'], [1, 2], [true, false]]
         */
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
    
        /**
         * This method is like `_.unzip` except that it accepts `iteratee` to specify
         * how regrouped values should be combined. The iteratee is invoked with the
         * elements of each group: (...group).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Array
         * @param {Array} array The array of grouped elements to process.
         * @param {Function} [iteratee=_.identity] The function to combine
         *  regrouped values.
         * @returns {Array} Returns the new array of regrouped elements.
         * @example
         *
         * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
         * // => [[1, 10, 100], [2, 20, 200]]
         *
         * _.unzipWith(zipped, _.add);
         * // => [3, 30, 300]
         */
        function unzipWith(array, iteratee) {
          if (!(array && array.length)) {
            return [];
          }
          var result = unzip(array);
          if (iteratee == null) {
            return result;
          }
          return arrayMap(result, function(group) {
            return apply(iteratee, undefined, group);
          });
        }
    
        /**
         * Creates an array excluding all given values using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * **Note:** Unlike `_.pull`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...*} [values] The values to exclude.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.difference, _.xor
         * @example
         *
         * _.without([2, 1, 2, 3], 1, 2);
         * // => [3]
         */
        var without = baseRest(function(array, values) {
          return isArrayLikeObject(array)
            ? baseDifference(array, values)
            : [];
        });
    
        /**
         * Creates an array of unique values that is the
         * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
         * of the given arrays. The order of result values is determined by the order
         * they occur in the arrays.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.difference, _.without
         * @example
         *
         * _.xor([2, 1], [2, 3]);
         * // => [1, 3]
         */
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
    
        /**
         * This method is like `_.xor` except that it accepts `iteratee` which is
         * invoked for each element of each `arrays` to generate the criterion by
         * which by which they're compared. The order of result values is determined
         * by the order they occur in the arrays. The iteratee is invoked with one
         * argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [1.2, 3.4]
         *
         * // The `_.property` iteratee shorthand.
         * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 2 }]
         */
        var xorBy = baseRest(function(arrays) {
          var iteratee = last(arrays);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
        });
    
        /**
         * This method is like `_.xor` except that it accepts `comparator` which is
         * invoked to compare elements of `arrays`. The order of result values is
         * determined by the order they occur in the arrays. The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.xorWith(objects, others, _.isEqual);
         * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
         */
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == 'function' ? comparator : undefined;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
        });
    
        /**
         * Creates an array of grouped elements, the first of which contains the
         * first elements of the given arrays, the second of which contains the
         * second elements of the given arrays, and so on.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to process.
         * @returns {Array} Returns the new array of grouped elements.
         * @example
         *
         * _.zip(['a', 'b'], [1, 2], [true, false]);
         * // => [['a', 1, true], ['b', 2, false]]
         */
        var zip = baseRest(unzip);
    
        /**
         * This method is like `_.fromPairs` except that it accepts two arrays,
         * one of property identifiers and one of corresponding values.
         *
         * @static
         * @memberOf _
         * @since 0.4.0
         * @category Array
         * @param {Array} [props=[]] The property identifiers.
         * @param {Array} [values=[]] The property values.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.zipObject(['a', 'b'], [1, 2]);
         * // => { 'a': 1, 'b': 2 }
         */
        function zipObject(props, values) {
          return baseZipObject(props || [], values || [], assignValue);
        }
    
        /**
         * This method is like `_.zipObject` except that it supports property paths.
         *
         * @static
         * @memberOf _
         * @since 4.1.0
         * @category Array
         * @param {Array} [props=[]] The property identifiers.
         * @param {Array} [values=[]] The property values.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
         * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
         */
        function zipObjectDeep(props, values) {
          return baseZipObject(props || [], values || [], baseSet);
        }
    
        /**
         * This method is like `_.zip` except that it accepts `iteratee` to specify
         * how grouped values should be combined. The iteratee is invoked with the
         * elements of each group: (...group).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Array
         * @param {...Array} [arrays] The arrays to process.
         * @param {Function} [iteratee=_.identity] The function to combine
         *  grouped values.
         * @returns {Array} Returns the new array of grouped elements.
         * @example
         *
         * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
         *   return a + b + c;
         * });
         * // => [111, 222]
         */
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length,
              iteratee = length > 1 ? arrays[length - 1] : undefined;
    
          iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
          return unzipWith(arrays, iteratee);
        });
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates a `lodash` wrapper instance that wraps `value` with explicit method
         * chain sequences enabled. The result of such sequences must be unwrapped
         * with `_#value`.
         *
         * @static
         * @memberOf _
         * @since 1.3.0
         * @category Seq
         * @param {*} value The value to wrap.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36 },
         *   { 'user': 'fred',    'age': 40 },
         *   { 'user': 'pebbles', 'age': 1 }
         * ];
         *
         * var youngest = _
         *   .chain(users)
         *   .sortBy('age')
         *   .map(function(o) {
         *     return o.user + ' is ' + o.age;
         *   })
         *   .head()
         *   .value();
         * // => 'pebbles is 1'
         */
        function chain(value) {
          var result = lodash(value);
          result.__chain__ = true;
          return result;
        }
    
        /**
         * This method invokes `interceptor` and returns `value`. The interceptor
         * is invoked with one argument; (value). The purpose of this method is to
         * "tap into" a method chain sequence in order to modify intermediate results.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Seq
         * @param {*} value The value to provide to `interceptor`.
         * @param {Function} interceptor The function to invoke.
         * @returns {*} Returns `value`.
         * @example
         *
         * _([1, 2, 3])
         *  .tap(function(array) {
         *    // Mutate input array.
         *    array.pop();
         *  })
         *  .reverse()
         *  .value();
         * // => [2, 1]
         */
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
    
        /**
         * This method is like `_.tap` except that it returns the result of `interceptor`.
         * The purpose of this method is to "pass thru" values replacing intermediate
         * results in a method chain sequence.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Seq
         * @param {*} value The value to provide to `interceptor`.
         * @param {Function} interceptor The function to invoke.
         * @returns {*} Returns the result of `interceptor`.
         * @example
         *
         * _('  abc  ')
         *  .chain()
         *  .trim()
         *  .thru(function(value) {
         *    return [value];
         *  })
         *  .value();
         * // => ['abc']
         */
        function thru(value, interceptor) {
          return interceptor(value);
        }
    
        /**
         * This method is the wrapper version of `_.at`.
         *
         * @name at
         * @memberOf _
         * @since 1.0.0
         * @category Seq
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
         *
         * _(object).at(['a[0].b.c', 'a[1]']).value();
         * // => [3, 4]
         */
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length,
              start = length ? paths[0] : 0,
              value = this.__wrapped__,
              interceptor = function(object) { return baseAt(object, paths); };
    
          if (length > 1 || this.__actions__.length ||
              !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            'func': thru,
            'args': [interceptor],
            'thisArg': undefined
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined);
            }
            return array;
          });
        });
    
        /**
         * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
         *
         * @name chain
         * @memberOf _
         * @since 0.1.0
         * @category Seq
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 40 }
         * ];
         *
         * // A sequence without explicit chaining.
         * _(users).head();
         * // => { 'user': 'barney', 'age': 36 }
         *
         * // A sequence with explicit chaining.
         * _(users)
         *   .chain()
         *   .head()
         *   .pick('user')
         *   .value();
         * // => { 'user': 'barney' }
         */
        function wrapperChain() {
          return chain(this);
        }
    
        /**
         * Executes the chain sequence and returns the wrapped result.
         *
         * @name commit
         * @memberOf _
         * @since 3.2.0
         * @category Seq
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var array = [1, 2];
         * var wrapped = _(array).push(3);
         *
         * console.log(array);
         * // => [1, 2]
         *
         * wrapped = wrapped.commit();
         * console.log(array);
         * // => [1, 2, 3]
         *
         * wrapped.last();
         * // => 3
         *
         * console.log(array);
         * // => [1, 2, 3]
         */
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
    
        /**
         * Gets the next value on a wrapped object following the
         * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
         *
         * @name next
         * @memberOf _
         * @since 4.0.0
         * @category Seq
         * @returns {Object} Returns the next iterator value.
         * @example
         *
         * var wrapped = _([1, 2]);
         *
         * wrapped.next();
         * // => { 'done': false, 'value': 1 }
         *
         * wrapped.next();
         * // => { 'done': false, 'value': 2 }
         *
         * wrapped.next();
         * // => { 'done': true, 'value': undefined }
         */
        function wrapperNext() {
          if (this.__values__ === undefined) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length,
              value = done ? undefined : this.__values__[this.__index__++];
    
          return { 'done': done, 'value': value };
        }
    
        /**
         * Enables the wrapper to be iterable.
         *
         * @name Symbol.iterator
         * @memberOf _
         * @since 4.0.0
         * @category Seq
         * @returns {Object} Returns the wrapper object.
         * @example
         *
         * var wrapped = _([1, 2]);
         *
         * wrapped[Symbol.iterator]() === wrapped;
         * // => true
         *
         * Array.from(wrapped);
         * // => [1, 2]
         */
        function wrapperToIterator() {
          return this;
        }
    
        /**
         * Creates a clone of the chain sequence planting `value` as the wrapped value.
         *
         * @name plant
         * @memberOf _
         * @since 3.2.0
         * @category Seq
         * @param {*} value The value to plant.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var wrapped = _([1, 2]).map(square);
         * var other = wrapped.plant([3, 4]);
         *
         * other.value();
         * // => [9, 16]
         *
         * wrapped.value();
         * // => [1, 4]
         */
        function wrapperPlant(value) {
          var result,
              parent = this;
    
          while (parent instanceof baseLodash) {
            var clone = wrapperClone(parent);
            clone.__index__ = 0;
            clone.__values__ = undefined;
            if (result) {
              previous.__wrapped__ = clone;
            } else {
              result = clone;
            }
            var previous = clone;
            parent = parent.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result;
        }
    
        /**
         * This method is the wrapper version of `_.reverse`.
         *
         * **Note:** This method mutates the wrapped array.
         *
         * @name reverse
         * @memberOf _
         * @since 0.1.0
         * @category Seq
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _(array).reverse().value()
         * // => [3, 2, 1]
         *
         * console.log(array);
         * // => [3, 2, 1]
         */
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              'func': thru,
              'args': [reverse],
              'thisArg': undefined
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
    
        /**
         * Executes the chain sequence to resolve the unwrapped value.
         *
         * @name value
         * @memberOf _
         * @since 0.1.0
         * @alias toJSON, valueOf
         * @category Seq
         * @returns {*} Returns the resolved unwrapped value.
         * @example
         *
         * _([1, 2, 3]).value();
         * // => [1, 2, 3]
         */
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` thru `iteratee`. The corresponding value of
         * each key is the number of times the key was returned by `iteratee`. The
         * iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * _.countBy([6.1, 4.2, 6.3], Math.floor);
         * // => { '4': 1, '6': 2 }
         *
         * // The `_.property` iteratee shorthand.
         * _.countBy(['one', 'two', 'three'], 'length');
         * // => { '3': 2, '5': 1 }
         */
        var countBy = createAggregator(function(result, value, key) {
          if (hasOwnProperty.call(result, key)) {
            ++result[key];
          } else {
            baseAssignValue(result, key, 1);
          }
        });
    
        /**
         * Checks if `predicate` returns truthy for **all** elements of `collection`.
         * Iteration is stopped once `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index|key, collection).
         *
         * **Note:** This method returns `true` for
         * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
         * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
         * elements of empty collections.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`.
         * @example
         *
         * _.every([true, 1, null, 'yes'], Boolean);
         * // => false
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': false },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.every(users, { 'user': 'barney', 'active': false });
         * // => false
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.every(users, ['active', false]);
         * // => true
         *
         * // The `_.property` iteratee shorthand.
         * _.every(users, 'active');
         * // => false
         */
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined;
          }
          return func(collection, getIteratee(predicate, 3));
        }
    
        /**
         * Iterates over elements of `collection`, returning an array of all elements
         * `predicate` returns truthy for. The predicate is invoked with three
         * arguments: (value, index|key, collection).
         *
         * **Note:** Unlike `_.remove`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         * @see _.reject
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': true },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * _.filter(users, function(o) { return !o.active; });
         * // => objects for ['fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.filter(users, { 'age': 36, 'active': true });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.filter(users, ['active', false]);
         * // => objects for ['fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.filter(users, 'active');
         * // => objects for ['barney']
         *
         * // Combining several predicates using `_.overEvery` or `_.overSome`.
         * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
         * // => objects for ['fred', 'barney']
         */
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
    
        /**
         * Iterates over elements of `collection`, returning the first element
         * `predicate` returns truthy for. The predicate is invoked with three
         * arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {*} Returns the matched element, else `undefined`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36, 'active': true },
         *   { 'user': 'fred',    'age': 40, 'active': false },
         *   { 'user': 'pebbles', 'age': 1,  'active': true }
         * ];
         *
         * _.find(users, function(o) { return o.age < 40; });
         * // => object for 'barney'
         *
         * // The `_.matches` iteratee shorthand.
         * _.find(users, { 'age': 1, 'active': true });
         * // => object for 'pebbles'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.find(users, ['active', false]);
         * // => object for 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.find(users, 'active');
         * // => object for 'barney'
         */
        var find = createFind(findIndex);
    
        /**
         * This method is like `_.find` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=collection.length-1] The index to search from.
         * @returns {*} Returns the matched element, else `undefined`.
         * @example
         *
         * _.findLast([1, 2, 3, 4], function(n) {
         *   return n % 2 == 1;
         * });
         * // => 3
         */
        var findLast = createFind(findLastIndex);
    
        /**
         * Creates a flattened array of values by running each element in `collection`
         * thru `iteratee` and flattening the mapped results. The iteratee is invoked
         * with three arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * function duplicate(n) {
         *   return [n, n];
         * }
         *
         * _.flatMap([1, 2], duplicate);
         * // => [1, 1, 2, 2]
         */
        function flatMap(collection, iteratee) {
          return baseFlatten(map(collection, iteratee), 1);
        }
    
        /**
         * This method is like `_.flatMap` except that it recursively flattens the
         * mapped results.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * function duplicate(n) {
         *   return [[[n, n]]];
         * }
         *
         * _.flatMapDeep([1, 2], duplicate);
         * // => [1, 1, 2, 2]
         */
        function flatMapDeep(collection, iteratee) {
          return baseFlatten(map(collection, iteratee), INFINITY);
        }
    
        /**
         * This method is like `_.flatMap` except that it recursively flattens the
         * mapped results up to `depth` times.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {number} [depth=1] The maximum recursion depth.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * function duplicate(n) {
         *   return [[[n, n]]];
         * }
         *
         * _.flatMapDepth([1, 2], duplicate, 2);
         * // => [[1, 1], [2, 2]]
         */
        function flatMapDepth(collection, iteratee, depth) {
          depth = depth === undefined ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee), depth);
        }
    
        /**
         * Iterates over elements of `collection` and invokes `iteratee` for each element.
         * The iteratee is invoked with three arguments: (value, index|key, collection).
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * **Note:** As with other "Collections" methods, objects with a "length"
         * property are iterated like arrays. To avoid this behavior use `_.forIn`
         * or `_.forOwn` for object iteration.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @alias each
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         * @see _.forEachRight
         * @example
         *
         * _.forEach([1, 2], function(value) {
         *   console.log(value);
         * });
         * // => Logs `1` then `2`.
         *
         * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
         */
        function forEach(collection, iteratee) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee, 3));
        }
    
        /**
         * This method is like `_.forEach` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @alias eachRight
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         * @see _.forEach
         * @example
         *
         * _.forEachRight([1, 2], function(value) {
         *   console.log(value);
         * });
         * // => Logs `2` then `1`.
         */
        function forEachRight(collection, iteratee) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee, 3));
        }
    
        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` thru `iteratee`. The order of grouped values
         * is determined by the order they occur in `collection`. The corresponding
         * value of each key is an array of elements responsible for generating the
         * key. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * _.groupBy([6.1, 4.2, 6.3], Math.floor);
         * // => { '4': [4.2], '6': [6.1, 6.3] }
         *
         * // The `_.property` iteratee shorthand.
         * _.groupBy(['one', 'two', 'three'], 'length');
         * // => { '3': ['one', 'two'], '5': ['three'] }
         */
        var groupBy = createAggregator(function(result, value, key) {
          if (hasOwnProperty.call(result, key)) {
            result[key].push(value);
          } else {
            baseAssignValue(result, key, [value]);
          }
        });
    
        /**
         * Checks if `value` is in `collection`. If `collection` is a string, it's
         * checked for a substring of `value`, otherwise
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * is used for equality comparisons. If `fromIndex` is negative, it's used as
         * the offset from the end of `collection`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object|string} collection The collection to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=0] The index to search from.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
         * @returns {boolean} Returns `true` if `value` is found, else `false`.
         * @example
         *
         * _.includes([1, 2, 3], 1);
         * // => true
         *
         * _.includes([1, 2, 3], 1, 2);
         * // => false
         *
         * _.includes({ 'a': 1, 'b': 2 }, 1);
         * // => true
         *
         * _.includes('abcd', 'bc');
         * // => true
         */
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;
    
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection)
            ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
            : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
        }
    
        /**
         * Invokes the method at `path` of each element in `collection`, returning
         * an array of the results of each invoked method. Any additional arguments
         * are provided to each invoked method. If `path` is a function, it's invoked
         * for, and `this` bound to, each element in `collection`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Array|Function|string} path The path of the method to invoke or
         *  the function invoked per iteration.
         * @param {...*} [args] The arguments to invoke each method with.
         * @returns {Array} Returns the array of results.
         * @example
         *
         * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
         * // => [[1, 5, 7], [1, 2, 3]]
         *
         * _.invokeMap([123, 456], String.prototype.split, '');
         * // => [['1', '2', '3'], ['4', '5', '6']]
         */
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1,
              isFunc = typeof path == 'function',
              result = isArrayLike(collection) ? Array(collection.length) : [];
    
          baseEach(collection, function(value) {
            result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result;
        });
    
        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` thru `iteratee`. The corresponding value of
         * each key is the last element responsible for generating the key. The
         * iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * var array = [
         *   { 'dir': 'left', 'code': 97 },
         *   { 'dir': 'right', 'code': 100 }
         * ];
         *
         * _.keyBy(array, function(o) {
         *   return String.fromCharCode(o.code);
         * });
         * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
         *
         * _.keyBy(array, 'dir');
         * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
         */
        var keyBy = createAggregator(function(result, value, key) {
          baseAssignValue(result, key, value);
        });
    
        /**
         * Creates an array of values by running each element in `collection` thru
         * `iteratee`. The iteratee is invoked with three arguments:
         * (value, index|key, collection).
         *
         * Many lodash methods are guarded to work as iteratees for methods like
         * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
         *
         * The guarded methods are:
         * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
         * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
         * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
         * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * _.map([4, 8], square);
         * // => [16, 64]
         *
         * _.map({ 'a': 4, 'b': 8 }, square);
         * // => [16, 64] (iteration order is not guaranteed)
         *
         * var users = [
         *   { 'user': 'barney' },
         *   { 'user': 'fred' }
         * ];
         *
         * // The `_.property` iteratee shorthand.
         * _.map(users, 'user');
         * // => ['barney', 'fred']
         */
        function map(collection, iteratee) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee, 3));
        }
    
        /**
         * This method is like `_.sortBy` except that it allows specifying the sort
         * orders of the iteratees to sort by. If `orders` is unspecified, all values
         * are sorted in ascending order. Otherwise, specify an order of "desc" for
         * descending or "asc" for ascending sort order of corresponding values.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
         *  The iteratees to sort by.
         * @param {string[]} [orders] The sort orders of `iteratees`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
         * @returns {Array} Returns the new sorted array.
         * @example
         *
         * var users = [
         *   { 'user': 'fred',   'age': 48 },
         *   { 'user': 'barney', 'age': 34 },
         *   { 'user': 'fred',   'age': 40 },
         *   { 'user': 'barney', 'age': 36 }
         * ];
         *
         * // Sort by `user` in ascending order and by `age` in descending order.
         * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
         */
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
    
        /**
         * Creates an array of elements split into two groups, the first of which
         * contains elements `predicate` returns truthy for, the second of which
         * contains elements `predicate` returns falsey for. The predicate is
         * invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the array of grouped elements.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36, 'active': false },
         *   { 'user': 'fred',    'age': 40, 'active': true },
         *   { 'user': 'pebbles', 'age': 1,  'active': false }
         * ];
         *
         * _.partition(users, function(o) { return o.active; });
         * // => objects for [['fred'], ['barney', 'pebbles']]
         *
         * // The `_.matches` iteratee shorthand.
         * _.partition(users, { 'age': 1, 'active': false });
         * // => objects for [['pebbles'], ['barney', 'fred']]
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.partition(users, ['active', false]);
         * // => objects for [['barney', 'pebbles'], ['fred']]
         *
         * // The `_.property` iteratee shorthand.
         * _.partition(users, 'active');
         * // => objects for [['fred'], ['barney', 'pebbles']]
         */
        var partition = createAggregator(function(result, value, key) {
          result[key ? 0 : 1].push(value);
        }, function() { return [[], []]; });
    
        /**
         * Reduces `collection` to a value which is the accumulated result of running
         * each element in `collection` thru `iteratee`, where each successive
         * invocation is supplied the return value of the previous. If `accumulator`
         * is not given, the first element of `collection` is used as the initial
         * value. The iteratee is invoked with four arguments:
         * (accumulator, value, index|key, collection).
         *
         * Many lodash methods are guarded to work as iteratees for methods like
         * `_.reduce`, `_.reduceRight`, and `_.transform`.
         *
         * The guarded methods are:
         * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
         * and `sortBy`
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @returns {*} Returns the accumulated value.
         * @see _.reduceRight
         * @example
         *
         * _.reduce([1, 2], function(sum, n) {
         *   return sum + n;
         * }, 0);
         * // => 3
         *
         * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
         *   (result[value] || (result[value] = [])).push(key);
         *   return result;
         * }, {});
         * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
         */
        function reduce(collection, iteratee, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce,
              initAccum = arguments.length < 3;
    
          return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        }
    
        /**
         * This method is like `_.reduce` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @returns {*} Returns the accumulated value.
         * @see _.reduce
         * @example
         *
         * var array = [[0, 1], [2, 3], [4, 5]];
         *
         * _.reduceRight(array, function(flattened, other) {
         *   return flattened.concat(other);
         * }, []);
         * // => [4, 5, 2, 3, 0, 1]
         */
        function reduceRight(collection, iteratee, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce,
              initAccum = arguments.length < 3;
    
          return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
        }
    
        /**
         * The opposite of `_.filter`; this method returns the elements of `collection`
         * that `predicate` does **not** return truthy for.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         * @see _.filter
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': false },
         *   { 'user': 'fred',   'age': 40, 'active': true }
         * ];
         *
         * _.reject(users, function(o) { return !o.active; });
         * // => objects for ['fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.reject(users, { 'age': 40, 'active': true });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.reject(users, ['active', false]);
         * // => objects for ['fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.reject(users, 'active');
         * // => objects for ['barney']
         */
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
    
        /**
         * Gets a random element from `collection`.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to sample.
         * @returns {*} Returns the random element.
         * @example
         *
         * _.sample([1, 2, 3, 4]);
         * // => 2
         */
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
    
        /**
         * Gets `n` random elements at unique keys from `collection` up to the
         * size of `collection`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to sample.
         * @param {number} [n=1] The number of elements to sample.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the random elements.
         * @example
         *
         * _.sampleSize([1, 2, 3], 2);
         * // => [3, 1]
         *
         * _.sampleSize([1, 2, 3], 4);
         * // => [2, 3, 1]
         */
        function sampleSize(collection, n, guard) {
          if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
    
        /**
         * Creates an array of shuffled values, using a version of the
         * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to shuffle.
         * @returns {Array} Returns the new shuffled array.
         * @example
         *
         * _.shuffle([1, 2, 3, 4]);
         * // => [4, 1, 3, 2]
         */
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
    
        /**
         * Gets the size of `collection` by returning its length for array-like
         * values or the number of own enumerable string keyed properties for objects.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object|string} collection The collection to inspect.
         * @returns {number} Returns the collection size.
         * @example
         *
         * _.size([1, 2, 3]);
         * // => 3
         *
         * _.size({ 'a': 1, 'b': 2 });
         * // => 2
         *
         * _.size('pebbles');
         * // => 7
         */
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
    
        /**
         * Checks if `predicate` returns truthy for **any** element of `collection`.
         * Iteration is stopped once `predicate` returns truthy. The predicate is
         * invoked with three arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         * @example
         *
         * _.some([null, 0, 'yes', false], Boolean);
         * // => true
         *
         * var users = [
         *   { 'user': 'barney', 'active': true },
         *   { 'user': 'fred',   'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.some(users, { 'user': 'barney', 'active': false });
         * // => false
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.some(users, ['active', false]);
         * // => true
         *
         * // The `_.property` iteratee shorthand.
         * _.some(users, 'active');
         * // => true
         */
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined;
          }
          return func(collection, getIteratee(predicate, 3));
        }
    
        /**
         * Creates an array of elements, sorted in ascending order by the results of
         * running each element in a collection thru each iteratee. This method
         * performs a stable sort, that is, it preserves the original sort order of
         * equal elements. The iteratees are invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {...(Function|Function[])} [iteratees=[_.identity]]
         *  The iteratees to sort by.
         * @returns {Array} Returns the new sorted array.
         * @example
         *
         * var users = [
         *   { 'user': 'fred',   'age': 48 },
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 30 },
         *   { 'user': 'barney', 'age': 34 }
         * ];
         *
         * _.sortBy(users, [function(o) { return o.user; }]);
         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
         *
         * _.sortBy(users, ['user', 'age']);
         * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
         */
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Gets the timestamp of the number of milliseconds that have elapsed since
         * the Unix epoch (1 January 1970 00:00:00 UTC).
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Date
         * @returns {number} Returns the timestamp.
         * @example
         *
         * _.defer(function(stamp) {
         *   console.log(_.now() - stamp);
         * }, _.now());
         * // => Logs the number of milliseconds it took for the deferred invocation.
         */
        var now = ctxNow || function() {
          return root.Date.now();
        };
    
        /*------------------------------------------------------------------------*/
    
        /**
         * The opposite of `_.before`; this method creates a function that invokes
         * `func` once it's called `n` or more times.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {number} n The number of calls before `func` is invoked.
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * var saves = ['profile', 'settings'];
         *
         * var done = _.after(saves.length, function() {
         *   console.log('done saving!');
         * });
         *
         * _.forEach(saves, function(type) {
         *   asyncSave({ 'type': type, 'complete': done });
         * });
         * // => Logs 'done saving!' after the two async saves have completed.
         */
        function after(n, func) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
    
        /**
         * Creates a function that invokes `func`, with up to `n` arguments,
         * ignoring any additional arguments.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to cap arguments for.
         * @param {number} [n=func.length] The arity cap.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new capped function.
         * @example
         *
         * _.map(['6', '8', '10'], _.ary(parseInt, 1));
         * // => [6, 8, 10]
         */
        function ary(func, n, guard) {
          n = guard ? undefined : n;
          n = (func && n == null) ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }
    
        /**
         * Creates a function that invokes `func`, with the `this` binding and arguments
         * of the created function, while it's called less than `n` times. Subsequent
         * calls to the created function return the result of the last `func` invocation.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {number} n The number of calls at which `func` is no longer invoked.
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * jQuery(element).on('click', _.before(5, addContactToList));
         * // => Allows adding up to 4 contacts to the list.
         */
        function before(n, func) {
          var result;
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined;
            }
            return result;
          };
        }
    
        /**
         * Creates a function that invokes `func` with the `this` binding of `thisArg`
         * and `partials` prepended to the arguments it receives.
         *
         * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
         * may be used as a placeholder for partially applied arguments.
         *
         * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
         * property of bound functions.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to bind.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new bound function.
         * @example
         *
         * function greet(greeting, punctuation) {
         *   return greeting + ' ' + this.user + punctuation;
         * }
         *
         * var object = { 'user': 'fred' };
         *
         * var bound = _.bind(greet, object, 'hi');
         * bound('!');
         * // => 'hi fred!'
         *
         * // Bound with placeholders.
         * var bound = _.bind(greet, object, _, '!');
         * bound('hi');
         * // => 'hi fred!'
         */
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
    
        /**
         * Creates a function that invokes the method at `object[key]` with `partials`
         * prepended to the arguments it receives.
         *
         * This method differs from `_.bind` by allowing bound functions to reference
         * methods that may be redefined or don't yet exist. See
         * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
         * for more details.
         *
         * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * @static
         * @memberOf _
         * @since 0.10.0
         * @category Function
         * @param {Object} object The object to invoke the method on.
         * @param {string} key The key of the method.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new bound function.
         * @example
         *
         * var object = {
         *   'user': 'fred',
         *   'greet': function(greeting, punctuation) {
         *     return greeting + ' ' + this.user + punctuation;
         *   }
         * };
         *
         * var bound = _.bindKey(object, 'greet', 'hi');
         * bound('!');
         * // => 'hi fred!'
         *
         * object.greet = function(greeting, punctuation) {
         *   return greeting + 'ya ' + this.user + punctuation;
         * };
         *
         * bound('!');
         * // => 'hiya fred!'
         *
         * // Bound with placeholders.
         * var bound = _.bindKey(object, 'greet', _, '!');
         * bound('hi');
         * // => 'hiya fred!'
         */
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
    
        /**
         * Creates a function that accepts arguments of `func` and either invokes
         * `func` returning its result, if at least `arity` number of arguments have
         * been provided, or returns a function that accepts the remaining `func`
         * arguments, and so on. The arity of `func` may be specified if `func.length`
         * is not sufficient.
         *
         * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
         * may be used as a placeholder for provided arguments.
         *
         * **Note:** This method doesn't set the "length" property of curried functions.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Function
         * @param {Function} func The function to curry.
         * @param {number} [arity=func.length] The arity of `func`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new curried function.
         * @example
         *
         * var abc = function(a, b, c) {
         *   return [a, b, c];
         * };
         *
         * var curried = _.curry(abc);
         *
         * curried(1)(2)(3);
         * // => [1, 2, 3]
         *
         * curried(1, 2)(3);
         * // => [1, 2, 3]
         *
         * curried(1, 2, 3);
         * // => [1, 2, 3]
         *
         * // Curried with placeholders.
         * curried(1)(_, 3)(2);
         * // => [1, 2, 3]
         */
        function curry(func, arity, guard) {
          arity = guard ? undefined : arity;
          var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
          result.placeholder = curry.placeholder;
          return result;
        }
    
        /**
         * This method is like `_.curry` except that arguments are applied to `func`
         * in the manner of `_.partialRight` instead of `_.partial`.
         *
         * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for provided arguments.
         *
         * **Note:** This method doesn't set the "length" property of curried functions.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to curry.
         * @param {number} [arity=func.length] The arity of `func`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new curried function.
         * @example
         *
         * var abc = function(a, b, c) {
         *   return [a, b, c];
         * };
         *
         * var curried = _.curryRight(abc);
         *
         * curried(3)(2)(1);
         * // => [1, 2, 3]
         *
         * curried(2, 3)(1);
         * // => [1, 2, 3]
         *
         * curried(1, 2, 3);
         * // => [1, 2, 3]
         *
         * // Curried with placeholders.
         * curried(3)(1, _)(2);
         * // => [1, 2, 3]
         */
        function curryRight(func, arity, guard) {
          arity = guard ? undefined : arity;
          var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
          result.placeholder = curryRight.placeholder;
          return result;
        }
    
        /**
         * Creates a debounced function that delays invoking `func` until after `wait`
         * milliseconds have elapsed since the last time the debounced function was
         * invoked. The debounced function comes with a `cancel` method to cancel
         * delayed `func` invocations and a `flush` method to immediately invoke them.
         * Provide `options` to indicate whether `func` should be invoked on the
         * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
         * with the last arguments provided to the debounced function. Subsequent
         * calls to the debounced function return the result of the last `func`
         * invocation.
         *
         * **Note:** If `leading` and `trailing` options are `true`, `func` is
         * invoked on the trailing edge of the timeout only if the debounced function
         * is invoked more than once during the `wait` timeout.
         *
         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
         *
         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
         * for details over the differences between `_.debounce` and `_.throttle`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to debounce.
         * @param {number} [wait=0] The number of milliseconds to delay.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.leading=false]
         *  Specify invoking on the leading edge of the timeout.
         * @param {number} [options.maxWait]
         *  The maximum time `func` is allowed to be delayed before it's invoked.
         * @param {boolean} [options.trailing=true]
         *  Specify invoking on the trailing edge of the timeout.
         * @returns {Function} Returns the new debounced function.
         * @example
         *
         * // Avoid costly calculations while the window size is in flux.
         * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
         *
         * // Invoke `sendMail` when clicked, debouncing subsequent calls.
         * jQuery(element).on('click', _.debounce(sendMail, 300, {
         *   'leading': true,
         *   'trailing': false
         * }));
         *
         * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
         * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
         * var source = new EventSource('/stream');
         * jQuery(source).on('message', debounced);
         *
         * // Cancel the trailing debounced invocation.
         * jQuery(window).on('popstate', debounced.cancel);
         */
        function debounce(func, wait, options) {
          var lastArgs,
              lastThis,
              maxWait,
              result,
              timerId,
              lastCallTime,
              lastInvokeTime = 0,
              leading = false,
              maxing = false,
              trailing = true;
    
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = 'maxWait' in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }
    
          function invokeFunc(time) {
            var args = lastArgs,
                thisArg = lastThis;
    
            lastArgs = lastThis = undefined;
            lastInvokeTime = time;
            result = func.apply(thisArg, args);
            return result;
          }
    
          function leadingEdge(time) {
            // Reset any `maxWait` timer.
            lastInvokeTime = time;
            // Start the timer for the trailing edge.
            timerId = setTimeout(timerExpired, wait);
            // Invoke the leading edge.
            return leading ? invokeFunc(time) : result;
          }
    
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime,
                timeWaiting = wait - timeSinceLastCall;
    
            return maxing
              ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
              : timeWaiting;
          }
    
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime;
    
            // Either this is the first call, activity has stopped and we're at the
            // trailing edge, the system time has gone backwards and we're treating
            // it as the trailing edge, or we've hit the `maxWait` limit.
            return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
              (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
          }
    
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            // Restart the timer.
            timerId = setTimeout(timerExpired, remainingWait(time));
          }
    
          function trailingEdge(time) {
            timerId = undefined;
    
            // Only invoke if we have `lastArgs` which means `func` has been
            // debounced at least once.
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined;
            return result;
          }
    
          function cancel() {
            if (timerId !== undefined) {
              clearTimeout(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined;
          }
    
          function flush() {
            return timerId === undefined ? result : trailingEdge(now());
          }
    
          function debounced() {
            var time = now(),
                isInvoking = shouldInvoke(time);
    
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
    
            if (isInvoking) {
              if (timerId === undefined) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                // Handle invocations in a tight loop.
                clearTimeout(timerId);
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined) {
              timerId = setTimeout(timerExpired, wait);
            }
            return result;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
    
        /**
         * Defers invoking the `func` until the current call stack has cleared. Any
         * additional arguments are provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to defer.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {number} Returns the timer id.
         * @example
         *
         * _.defer(function(text) {
         *   console.log(text);
         * }, 'deferred');
         * // => Logs 'deferred' after one millisecond.
         */
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
    
        /**
         * Invokes `func` after `wait` milliseconds. Any additional arguments are
         * provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {number} Returns the timer id.
         * @example
         *
         * _.delay(function(text) {
         *   console.log(text);
         * }, 1000, 'later');
         * // => Logs 'later' after one second.
         */
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
    
        /**
         * Creates a function that invokes `func` with arguments reversed.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Function
         * @param {Function} func The function to flip arguments for.
         * @returns {Function} Returns the new flipped function.
         * @example
         *
         * var flipped = _.flip(function() {
         *   return _.toArray(arguments);
         * });
         *
         * flipped('a', 'b', 'c', 'd');
         * // => ['d', 'c', 'b', 'a']
         */
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
    
        /**
         * Creates a function that memoizes the result of `func`. If `resolver` is
         * provided, it determines the cache key for storing the result based on the
         * arguments provided to the memoized function. By default, the first argument
         * provided to the memoized function is used as the map cache key. The `func`
         * is invoked with the `this` binding of the memoized function.
         *
         * **Note:** The cache is exposed as the `cache` property on the memoized
         * function. Its creation may be customized by replacing the `_.memoize.Cache`
         * constructor with one whose instances implement the
         * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
         * method interface of `clear`, `delete`, `get`, `has`, and `set`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to have its output memoized.
         * @param {Function} [resolver] The function to resolve the cache key.
         * @returns {Function} Returns the new memoized function.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         * var other = { 'c': 3, 'd': 4 };
         *
         * var values = _.memoize(_.values);
         * values(object);
         * // => [1, 2]
         *
         * values(other);
         * // => [3, 4]
         *
         * object.a = 2;
         * values(object);
         * // => [1, 2]
         *
         * // Modify the result cache.
         * values.cache.set(object, ['a', 'b']);
         * values(object);
         * // => ['a', 'b']
         *
         * // Replace `_.memoize.Cache`.
         * _.memoize.Cache = WeakMap;
         */
        function memoize(func, resolver) {
          if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments,
                key = resolver ? resolver.apply(this, args) : args[0],
                cache = memoized.cache;
    
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result = func.apply(this, args);
            memoized.cache = cache.set(key, result) || cache;
            return result;
          };
          memoized.cache = new (memoize.Cache || MapCache);
          return memoized;
        }
    
        // Expose `MapCache`.
        memoize.Cache = MapCache;
    
        /**
         * Creates a function that negates the result of the predicate `func`. The
         * `func` predicate is invoked with the `this` binding and arguments of the
         * created function.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} predicate The predicate to negate.
         * @returns {Function} Returns the new negated function.
         * @example
         *
         * function isEven(n) {
         *   return n % 2 == 0;
         * }
         *
         * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
         * // => [1, 3, 5]
         */
        function negate(predicate) {
          if (typeof predicate != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0: return !predicate.call(this);
              case 1: return !predicate.call(this, args[0]);
              case 2: return !predicate.call(this, args[0], args[1]);
              case 3: return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
    
        /**
         * Creates a function that is restricted to invoking `func` once. Repeat calls
         * to the function return the value of the first invocation. The `func` is
         * invoked with the `this` binding and arguments of the created function.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * var initialize = _.once(createApplication);
         * initialize();
         * initialize();
         * // => `createApplication` is invoked once
         */
        function once(func) {
          return before(2, func);
        }
    
        /**
         * Creates a function that invokes `func` with its arguments transformed.
         *
         * @static
         * @since 4.0.0
         * @memberOf _
         * @category Function
         * @param {Function} func The function to wrap.
         * @param {...(Function|Function[])} [transforms=[_.identity]]
         *  The argument transforms.
         * @returns {Function} Returns the new function.
         * @example
         *
         * function doubled(n) {
         *   return n * 2;
         * }
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var func = _.overArgs(function(x, y) {
         *   return [x, y];
         * }, [square, doubled]);
         *
         * func(9, 3);
         * // => [81, 6]
         *
         * func(10, 5);
         * // => [100, 10]
         */
        var overArgs = castRest(function(func, transforms) {
          transforms = (transforms.length == 1 && isArray(transforms[0]))
            ? arrayMap(transforms[0], baseUnary(getIteratee()))
            : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
    
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1,
                length = nativeMin(args.length, funcsLength);
    
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
    
        /**
         * Creates a function that invokes `func` with `partials` prepended to the
         * arguments it receives. This method is like `_.bind` except it does **not**
         * alter the `this` binding.
         *
         * The `_.partial.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * **Note:** This method doesn't set the "length" property of partially
         * applied functions.
         *
         * @static
         * @memberOf _
         * @since 0.2.0
         * @category Function
         * @param {Function} func The function to partially apply arguments to.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new partially applied function.
         * @example
         *
         * function greet(greeting, name) {
         *   return greeting + ' ' + name;
         * }
         *
         * var sayHelloTo = _.partial(greet, 'hello');
         * sayHelloTo('fred');
         * // => 'hello fred'
         *
         * // Partially applied with placeholders.
         * var greetFred = _.partial(greet, _, 'fred');
         * greetFred('hi');
         * // => 'hi fred'
         */
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
        });
    
        /**
         * This method is like `_.partial` except that partially applied arguments
         * are appended to the arguments it receives.
         *
         * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * **Note:** This method doesn't set the "length" property of partially
         * applied functions.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Function
         * @param {Function} func The function to partially apply arguments to.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new partially applied function.
         * @example
         *
         * function greet(greeting, name) {
         *   return greeting + ' ' + name;
         * }
         *
         * var greetFred = _.partialRight(greet, 'fred');
         * greetFred('hi');
         * // => 'hi fred'
         *
         * // Partially applied with placeholders.
         * var sayHelloTo = _.partialRight(greet, 'hello', _);
         * sayHelloTo('fred');
         * // => 'hello fred'
         */
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
        });
    
        /**
         * Creates a function that invokes `func` with arguments arranged according
         * to the specified `indexes` where the argument value at the first index is
         * provided as the first argument, the argument value at the second index is
         * provided as the second argument, and so on.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to rearrange arguments for.
         * @param {...(number|number[])} indexes The arranged argument indexes.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var rearged = _.rearg(function(a, b, c) {
         *   return [a, b, c];
         * }, [2, 0, 1]);
         *
         * rearged('b', 'c', 'a')
         * // => ['a', 'b', 'c']
         */
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
        });
    
        /**
         * Creates a function that invokes `func` with the `this` binding of the
         * created function and arguments from `start` and beyond provided as
         * an array.
         *
         * **Note:** This method is based on the
         * [rest parameter](https://mdn.io/rest_parameters).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Function
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var say = _.rest(function(what, names) {
         *   return what + ' ' + _.initial(names).join(', ') +
         *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
         * });
         *
         * say('hello', 'fred', 'barney', 'pebbles');
         * // => 'hello fred, barney, & pebbles'
         */
        function rest(func, start) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          start = start === undefined ? start : toInteger(start);
          return baseRest(func, start);
        }
    
        /**
         * Creates a function that invokes `func` with the `this` binding of the
         * create function and an array of arguments much like
         * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
         *
         * **Note:** This method is based on the
         * [spread operator](https://mdn.io/spread_operator).
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Function
         * @param {Function} func The function to spread arguments over.
         * @param {number} [start=0] The start position of the spread.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var say = _.spread(function(who, what) {
         *   return who + ' says ' + what;
         * });
         *
         * say(['fred', 'hello']);
         * // => 'fred says hello'
         *
         * var numbers = Promise.all([
         *   Promise.resolve(40),
         *   Promise.resolve(36)
         * ]);
         *
         * numbers.then(_.spread(function(x, y) {
         *   return x + y;
         * }));
         * // => a Promise of 76
         */
        function spread(func, start) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start],
                otherArgs = castSlice(args, 0, start);
    
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
    
        /**
         * Creates a throttled function that only invokes `func` at most once per
         * every `wait` milliseconds. The throttled function comes with a `cancel`
         * method to cancel delayed `func` invocations and a `flush` method to
         * immediately invoke them. Provide `options` to indicate whether `func`
         * should be invoked on the leading and/or trailing edge of the `wait`
         * timeout. The `func` is invoked with the last arguments provided to the
         * throttled function. Subsequent calls to the throttled function return the
         * result of the last `func` invocation.
         *
         * **Note:** If `leading` and `trailing` options are `true`, `func` is
         * invoked on the trailing edge of the timeout only if the throttled function
         * is invoked more than once during the `wait` timeout.
         *
         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
         *
         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
         * for details over the differences between `_.throttle` and `_.debounce`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to throttle.
         * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.leading=true]
         *  Specify invoking on the leading edge of the timeout.
         * @param {boolean} [options.trailing=true]
         *  Specify invoking on the trailing edge of the timeout.
         * @returns {Function} Returns the new throttled function.
         * @example
         *
         * // Avoid excessively updating the position while scrolling.
         * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
         *
         * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
         * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
         * jQuery(element).on('click', throttled);
         *
         * // Cancel the trailing throttled invocation.
         * jQuery(window).on('popstate', throttled.cancel);
         */
        function throttle(func, wait, options) {
          var leading = true,
              trailing = true;
    
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = 'leading' in options ? !!options.leading : leading;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            'leading': leading,
            'maxWait': wait,
            'trailing': trailing
          });
        }
    
        /**
         * Creates a function that accepts up to one argument, ignoring any
         * additional arguments.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Function
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         * @example
         *
         * _.map(['6', '8', '10'], _.unary(parseInt));
         * // => [6, 8, 10]
         */
        function unary(func) {
          return ary(func, 1);
        }
    
        /**
         * Creates a function that provides `value` to `wrapper` as its first
         * argument. Any additional arguments provided to the function are appended
         * to those provided to the `wrapper`. The wrapper is invoked with the `this`
         * binding of the created function.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {*} value The value to wrap.
         * @param {Function} [wrapper=identity] The wrapper function.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var p = _.wrap(_.escape, function(func, text) {
         *   return '<p>' + func(text) + '</p>';
         * });
         *
         * p('fred, barney, & pebbles');
         * // => '<p>fred, barney, &amp; pebbles</p>'
         */
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Casts `value` as an array if it's not one.
         *
         * @static
         * @memberOf _
         * @since 4.4.0
         * @category Lang
         * @param {*} value The value to inspect.
         * @returns {Array} Returns the cast array.
         * @example
         *
         * _.castArray(1);
         * // => [1]
         *
         * _.castArray({ 'a': 1 });
         * // => [{ 'a': 1 }]
         *
         * _.castArray('abc');
         * // => ['abc']
         *
         * _.castArray(null);
         * // => [null]
         *
         * _.castArray(undefined);
         * // => [undefined]
         *
         * _.castArray();
         * // => []
         *
         * var array = [1, 2, 3];
         * console.log(_.castArray(array) === array);
         * // => true
         */
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
    
        /**
         * Creates a shallow clone of `value`.
         *
         * **Note:** This method is loosely based on the
         * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
         * and supports cloning arrays, array buffers, booleans, date objects, maps,
         * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
         * arrays. The own enumerable properties of `arguments` objects are cloned
         * as plain objects. An empty object is returned for uncloneable values such
         * as error objects, functions, DOM nodes, and WeakMaps.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to clone.
         * @returns {*} Returns the cloned value.
         * @see _.cloneDeep
         * @example
         *
         * var objects = [{ 'a': 1 }, { 'b': 2 }];
         *
         * var shallow = _.clone(objects);
         * console.log(shallow[0] === objects[0]);
         * // => true
         */
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
    
        /**
         * This method is like `_.clone` except that it accepts `customizer` which
         * is invoked to produce the cloned value. If `customizer` returns `undefined`,
         * cloning is handled by the method instead. The `customizer` is invoked with
         * up to four arguments; (value [, index|key, object, stack]).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to clone.
         * @param {Function} [customizer] The function to customize cloning.
         * @returns {*} Returns the cloned value.
         * @see _.cloneDeepWith
         * @example
         *
         * function customizer(value) {
         *   if (_.isElement(value)) {
         *     return value.cloneNode(false);
         *   }
         * }
         *
         * var el = _.cloneWith(document.body, customizer);
         *
         * console.log(el === document.body);
         * // => false
         * console.log(el.nodeName);
         * // => 'BODY'
         * console.log(el.childNodes.length);
         * // => 0
         */
        function cloneWith(value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
    
        /**
         * This method is like `_.clone` except that it recursively clones `value`.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Lang
         * @param {*} value The value to recursively clone.
         * @returns {*} Returns the deep cloned value.
         * @see _.clone
         * @example
         *
         * var objects = [{ 'a': 1 }, { 'b': 2 }];
         *
         * var deep = _.cloneDeep(objects);
         * console.log(deep[0] === objects[0]);
         * // => false
         */
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
    
        /**
         * This method is like `_.cloneWith` except that it recursively clones `value`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to recursively clone.
         * @param {Function} [customizer] The function to customize cloning.
         * @returns {*} Returns the deep cloned value.
         * @see _.cloneWith
         * @example
         *
         * function customizer(value) {
         *   if (_.isElement(value)) {
         *     return value.cloneNode(true);
         *   }
         * }
         *
         * var el = _.cloneDeepWith(document.body, customizer);
         *
         * console.log(el === document.body);
         * // => false
         * console.log(el.nodeName);
         * // => 'BODY'
         * console.log(el.childNodes.length);
         * // => 20
         */
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
    
        /**
         * Checks if `object` conforms to `source` by invoking the predicate
         * properties of `source` with the corresponding property values of `object`.
         *
         * **Note:** This method is equivalent to `_.conforms` when `source` is
         * partially applied.
         *
         * @static
         * @memberOf _
         * @since 4.14.0
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property predicates to conform to.
         * @returns {boolean} Returns `true` if `object` conforms, else `false`.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         *
         * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
         * // => true
         *
         * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
         * // => false
         */
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
    
        /**
         * Performs a
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * comparison between two values to determine if they are equivalent.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.eq(object, object);
         * // => true
         *
         * _.eq(object, other);
         * // => false
         *
         * _.eq('a', 'a');
         * // => true
         *
         * _.eq('a', Object('a'));
         * // => false
         *
         * _.eq(NaN, NaN);
         * // => true
         */
        function eq(value, other) {
          return value === other || (value !== value && other !== other);
        }
    
        /**
         * Checks if `value` is greater than `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than `other`,
         *  else `false`.
         * @see _.lt
         * @example
         *
         * _.gt(3, 1);
         * // => true
         *
         * _.gt(3, 3);
         * // => false
         *
         * _.gt(1, 3);
         * // => false
         */
        var gt = createRelationalOperation(baseGt);
    
        /**
         * Checks if `value` is greater than or equal to `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than or equal to
         *  `other`, else `false`.
         * @see _.lte
         * @example
         *
         * _.gte(3, 1);
         * // => true
         *
         * _.gte(3, 3);
         * // => true
         *
         * _.gte(1, 3);
         * // => false
         */
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
    
        /**
         * Checks if `value` is likely an `arguments` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         *  else `false`.
         * @example
         *
         * _.isArguments(function() { return arguments; }());
         * // => true
         *
         * _.isArguments([1, 2, 3]);
         * // => false
         */
        var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
            !propertyIsEnumerable.call(value, 'callee');
        };
    
        /**
         * Checks if `value` is classified as an `Array` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
         * @example
         *
         * _.isArray([1, 2, 3]);
         * // => true
         *
         * _.isArray(document.body.children);
         * // => false
         *
         * _.isArray('abc');
         * // => false
         *
         * _.isArray(_.noop);
         * // => false
         */
        var isArray = Array.isArray;
    
        /**
         * Checks if `value` is classified as an `ArrayBuffer` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
         * @example
         *
         * _.isArrayBuffer(new ArrayBuffer(2));
         * // => true
         *
         * _.isArrayBuffer(new Array(2));
         * // => false
         */
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
    
        /**
         * Checks if `value` is array-like. A value is considered array-like if it's
         * not a function and has a `value.length` that's an integer greater than or
         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
         * @example
         *
         * _.isArrayLike([1, 2, 3]);
         * // => true
         *
         * _.isArrayLike(document.body.children);
         * // => true
         *
         * _.isArrayLike('abc');
         * // => true
         *
         * _.isArrayLike(_.noop);
         * // => false
         */
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
    
        /**
         * This method is like `_.isArrayLike` except that it also checks if `value`
         * is an object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array-like object,
         *  else `false`.
         * @example
         *
         * _.isArrayLikeObject([1, 2, 3]);
         * // => true
         *
         * _.isArrayLikeObject(document.body.children);
         * // => true
         *
         * _.isArrayLikeObject('abc');
         * // => false
         *
         * _.isArrayLikeObject(_.noop);
         * // => false
         */
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
    
        /**
         * Checks if `value` is classified as a boolean primitive or object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
         * @example
         *
         * _.isBoolean(false);
         * // => true
         *
         * _.isBoolean(null);
         * // => false
         */
        function isBoolean(value) {
          return value === true || value === false ||
            (isObjectLike(value) && baseGetTag(value) == boolTag);
        }
    
        /**
         * Checks if `value` is a buffer.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
         * @example
         *
         * _.isBuffer(new Buffer(2));
         * // => true
         *
         * _.isBuffer(new Uint8Array(2));
         * // => false
         */
        var isBuffer = nativeIsBuffer || stubFalse;
    
        /**
         * Checks if `value` is classified as a `Date` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
         * @example
         *
         * _.isDate(new Date);
         * // => true
         *
         * _.isDate('Mon April 23 2012');
         * // => false
         */
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
    
        /**
         * Checks if `value` is likely a DOM element.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
         * @example
         *
         * _.isElement(document.body);
         * // => true
         *
         * _.isElement('<body>');
         * // => false
         */
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
    
        /**
         * Checks if `value` is an empty object, collection, map, or set.
         *
         * Objects are considered empty if they have no own enumerable string keyed
         * properties.
         *
         * Array-like values such as `arguments` objects, arrays, buffers, strings, or
         * jQuery-like collections are considered empty if they have a `length` of `0`.
         * Similarly, maps and sets are considered empty if they have a `size` of `0`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is empty, else `false`.
         * @example
         *
         * _.isEmpty(null);
         * // => true
         *
         * _.isEmpty(true);
         * // => true
         *
         * _.isEmpty(1);
         * // => true
         *
         * _.isEmpty([1, 2, 3]);
         * // => false
         *
         * _.isEmpty({ 'a': 1 });
         * // => false
         */
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) &&
              (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
    
        /**
         * Performs a deep comparison between two values to determine if they are
         * equivalent.
         *
         * **Note:** This method supports comparing arrays, array buffers, booleans,
         * date objects, error objects, maps, numbers, `Object` objects, regexes,
         * sets, strings, symbols, and typed arrays. `Object` objects are compared
         * by their own, not inherited, enumerable properties. Functions and DOM
         * nodes are compared by strict equality, i.e. `===`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.isEqual(object, other);
         * // => true
         *
         * object === other;
         * // => false
         */
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
    
        /**
         * This method is like `_.isEqual` except that it accepts `customizer` which
         * is invoked to compare values. If `customizer` returns `undefined`, comparisons
         * are handled by the method instead. The `customizer` is invoked with up to
         * six arguments: (objValue, othValue [, index|key, object, other, stack]).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * function isGreeting(value) {
         *   return /^h(?:i|ello)$/.test(value);
         * }
         *
         * function customizer(objValue, othValue) {
         *   if (isGreeting(objValue) && isGreeting(othValue)) {
         *     return true;
         *   }
         * }
         *
         * var array = ['hello', 'goodbye'];
         * var other = ['hi', 'goodbye'];
         *
         * _.isEqualWith(array, other, customizer);
         * // => true
         */
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          var result = customizer ? customizer(value, other) : undefined;
          return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
        }
    
        /**
         * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
         * `SyntaxError`, `TypeError`, or `URIError` object.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
         * @example
         *
         * _.isError(new Error);
         * // => true
         *
         * _.isError(Error);
         * // => false
         */
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag ||
            (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
        }
    
        /**
         * Checks if `value` is a finite primitive number.
         *
         * **Note:** This method is based on
         * [`Number.isFinite`](https://mdn.io/Number/isFinite).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
         * @example
         *
         * _.isFinite(3);
         * // => true
         *
         * _.isFinite(Number.MIN_VALUE);
         * // => true
         *
         * _.isFinite(Infinity);
         * // => false
         *
         * _.isFinite('3');
         * // => false
         */
        function isFinite(value) {
          return typeof value == 'number' && nativeIsFinite(value);
        }
    
        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          // The use of `Object#toString` avoids issues with the `typeof` operator
          // in Safari 9 which returns 'object' for typed arrays and other constructors.
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
    
        /**
         * Checks if `value` is an integer.
         *
         * **Note:** This method is based on
         * [`Number.isInteger`](https://mdn.io/Number/isInteger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
         * @example
         *
         * _.isInteger(3);
         * // => true
         *
         * _.isInteger(Number.MIN_VALUE);
         * // => false
         *
         * _.isInteger(Infinity);
         * // => false
         *
         * _.isInteger('3');
         * // => false
         */
        function isInteger(value) {
          return typeof value == 'number' && value == toInteger(value);
        }
    
        /**
         * Checks if `value` is a valid array-like length.
         *
         * **Note:** This method is loosely based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
         * @example
         *
         * _.isLength(3);
         * // => true
         *
         * _.isLength(Number.MIN_VALUE);
         * // => false
         *
         * _.isLength(Infinity);
         * // => false
         *
         * _.isLength('3');
         * // => false
         */
        function isLength(value) {
          return typeof value == 'number' &&
            value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
    
        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == 'object' || type == 'function');
        }
    
        /**
         * Checks if `value` is object-like. A value is object-like if it's not `null`
         * and has a `typeof` result of "object".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
         * @example
         *
         * _.isObjectLike({});
         * // => true
         *
         * _.isObjectLike([1, 2, 3]);
         * // => true
         *
         * _.isObjectLike(_.noop);
         * // => false
         *
         * _.isObjectLike(null);
         * // => false
         */
        function isObjectLike(value) {
          return value != null && typeof value == 'object';
        }
    
        /**
         * Checks if `value` is classified as a `Map` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         * @example
         *
         * _.isMap(new Map);
         * // => true
         *
         * _.isMap(new WeakMap);
         * // => false
         */
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
    
        /**
         * Performs a partial deep comparison between `object` and `source` to
         * determine if `object` contains equivalent property values.
         *
         * **Note:** This method is equivalent to `_.matches` when `source` is
         * partially applied.
         *
         * Partial comparisons will match empty array and empty object `source`
         * values against any array or object value, respectively. See `_.isEqual`
         * for a list of supported value comparisons.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         *
         * _.isMatch(object, { 'b': 2 });
         * // => true
         *
         * _.isMatch(object, { 'b': 1 });
         * // => false
         */
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
    
        /**
         * This method is like `_.isMatch` except that it accepts `customizer` which
         * is invoked to compare values. If `customizer` returns `undefined`, comparisons
         * are handled by the method instead. The `customizer` is invoked with five
         * arguments: (objValue, srcValue, index|key, object, source).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         * @example
         *
         * function isGreeting(value) {
         *   return /^h(?:i|ello)$/.test(value);
         * }
         *
         * function customizer(objValue, srcValue) {
         *   if (isGreeting(objValue) && isGreeting(srcValue)) {
         *     return true;
         *   }
         * }
         *
         * var object = { 'greeting': 'hello' };
         * var source = { 'greeting': 'hi' };
         *
         * _.isMatchWith(object, source, customizer);
         * // => true
         */
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
    
        /**
         * Checks if `value` is `NaN`.
         *
         * **Note:** This method is based on
         * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
         * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
         * `undefined` and other non-number values.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         * @example
         *
         * _.isNaN(NaN);
         * // => true
         *
         * _.isNaN(new Number(NaN));
         * // => true
         *
         * isNaN(undefined);
         * // => true
         *
         * _.isNaN(undefined);
         * // => false
         */
        function isNaN(value) {
          // An `NaN` primitive is the only value that is not equal to itself.
          // Perform the `toStringTag` check first to avoid errors with some
          // ActiveX objects in IE.
          return isNumber(value) && value != +value;
        }
    
        /**
         * Checks if `value` is a pristine native function.
         *
         * **Note:** This method can't reliably detect native functions in the presence
         * of the core-js package because core-js circumvents this kind of detection.
         * Despite multiple requests, the core-js maintainer has made it clear: any
         * attempt to fix the detection will be obstructed. As a result, we're left
         * with little choice but to throw an error. Unfortunately, this also affects
         * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
         * which rely on core-js.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         * @example
         *
         * _.isNative(Array.prototype.push);
         * // => true
         *
         * _.isNative(_);
         * // => false
         */
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
    
        /**
         * Checks if `value` is `null`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
         * @example
         *
         * _.isNull(null);
         * // => true
         *
         * _.isNull(void 0);
         * // => false
         */
        function isNull(value) {
          return value === null;
        }
    
        /**
         * Checks if `value` is `null` or `undefined`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
         * @example
         *
         * _.isNil(null);
         * // => true
         *
         * _.isNil(void 0);
         * // => true
         *
         * _.isNil(NaN);
         * // => false
         */
        function isNil(value) {
          return value == null;
        }
    
        /**
         * Checks if `value` is classified as a `Number` primitive or object.
         *
         * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
         * classified as numbers, use the `_.isFinite` method.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a number, else `false`.
         * @example
         *
         * _.isNumber(3);
         * // => true
         *
         * _.isNumber(Number.MIN_VALUE);
         * // => true
         *
         * _.isNumber(Infinity);
         * // => true
         *
         * _.isNumber('3');
         * // => false
         */
        function isNumber(value) {
          return typeof value == 'number' ||
            (isObjectLike(value) && baseGetTag(value) == numberTag);
        }
    
        /**
         * Checks if `value` is a plain object, that is, an object created by the
         * `Object` constructor or one with a `[[Prototype]]` of `null`.
         *
         * @static
         * @memberOf _
         * @since 0.8.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * _.isPlainObject(new Foo);
         * // => false
         *
         * _.isPlainObject([1, 2, 3]);
         * // => false
         *
         * _.isPlainObject({ 'x': 0, 'y': 0 });
         * // => true
         *
         * _.isPlainObject(Object.create(null));
         * // => true
         */
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
          return typeof Ctor == 'function' && Ctor instanceof Ctor &&
            funcToString.call(Ctor) == objectCtorString;
        }
    
        /**
         * Checks if `value` is classified as a `RegExp` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
         * @example
         *
         * _.isRegExp(/abc/);
         * // => true
         *
         * _.isRegExp('/abc/');
         * // => false
         */
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
    
        /**
         * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
         * double precision number which isn't the result of a rounded unsafe integer.
         *
         * **Note:** This method is based on
         * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
         * @example
         *
         * _.isSafeInteger(3);
         * // => true
         *
         * _.isSafeInteger(Number.MIN_VALUE);
         * // => false
         *
         * _.isSafeInteger(Infinity);
         * // => false
         *
         * _.isSafeInteger('3');
         * // => false
         */
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
    
        /**
         * Checks if `value` is classified as a `Set` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         * @example
         *
         * _.isSet(new Set);
         * // => true
         *
         * _.isSet(new WeakSet);
         * // => false
         */
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    
        /**
         * Checks if `value` is classified as a `String` primitive or object.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a string, else `false`.
         * @example
         *
         * _.isString('abc');
         * // => true
         *
         * _.isString(1);
         * // => false
         */
        function isString(value) {
          return typeof value == 'string' ||
            (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
        }
    
        /**
         * Checks if `value` is classified as a `Symbol` primitive or object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
         * @example
         *
         * _.isSymbol(Symbol.iterator);
         * // => true
         *
         * _.isSymbol('abc');
         * // => false
         */
        function isSymbol(value) {
          return typeof value == 'symbol' ||
            (isObjectLike(value) && baseGetTag(value) == symbolTag);
        }
    
        /**
         * Checks if `value` is classified as a typed array.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         * @example
         *
         * _.isTypedArray(new Uint8Array);
         * // => true
         *
         * _.isTypedArray([]);
         * // => false
         */
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    
        /**
         * Checks if `value` is `undefined`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
         * @example
         *
         * _.isUndefined(void 0);
         * // => true
         *
         * _.isUndefined(null);
         * // => false
         */
        function isUndefined(value) {
          return value === undefined;
        }
    
        /**
         * Checks if `value` is classified as a `WeakMap` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
         * @example
         *
         * _.isWeakMap(new WeakMap);
         * // => true
         *
         * _.isWeakMap(new Map);
         * // => false
         */
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
    
        /**
         * Checks if `value` is classified as a `WeakSet` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
         * @example
         *
         * _.isWeakSet(new WeakSet);
         * // => true
         *
         * _.isWeakSet(new Set);
         * // => false
         */
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
    
        /**
         * Checks if `value` is less than `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than `other`,
         *  else `false`.
         * @see _.gt
         * @example
         *
         * _.lt(1, 3);
         * // => true
         *
         * _.lt(3, 3);
         * // => false
         *
         * _.lt(3, 1);
         * // => false
         */
        var lt = createRelationalOperation(baseLt);
    
        /**
         * Checks if `value` is less than or equal to `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than or equal to
         *  `other`, else `false`.
         * @see _.gte
         * @example
         *
         * _.lte(1, 3);
         * // => true
         *
         * _.lte(3, 3);
         * // => true
         *
         * _.lte(3, 1);
         * // => false
         */
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
    
        /**
         * Converts `value` to an array.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {Array} Returns the converted array.
         * @example
         *
         * _.toArray({ 'a': 1, 'b': 2 });
         * // => [1, 2]
         *
         * _.toArray('abc');
         * // => ['a', 'b', 'c']
         *
         * _.toArray(1);
         * // => []
         *
         * _.toArray(null);
         * // => []
         */
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value),
              func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);
    
          return func(value);
        }
    
        /**
         * Converts `value` to a finite number.
         *
         * @static
         * @memberOf _
         * @since 4.12.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted number.
         * @example
         *
         * _.toFinite(3.2);
         * // => 3.2
         *
         * _.toFinite(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toFinite(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toFinite('3.2');
         * // => 3.2
         */
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = (value < 0 ? -1 : 1);
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
    
        /**
         * Converts `value` to an integer.
         *
         * **Note:** This method is loosely based on
         * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toInteger(3.2);
         * // => 3
         *
         * _.toInteger(Number.MIN_VALUE);
         * // => 0
         *
         * _.toInteger(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toInteger('3.2');
         * // => 3
         */
        function toInteger(value) {
          var result = toFinite(value),
              remainder = result % 1;
    
          return result === result ? (remainder ? result - remainder : result) : 0;
        }
    
        /**
         * Converts `value` to an integer suitable for use as the length of an
         * array-like object.
         *
         * **Note:** This method is based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toLength(3.2);
         * // => 3
         *
         * _.toLength(Number.MIN_VALUE);
         * // => 0
         *
         * _.toLength(Infinity);
         * // => 4294967295
         *
         * _.toLength('3.2');
         * // => 3
         */
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
    
        /**
         * Converts `value` to a number.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to process.
         * @returns {number} Returns the number.
         * @example
         *
         * _.toNumber(3.2);
         * // => 3.2
         *
         * _.toNumber(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toNumber(Infinity);
         * // => Infinity
         *
         * _.toNumber('3.2');
         * // => 3.2
         */
        function toNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
            value = isObject(other) ? (other + '') : other;
          }
          if (typeof value != 'string') {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return (isBinary || reIsOctal.test(value))
            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
            : (reIsBadHex.test(value) ? NAN : +value);
        }
    
        /**
         * Converts `value` to a plain object flattening inherited enumerable string
         * keyed properties of `value` to own properties of the plain object.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {Object} Returns the converted plain object.
         * @example
         *
         * function Foo() {
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.assign({ 'a': 1 }, new Foo);
         * // => { 'a': 1, 'b': 2 }
         *
         * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
         * // => { 'a': 1, 'b': 2, 'c': 3 }
         */
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
    
        /**
         * Converts `value` to a safe integer. A safe integer can be compared and
         * represented correctly.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toSafeInteger(3.2);
         * // => 3
         *
         * _.toSafeInteger(Number.MIN_VALUE);
         * // => 0
         *
         * _.toSafeInteger(Infinity);
         * // => 9007199254740991
         *
         * _.toSafeInteger('3.2');
         * // => 3
         */
        function toSafeInteger(value) {
          return value
            ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
            : (value === 0 ? value : 0);
        }
    
        /**
         * Converts `value` to a string. An empty string is returned for `null`
         * and `undefined` values. The sign of `-0` is preserved.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.toString(null);
         * // => ''
         *
         * _.toString(-0);
         * // => '-0'
         *
         * _.toString([1, 2, 3]);
         * // => '1,2,3'
         */
        function toString(value) {
          return value == null ? '' : baseToString(value);
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Assigns own enumerable string keyed properties of source objects to the
         * destination object. Source objects are applied from left to right.
         * Subsequent sources overwrite property assignments of previous sources.
         *
         * **Note:** This method mutates `object` and is loosely based on
         * [`Object.assign`](https://mdn.io/Object/assign).
         *
         * @static
         * @memberOf _
         * @since 0.10.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.assignIn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * function Bar() {
         *   this.c = 3;
         * }
         *
         * Foo.prototype.b = 2;
         * Bar.prototype.d = 4;
         *
         * _.assign({ 'a': 0 }, new Foo, new Bar);
         * // => { 'a': 1, 'c': 3 }
         */
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
    
        /**
         * This method is like `_.assign` except that it iterates over own and
         * inherited source properties.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias extend
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.assign
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * function Bar() {
         *   this.c = 3;
         * }
         *
         * Foo.prototype.b = 2;
         * Bar.prototype.d = 4;
         *
         * _.assignIn({ 'a': 0 }, new Foo, new Bar);
         * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
         */
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
    
        /**
         * This method is like `_.assignIn` except that it accepts `customizer`
         * which is invoked to produce the assigned values. If `customizer` returns
         * `undefined`, assignment is handled by the method instead. The `customizer`
         * is invoked with five arguments: (objValue, srcValue, key, object, source).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias extendWith
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @see _.assignWith
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   return _.isUndefined(objValue) ? srcValue : objValue;
         * }
         *
         * var defaults = _.partialRight(_.assignInWith, customizer);
         *
         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
    
        /**
         * This method is like `_.assign` except that it accepts `customizer`
         * which is invoked to produce the assigned values. If `customizer` returns
         * `undefined`, assignment is handled by the method instead. The `customizer`
         * is invoked with five arguments: (objValue, srcValue, key, object, source).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @see _.assignInWith
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   return _.isUndefined(objValue) ? srcValue : objValue;
         * }
         *
         * var defaults = _.partialRight(_.assignWith, customizer);
         *
         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
    
        /**
         * Creates an array of values corresponding to `paths` of `object`.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Array} Returns the picked values.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
         *
         * _.at(object, ['a[0].b.c', 'a[1]']);
         * // => [3, 4]
         */
        var at = flatRest(baseAt);
    
        /**
         * Creates an object that inherits from the `prototype` object. If a
         * `properties` object is given, its own enumerable string keyed properties
         * are assigned to the created object.
         *
         * @static
         * @memberOf _
         * @since 2.3.0
         * @category Object
         * @param {Object} prototype The object to inherit from.
         * @param {Object} [properties] The properties to assign to the object.
         * @returns {Object} Returns the new object.
         * @example
         *
         * function Shape() {
         *   this.x = 0;
         *   this.y = 0;
         * }
         *
         * function Circle() {
         *   Shape.call(this);
         * }
         *
         * Circle.prototype = _.create(Shape.prototype, {
         *   'constructor': Circle
         * });
         *
         * var circle = new Circle;
         * circle instanceof Circle;
         * // => true
         *
         * circle instanceof Shape;
         * // => true
         */
        function create(prototype, properties) {
          var result = baseCreate(prototype);
          return properties == null ? result : baseAssign(result, properties);
        }
    
        /**
         * Assigns own and inherited enumerable string keyed properties of source
         * objects to the destination object for all destination properties that
         * resolve to `undefined`. Source objects are applied from left to right.
         * Once a property is set, additional values of the same property are ignored.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.defaultsDeep
         * @example
         *
         * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var defaults = baseRest(function(object, sources) {
          object = Object(object);
    
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined;
    
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
    
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
    
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
    
              if (value === undefined ||
                  (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                object[key] = source[key];
              }
            }
          }
    
          return object;
        });
    
        /**
         * This method is like `_.defaults` except that it recursively assigns
         * default properties.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.defaults
         * @example
         *
         * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
         * // => { 'a': { 'b': 2, 'c': 3 } }
         */
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined, customDefaultsMerge);
          return apply(mergeWith, undefined, args);
        });
    
        /**
         * This method is like `_.find` except that it returns the key of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {string|undefined} Returns the key of the matched element,
         *  else `undefined`.
         * @example
         *
         * var users = {
         *   'barney':  { 'age': 36, 'active': true },
         *   'fred':    { 'age': 40, 'active': false },
         *   'pebbles': { 'age': 1,  'active': true }
         * };
         *
         * _.findKey(users, function(o) { return o.age < 40; });
         * // => 'barney' (iteration order is not guaranteed)
         *
         * // The `_.matches` iteratee shorthand.
         * _.findKey(users, { 'age': 1, 'active': true });
         * // => 'pebbles'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findKey(users, ['active', false]);
         * // => 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.findKey(users, 'active');
         * // => 'barney'
         */
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
    
        /**
         * This method is like `_.findKey` except that it iterates over elements of
         * a collection in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {string|undefined} Returns the key of the matched element,
         *  else `undefined`.
         * @example
         *
         * var users = {
         *   'barney':  { 'age': 36, 'active': true },
         *   'fred':    { 'age': 40, 'active': false },
         *   'pebbles': { 'age': 1,  'active': true }
         * };
         *
         * _.findLastKey(users, function(o) { return o.age < 40; });
         * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
         *
         * // The `_.matches` iteratee shorthand.
         * _.findLastKey(users, { 'age': 36, 'active': true });
         * // => 'barney'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findLastKey(users, ['active', false]);
         * // => 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.findLastKey(users, 'active');
         * // => 'pebbles'
         */
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
    
        /**
         * Iterates over own and inherited enumerable string keyed properties of an
         * object and invokes `iteratee` for each property. The iteratee is invoked
         * with three arguments: (value, key, object). Iteratee functions may exit
         * iteration early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 0.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forInRight
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forIn(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
         */
        function forIn(object, iteratee) {
          return object == null
            ? object
            : baseFor(object, getIteratee(iteratee, 3), keysIn);
        }
    
        /**
         * This method is like `_.forIn` except that it iterates over properties of
         * `object` in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forIn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forInRight(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
         */
        function forInRight(object, iteratee) {
          return object == null
            ? object
            : baseForRight(object, getIteratee(iteratee, 3), keysIn);
        }
    
        /**
         * Iterates over own enumerable string keyed properties of an object and
         * invokes `iteratee` for each property. The iteratee is invoked with three
         * arguments: (value, key, object). Iteratee functions may exit iteration
         * early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 0.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forOwnRight
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forOwn(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
         */
        function forOwn(object, iteratee) {
          return object && baseForOwn(object, getIteratee(iteratee, 3));
        }
    
        /**
         * This method is like `_.forOwn` except that it iterates over properties of
         * `object` in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forOwn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forOwnRight(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
         */
        function forOwnRight(object, iteratee) {
          return object && baseForOwnRight(object, getIteratee(iteratee, 3));
        }
    
        /**
         * Creates an array of function property names from own enumerable properties
         * of `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to inspect.
         * @returns {Array} Returns the function names.
         * @see _.functionsIn
         * @example
         *
         * function Foo() {
         *   this.a = _.constant('a');
         *   this.b = _.constant('b');
         * }
         *
         * Foo.prototype.c = _.constant('c');
         *
         * _.functions(new Foo);
         * // => ['a', 'b']
         */
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
    
        /**
         * Creates an array of function property names from own and inherited
         * enumerable properties of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @returns {Array} Returns the function names.
         * @see _.functions
         * @example
         *
         * function Foo() {
         *   this.a = _.constant('a');
         *   this.b = _.constant('b');
         * }
         *
         * Foo.prototype.c = _.constant('c');
         *
         * _.functionsIn(new Foo);
         * // => ['a', 'b', 'c']
         */
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
    
        /**
         * Gets the value at `path` of `object`. If the resolved value is
         * `undefined`, the `defaultValue` is returned in its place.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.get(object, 'a[0].b.c');
         * // => 3
         *
         * _.get(object, ['a', '0', 'b', 'c']);
         * // => 3
         *
         * _.get(object, 'a.b.c', 'default');
         * // => 'default'
         */
        function get(object, path, defaultValue) {
          var result = object == null ? undefined : baseGet(object, path);
          return result === undefined ? defaultValue : result;
        }
    
        /**
         * Checks if `path` is a direct property of `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = { 'a': { 'b': 2 } };
         * var other = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.has(object, 'a');
         * // => true
         *
         * _.has(object, 'a.b');
         * // => true
         *
         * _.has(object, ['a', 'b']);
         * // => true
         *
         * _.has(other, 'a');
         * // => false
         */
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
    
        /**
         * Checks if `path` is a direct or inherited property of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.hasIn(object, 'a');
         * // => true
         *
         * _.hasIn(object, 'a.b');
         * // => true
         *
         * _.hasIn(object, ['a', 'b']);
         * // => true
         *
         * _.hasIn(object, 'b');
         * // => false
         */
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
    
        /**
         * Creates an object composed of the inverted keys and values of `object`.
         * If `object` contains duplicate values, subsequent values overwrite
         * property assignments of previous values.
         *
         * @static
         * @memberOf _
         * @since 0.7.0
         * @category Object
         * @param {Object} object The object to invert.
         * @returns {Object} Returns the new inverted object.
         * @example
         *
         * var object = { 'a': 1, 'b': 2, 'c': 1 };
         *
         * _.invert(object);
         * // => { '1': 'c', '2': 'b' }
         */
        var invert = createInverter(function(result, value, key) {
          if (value != null &&
              typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }
    
          result[value] = key;
        }, constant(identity));
    
        /**
         * This method is like `_.invert` except that the inverted object is generated
         * from the results of running each element of `object` thru `iteratee`. The
         * corresponding inverted value of each inverted key is an array of keys
         * responsible for generating the inverted value. The iteratee is invoked
         * with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.1.0
         * @category Object
         * @param {Object} object The object to invert.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Object} Returns the new inverted object.
         * @example
         *
         * var object = { 'a': 1, 'b': 2, 'c': 1 };
         *
         * _.invertBy(object);
         * // => { '1': ['a', 'c'], '2': ['b'] }
         *
         * _.invertBy(object, function(value) {
         *   return 'group' + value;
         * });
         * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
         */
        var invertBy = createInverter(function(result, value, key) {
          if (value != null &&
              typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }
    
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }, getIteratee);
    
        /**
         * Invokes the method at `path` of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the method to invoke.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {*} Returns the result of the invoked method.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
         *
         * _.invoke(object, 'a[0].b.c.slice', 1, 3);
         * // => [2, 3]
         */
        var invoke = baseRest(baseInvoke);
    
        /**
         * Creates an array of the own enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects. See the
         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * for more details.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keys(new Foo);
         * // => ['a', 'b'] (iteration order is not guaranteed)
         *
         * _.keys('hi');
         * // => ['0', '1']
         */
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
    
        /**
         * Creates an array of the own and inherited enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keysIn(new Foo);
         * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
         */
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
    
        /**
         * The opposite of `_.mapValues`; this method creates an object with the
         * same values as `object` and keys generated by running each own enumerable
         * string keyed property of `object` thru `iteratee`. The iteratee is invoked
         * with three arguments: (value, key, object).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns the new mapped object.
         * @see _.mapValues
         * @example
         *
         * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
         *   return key + value;
         * });
         * // => { 'a1': 1, 'b2': 2 }
         */
        function mapKeys(object, iteratee) {
          var result = {};
          iteratee = getIteratee(iteratee, 3);
    
          baseForOwn(object, function(value, key, object) {
            baseAssignValue(result, iteratee(value, key, object), value);
          });
          return result;
        }
    
        /**
         * Creates an object with the same keys as `object` and values generated
         * by running each own enumerable string keyed property of `object` thru
         * `iteratee`. The iteratee is invoked with three arguments:
         * (value, key, object).
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns the new mapped object.
         * @see _.mapKeys
         * @example
         *
         * var users = {
         *   'fred':    { 'user': 'fred',    'age': 40 },
         *   'pebbles': { 'user': 'pebbles', 'age': 1 }
         * };
         *
         * _.mapValues(users, function(o) { return o.age; });
         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
         *
         * // The `_.property` iteratee shorthand.
         * _.mapValues(users, 'age');
         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
         */
        function mapValues(object, iteratee) {
          var result = {};
          iteratee = getIteratee(iteratee, 3);
    
          baseForOwn(object, function(value, key, object) {
            baseAssignValue(result, key, iteratee(value, key, object));
          });
          return result;
        }
    
        /**
         * This method is like `_.assign` except that it recursively merges own and
         * inherited enumerable string keyed properties of source objects into the
         * destination object. Source properties that resolve to `undefined` are
         * skipped if a destination value exists. Array and plain object properties
         * are merged recursively. Other objects and value types are overridden by
         * assignment. Source objects are applied from left to right. Subsequent
         * sources overwrite property assignments of previous sources.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {
         *   'a': [{ 'b': 2 }, { 'd': 4 }]
         * };
         *
         * var other = {
         *   'a': [{ 'c': 3 }, { 'e': 5 }]
         * };
         *
         * _.merge(object, other);
         * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
         */
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
    
        /**
         * This method is like `_.merge` except that it accepts `customizer` which
         * is invoked to produce the merged values of the destination and source
         * properties. If `customizer` returns `undefined`, merging is handled by the
         * method instead. The `customizer` is invoked with six arguments:
         * (objValue, srcValue, key, object, source, stack).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} customizer The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   if (_.isArray(objValue)) {
         *     return objValue.concat(srcValue);
         *   }
         * }
         *
         * var object = { 'a': [1], 'b': [2] };
         * var other = { 'a': [3], 'b': [4] };
         *
         * _.mergeWith(object, other, customizer);
         * // => { 'a': [1, 3], 'b': [2, 4] }
         */
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
    
        /**
         * The opposite of `_.pick`; this method creates an object composed of the
         * own and inherited enumerable property paths of `object` that are not omitted.
         *
         * **Note:** This method is considerably slower than `_.pick`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {...(string|string[])} [paths] The property paths to omit.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.omit(object, ['a', 'c']);
         * // => { 'b': '2' }
         */
        var omit = flatRest(function(object, paths) {
          var result = {};
          if (object == null) {
            return result;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result);
          if (isDeep) {
            result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result, paths[length]);
          }
          return result;
        });
    
        /**
         * The opposite of `_.pickBy`; this method creates an object composed of
         * the own and inherited enumerable string keyed properties of `object` that
         * `predicate` doesn't return truthy for. The predicate is invoked with two
         * arguments: (value, key).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The source object.
         * @param {Function} [predicate=_.identity] The function invoked per property.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.omitBy(object, _.isNumber);
         * // => { 'b': '2' }
         */
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
    
        /**
         * Creates an object composed of the picked `object` properties.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.pick(object, ['a', 'c']);
         * // => { 'a': 1, 'c': 3 }
         */
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
    
        /**
         * Creates an object composed of the `object` properties `predicate` returns
         * truthy for. The predicate is invoked with two arguments: (value, key).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The source object.
         * @param {Function} [predicate=_.identity] The function invoked per property.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.pickBy(object, _.isNumber);
         * // => { 'a': 1, 'c': 3 }
         */
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
    
        /**
         * This method is like `_.get` except that if the resolved value is a
         * function it's invoked with the `this` binding of its parent object and
         * its result is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to resolve.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
         *
         * _.result(object, 'a[0].b.c1');
         * // => 3
         *
         * _.result(object, 'a[0].b.c2');
         * // => 4
         *
         * _.result(object, 'a[0].b.c3', 'default');
         * // => 'default'
         *
         * _.result(object, 'a[0].b.c3', _.constant('default'));
         * // => 'default'
         */
        function result(object, path, defaultValue) {
          path = castPath(path, object);
    
          var index = -1,
              length = path.length;
    
          // Ensure the loop is entered when path is empty.
          if (!length) {
            length = 1;
            object = undefined;
          }
          while (++index < length) {
            var value = object == null ? undefined : object[toKey(path[index])];
            if (value === undefined) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
    
        /**
         * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
         * it's created. Arrays are created for missing index properties while objects
         * are created for all other missing properties. Use `_.setWith` to customize
         * `path` creation.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.set(object, 'a[0].b.c', 4);
         * console.log(object.a[0].b.c);
         * // => 4
         *
         * _.set(object, ['x', '0', 'y', 'z'], 5);
         * console.log(object.x[0].y.z);
         * // => 5
         */
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
    
        /**
         * This method is like `_.set` except that it accepts `customizer` which is
         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
         * path creation is handled by the method instead. The `customizer` is invoked
         * with three arguments: (nsValue, key, nsObject).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {};
         *
         * _.setWith(object, '[0][1]', 'a', Object);
         * // => { '0': { '1': 'a' } }
         */
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
    
        /**
         * Creates an array of own enumerable string keyed-value pairs for `object`
         * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
         * entries are returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias entries
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the key-value pairs.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.toPairs(new Foo);
         * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
         */
        var toPairs = createToPairs(keys);
    
        /**
         * Creates an array of own and inherited enumerable string keyed-value pairs
         * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
         * or set, its entries are returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias entriesIn
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the key-value pairs.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.toPairsIn(new Foo);
         * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
         */
        var toPairsIn = createToPairs(keysIn);
    
        /**
         * An alternative to `_.reduce`; this method transforms `object` to a new
         * `accumulator` object which is the result of running each of its own
         * enumerable string keyed properties thru `iteratee`, with each invocation
         * potentially mutating the `accumulator` object. If `accumulator` is not
         * provided, a new object with the same `[[Prototype]]` will be used. The
         * iteratee is invoked with four arguments: (accumulator, value, key, object).
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 1.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The custom accumulator value.
         * @returns {*} Returns the accumulated value.
         * @example
         *
         * _.transform([2, 3, 4], function(result, n) {
         *   result.push(n *= n);
         *   return n % 2 == 0;
         * }, []);
         * // => [4, 9]
         *
         * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
         *   (result[value] || (result[value] = [])).push(key);
         * }, {});
         * // => { '1': ['a', 'c'], '2': ['b'] }
         */
        function transform(object, iteratee, accumulator) {
          var isArr = isArray(object),
              isArrLike = isArr || isBuffer(object) || isTypedArray(object);
    
          iteratee = getIteratee(iteratee, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor : [];
            }
            else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            }
            else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
            return iteratee(accumulator, value, index, object);
          });
          return accumulator;
        }
    
        /**
         * Removes the property at `path` of `object`.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to unset.
         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 7 } }] };
         * _.unset(object, 'a[0].b.c');
         * // => true
         *
         * console.log(object);
         * // => { 'a': [{ 'b': {} }] };
         *
         * _.unset(object, ['a', '0', 'b', 'c']);
         * // => true
         *
         * console.log(object);
         * // => { 'a': [{ 'b': {} }] };
         */
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
    
        /**
         * This method is like `_.set` except that accepts `updater` to produce the
         * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
         * is invoked with one argument: (value).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {Function} updater The function to produce the updated value.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.update(object, 'a[0].b.c', function(n) { return n * n; });
         * console.log(object.a[0].b.c);
         * // => 9
         *
         * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
         * console.log(object.x[0].y.z);
         * // => 0
         */
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
    
        /**
         * This method is like `_.update` except that it accepts `customizer` which is
         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
         * path creation is handled by the method instead. The `customizer` is invoked
         * with three arguments: (nsValue, key, nsObject).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {Function} updater The function to produce the updated value.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {};
         *
         * _.updateWith(object, '[0][1]', _.constant('a'), Object);
         * // => { '0': { '1': 'a' } }
         */
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
    
        /**
         * Creates an array of the own enumerable string keyed property values of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property values.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.values(new Foo);
         * // => [1, 2] (iteration order is not guaranteed)
         *
         * _.values('hi');
         * // => ['h', 'i']
         */
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
    
        /**
         * Creates an array of the own and inherited enumerable string keyed property
         * values of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property values.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.valuesIn(new Foo);
         * // => [1, 2, 3] (iteration order is not guaranteed)
         */
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Clamps `number` within the inclusive `lower` and `upper` bounds.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Number
         * @param {number} number The number to clamp.
         * @param {number} [lower] The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the clamped number.
         * @example
         *
         * _.clamp(-10, -5, 5);
         * // => -5
         *
         * _.clamp(10, -5, 5);
         * // => 5
         */
        function clamp(number, lower, upper) {
          if (upper === undefined) {
            upper = lower;
            lower = undefined;
          }
          if (upper !== undefined) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
    
        /**
         * Checks if `n` is between `start` and up to, but not including, `end`. If
         * `end` is not specified, it's set to `start` with `start` then set to `0`.
         * If `start` is greater than `end` the params are swapped to support
         * negative ranges.
         *
         * @static
         * @memberOf _
         * @since 3.3.0
         * @category Number
         * @param {number} number The number to check.
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
         * @see _.range, _.rangeRight
         * @example
         *
         * _.inRange(3, 2, 4);
         * // => true
         *
         * _.inRange(4, 8);
         * // => true
         *
         * _.inRange(4, 2);
         * // => false
         *
         * _.inRange(2, 2);
         * // => false
         *
         * _.inRange(1.2, 2);
         * // => true
         *
         * _.inRange(5.2, 4);
         * // => false
         *
         * _.inRange(-3, -2, -6);
         * // => true
         */
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
    
        /**
         * Produces a random number between the inclusive `lower` and `upper` bounds.
         * If only one argument is provided a number between `0` and the given number
         * is returned. If `floating` is `true`, or either `lower` or `upper` are
         * floats, a floating-point number is returned instead of an integer.
         *
         * **Note:** JavaScript follows the IEEE-754 standard for resolving
         * floating-point values which can produce unexpected results.
         *
         * @static
         * @memberOf _
         * @since 0.7.0
         * @category Number
         * @param {number} [lower=0] The lower bound.
         * @param {number} [upper=1] The upper bound.
         * @param {boolean} [floating] Specify returning a floating-point number.
         * @returns {number} Returns the random number.
         * @example
         *
         * _.random(0, 5);
         * // => an integer between 0 and 5
         *
         * _.random(5);
         * // => also an integer between 0 and 5
         *
         * _.random(5, true);
         * // => a floating-point number between 0 and 5
         *
         * _.random(1.2, 5.2);
         * // => a floating-point number between 1.2 and 5.2
         */
        function random(lower, upper, floating) {
          if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined;
          }
          if (floating === undefined) {
            if (typeof upper == 'boolean') {
              floating = upper;
              upper = undefined;
            }
            else if (typeof lower == 'boolean') {
              floating = lower;
              lower = undefined;
            }
          }
          if (lower === undefined && upper === undefined) {
            lower = 0;
            upper = 1;
          }
          else {
            lower = toFinite(lower);
            if (upper === undefined) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
          }
          return baseRandom(lower, upper);
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the camel cased string.
         * @example
         *
         * _.camelCase('Foo Bar');
         * // => 'fooBar'
         *
         * _.camelCase('--foo-bar--');
         * // => 'fooBar'
         *
         * _.camelCase('__FOO_BAR__');
         * // => 'fooBar'
         */
        var camelCase = createCompounder(function(result, word, index) {
          word = word.toLowerCase();
          return result + (index ? capitalize(word) : word);
        });
    
        /**
         * Converts the first character of `string` to upper case and the remaining
         * to lower case.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to capitalize.
         * @returns {string} Returns the capitalized string.
         * @example
         *
         * _.capitalize('FRED');
         * // => 'Fred'
         */
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
    
        /**
         * Deburrs `string` by converting
         * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
         * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
         * letters to basic Latin letters and removing
         * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to deburr.
         * @returns {string} Returns the deburred string.
         * @example
         *
         * _.deburr('déjà vu');
         * // => 'deja vu'
         */
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
        }
    
        /**
         * Checks if `string` ends with the given target string.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {string} [target] The string to search for.
         * @param {number} [position=string.length] The position to search up to.
         * @returns {boolean} Returns `true` if `string` ends with `target`,
         *  else `false`.
         * @example
         *
         * _.endsWith('abc', 'c');
         * // => true
         *
         * _.endsWith('abc', 'b');
         * // => false
         *
         * _.endsWith('abc', 'b', 2);
         * // => true
         */
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
    
          var length = string.length;
          position = position === undefined
            ? length
            : baseClamp(toInteger(position), 0, length);
    
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
    
        /**
         * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
         * corresponding HTML entities.
         *
         * **Note:** No other characters are escaped. To escape additional
         * characters use a third-party library like [_he_](https://mths.be/he).
         *
         * Though the ">" character is escaped for symmetry, characters like
         * ">" and "/" don't need escaping in HTML and have no special meaning
         * unless they're part of a tag or unquoted attribute value. See
         * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
         * (under "semi-related fun fact") for more details.
         *
         * When working with HTML you should always
         * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
         * XSS vectors.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to escape.
         * @returns {string} Returns the escaped string.
         * @example
         *
         * _.escape('fred, barney, & pebbles');
         * // => 'fred, barney, &amp; pebbles'
         */
        function escape(string) {
          string = toString(string);
          return (string && reHasUnescapedHtml.test(string))
            ? string.replace(reUnescapedHtml, escapeHtmlChar)
            : string;
        }
    
        /**
         * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
         * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to escape.
         * @returns {string} Returns the escaped string.
         * @example
         *
         * _.escapeRegExp('[lodash](https://lodash.com/)');
         * // => '\[lodash\]\(https://lodash\.com/\)'
         */
        function escapeRegExp(string) {
          string = toString(string);
          return (string && reHasRegExpChar.test(string))
            ? string.replace(reRegExpChar, '\\$&')
            : string;
        }
    
        /**
         * Converts `string` to
         * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the kebab cased string.
         * @example
         *
         * _.kebabCase('Foo Bar');
         * // => 'foo-bar'
         *
         * _.kebabCase('fooBar');
         * // => 'foo-bar'
         *
         * _.kebabCase('__FOO_BAR__');
         * // => 'foo-bar'
         */
        var kebabCase = createCompounder(function(result, word, index) {
          return result + (index ? '-' : '') + word.toLowerCase();
        });
    
        /**
         * Converts `string`, as space separated words, to lower case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the lower cased string.
         * @example
         *
         * _.lowerCase('--Foo-Bar--');
         * // => 'foo bar'
         *
         * _.lowerCase('fooBar');
         * // => 'foo bar'
         *
         * _.lowerCase('__FOO_BAR__');
         * // => 'foo bar'
         */
        var lowerCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + word.toLowerCase();
        });
    
        /**
         * Converts the first character of `string` to lower case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.lowerFirst('Fred');
         * // => 'fred'
         *
         * _.lowerFirst('FRED');
         * // => 'fRED'
         */
        var lowerFirst = createCaseFirst('toLowerCase');
    
        /**
         * Pads `string` on the left and right sides if it's shorter than `length`.
         * Padding characters are truncated if they can't be evenly divided by `length`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.pad('abc', 8);
         * // => '  abc   '
         *
         * _.pad('abc', 8, '_-');
         * // => '_-abc_-_'
         *
         * _.pad('abc', 3);
         * // => 'abc'
         */
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
    
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return (
            createPadding(nativeFloor(mid), chars) +
            string +
            createPadding(nativeCeil(mid), chars)
          );
        }
    
        /**
         * Pads `string` on the right side if it's shorter than `length`. Padding
         * characters are truncated if they exceed `length`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.padEnd('abc', 6);
         * // => 'abc   '
         *
         * _.padEnd('abc', 6, '_-');
         * // => 'abc_-_'
         *
         * _.padEnd('abc', 3);
         * // => 'abc'
         */
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
    
          var strLength = length ? stringSize(string) : 0;
          return (length && strLength < length)
            ? (string + createPadding(length - strLength, chars))
            : string;
        }
    
        /**
         * Pads `string` on the left side if it's shorter than `length`. Padding
         * characters are truncated if they exceed `length`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.padStart('abc', 6);
         * // => '   abc'
         *
         * _.padStart('abc', 6, '_-');
         * // => '_-_abc'
         *
         * _.padStart('abc', 3);
         * // => 'abc'
         */
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
    
          var strLength = length ? stringSize(string) : 0;
          return (length && strLength < length)
            ? (createPadding(length - strLength, chars) + string)
            : string;
        }
    
        /**
         * Converts `string` to an integer of the specified radix. If `radix` is
         * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
         * hexadecimal, in which case a `radix` of `16` is used.
         *
         * **Note:** This method aligns with the
         * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category String
         * @param {string} string The string to convert.
         * @param {number} [radix=10] The radix to interpret `value` by.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.parseInt('08');
         * // => 8
         *
         * _.map(['6', '08', '10'], _.parseInt);
         * // => [6, 8, 10]
         */
        function parseInt(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
        }
    
        /**
         * Repeats the given string `n` times.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to repeat.
         * @param {number} [n=1] The number of times to repeat the string.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the repeated string.
         * @example
         *
         * _.repeat('*', 3);
         * // => '***'
         *
         * _.repeat('abc', 2);
         * // => 'abcabc'
         *
         * _.repeat('abc', 0);
         * // => ''
         */
        function repeat(string, n, guard) {
          if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
    
        /**
         * Replaces matches for `pattern` in `string` with `replacement`.
         *
         * **Note:** This method is based on
         * [`String#replace`](https://mdn.io/String/replace).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to modify.
         * @param {RegExp|string} pattern The pattern to replace.
         * @param {Function|string} replacement The match replacement.
         * @returns {string} Returns the modified string.
         * @example
         *
         * _.replace('Hi Fred', 'Fred', 'Barney');
         * // => 'Hi Barney'
         */
        function replace() {
          var args = arguments,
              string = toString(args[0]);
    
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
    
        /**
         * Converts `string` to
         * [snake case](https://en.wikipedia.org/wiki/Snake_case).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the snake cased string.
         * @example
         *
         * _.snakeCase('Foo Bar');
         * // => 'foo_bar'
         *
         * _.snakeCase('fooBar');
         * // => 'foo_bar'
         *
         * _.snakeCase('--FOO-BAR--');
         * // => 'foo_bar'
         */
        var snakeCase = createCompounder(function(result, word, index) {
          return result + (index ? '_' : '') + word.toLowerCase();
        });
    
        /**
         * Splits `string` by `separator`.
         *
         * **Note:** This method is based on
         * [`String#split`](https://mdn.io/String/split).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to split.
         * @param {RegExp|string} separator The separator pattern to split by.
         * @param {number} [limit] The length to truncate results to.
         * @returns {Array} Returns the string segments.
         * @example
         *
         * _.split('a-b-c', '-', 2);
         * // => ['a', 'b']
         */
        function split(string, separator, limit) {
          if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined;
          }
          limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (
                typeof separator == 'string' ||
                (separator != null && !isRegExp(separator))
              )) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
    
        /**
         * Converts `string` to
         * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
         *
         * @static
         * @memberOf _
         * @since 3.1.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the start cased string.
         * @example
         *
         * _.startCase('--foo-bar--');
         * // => 'Foo Bar'
         *
         * _.startCase('fooBar');
         * // => 'Foo Bar'
         *
         * _.startCase('__FOO_BAR__');
         * // => 'FOO BAR'
         */
        var startCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + upperFirst(word);
        });
    
        /**
         * Checks if `string` starts with the given target string.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {string} [target] The string to search for.
         * @param {number} [position=0] The position to search from.
         * @returns {boolean} Returns `true` if `string` starts with `target`,
         *  else `false`.
         * @example
         *
         * _.startsWith('abc', 'a');
         * // => true
         *
         * _.startsWith('abc', 'b');
         * // => false
         *
         * _.startsWith('abc', 'b', 1);
         * // => true
         */
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null
            ? 0
            : baseClamp(toInteger(position), 0, string.length);
    
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
    
        /**
         * Creates a compiled template function that can interpolate data properties
         * in "interpolate" delimiters, HTML-escape interpolated data properties in
         * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
         * properties may be accessed as free variables in the template. If a setting
         * object is given, it takes precedence over `_.templateSettings` values.
         *
         * **Note:** In the development build `_.template` utilizes
         * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
         * for easier debugging.
         *
         * For more information on precompiling templates see
         * [lodash's custom builds documentation](https://lodash.com/custom-builds).
         *
         * For more information on Chrome extension sandboxes see
         * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category String
         * @param {string} [string=''] The template string.
         * @param {Object} [options={}] The options object.
         * @param {RegExp} [options.escape=_.templateSettings.escape]
         *  The HTML "escape" delimiter.
         * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
         *  The "evaluate" delimiter.
         * @param {Object} [options.imports=_.templateSettings.imports]
         *  An object to import into the template as free variables.
         * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
         *  The "interpolate" delimiter.
         * @param {string} [options.sourceURL='lodash.templateSources[n]']
         *  The sourceURL of the compiled template.
         * @param {string} [options.variable='obj']
         *  The data object variable name.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the compiled template function.
         * @example
         *
         * // Use the "interpolate" delimiter to create a compiled template.
         * var compiled = _.template('hello <%= user %>!');
         * compiled({ 'user': 'fred' });
         * // => 'hello fred!'
         *
         * // Use the HTML "escape" delimiter to escape data property values.
         * var compiled = _.template('<b><%- value %></b>');
         * compiled({ 'value': '<script>' });
         * // => '<b>&lt;script&gt;</b>'
         *
         * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
         * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
         * compiled({ 'users': ['fred', 'barney'] });
         * // => '<li>fred</li><li>barney</li>'
         *
         * // Use the internal `print` function in "evaluate" delimiters.
         * var compiled = _.template('<% print("hello " + user); %>!');
         * compiled({ 'user': 'barney' });
         * // => 'hello barney!'
         *
         * // Use the ES template literal delimiter as an "interpolate" delimiter.
         * // Disable support by replacing the "interpolate" delimiter.
         * var compiled = _.template('hello ${ user }!');
         * compiled({ 'user': 'pebbles' });
         * // => 'hello pebbles!'
         *
         * // Use backslashes to treat delimiters as plain text.
         * var compiled = _.template('<%= "\\<%- value %\\>" %>');
         * compiled({ 'value': 'ignored' });
         * // => '<%- value %>'
         *
         * // Use the `imports` option to import `jQuery` as `jq`.
         * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
         * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
         * compiled({ 'users': ['fred', 'barney'] });
         * // => '<li>fred</li><li>barney</li>'
         *
         * // Use the `sourceURL` option to specify a custom sourceURL for the template.
         * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
         * compiled(data);
         * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
         *
         * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
         * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
         * compiled.source;
         * // => function(data) {
         * //   var __t, __p = '';
         * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
         * //   return __p;
         * // }
         *
         * // Use custom template delimiters.
         * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
         * var compiled = _.template('hello {{ user }}!');
         * compiled({ 'user': 'mustache' });
         * // => 'hello mustache!'
         *
         * // Use the `source` property to inline compiled templates for meaningful
         * // line numbers in error messages and stack traces.
         * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
         *   var JST = {\
         *     "main": ' + _.template(mainText).source + '\
         *   };\
         * ');
         */
        function template(string, options, guard) {
          // Based on John Resig's `tmpl` implementation
          // (http://ejohn.org/blog/javascript-micro-templating/)
          // and Laura Doktorova's doT.js (https://github.com/olado/doT).
          var settings = lodash.templateSettings;
    
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
    
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
              importsKeys = keys(imports),
              importsValues = baseValues(imports, importsKeys);
    
          var isEscaping,
              isEvaluating,
              index = 0,
              interpolate = options.interpolate || reNoMatch,
              source = "__p += '";
    
          // Compile the regexp to match each delimiter.
          var reDelimiters = RegExp(
            (options.escape || reNoMatch).source + '|' +
            interpolate.source + '|' +
            (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
            (options.evaluate || reNoMatch).source + '|$'
          , 'g');
    
          // Use a sourceURL for easier debugging.
          // The sourceURL gets injected into the source that's eval-ed, so be careful
          // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
          // and escape the comment, thus injecting code that gets evaled.
          var sourceURL = '//# sourceURL=' +
            (hasOwnProperty.call(options, 'sourceURL')
              ? (options.sourceURL + '').replace(/\s/g, ' ')
              : ('lodash.templateSources[' + (++templateCounter) + ']')
            ) + '\n';
    
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
    
            // Escape characters that can't be included in string literals.
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
    
            // Replace delimiters with snippets.
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
    
            // The JS engine embedded in Adobe products needs `match` returned in
            // order to produce the correct `offset` value.
            return match;
          });
    
          source += "';\n";
    
          // If `variable` is not specified wrap a with-statement around the generated
          // code to add the data object to the top of the scope chain.
          var variable = hasOwnProperty.call(options, 'variable') && options.variable;
          if (!variable) {
            source = 'with (obj) {\n' + source + '\n}\n';
          }
          // Throw an error if a forbidden character was found in `variable`, to prevent
          // potential command injection attacks.
          else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
    
          // Cleanup code by stripping empty strings.
          source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
            .replace(reEmptyStringMiddle, '$1')
            .replace(reEmptyStringTrailing, '$1;');
    
          // Frame code as the function body.
          source = 'function(' + (variable || 'obj') + ') {\n' +
            (variable
              ? ''
              : 'obj || (obj = {});\n'
            ) +
            "var __t, __p = ''" +
            (isEscaping
               ? ', __e = _.escape'
               : ''
            ) +
            (isEvaluating
              ? ', __j = Array.prototype.join;\n' +
                "function print() { __p += __j.call(arguments, '') }\n"
              : ';\n'
            ) +
            source +
            'return __p\n}';
    
          var result = attempt(function() {
            return Function(importsKeys, sourceURL + 'return ' + source)
              .apply(undefined, importsValues);
          });
    
          // Provide the compiled function's source by its `toString` method or
          // the `source` property as a convenience for inlining compiled templates.
          result.source = source;
          if (isError(result)) {
            throw result;
          }
          return result;
        }
    
        /**
         * Converts `string`, as a whole, to lower case just like
         * [String#toLowerCase](https://mdn.io/toLowerCase).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the lower cased string.
         * @example
         *
         * _.toLower('--Foo-Bar--');
         * // => '--foo-bar--'
         *
         * _.toLower('fooBar');
         * // => 'foobar'
         *
         * _.toLower('__FOO_BAR__');
         * // => '__foo_bar__'
         */
        function toLower(value) {
          return toString(value).toLowerCase();
        }
    
        /**
         * Converts `string`, as a whole, to upper case just like
         * [String#toUpperCase](https://mdn.io/toUpperCase).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the upper cased string.
         * @example
         *
         * _.toUpper('--foo-bar--');
         * // => '--FOO-BAR--'
         *
         * _.toUpper('fooBar');
         * // => 'FOOBAR'
         *
         * _.toUpper('__foo_bar__');
         * // => '__FOO_BAR__'
         */
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
    
        /**
         * Removes leading and trailing whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trim('  abc  ');
         * // => 'abc'
         *
         * _.trim('-_-abc-_-', '_-');
         * // => 'abc'
         *
         * _.map(['  foo  ', '  bar  '], _.trim);
         * // => ['foo', 'bar']
         */
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
              chrSymbols = stringToArray(chars),
              start = charsStartIndex(strSymbols, chrSymbols),
              end = charsEndIndex(strSymbols, chrSymbols) + 1;
    
          return castSlice(strSymbols, start, end).join('');
        }
    
        /**
         * Removes trailing whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trimEnd('  abc  ');
         * // => '  abc'
         *
         * _.trimEnd('-_-abc-_-', '_-');
         * // => '-_-abc'
         */
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
              end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
    
          return castSlice(strSymbols, 0, end).join('');
        }
    
        /**
         * Removes leading whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trimStart('  abc  ');
         * // => 'abc  '
         *
         * _.trimStart('-_-abc-_-', '_-');
         * // => 'abc-_-'
         */
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined)) {
            return string.replace(reTrimStart, '');
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
              start = charsStartIndex(strSymbols, stringToArray(chars));
    
          return castSlice(strSymbols, start).join('');
        }
    
        /**
         * Truncates `string` if it's longer than the given maximum string length.
         * The last characters of the truncated string are replaced with the omission
         * string which defaults to "...".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to truncate.
         * @param {Object} [options={}] The options object.
         * @param {number} [options.length=30] The maximum string length.
         * @param {string} [options.omission='...'] The string to indicate text is omitted.
         * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
         * @returns {string} Returns the truncated string.
         * @example
         *
         * _.truncate('hi-diddly-ho there, neighborino');
         * // => 'hi-diddly-ho there, neighbo...'
         *
         * _.truncate('hi-diddly-ho there, neighborino', {
         *   'length': 24,
         *   'separator': ' '
         * });
         * // => 'hi-diddly-ho there,...'
         *
         * _.truncate('hi-diddly-ho there, neighborino', {
         *   'length': 24,
         *   'separator': /,? +/
         * });
         * // => 'hi-diddly-ho there...'
         *
         * _.truncate('hi-diddly-ho there, neighborino', {
         *   'omission': ' [...]'
         * });
         * // => 'hi-diddly-ho there, neig [...]'
         */
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH,
              omission = DEFAULT_TRUNC_OMISSION;
    
          if (isObject(options)) {
            var separator = 'separator' in options ? options.separator : separator;
            length = 'length' in options ? toInteger(options.length) : length;
            omission = 'omission' in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
    
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result = strSymbols
            ? castSlice(strSymbols, 0, end).join('')
            : string.slice(0, end);
    
          if (separator === undefined) {
            return result + omission;
          }
          if (strSymbols) {
            end += (result.length - end);
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match,
                  substring = result;
    
              if (!separator.global) {
                separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
              }
              separator.lastIndex = 0;
              while ((match = separator.exec(substring))) {
                var newEnd = match.index;
              }
              result = result.slice(0, newEnd === undefined ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result.lastIndexOf(separator);
            if (index > -1) {
              result = result.slice(0, index);
            }
          }
          return result + omission;
        }
    
        /**
         * The inverse of `_.escape`; this method converts the HTML entities
         * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
         * their corresponding characters.
         *
         * **Note:** No other HTML entities are unescaped. To unescape additional
         * HTML entities use a third-party library like [_he_](https://mths.be/he).
         *
         * @static
         * @memberOf _
         * @since 0.6.0
         * @category String
         * @param {string} [string=''] The string to unescape.
         * @returns {string} Returns the unescaped string.
         * @example
         *
         * _.unescape('fred, barney, &amp; pebbles');
         * // => 'fred, barney, & pebbles'
         */
        function unescape(string) {
          string = toString(string);
          return (string && reHasEscapedHtml.test(string))
            ? string.replace(reEscapedHtml, unescapeHtmlChar)
            : string;
        }
    
        /**
         * Converts `string`, as space separated words, to upper case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the upper cased string.
         * @example
         *
         * _.upperCase('--foo-bar');
         * // => 'FOO BAR'
         *
         * _.upperCase('fooBar');
         * // => 'FOO BAR'
         *
         * _.upperCase('__foo_bar__');
         * // => 'FOO BAR'
         */
        var upperCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + word.toUpperCase();
        });
    
        /**
         * Converts the first character of `string` to upper case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.upperFirst('fred');
         * // => 'Fred'
         *
         * _.upperFirst('FRED');
         * // => 'FRED'
         */
        var upperFirst = createCaseFirst('toUpperCase');
    
        /**
         * Splits `string` into an array of its words.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {RegExp|string} [pattern] The pattern to match words.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the words of `string`.
         * @example
         *
         * _.words('fred, barney, & pebbles');
         * // => ['fred', 'barney', 'pebbles']
         *
         * _.words('fred, barney, & pebbles', /[^, ]+/g);
         * // => ['fred', 'barney', '&', 'pebbles']
         */
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined : pattern;
    
          if (pattern === undefined) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Attempts to invoke `func`, returning either the result or the caught error
         * object. Any additional arguments are provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {Function} func The function to attempt.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {*} Returns the `func` result or error object.
         * @example
         *
         * // Avoid throwing errors for invalid selectors.
         * var elements = _.attempt(function(selector) {
         *   return document.querySelectorAll(selector);
         * }, '>_>');
         *
         * if (_.isError(elements)) {
         *   elements = [];
         * }
         */
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined, args);
          } catch (e) {
            return isError(e) ? e : new Error(e);
          }
        });
    
        /**
         * Binds methods of an object to the object itself, overwriting the existing
         * method.
         *
         * **Note:** This method doesn't set the "length" property of bound functions.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {Object} object The object to bind and assign the bound methods to.
         * @param {...(string|string[])} methodNames The object method names to bind.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var view = {
         *   'label': 'docs',
         *   'click': function() {
         *     console.log('clicked ' + this.label);
         *   }
         * };
         *
         * _.bindAll(view, ['click']);
         * jQuery(element).on('click', view.click);
         * // => Logs 'clicked docs' when clicked.
         */
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
    
        /**
         * Creates a function that iterates over `pairs` and invokes the corresponding
         * function of the first predicate to return truthy. The predicate-function
         * pairs are invoked with the `this` binding and arguments of the created
         * function.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {Array} pairs The predicate-function pairs.
         * @returns {Function} Returns the new composite function.
         * @example
         *
         * var func = _.cond([
         *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
         *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
         *   [_.stubTrue,                      _.constant('no match')]
         * ]);
         *
         * func({ 'a': 1, 'b': 2 });
         * // => 'matches A'
         *
         * func({ 'a': 0, 'b': 1 });
         * // => 'matches B'
         *
         * func({ 'a': '1', 'b': '2' });
         * // => 'no match'
         */
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length,
              toIteratee = getIteratee();
    
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
    
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
    
        /**
         * Creates a function that invokes the predicate properties of `source` with
         * the corresponding property values of a given object, returning `true` if
         * all predicates return truthy, else `false`.
         *
         * **Note:** The created function is equivalent to `_.conformsTo` with
         * `source` partially applied.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {Object} source The object of property predicates to conform to.
         * @returns {Function} Returns the new spec function.
         * @example
         *
         * var objects = [
         *   { 'a': 2, 'b': 1 },
         *   { 'a': 1, 'b': 2 }
         * ];
         *
         * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
         * // => [{ 'a': 1, 'b': 2 }]
         */
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
    
        /**
         * Creates a function that returns `value`.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {*} value The value to return from the new function.
         * @returns {Function} Returns the new constant function.
         * @example
         *
         * var objects = _.times(2, _.constant({ 'a': 1 }));
         *
         * console.log(objects);
         * // => [{ 'a': 1 }, { 'a': 1 }]
         *
         * console.log(objects[0] === objects[1]);
         * // => true
         */
        function constant(value) {
          return function() {
            return value;
          };
        }
    
        /**
         * Checks `value` to determine whether a default value should be returned in
         * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
         * or `undefined`.
         *
         * @static
         * @memberOf _
         * @since 4.14.0
         * @category Util
         * @param {*} value The value to check.
         * @param {*} defaultValue The default value.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * _.defaultTo(1, 10);
         * // => 1
         *
         * _.defaultTo(undefined, 10);
         * // => 10
         */
        function defaultTo(value, defaultValue) {
          return (value == null || value !== value) ? defaultValue : value;
        }
    
        /**
         * Creates a function that returns the result of invoking the given functions
         * with the `this` binding of the created function, where each successive
         * invocation is supplied the return value of the previous.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {...(Function|Function[])} [funcs] The functions to invoke.
         * @returns {Function} Returns the new composite function.
         * @see _.flowRight
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var addSquare = _.flow([_.add, square]);
         * addSquare(1, 2);
         * // => 9
         */
        var flow = createFlow();
    
        /**
         * This method is like `_.flow` except that it creates a function that
         * invokes the given functions from right to left.
         *
         * @static
         * @since 3.0.0
         * @memberOf _
         * @category Util
         * @param {...(Function|Function[])} [funcs] The functions to invoke.
         * @returns {Function} Returns the new composite function.
         * @see _.flow
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var addSquare = _.flowRight([square, _.add]);
         * addSquare(1, 2);
         * // => 9
         */
        var flowRight = createFlow(true);
    
        /**
         * This method returns the first argument it receives.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {*} value Any value.
         * @returns {*} Returns `value`.
         * @example
         *
         * var object = { 'a': 1 };
         *
         * console.log(_.identity(object) === object);
         * // => true
         */
        function identity(value) {
          return value;
        }
    
        /**
         * Creates a function that invokes `func` with the arguments of the created
         * function. If `func` is a property name, the created function returns the
         * property value for a given element. If `func` is an array or object, the
         * created function returns `true` for elements that contain the equivalent
         * source properties, otherwise it returns `false`.
         *
         * @static
         * @since 4.0.0
         * @memberOf _
         * @category Util
         * @param {*} [func=_.identity] The value to convert to a callback.
         * @returns {Function} Returns the callback.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': true },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
         * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.filter(users, _.iteratee(['user', 'fred']));
         * // => [{ 'user': 'fred', 'age': 40 }]
         *
         * // The `_.property` iteratee shorthand.
         * _.map(users, _.iteratee('user'));
         * // => ['barney', 'fred']
         *
         * // Create custom iteratee shorthands.
         * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
         *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
         *     return func.test(string);
         *   };
         * });
         *
         * _.filter(['abc', 'def'], /ef/);
         * // => ['def']
         */
        function iteratee(func) {
          return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
    
        /**
         * Creates a function that performs a partial deep comparison between a given
         * object and `source`, returning `true` if the given object has equivalent
         * property values, else `false`.
         *
         * **Note:** The created function is equivalent to `_.isMatch` with `source`
         * partially applied.
         *
         * Partial comparisons will match empty array and empty object `source`
         * values against any array or object value, respectively. See `_.isEqual`
         * for a list of supported value comparisons.
         *
         * **Note:** Multiple values can be checked by combining several matchers
         * using `_.overSome`
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new spec function.
         * @example
         *
         * var objects = [
         *   { 'a': 1, 'b': 2, 'c': 3 },
         *   { 'a': 4, 'b': 5, 'c': 6 }
         * ];
         *
         * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
         * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
         *
         * // Checking for several possible values
         * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
         * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
         */
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
    
        /**
         * Creates a function that performs a partial deep comparison between the
         * value at `path` of a given object to `srcValue`, returning `true` if the
         * object value is equivalent, else `false`.
         *
         * **Note:** Partial comparisons will match empty array and empty object
         * `srcValue` values against any array or object value, respectively. See
         * `_.isEqual` for a list of supported value comparisons.
         *
         * **Note:** Multiple values can be checked by combining several matchers
         * using `_.overSome`
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Util
         * @param {Array|string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         * @example
         *
         * var objects = [
         *   { 'a': 1, 'b': 2, 'c': 3 },
         *   { 'a': 4, 'b': 5, 'c': 6 }
         * ];
         *
         * _.find(objects, _.matchesProperty('a', 4));
         * // => { 'a': 4, 'b': 5, 'c': 6 }
         *
         * // Checking for several possible values
         * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
         * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
         */
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
    
        /**
         * Creates a function that invokes the method at `path` of a given object.
         * Any additional arguments are provided to the invoked method.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Util
         * @param {Array|string} path The path of the method to invoke.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {Function} Returns the new invoker function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': _.constant(2) } },
         *   { 'a': { 'b': _.constant(1) } }
         * ];
         *
         * _.map(objects, _.method('a.b'));
         * // => [2, 1]
         *
         * _.map(objects, _.method(['a', 'b']));
         * // => [2, 1]
         */
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
    
        /**
         * The opposite of `_.method`; this method creates a function that invokes
         * the method at a given path of `object`. Any additional arguments are
         * provided to the invoked method.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Util
         * @param {Object} object The object to query.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {Function} Returns the new invoker function.
         * @example
         *
         * var array = _.times(3, _.constant),
         *     object = { 'a': array, 'b': array, 'c': array };
         *
         * _.map(['a[2]', 'c[0]'], _.methodOf(object));
         * // => [2, 0]
         *
         * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
         * // => [2, 0]
         */
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
    
        /**
         * Adds all own enumerable string keyed function properties of a source
         * object to the destination object. If `object` is a function, then methods
         * are added to its prototype as well.
         *
         * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
         * avoid conflicts caused by modifying the original.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {Function|Object} [object=lodash] The destination object.
         * @param {Object} source The object of functions to add.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
         * @returns {Function|Object} Returns `object`.
         * @example
         *
         * function vowels(string) {
         *   return _.filter(string, function(v) {
         *     return /[aeiou]/i.test(v);
         *   });
         * }
         *
         * _.mixin({ 'vowels': vowels });
         * _.vowels('fred');
         * // => ['e']
         *
         * _('fred').vowels().value();
         * // => ['e']
         *
         * _.mixin({ 'vowels': vowels }, { 'chain': false });
         * _('fred').vowels();
         * // => ['e']
         */
        function mixin(object, source, options) {
          var props = keys(source),
              methodNames = baseFunctions(source, props);
    
          if (options == null &&
              !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
              isFunc = isFunction(object);
    
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain || chainAll) {
                  var result = object(this.__wrapped__),
                      actions = result.__actions__ = copyArray(this.__actions__);
    
                  actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                  result.__chain__ = chainAll;
                  return result;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
    
          return object;
        }
    
        /**
         * Reverts the `_` variable to its previous value and returns a reference to
         * the `lodash` function.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @returns {Function} Returns the `lodash` function.
         * @example
         *
         * var lodash = _.noConflict();
         */
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
    
        /**
         * This method returns `undefined`.
         *
         * @static
         * @memberOf _
         * @since 2.3.0
         * @category Util
         * @example
         *
         * _.times(2, _.noop);
         * // => [undefined, undefined]
         */
        function noop() {
          // No operation performed.
        }
    
        /**
         * Creates a function that gets the argument at index `n`. If `n` is negative,
         * the nth argument from the end is returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {number} [n=0] The index of the argument to return.
         * @returns {Function} Returns the new pass-thru function.
         * @example
         *
         * var func = _.nthArg(1);
         * func('a', 'b', 'c', 'd');
         * // => 'b'
         *
         * var func = _.nthArg(-2);
         * func('a', 'b', 'c', 'd');
         * // => 'c'
         */
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
    
        /**
         * Creates a function that invokes `iteratees` with the arguments it receives
         * and returns their results.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {...(Function|Function[])} [iteratees=[_.identity]]
         *  The iteratees to invoke.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var func = _.over([Math.max, Math.min]);
         *
         * func(1, 2, 3, 4);
         * // => [4, 1]
         */
        var over = createOver(arrayMap);
    
        /**
         * Creates a function that checks if **all** of the `predicates` return
         * truthy when invoked with the arguments it receives.
         *
         * Following shorthands are possible for providing predicates.
         * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
         * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {...(Function|Function[])} [predicates=[_.identity]]
         *  The predicates to check.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var func = _.overEvery([Boolean, isFinite]);
         *
         * func('1');
         * // => true
         *
         * func(null);
         * // => false
         *
         * func(NaN);
         * // => false
         */
        var overEvery = createOver(arrayEvery);
    
        /**
         * Creates a function that checks if **any** of the `predicates` return
         * truthy when invoked with the arguments it receives.
         *
         * Following shorthands are possible for providing predicates.
         * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
         * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {...(Function|Function[])} [predicates=[_.identity]]
         *  The predicates to check.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var func = _.overSome([Boolean, isFinite]);
         *
         * func('1');
         * // => true
         *
         * func(null);
         * // => true
         *
         * func(NaN);
         * // => false
         *
         * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
         * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
         */
        var overSome = createOver(arraySome);
    
        /**
         * Creates a function that returns the value at `path` of a given object.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': 2 } },
         *   { 'a': { 'b': 1 } }
         * ];
         *
         * _.map(objects, _.property('a.b'));
         * // => [2, 1]
         *
         * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
         * // => [1, 2]
         */
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
    
        /**
         * The opposite of `_.property`; this method creates a function that returns
         * the value at a given path of `object`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {Object} object The object to query.
         * @returns {Function} Returns the new accessor function.
         * @example
         *
         * var array = [0, 1, 2],
         *     object = { 'a': array, 'b': array, 'c': array };
         *
         * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
         * // => [2, 0]
         *
         * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
         * // => [2, 0]
         */
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined : baseGet(object, path);
          };
        }
    
        /**
         * Creates an array of numbers (positive and/or negative) progressing from
         * `start` up to, but not including, `end`. A step of `-1` is used if a negative
         * `start` is specified without an `end` or `step`. If `end` is not specified,
         * it's set to `start` with `start` then set to `0`.
         *
         * **Note:** JavaScript follows the IEEE-754 standard for resolving
         * floating-point values which can produce unexpected results.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @param {number} [step=1] The value to increment or decrement by.
         * @returns {Array} Returns the range of numbers.
         * @see _.inRange, _.rangeRight
         * @example
         *
         * _.range(4);
         * // => [0, 1, 2, 3]
         *
         * _.range(-4);
         * // => [0, -1, -2, -3]
         *
         * _.range(1, 5);
         * // => [1, 2, 3, 4]
         *
         * _.range(0, 20, 5);
         * // => [0, 5, 10, 15]
         *
         * _.range(0, -4, -1);
         * // => [0, -1, -2, -3]
         *
         * _.range(1, 4, 0);
         * // => [1, 1, 1]
         *
         * _.range(0);
         * // => []
         */
        var range = createRange();
    
        /**
         * This method is like `_.range` except that it populates values in
         * descending order.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @param {number} [step=1] The value to increment or decrement by.
         * @returns {Array} Returns the range of numbers.
         * @see _.inRange, _.range
         * @example
         *
         * _.rangeRight(4);
         * // => [3, 2, 1, 0]
         *
         * _.rangeRight(-4);
         * // => [-3, -2, -1, 0]
         *
         * _.rangeRight(1, 5);
         * // => [4, 3, 2, 1]
         *
         * _.rangeRight(0, 20, 5);
         * // => [15, 10, 5, 0]
         *
         * _.rangeRight(0, -4, -1);
         * // => [-3, -2, -1, 0]
         *
         * _.rangeRight(1, 4, 0);
         * // => [1, 1, 1]
         *
         * _.rangeRight(0);
         * // => []
         */
        var rangeRight = createRange(true);
    
        /**
         * This method returns a new empty array.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Array} Returns the new empty array.
         * @example
         *
         * var arrays = _.times(2, _.stubArray);
         *
         * console.log(arrays);
         * // => [[], []]
         *
         * console.log(arrays[0] === arrays[1]);
         * // => false
         */
        function stubArray() {
          return [];
        }
    
        /**
         * This method returns `false`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `false`.
         * @example
         *
         * _.times(2, _.stubFalse);
         * // => [false, false]
         */
        function stubFalse() {
          return false;
        }
    
        /**
         * This method returns a new empty object.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Object} Returns the new empty object.
         * @example
         *
         * var objects = _.times(2, _.stubObject);
         *
         * console.log(objects);
         * // => [{}, {}]
         *
         * console.log(objects[0] === objects[1]);
         * // => false
         */
        function stubObject() {
          return {};
        }
    
        /**
         * This method returns an empty string.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {string} Returns the empty string.
         * @example
         *
         * _.times(2, _.stubString);
         * // => ['', '']
         */
        function stubString() {
          return '';
        }
    
        /**
         * This method returns `true`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `true`.
         * @example
         *
         * _.times(2, _.stubTrue);
         * // => [true, true]
         */
        function stubTrue() {
          return true;
        }
    
        /**
         * Invokes the iteratee `n` times, returning an array of the results of
         * each invocation. The iteratee is invoked with one argument; (index).
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         * @example
         *
         * _.times(3, String);
         * // => ['0', '1', '2']
         *
         *  _.times(4, _.constant(0));
         * // => [0, 0, 0, 0]
         */
        function times(n, iteratee) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH,
              length = nativeMin(n, MAX_ARRAY_LENGTH);
    
          iteratee = getIteratee(iteratee);
          n -= MAX_ARRAY_LENGTH;
    
          var result = baseTimes(length, iteratee);
          while (++index < n) {
            iteratee(index);
          }
          return result;
        }
    
        /**
         * Converts `value` to a property path array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {*} value The value to convert.
         * @returns {Array} Returns the new property path array.
         * @example
         *
         * _.toPath('a.b.c');
         * // => ['a', 'b', 'c']
         *
         * _.toPath('a[0].b.c');
         * // => ['a', '0', 'b', 'c']
         */
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
    
        /**
         * Generates a unique ID. If `prefix` is given, the ID is appended to it.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {string} [prefix=''] The value to prefix the ID with.
         * @returns {string} Returns the unique ID.
         * @example
         *
         * _.uniqueId('contact_');
         * // => 'contact_104'
         *
         * _.uniqueId();
         * // => '105'
         */
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
    
        /*------------------------------------------------------------------------*/
    
        /**
         * Adds two numbers.
         *
         * @static
         * @memberOf _
         * @since 3.4.0
         * @category Math
         * @param {number} augend The first number in an addition.
         * @param {number} addend The second number in an addition.
         * @returns {number} Returns the total.
         * @example
         *
         * _.add(6, 4);
         * // => 10
         */
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
    
        /**
         * Computes `number` rounded up to `precision`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Math
         * @param {number} number The number to round up.
         * @param {number} [precision=0] The precision to round up to.
         * @returns {number} Returns the rounded up number.
         * @example
         *
         * _.ceil(4.006);
         * // => 5
         *
         * _.ceil(6.004, 2);
         * // => 6.01
         *
         * _.ceil(6040, -2);
         * // => 6100
         */
        var ceil = createRound('ceil');
    
        /**
         * Divide two numbers.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Math
         * @param {number} dividend The first number in a division.
         * @param {number} divisor The second number in a division.
         * @returns {number} Returns the quotient.
         * @example
         *
         * _.divide(6, 4);
         * // => 1.5
         */
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
    
        /**
         * Computes `number` rounded down to `precision`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Math
         * @param {number} number The number to round down.
         * @param {number} [precision=0] The precision to round down to.
         * @returns {number} Returns the rounded down number.
         * @example
         *
         * _.floor(4.006);
         * // => 4
         *
         * _.floor(0.046, 2);
         * // => 0.04
         *
         * _.floor(4060, -2);
         * // => 4000
         */
        var floor = createRound('floor');
    
        /**
         * Computes the maximum value of `array`. If `array` is empty or falsey,
         * `undefined` is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {*} Returns the maximum value.
         * @example
         *
         * _.max([4, 2, 8, 6]);
         * // => 8
         *
         * _.max([]);
         * // => undefined
         */
        function max(array) {
          return (array && array.length)
            ? baseExtremum(array, identity, baseGt)
            : undefined;
        }
    
        /**
         * This method is like `_.max` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * the value is ranked. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {*} Returns the maximum value.
         * @example
         *
         * var objects = [{ 'n': 1 }, { 'n': 2 }];
         *
         * _.maxBy(objects, function(o) { return o.n; });
         * // => { 'n': 2 }
         *
         * // The `_.property` iteratee shorthand.
         * _.maxBy(objects, 'n');
         * // => { 'n': 2 }
         */
        function maxBy(array, iteratee) {
          return (array && array.length)
            ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
            : undefined;
        }
    
        /**
         * Computes the mean of the values in `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {number} Returns the mean.
         * @example
         *
         * _.mean([4, 2, 8, 6]);
         * // => 5
         */
        function mean(array) {
          return baseMean(array, identity);
        }
    
        /**
         * This method is like `_.mean` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the value to be averaged.
         * The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the mean.
         * @example
         *
         * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
         *
         * _.meanBy(objects, function(o) { return o.n; });
         * // => 5
         *
         * // The `_.property` iteratee shorthand.
         * _.meanBy(objects, 'n');
         * // => 5
         */
        function meanBy(array, iteratee) {
          return baseMean(array, getIteratee(iteratee, 2));
        }
    
        /**
         * Computes the minimum value of `array`. If `array` is empty or falsey,
         * `undefined` is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {*} Returns the minimum value.
         * @example
         *
         * _.min([4, 2, 8, 6]);
         * // => 2
         *
         * _.min([]);
         * // => undefined
         */
        function min(array) {
          return (array && array.length)
            ? baseExtremum(array, identity, baseLt)
            : undefined;
        }
    
        /**
         * This method is like `_.min` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * the value is ranked. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {*} Returns the minimum value.
         * @example
         *
         * var objects = [{ 'n': 1 }, { 'n': 2 }];
         *
         * _.minBy(objects, function(o) { return o.n; });
         * // => { 'n': 1 }
         *
         * // The `_.property` iteratee shorthand.
         * _.minBy(objects, 'n');
         * // => { 'n': 1 }
         */
        function minBy(array, iteratee) {
          return (array && array.length)
            ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
            : undefined;
        }
    
        /**
         * Multiply two numbers.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Math
         * @param {number} multiplier The first number in a multiplication.
         * @param {number} multiplicand The second number in a multiplication.
         * @returns {number} Returns the product.
         * @example
         *
         * _.multiply(6, 4);
         * // => 24
         */
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
    
        /**
         * Computes `number` rounded to `precision`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Math
         * @param {number} number The number to round.
         * @param {number} [precision=0] The precision to round to.
         * @returns {number} Returns the rounded number.
         * @example
         *
         * _.round(4.006);
         * // => 4
         *
         * _.round(4.006, 2);
         * // => 4.01
         *
         * _.round(4060, -2);
         * // => 4100
         */
        var round = createRound('round');
    
        /**
         * Subtract two numbers.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {number} minuend The first number in a subtraction.
         * @param {number} subtrahend The second number in a subtraction.
         * @returns {number} Returns the difference.
         * @example
         *
         * _.subtract(6, 4);
         * // => 2
         */
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
    
        /**
         * Computes the sum of the values in `array`.
         *
         * @static
         * @memberOf _
         * @since 3.4.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {number} Returns the sum.
         * @example
         *
         * _.sum([4, 2, 8, 6]);
         * // => 20
         */
        function sum(array) {
          return (array && array.length)
            ? baseSum(array, identity)
            : 0;
        }
    
        /**
         * This method is like `_.sum` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the value to be summed.
         * The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the sum.
         * @example
         *
         * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
         *
         * _.sumBy(objects, function(o) { return o.n; });
         * // => 20
         *
         * // The `_.property` iteratee shorthand.
         * _.sumBy(objects, 'n');
         * // => 20
         */
        function sumBy(array, iteratee) {
          return (array && array.length)
            ? baseSum(array, getIteratee(iteratee, 2))
            : 0;
        }
    
        /*------------------------------------------------------------------------*/
    
        // Add methods that return wrapped values in chain sequences.
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
    
        // Add aliases.
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
    
        // Add methods to `lodash.prototype`.
        mixin(lodash, lodash);
    
        /*------------------------------------------------------------------------*/
    
        // Add methods that return unwrapped values in chain sequences.
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
    
        // Add aliases.
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
    
        mixin(lodash, (function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }()), { 'chain': false });
    
        /*------------------------------------------------------------------------*/
    
        /**
         * The semantic version number.
         *
         * @static
         * @memberOf _
         * @type {string}
         */
        lodash.VERSION = VERSION;
    
        // Assign default placeholders.
        arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
    
        // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
        arrayEach(['drop', 'take'], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
    
            var result = (this.__filtered__ && !index)
              ? new LazyWrapper(this)
              : this.clone();
    
            if (result.__filtered__) {
              result.__takeCount__ = nativeMin(n, result.__takeCount__);
            } else {
              result.__views__.push({
                'size': nativeMin(n, MAX_ARRAY_LENGTH),
                'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
              });
            }
            return result;
          };
    
          LazyWrapper.prototype[methodName + 'Right'] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
    
        // Add `LazyWrapper` methods that accept an `iteratee` value.
        arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
          var type = index + 1,
              isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
    
          LazyWrapper.prototype[methodName] = function(iteratee) {
            var result = this.clone();
            result.__iteratees__.push({
              'iteratee': getIteratee(iteratee, 3),
              'type': type
            });
            result.__filtered__ = result.__filtered__ || isFilter;
            return result;
          };
        });
    
        // Add `LazyWrapper` methods for `_.head` and `_.last`.
        arrayEach(['head', 'last'], function(methodName, index) {
          var takeName = 'take' + (index ? 'Right' : '');
    
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
    
        // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
        arrayEach(['initial', 'tail'], function(methodName, index) {
          var dropName = 'drop' + (index ? '' : 'Right');
    
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
    
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
    
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
    
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
    
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == 'function') {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
    
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
    
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
    
          var result = this;
          if (result.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result);
          }
          if (start < 0) {
            result = result.takeRight(-start);
          } else if (start) {
            result = result.drop(start);
          }
          if (end !== undefined) {
            end = toInteger(end);
            result = end < 0 ? result.dropRight(-end) : result.take(end - start);
          }
          return result;
        };
    
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
    
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
    
        // Add `LazyWrapper` methods to `lodash.prototype`.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
              isTaker = /^(?:head|last)$/.test(methodName),
              lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
              retUnwrapped = isTaker || /^find/.test(methodName);
    
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__,
                args = isTaker ? [1] : arguments,
                isLazy = value instanceof LazyWrapper,
                iteratee = args[0],
                useLazy = isLazy || isArray(value);
    
            var interceptor = function(value) {
              var result = lodashFunc.apply(lodash, arrayPush([value], args));
              return (isTaker && chainAll) ? result[0] : result;
            };
    
            if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
              // Avoid lazy use if the iteratee has a "length" value other than `1`.
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__,
                isHybrid = !!this.__actions__.length,
                isUnwrapped = retUnwrapped && !chainAll,
                onlyLazy = isLazy && !isHybrid;
    
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result = func.apply(value, args);
              result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
              return new LodashWrapper(result, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result = this.thru(interceptor);
            return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
          };
        });
    
        // Add `Array` methods to `lodash.prototype`.
        arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
          var func = arrayProto[methodName],
              chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
              retUnwrapped = /^(?:pop|shift)$/.test(methodName);
    
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value) {
              return func.apply(isArray(value) ? value : [], args);
            });
          };
        });
    
        // Map minified method names to their real names.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + '';
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ 'name': methodName, 'func': lodashFunc });
          }
        });
    
        realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
          'name': 'wrapper',
          'func': undefined
        }];
    
        // Add methods to `LazyWrapper`.
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
    
        // Add chain sequence methods to the `lodash` wrapper.
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
    
        // Add lazy aliases.
        lodash.prototype.first = lodash.prototype.head;
    
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      });
    
      /*--------------------------------------------------------------------------*/
    
      // Export lodash.
      var _ = runInContext();
    
      // Some AMD build optimizers, like r.js, check for condition patterns like:
      if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        // Expose Lodash on the global object to prevent errors when Lodash is
        // loaded by a script tag in the presence of an AMD loader.
        // See http://requirejs.org/docs/errors.html#mismatch for more details.
        // Use `_.noConflict` to remove Lodash from the global object.
        root._ = _;
    
        // Define as an anonymous module so, through path mapping, it can be
        // referenced as the "underscore" module.
        define(function() {
          return _;
        });
      }
      // Check for `exports` after `define` in case a build optimizer adds it.
      else if (freeModule) {
        // Export for Node.js.
        (freeModule.exports = _)._ = _;
        // Export for CommonJS support.
        freeExports._ = _;
      }
      else {
        // Export to the global object.
        root._ = _;
      }
    }.call(this));
    
    }).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    
    },{}],419:[function(require,module,exports){
    //! moment.js
    //! version : 2.30.1
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com
    
    ;(function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
        global.moment = factory()
    }(this, (function () { 'use strict';
    
        var hookCallback;
    
        function hooks() {
            return hookCallback.apply(null, arguments);
        }
    
        // This is done to register the method called with moment()
        // without creating circular dependencies.
        function setHookCallback(callback) {
            hookCallback = callback;
        }
    
        function isArray(input) {
            return (
                input instanceof Array ||
                Object.prototype.toString.call(input) === '[object Array]'
            );
        }
    
        function isObject(input) {
            // IE8 will treat undefined and null as object if it wasn't for
            // input != null
            return (
                input != null &&
                Object.prototype.toString.call(input) === '[object Object]'
            );
        }
    
        function hasOwnProp(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
        }
    
        function isObjectEmpty(obj) {
            if (Object.getOwnPropertyNames) {
                return Object.getOwnPropertyNames(obj).length === 0;
            } else {
                var k;
                for (k in obj) {
                    if (hasOwnProp(obj, k)) {
                        return false;
                    }
                }
                return true;
            }
        }
    
        function isUndefined(input) {
            return input === void 0;
        }
    
        function isNumber(input) {
            return (
                typeof input === 'number' ||
                Object.prototype.toString.call(input) === '[object Number]'
            );
        }
    
        function isDate(input) {
            return (
                input instanceof Date ||
                Object.prototype.toString.call(input) === '[object Date]'
            );
        }
    
        function map(arr, fn) {
            var res = [],
                i,
                arrLen = arr.length;
            for (i = 0; i < arrLen; ++i) {
                res.push(fn(arr[i], i));
            }
            return res;
        }
    
        function extend(a, b) {
            for (var i in b) {
                if (hasOwnProp(b, i)) {
                    a[i] = b[i];
                }
            }
    
            if (hasOwnProp(b, 'toString')) {
                a.toString = b.toString;
            }
    
            if (hasOwnProp(b, 'valueOf')) {
                a.valueOf = b.valueOf;
            }
    
            return a;
        }
    
        function createUTC(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, true).utc();
        }
    
        function defaultParsingFlags() {
            // We need to deep clone this object.
            return {
                empty: false,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: false,
                invalidEra: null,
                invalidMonth: null,
                invalidFormat: false,
                userInvalidated: false,
                iso: false,
                parsedDateParts: [],
                era: null,
                meridiem: null,
                rfc2822: false,
                weekdayMismatch: false,
            };
        }
    
        function getParsingFlags(m) {
            if (m._pf == null) {
                m._pf = defaultParsingFlags();
            }
            return m._pf;
        }
    
        var some;
        if (Array.prototype.some) {
            some = Array.prototype.some;
        } else {
            some = function (fun) {
                var t = Object(this),
                    len = t.length >>> 0,
                    i;
    
                for (i = 0; i < len; i++) {
                    if (i in t && fun.call(this, t[i], i, t)) {
                        return true;
                    }
                }
    
                return false;
            };
        }
    
        function isValid(m) {
            var flags = null,
                parsedParts = false,
                isNowValid = m._d && !isNaN(m._d.getTime());
            if (isNowValid) {
                flags = getParsingFlags(m);
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                });
                isNowValid =
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));
                if (m._strict) {
                    isNowValid =
                        isNowValid &&
                        flags.charsLeftOver === 0 &&
                        flags.unusedTokens.length === 0 &&
                        flags.bigHour === undefined;
                }
            }
            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
            return m._isValid;
        }
    
        function createInvalid(flags) {
            var m = createUTC(NaN);
            if (flags != null) {
                extend(getParsingFlags(m), flags);
            } else {
                getParsingFlags(m).userInvalidated = true;
            }
    
            return m;
        }
    
        // Plugins that add properties should also add the key here (null value),
        // so we can properly clone ourselves.
        var momentProperties = (hooks.momentProperties = []),
            updateInProgress = false;
    
        function copyConfig(to, from) {
            var i,
                prop,
                val,
                momentPropertiesLen = momentProperties.length;
    
            if (!isUndefined(from._isAMomentObject)) {
                to._isAMomentObject = from._isAMomentObject;
            }
            if (!isUndefined(from._i)) {
                to._i = from._i;
            }
            if (!isUndefined(from._f)) {
                to._f = from._f;
            }
            if (!isUndefined(from._l)) {
                to._l = from._l;
            }
            if (!isUndefined(from._strict)) {
                to._strict = from._strict;
            }
            if (!isUndefined(from._tzm)) {
                to._tzm = from._tzm;
            }
            if (!isUndefined(from._isUTC)) {
                to._isUTC = from._isUTC;
            }
            if (!isUndefined(from._offset)) {
                to._offset = from._offset;
            }
            if (!isUndefined(from._pf)) {
                to._pf = getParsingFlags(from);
            }
            if (!isUndefined(from._locale)) {
                to._locale = from._locale;
            }
    
            if (momentPropertiesLen > 0) {
                for (i = 0; i < momentPropertiesLen; i++) {
                    prop = momentProperties[i];
                    val = from[prop];
                    if (!isUndefined(val)) {
                        to[prop] = val;
                    }
                }
            }
    
            return to;
        }
    
        // Moment prototype object
        function Moment(config) {
            copyConfig(this, config);
            this._d = new Date(config._d != null ? config._d.getTime() : NaN);
            if (!this.isValid()) {
                this._d = new Date(NaN);
            }
            // Prevent infinite loop in case updateOffset creates new moment
            // objects.
            if (updateInProgress === false) {
                updateInProgress = true;
                hooks.updateOffset(this);
                updateInProgress = false;
            }
        }
    
        function isMoment(obj) {
            return (
                obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
            );
        }
    
        function warn(msg) {
            if (
                hooks.suppressDeprecationWarnings === false &&
                typeof console !== 'undefined' &&
                console.warn
            ) {
                console.warn('Deprecation warning: ' + msg);
            }
        }
    
        function deprecate(msg, fn) {
            var firstTime = true;
    
            return extend(function () {
                if (hooks.deprecationHandler != null) {
                    hooks.deprecationHandler(null, msg);
                }
                if (firstTime) {
                    var args = [],
                        arg,
                        i,
                        key,
                        argLen = arguments.length;
                    for (i = 0; i < argLen; i++) {
                        arg = '';
                        if (typeof arguments[i] === 'object') {
                            arg += '\n[' + i + '] ';
                            for (key in arguments[0]) {
                                if (hasOwnProp(arguments[0], key)) {
                                    arg += key + ': ' + arguments[0][key] + ', ';
                                }
                            }
                            arg = arg.slice(0, -2); // Remove trailing comma and space
                        } else {
                            arg = arguments[i];
                        }
                        args.push(arg);
                    }
                    warn(
                        msg +
                            '\nArguments: ' +
                            Array.prototype.slice.call(args).join('') +
                            '\n' +
                            new Error().stack
                    );
                    firstTime = false;
                }
                return fn.apply(this, arguments);
            }, fn);
        }
    
        var deprecations = {};
    
        function deprecateSimple(name, msg) {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(name, msg);
            }
            if (!deprecations[name]) {
                warn(msg);
                deprecations[name] = true;
            }
        }
    
        hooks.suppressDeprecationWarnings = false;
        hooks.deprecationHandler = null;
    
        function isFunction(input) {
            return (
                (typeof Function !== 'undefined' && input instanceof Function) ||
                Object.prototype.toString.call(input) === '[object Function]'
            );
        }
    
        function set(config) {
            var prop, i;
            for (i in config) {
                if (hasOwnProp(config, i)) {
                    prop = config[i];
                    if (isFunction(prop)) {
                        this[i] = prop;
                    } else {
                        this['_' + i] = prop;
                    }
                }
            }
            this._config = config;
            // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
            // TODO: Remove "ordinalParse" fallback in next major release.
            this._dayOfMonthOrdinalParseLenient = new RegExp(
                (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                    '|' +
                    /\d{1,2}/.source
            );
        }
    
        function mergeConfigs(parentConfig, childConfig) {
            var res = extend({}, parentConfig),
                prop;
            for (prop in childConfig) {
                if (hasOwnProp(childConfig, prop)) {
                    if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                        res[prop] = {};
                        extend(res[prop], parentConfig[prop]);
                        extend(res[prop], childConfig[prop]);
                    } else if (childConfig[prop] != null) {
                        res[prop] = childConfig[prop];
                    } else {
                        delete res[prop];
                    }
                }
            }
            for (prop in parentConfig) {
                if (
                    hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])
                ) {
                    // make sure changes to properties don't modify parent config
                    res[prop] = extend({}, res[prop]);
                }
            }
            return res;
        }
    
        function Locale(config) {
            if (config != null) {
                this.set(config);
            }
        }
    
        var keys;
    
        if (Object.keys) {
            keys = Object.keys;
        } else {
            keys = function (obj) {
                var i,
                    res = [];
                for (i in obj) {
                    if (hasOwnProp(obj, i)) {
                        res.push(i);
                    }
                }
                return res;
            };
        }
    
        var defaultCalendar = {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        };
    
        function calendar(key, mom, now) {
            var output = this._calendar[key] || this._calendar['sameElse'];
            return isFunction(output) ? output.call(mom, now) : output;
        }
    
        function zeroFill(number, targetLength, forceSign) {
            var absNumber = '' + Math.abs(number),
                zerosToFill = targetLength - absNumber.length,
                sign = number >= 0;
            return (
                (sign ? (forceSign ? '+' : '') : '-') +
                Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
                absNumber
            );
        }
    
        var formattingTokens =
                /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
            formatFunctions = {},
            formatTokenFunctions = {};
    
        // token:    'M'
        // padded:   ['MM', 2]
        // ordinal:  'Mo'
        // callback: function () { this.month() + 1 }
        function addFormatToken(token, padded, ordinal, callback) {
            var func = callback;
            if (typeof callback === 'string') {
                func = function () {
                    return this[callback]();
                };
            }
            if (token) {
                formatTokenFunctions[token] = func;
            }
            if (padded) {
                formatTokenFunctions[padded[0]] = function () {
                    return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                };
            }
            if (ordinal) {
                formatTokenFunctions[ordinal] = function () {
                    return this.localeData().ordinal(
                        func.apply(this, arguments),
                        token
                    );
                };
            }
        }
    
        function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
                return input.replace(/^\[|\]$/g, '');
            }
            return input.replace(/\\/g, '');
        }
    
        function makeFormatFunction(format) {
            var array = format.match(formattingTokens),
                i,
                length;
    
            for (i = 0, length = array.length; i < length; i++) {
                if (formatTokenFunctions[array[i]]) {
                    array[i] = formatTokenFunctions[array[i]];
                } else {
                    array[i] = removeFormattingTokens(array[i]);
                }
            }
    
            return function (mom) {
                var output = '',
                    i;
                for (i = 0; i < length; i++) {
                    output += isFunction(array[i])
                        ? array[i].call(mom, format)
                        : array[i];
                }
                return output;
            };
        }
    
        // format date using native date object
        function formatMoment(m, format) {
            if (!m.isValid()) {
                return m.localeData().invalidDate();
            }
    
            format = expandFormat(format, m.localeData());
            formatFunctions[format] =
                formatFunctions[format] || makeFormatFunction(format);
    
            return formatFunctions[format](m);
        }
    
        function expandFormat(format, locale) {
            var i = 5;
    
            function replaceLongDateFormatTokens(input) {
                return locale.longDateFormat(input) || input;
            }
    
            localFormattingTokens.lastIndex = 0;
            while (i >= 0 && localFormattingTokens.test(format)) {
                format = format.replace(
                    localFormattingTokens,
                    replaceLongDateFormatTokens
                );
                localFormattingTokens.lastIndex = 0;
                i -= 1;
            }
    
            return format;
        }
    
        var defaultLongDateFormat = {
            LTS: 'h:mm:ss A',
            LT: 'h:mm A',
            L: 'MM/DD/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A',
        };
    
        function longDateFormat(key) {
            var format = this._longDateFormat[key],
                formatUpper = this._longDateFormat[key.toUpperCase()];
    
            if (format || !formatUpper) {
                return format;
            }
    
            this._longDateFormat[key] = formatUpper
                .match(formattingTokens)
                .map(function (tok) {
                    if (
                        tok === 'MMMM' ||
                        tok === 'MM' ||
                        tok === 'DD' ||
                        tok === 'dddd'
                    ) {
                        return tok.slice(1);
                    }
                    return tok;
                })
                .join('');
    
            return this._longDateFormat[key];
        }
    
        var defaultInvalidDate = 'Invalid date';
    
        function invalidDate() {
            return this._invalidDate;
        }
    
        var defaultOrdinal = '%d',
            defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    
        function ordinal(number) {
            return this._ordinal.replace('%d', number);
        }
    
        var defaultRelativeTime = {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            w: 'a week',
            ww: '%d weeks',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        };
    
        function relativeTime(number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return isFunction(output)
                ? output(number, withoutSuffix, string, isFuture)
                : output.replace(/%d/i, number);
        }
    
        function pastFuture(diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return isFunction(format) ? format(output) : format.replace(/%s/i, output);
        }
    
        var aliases = {
            D: 'date',
            dates: 'date',
            date: 'date',
            d: 'day',
            days: 'day',
            day: 'day',
            e: 'weekday',
            weekdays: 'weekday',
            weekday: 'weekday',
            E: 'isoWeekday',
            isoweekdays: 'isoWeekday',
            isoweekday: 'isoWeekday',
            DDD: 'dayOfYear',
            dayofyears: 'dayOfYear',
            dayofyear: 'dayOfYear',
            h: 'hour',
            hours: 'hour',
            hour: 'hour',
            ms: 'millisecond',
            milliseconds: 'millisecond',
            millisecond: 'millisecond',
            m: 'minute',
            minutes: 'minute',
            minute: 'minute',
            M: 'month',
            months: 'month',
            month: 'month',
            Q: 'quarter',
            quarters: 'quarter',
            quarter: 'quarter',
            s: 'second',
            seconds: 'second',
            second: 'second',
            gg: 'weekYear',
            weekyears: 'weekYear',
            weekyear: 'weekYear',
            GG: 'isoWeekYear',
            isoweekyears: 'isoWeekYear',
            isoweekyear: 'isoWeekYear',
            w: 'week',
            weeks: 'week',
            week: 'week',
            W: 'isoWeek',
            isoweeks: 'isoWeek',
            isoweek: 'isoWeek',
            y: 'year',
            years: 'year',
            year: 'year',
        };
    
        function normalizeUnits(units) {
            return typeof units === 'string'
                ? aliases[units] || aliases[units.toLowerCase()]
                : undefined;
        }
    
        function normalizeObjectUnits(inputObject) {
            var normalizedInput = {},
                normalizedProp,
                prop;
    
            for (prop in inputObject) {
                if (hasOwnProp(inputObject, prop)) {
                    normalizedProp = normalizeUnits(prop);
                    if (normalizedProp) {
                        normalizedInput[normalizedProp] = inputObject[prop];
                    }
                }
            }
    
            return normalizedInput;
        }
    
        var priorities = {
            date: 9,
            day: 11,
            weekday: 11,
            isoWeekday: 11,
            dayOfYear: 4,
            hour: 13,
            millisecond: 16,
            minute: 14,
            month: 8,
            quarter: 7,
            second: 15,
            weekYear: 1,
            isoWeekYear: 1,
            week: 5,
            isoWeek: 5,
            year: 1,
        };
    
        function getPrioritizedUnits(unitsObj) {
            var units = [],
                u;
            for (u in unitsObj) {
                if (hasOwnProp(unitsObj, u)) {
                    units.push({ unit: u, priority: priorities[u] });
                }
            }
            units.sort(function (a, b) {
                return a.priority - b.priority;
            });
            return units;
        }
    
        var match1 = /\d/, //       0 - 9
            match2 = /\d\d/, //      00 - 99
            match3 = /\d{3}/, //     000 - 999
            match4 = /\d{4}/, //    0000 - 9999
            match6 = /[+-]?\d{6}/, // -999999 - 999999
            match1to2 = /\d\d?/, //       0 - 99
            match3to4 = /\d\d\d\d?/, //     999 - 9999
            match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
            match1to3 = /\d{1,3}/, //       0 - 999
            match1to4 = /\d{1,4}/, //       0 - 9999
            match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
            matchUnsigned = /\d+/, //       0 - inf
            matchSigned = /[+-]?\d+/, //    -inf - inf
            matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
            matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
            matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
            // any word (or two) characters or numbers including two/three word month in arabic.
            // includes scottish gaelic two word and hyphenated months
            matchWord =
                /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
            match1to2NoLeadingZero = /^[1-9]\d?/, //         1-99
            match1to2HasZero = /^([1-9]\d|\d)/, //           0-99
            regexes;
    
        regexes = {};
    
        function addRegexToken(token, regex, strictRegex) {
            regexes[token] = isFunction(regex)
                ? regex
                : function (isStrict, localeData) {
                      return isStrict && strictRegex ? strictRegex : regex;
                  };
        }
    
        function getParseRegexForToken(token, config) {
            if (!hasOwnProp(regexes, token)) {
                return new RegExp(unescapeFormat(token));
            }
    
            return regexes[token](config._strict, config._locale);
        }
    
        // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
        function unescapeFormat(s) {
            return regexEscape(
                s
                    .replace('\\', '')
                    .replace(
                        /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
                        function (matched, p1, p2, p3, p4) {
                            return p1 || p2 || p3 || p4;
                        }
                    )
            );
        }
    
        function regexEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        }
    
        function absFloor(number) {
            if (number < 0) {
                // -0 -> 0
                return Math.ceil(number) || 0;
            } else {
                return Math.floor(number);
            }
        }
    
        function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion,
                value = 0;
    
            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                value = absFloor(coercedNumber);
            }
    
            return value;
        }
    
        var tokens = {};
    
        function addParseToken(token, callback) {
            var i,
                func = callback,
                tokenLen;
            if (typeof token === 'string') {
                token = [token];
            }
            if (isNumber(callback)) {
                func = function (input, array) {
                    array[callback] = toInt(input);
                };
            }
            tokenLen = token.length;
            for (i = 0; i < tokenLen; i++) {
                tokens[token[i]] = func;
            }
        }
    
        function addWeekParseToken(token, callback) {
            addParseToken(token, function (input, array, config, token) {
                config._w = config._w || {};
                callback(input, config._w, config, token);
            });
        }
    
        function addTimeToArrayFromToken(token, input, config) {
            if (input != null && hasOwnProp(tokens, token)) {
                tokens[token](input, config._a, config, token);
            }
        }
    
        function isLeapYear(year) {
            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
        }
    
        var YEAR = 0,
            MONTH = 1,
            DATE = 2,
            HOUR = 3,
            MINUTE = 4,
            SECOND = 5,
            MILLISECOND = 6,
            WEEK = 7,
            WEEKDAY = 8;
    
        // FORMATTING
    
        addFormatToken('Y', 0, 0, function () {
            var y = this.year();
            return y <= 9999 ? zeroFill(y, 4) : '+' + y;
        });
    
        addFormatToken(0, ['YY', 2], 0, function () {
            return this.year() % 100;
        });
    
        addFormatToken(0, ['YYYY', 4], 0, 'year');
        addFormatToken(0, ['YYYYY', 5], 0, 'year');
        addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
    
        // PARSING
    
        addRegexToken('Y', matchSigned);
        addRegexToken('YY', match1to2, match2);
        addRegexToken('YYYY', match1to4, match4);
        addRegexToken('YYYYY', match1to6, match6);
        addRegexToken('YYYYYY', match1to6, match6);
    
        addParseToken(['YYYYY', 'YYYYYY'], YEAR);
        addParseToken('YYYY', function (input, array) {
            array[YEAR] =
                input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
        });
        addParseToken('YY', function (input, array) {
            array[YEAR] = hooks.parseTwoDigitYear(input);
        });
        addParseToken('Y', function (input, array) {
            array[YEAR] = parseInt(input, 10);
        });
    
        // HELPERS
    
        function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
        }
    
        // HOOKS
    
        hooks.parseTwoDigitYear = function (input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
        };
    
        // MOMENTS
    
        var getSetYear = makeGetSet('FullYear', true);
    
        function getIsLeapYear() {
            return isLeapYear(this.year());
        }
    
        function makeGetSet(unit, keepTime) {
            return function (value) {
                if (value != null) {
                    set$1(this, unit, value);
                    hooks.updateOffset(this, keepTime);
                    return this;
                } else {
                    return get(this, unit);
                }
            };
        }
    
        function get(mom, unit) {
            if (!mom.isValid()) {
                return NaN;
            }
    
            var d = mom._d,
                isUTC = mom._isUTC;
    
            switch (unit) {
                case 'Milliseconds':
                    return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
                case 'Seconds':
                    return isUTC ? d.getUTCSeconds() : d.getSeconds();
                case 'Minutes':
                    return isUTC ? d.getUTCMinutes() : d.getMinutes();
                case 'Hours':
                    return isUTC ? d.getUTCHours() : d.getHours();
                case 'Date':
                    return isUTC ? d.getUTCDate() : d.getDate();
                case 'Day':
                    return isUTC ? d.getUTCDay() : d.getDay();
                case 'Month':
                    return isUTC ? d.getUTCMonth() : d.getMonth();
                case 'FullYear':
                    return isUTC ? d.getUTCFullYear() : d.getFullYear();
                default:
                    return NaN; // Just in case
            }
        }
    
        function set$1(mom, unit, value) {
            var d, isUTC, year, month, date;
    
            if (!mom.isValid() || isNaN(value)) {
                return;
            }
    
            d = mom._d;
            isUTC = mom._isUTC;
    
            switch (unit) {
                case 'Milliseconds':
                    return void (isUTC
                        ? d.setUTCMilliseconds(value)
                        : d.setMilliseconds(value));
                case 'Seconds':
                    return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
                case 'Minutes':
                    return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
                case 'Hours':
                    return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
                case 'Date':
                    return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
                // case 'Day': // Not real
                //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));
                // case 'Month': // Not used because we need to pass two variables
                //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));
                case 'FullYear':
                    break; // See below ...
                default:
                    return; // Just in case
            }
    
            year = value;
            month = mom.month();
            date = mom.date();
            date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
            void (isUTC
                ? d.setUTCFullYear(year, month, date)
                : d.setFullYear(year, month, date));
        }
    
        // MOMENTS
    
        function stringGet(units) {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units]();
            }
            return this;
        }
    
        function stringSet(units, value) {
            if (typeof units === 'object') {
                units = normalizeObjectUnits(units);
                var prioritized = getPrioritizedUnits(units),
                    i,
                    prioritizedLen = prioritized.length;
                for (i = 0; i < prioritizedLen; i++) {
                    this[prioritized[i].unit](units[prioritized[i].unit]);
                }
            } else {
                units = normalizeUnits(units);
                if (isFunction(this[units])) {
                    return this[units](value);
                }
            }
            return this;
        }
    
        function mod(n, x) {
            return ((n % x) + x) % x;
        }
    
        var indexOf;
    
        if (Array.prototype.indexOf) {
            indexOf = Array.prototype.indexOf;
        } else {
            indexOf = function (o) {
                // I know
                var i;
                for (i = 0; i < this.length; ++i) {
                    if (this[i] === o) {
                        return i;
                    }
                }
                return -1;
            };
        }
    
        function daysInMonth(year, month) {
            if (isNaN(year) || isNaN(month)) {
                return NaN;
            }
            var modMonth = mod(month, 12);
            year += (month - modMonth) / 12;
            return modMonth === 1
                ? isLeapYear(year)
                    ? 29
                    : 28
                : 31 - ((modMonth % 7) % 2);
        }
    
        // FORMATTING
    
        addFormatToken('M', ['MM', 2], 'Mo', function () {
            return this.month() + 1;
        });
    
        addFormatToken('MMM', 0, 0, function (format) {
            return this.localeData().monthsShort(this, format);
        });
    
        addFormatToken('MMMM', 0, 0, function (format) {
            return this.localeData().months(this, format);
        });
    
        // PARSING
    
        addRegexToken('M', match1to2, match1to2NoLeadingZero);
        addRegexToken('MM', match1to2, match2);
        addRegexToken('MMM', function (isStrict, locale) {
            return locale.monthsShortRegex(isStrict);
        });
        addRegexToken('MMMM', function (isStrict, locale) {
            return locale.monthsRegex(isStrict);
        });
    
        addParseToken(['M', 'MM'], function (input, array) {
            array[MONTH] = toInt(input) - 1;
        });
    
        addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
            var month = config._locale.monthsParse(input, token, config._strict);
            // if we didn't find a month name, mark the date as invalid.
            if (month != null) {
                array[MONTH] = month;
            } else {
                getParsingFlags(config).invalidMonth = input;
            }
        });
    
        // LOCALES
    
        var defaultLocaleMonths =
                'January_February_March_April_May_June_July_August_September_October_November_December'.split(
                    '_'
                ),
            defaultLocaleMonthsShort =
                'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
            MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
            defaultMonthsShortRegex = matchWord,
            defaultMonthsRegex = matchWord;
    
        function localeMonths(m, format) {
            if (!m) {
                return isArray(this._months)
                    ? this._months
                    : this._months['standalone'];
            }
            return isArray(this._months)
                ? this._months[m.month()]
                : this._months[
                      (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                          ? 'format'
                          : 'standalone'
                  ][m.month()];
        }
    
        function localeMonthsShort(m, format) {
            if (!m) {
                return isArray(this._monthsShort)
                    ? this._monthsShort
                    : this._monthsShort['standalone'];
            }
            return isArray(this._monthsShort)
                ? this._monthsShort[m.month()]
                : this._monthsShort[
                      MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
                  ][m.month()];
        }
    
        function handleStrictParse(monthName, format, strict) {
            var i,
                ii,
                mom,
                llc = monthName.toLocaleLowerCase();
            if (!this._monthsParse) {
                // this is not used
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
                for (i = 0; i < 12; ++i) {
                    mom = createUTC([2000, i]);
                    this._shortMonthsParse[i] = this.monthsShort(
                        mom,
                        ''
                    ).toLocaleLowerCase();
                    this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
                }
            }
    
            if (strict) {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }
    
        function localeMonthsParse(monthName, format, strict) {
            var i, mom, regex;
    
            if (this._monthsParseExact) {
                return handleStrictParse.call(this, monthName, format, strict);
            }
    
            if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
            }
    
            // TODO: add sorting
            // Sorting makes sure if one month (or abbr) is a prefix of another
            // see sorting in computeMonthsParse
            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                if (strict && !this._longMonthsParse[i]) {
                    this._longMonthsParse[i] = new RegExp(
                        '^' + this.months(mom, '').replace('.', '') + '$',
                        'i'
                    );
                    this._shortMonthsParse[i] = new RegExp(
                        '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                        'i'
                    );
                }
                if (!strict && !this._monthsParse[i]) {
                    regex =
                        '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (
                    strict &&
                    format === 'MMMM' &&
                    this._longMonthsParse[i].test(monthName)
                ) {
                    return i;
                } else if (
                    strict &&
                    format === 'MMM' &&
                    this._shortMonthsParse[i].test(monthName)
                ) {
                    return i;
                } else if (!strict && this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        }
    
        // MOMENTS
    
        function setMonth(mom, value) {
            if (!mom.isValid()) {
                // No op
                return mom;
            }
    
            if (typeof value === 'string') {
                if (/^\d+$/.test(value)) {
                    value = toInt(value);
                } else {
                    value = mom.localeData().monthsParse(value);
                    // TODO: Another silent failure?
                    if (!isNumber(value)) {
                        return mom;
                    }
                }
            }
    
            var month = value,
                date = mom.date();
    
            date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
            void (mom._isUTC
                ? mom._d.setUTCMonth(month, date)
                : mom._d.setMonth(month, date));
            return mom;
        }
    
        function getSetMonth(value) {
            if (value != null) {
                setMonth(this, value);
                hooks.updateOffset(this, true);
                return this;
            } else {
                return get(this, 'Month');
            }
        }
    
        function getDaysInMonth() {
            return daysInMonth(this.year(), this.month());
        }
    
        function monthsShortRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }
                if (isStrict) {
                    return this._monthsShortStrictRegex;
                } else {
                    return this._monthsShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsShortRegex')) {
                    this._monthsShortRegex = defaultMonthsShortRegex;
                }
                return this._monthsShortStrictRegex && isStrict
                    ? this._monthsShortStrictRegex
                    : this._monthsShortRegex;
            }
        }
    
        function monthsRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }
                if (isStrict) {
                    return this._monthsStrictRegex;
                } else {
                    return this._monthsRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    this._monthsRegex = defaultMonthsRegex;
                }
                return this._monthsStrictRegex && isStrict
                    ? this._monthsStrictRegex
                    : this._monthsRegex;
            }
        }
    
        function computeMonthsParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }
    
            var shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom,
                shortP,
                longP;
            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                shortP = regexEscape(this.monthsShort(mom, ''));
                longP = regexEscape(this.months(mom, ''));
                shortPieces.push(shortP);
                longPieces.push(longP);
                mixedPieces.push(longP);
                mixedPieces.push(shortP);
            }
            // Sorting makes sure if one month (or abbr) is a prefix of another it
            // will match the longer piece.
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
    
            this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._monthsShortRegex = this._monthsRegex;
            this._monthsStrictRegex = new RegExp(
                '^(' + longPieces.join('|') + ')',
                'i'
            );
            this._monthsShortStrictRegex = new RegExp(
                '^(' + shortPieces.join('|') + ')',
                'i'
            );
        }
    
        function createDate(y, m, d, h, M, s, ms) {
            // can't just apply() to create a date:
            // https://stackoverflow.com/q/181348
            var date;
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                date = new Date(y + 400, m, d, h, M, s, ms);
                if (isFinite(date.getFullYear())) {
                    date.setFullYear(y);
                }
            } else {
                date = new Date(y, m, d, h, M, s, ms);
            }
    
            return date;
        }
    
        function createUTCDate(y) {
            var date, args;
            // the Date.UTC function remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                args = Array.prototype.slice.call(arguments);
                // preserve leap years using a full 400 year cycle, then reset
                args[0] = y + 400;
                date = new Date(Date.UTC.apply(null, args));
                if (isFinite(date.getUTCFullYear())) {
                    date.setUTCFullYear(y);
                }
            } else {
                date = new Date(Date.UTC.apply(null, arguments));
            }
    
            return date;
        }
    
        // start-of-first-week - start-of-year
        function firstWeekOffset(year, dow, doy) {
            var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
                fwd = 7 + dow - doy,
                // first-week day local weekday -- which local weekday is fwd
                fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
    
            return -fwdlw + fwd - 1;
        }
    
        // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
        function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
            var localWeekday = (7 + weekday - dow) % 7,
                weekOffset = firstWeekOffset(year, dow, doy),
                dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                resYear,
                resDayOfYear;
    
            if (dayOfYear <= 0) {
                resYear = year - 1;
                resDayOfYear = daysInYear(resYear) + dayOfYear;
            } else if (dayOfYear > daysInYear(year)) {
                resYear = year + 1;
                resDayOfYear = dayOfYear - daysInYear(year);
            } else {
                resYear = year;
                resDayOfYear = dayOfYear;
            }
    
            return {
                year: resYear,
                dayOfYear: resDayOfYear,
            };
        }
    
        function weekOfYear(mom, dow, doy) {
            var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                resWeek,
                resYear;
    
            if (week < 1) {
                resYear = mom.year() - 1;
                resWeek = week + weeksInYear(resYear, dow, doy);
            } else if (week > weeksInYear(mom.year(), dow, doy)) {
                resWeek = week - weeksInYear(mom.year(), dow, doy);
                resYear = mom.year() + 1;
            } else {
                resYear = mom.year();
                resWeek = week;
            }
    
            return {
                week: resWeek,
                year: resYear,
            };
        }
    
        function weeksInYear(year, dow, doy) {
            var weekOffset = firstWeekOffset(year, dow, doy),
                weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
        }
    
        // FORMATTING
    
        addFormatToken('w', ['ww', 2], 'wo', 'week');
        addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
    
        // PARSING
    
        addRegexToken('w', match1to2, match1to2NoLeadingZero);
        addRegexToken('ww', match1to2, match2);
        addRegexToken('W', match1to2, match1to2NoLeadingZero);
        addRegexToken('WW', match1to2, match2);
    
        addWeekParseToken(
            ['w', 'ww', 'W', 'WW'],
            function (input, week, config, token) {
                week[token.substr(0, 1)] = toInt(input);
            }
        );
    
        // HELPERS
    
        // LOCALES
    
        function localeWeek(mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        }
    
        var defaultLocaleWeek = {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        };
    
        function localeFirstDayOfWeek() {
            return this._week.dow;
        }
    
        function localeFirstDayOfYear() {
            return this._week.doy;
        }
    
        // MOMENTS
    
        function getSetWeek(input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        }
    
        function getSetISOWeek(input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        }
    
        // FORMATTING
    
        addFormatToken('d', 0, 'do', 'day');
    
        addFormatToken('dd', 0, 0, function (format) {
            return this.localeData().weekdaysMin(this, format);
        });
    
        addFormatToken('ddd', 0, 0, function (format) {
            return this.localeData().weekdaysShort(this, format);
        });
    
        addFormatToken('dddd', 0, 0, function (format) {
            return this.localeData().weekdays(this, format);
        });
    
        addFormatToken('e', 0, 0, 'weekday');
        addFormatToken('E', 0, 0, 'isoWeekday');
    
        // PARSING
    
        addRegexToken('d', match1to2);
        addRegexToken('e', match1to2);
        addRegexToken('E', match1to2);
        addRegexToken('dd', function (isStrict, locale) {
            return locale.weekdaysMinRegex(isStrict);
        });
        addRegexToken('ddd', function (isStrict, locale) {
            return locale.weekdaysShortRegex(isStrict);
        });
        addRegexToken('dddd', function (isStrict, locale) {
            return locale.weekdaysRegex(isStrict);
        });
    
        addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
            var weekday = config._locale.weekdaysParse(input, token, config._strict);
            // if we didn't get a weekday name, mark the date as invalid
            if (weekday != null) {
                week.d = weekday;
            } else {
                getParsingFlags(config).invalidWeekday = input;
            }
        });
    
        addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
            week[token] = toInt(input);
        });
    
        // HELPERS
    
        function parseWeekday(input, locale) {
            if (typeof input !== 'string') {
                return input;
            }
    
            if (!isNaN(input)) {
                return parseInt(input, 10);
            }
    
            input = locale.weekdaysParse(input);
            if (typeof input === 'number') {
                return input;
            }
    
            return null;
        }
    
        function parseIsoWeekday(input, locale) {
            if (typeof input === 'string') {
                return locale.weekdaysParse(input) % 7 || 7;
            }
            return isNaN(input) ? null : input;
        }
    
        // LOCALES
        function shiftWeekdays(ws, n) {
            return ws.slice(n, 7).concat(ws.slice(0, n));
        }
    
        var defaultLocaleWeekdays =
                'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
            defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
            defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
            defaultWeekdaysRegex = matchWord,
            defaultWeekdaysShortRegex = matchWord,
            defaultWeekdaysMinRegex = matchWord;
    
        function localeWeekdays(m, format) {
            var weekdays = isArray(this._weekdays)
                ? this._weekdays
                : this._weekdays[
                      m && m !== true && this._weekdays.isFormat.test(format)
                          ? 'format'
                          : 'standalone'
                  ];
            return m === true
                ? shiftWeekdays(weekdays, this._week.dow)
                : m
                  ? weekdays[m.day()]
                  : weekdays;
        }
    
        function localeWeekdaysShort(m) {
            return m === true
                ? shiftWeekdays(this._weekdaysShort, this._week.dow)
                : m
                  ? this._weekdaysShort[m.day()]
                  : this._weekdaysShort;
        }
    
        function localeWeekdaysMin(m) {
            return m === true
                ? shiftWeekdays(this._weekdaysMin, this._week.dow)
                : m
                  ? this._weekdaysMin[m.day()]
                  : this._weekdaysMin;
        }
    
        function handleStrictParse$1(weekdayName, format, strict) {
            var i,
                ii,
                mom,
                llc = weekdayName.toLocaleLowerCase();
            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._minWeekdaysParse = [];
    
                for (i = 0; i < 7; ++i) {
                    mom = createUTC([2000, 1]).day(i);
                    this._minWeekdaysParse[i] = this.weekdaysMin(
                        mom,
                        ''
                    ).toLocaleLowerCase();
                    this._shortWeekdaysParse[i] = this.weekdaysShort(
                        mom,
                        ''
                    ).toLocaleLowerCase();
                    this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
                }
            }
    
            if (strict) {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }
    
        function localeWeekdaysParse(weekdayName, format, strict) {
            var i, mom, regex;
    
            if (this._weekdaysParseExact) {
                return handleStrictParse$1.call(this, weekdayName, format, strict);
            }
    
            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._minWeekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._fullWeekdaysParse = [];
            }
    
            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
    
                mom = createUTC([2000, 1]).day(i);
                if (strict && !this._fullWeekdaysParse[i]) {
                    this._fullWeekdaysParse[i] = new RegExp(
                        '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                        'i'
                    );
                    this._shortWeekdaysParse[i] = new RegExp(
                        '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                        'i'
                    );
                    this._minWeekdaysParse[i] = new RegExp(
                        '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                        'i'
                    );
                }
                if (!this._weekdaysParse[i]) {
                    regex =
                        '^' +
                        this.weekdays(mom, '') +
                        '|^' +
                        this.weekdaysShort(mom, '') +
                        '|^' +
                        this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (
                    strict &&
                    format === 'dddd' &&
                    this._fullWeekdaysParse[i].test(weekdayName)
                ) {
                    return i;
                } else if (
                    strict &&
                    format === 'ddd' &&
                    this._shortWeekdaysParse[i].test(weekdayName)
                ) {
                    return i;
                } else if (
                    strict &&
                    format === 'dd' &&
                    this._minWeekdaysParse[i].test(weekdayName)
                ) {
                    return i;
                } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        }
    
        // MOMENTS
    
        function getSetDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
    
            var day = get(this, 'Day');
            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        }
    
        function getSetLocaleDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        }
    
        function getSetISODayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
    
            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.
    
            if (input != null) {
                var weekday = parseIsoWeekday(input, this.localeData());
                return this.day(this.day() % 7 ? weekday : weekday - 7);
            } else {
                return this.day() || 7;
            }
        }
    
        function weekdaysRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysStrictRegex;
                } else {
                    return this._weekdaysRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    this._weekdaysRegex = defaultWeekdaysRegex;
                }
                return this._weekdaysStrictRegex && isStrict
                    ? this._weekdaysStrictRegex
                    : this._weekdaysRegex;
            }
        }
    
        function weekdaysShortRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysShortStrictRegex;
                } else {
                    return this._weekdaysShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                    this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                }
                return this._weekdaysShortStrictRegex && isStrict
                    ? this._weekdaysShortStrictRegex
                    : this._weekdaysShortRegex;
            }
        }
    
        function weekdaysMinRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysMinStrictRegex;
                } else {
                    return this._weekdaysMinRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                    this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                }
                return this._weekdaysMinStrictRegex && isStrict
                    ? this._weekdaysMinStrictRegex
                    : this._weekdaysMinRegex;
            }
        }
    
        function computeWeekdaysParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }
    
            var minPieces = [],
                shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom,
                minp,
                shortp,
                longp;
            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, 1]).day(i);
                minp = regexEscape(this.weekdaysMin(mom, ''));
                shortp = regexEscape(this.weekdaysShort(mom, ''));
                longp = regexEscape(this.weekdays(mom, ''));
                minPieces.push(minp);
                shortPieces.push(shortp);
                longPieces.push(longp);
                mixedPieces.push(minp);
                mixedPieces.push(shortp);
                mixedPieces.push(longp);
            }
            // Sorting makes sure if one weekday (or abbr) is a prefix of another it
            // will match the longer piece.
            minPieces.sort(cmpLenRev);
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
    
            this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._weekdaysShortRegex = this._weekdaysRegex;
            this._weekdaysMinRegex = this._weekdaysRegex;
    
            this._weekdaysStrictRegex = new RegExp(
                '^(' + longPieces.join('|') + ')',
                'i'
            );
            this._weekdaysShortStrictRegex = new RegExp(
                '^(' + shortPieces.join('|') + ')',
                'i'
            );
            this._weekdaysMinStrictRegex = new RegExp(
                '^(' + minPieces.join('|') + ')',
                'i'
            );
        }
    
        // FORMATTING
    
        function hFormat() {
            return this.hours() % 12 || 12;
        }
    
        function kFormat() {
            return this.hours() || 24;
        }
    
        addFormatToken('H', ['HH', 2], 0, 'hour');
        addFormatToken('h', ['hh', 2], 0, hFormat);
        addFormatToken('k', ['kk', 2], 0, kFormat);
    
        addFormatToken('hmm', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
        });
    
        addFormatToken('hmmss', 0, 0, function () {
            return (
                '' +
                hFormat.apply(this) +
                zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2)
            );
        });
    
        addFormatToken('Hmm', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2);
        });
    
        addFormatToken('Hmmss', 0, 0, function () {
            return (
                '' +
                this.hours() +
                zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2)
            );
        });
    
        function meridiem(token, lowercase) {
            addFormatToken(token, 0, 0, function () {
                return this.localeData().meridiem(
                    this.hours(),
                    this.minutes(),
                    lowercase
                );
            });
        }
    
        meridiem('a', true);
        meridiem('A', false);
    
        // PARSING
    
        function matchMeridiem(isStrict, locale) {
            return locale._meridiemParse;
        }
    
        addRegexToken('a', matchMeridiem);
        addRegexToken('A', matchMeridiem);
        addRegexToken('H', match1to2, match1to2HasZero);
        addRegexToken('h', match1to2, match1to2NoLeadingZero);
        addRegexToken('k', match1to2, match1to2NoLeadingZero);
        addRegexToken('HH', match1to2, match2);
        addRegexToken('hh', match1to2, match2);
        addRegexToken('kk', match1to2, match2);
    
        addRegexToken('hmm', match3to4);
        addRegexToken('hmmss', match5to6);
        addRegexToken('Hmm', match3to4);
        addRegexToken('Hmmss', match5to6);
    
        addParseToken(['H', 'HH'], HOUR);
        addParseToken(['k', 'kk'], function (input, array, config) {
            var kInput = toInt(input);
            array[HOUR] = kInput === 24 ? 0 : kInput;
        });
        addParseToken(['a', 'A'], function (input, array, config) {
            config._isPm = config._locale.isPM(input);
            config._meridiem = input;
        });
        addParseToken(['h', 'hh'], function (input, array, config) {
            array[HOUR] = toInt(input);
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmmss', function (input, array, config) {
            var pos1 = input.length - 4,
                pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('Hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
        });
        addParseToken('Hmmss', function (input, array, config) {
            var pos1 = input.length - 4,
                pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
        });
    
        // LOCALES
    
        function localeIsPM(input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return (input + '').toLowerCase().charAt(0) === 'p';
        }
    
        var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
            // Setting the hour should keep the time, because the user explicitly
            // specified which hour they want. So trying to maintain the same hour (in
            // a new timezone) makes sense. Adding/subtracting hours does not follow
            // this rule.
            getSetHour = makeGetSet('Hours', true);
    
        function localeMeridiem(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        }
    
        var baseConfig = {
            calendar: defaultCalendar,
            longDateFormat: defaultLongDateFormat,
            invalidDate: defaultInvalidDate,
            ordinal: defaultOrdinal,
            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
            relativeTime: defaultRelativeTime,
    
            months: defaultLocaleMonths,
            monthsShort: defaultLocaleMonthsShort,
    
            week: defaultLocaleWeek,
    
            weekdays: defaultLocaleWeekdays,
            weekdaysMin: defaultLocaleWeekdaysMin,
            weekdaysShort: defaultLocaleWeekdaysShort,
    
            meridiemParse: defaultLocaleMeridiemParse,
        };
    
        // internal storage for locale config files
        var locales = {},
            localeFamilies = {},
            globalLocale;
    
        function commonPrefix(arr1, arr2) {
            var i,
                minl = Math.min(arr1.length, arr2.length);
            for (i = 0; i < minl; i += 1) {
                if (arr1[i] !== arr2[i]) {
                    return i;
                }
            }
            return minl;
        }
    
        function normalizeLocale(key) {
            return key ? key.toLowerCase().replace('_', '-') : key;
        }
    
        // pick the locale from the array
        // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
        // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
        function chooseLocale(names) {
            var i = 0,
                j,
                next,
                locale,
                split;
    
            while (i < names.length) {
                split = normalizeLocale(names[i]).split('-');
                j = split.length;
                next = normalizeLocale(names[i + 1]);
                next = next ? next.split('-') : null;
                while (j > 0) {
                    locale = loadLocale(split.slice(0, j).join('-'));
                    if (locale) {
                        return locale;
                    }
                    if (
                        next &&
                        next.length >= j &&
                        commonPrefix(split, next) >= j - 1
                    ) {
                        //the next array item is better than a shallower substring of this one
                        break;
                    }
                    j--;
                }
                i++;
            }
            return globalLocale;
        }
    
        function isLocaleNameSane(name) {
            // Prevent names that look like filesystem paths, i.e contain '/' or '\'
            // Ensure name is available and function returns boolean
            return !!(name && name.match('^[^/\\\\]*$'));
        }
    
        function loadLocale(name) {
            var oldLocale = null,
                aliasedRequire;
            // TODO: Find a better way to register and load all the locales in Node
            if (
                locales[name] === undefined &&
                typeof module !== 'undefined' &&
                module &&
                module.exports &&
                isLocaleNameSane(name)
            ) {
                try {
                    oldLocale = globalLocale._abbr;
                    aliasedRequire = require;
                    aliasedRequire('./locale/' + name);
                    getSetGlobalLocale(oldLocale);
                } catch (e) {
                    // mark as not found to avoid repeating expensive file require call causing high CPU
                    // when trying to find en-US, en_US, en-us for every format call
                    locales[name] = null; // null means not found
                }
            }
            return locales[name];
        }
    
        // This function will load locale and then set the global locale.  If
        // no arguments are passed in, it will simply return the current global
        // locale key.
        function getSetGlobalLocale(key, values) {
            var data;
            if (key) {
                if (isUndefined(values)) {
                    data = getLocale(key);
                } else {
                    data = defineLocale(key, values);
                }
    
                if (data) {
                    // moment.duration._locale = moment._locale = data;
                    globalLocale = data;
                } else {
                    if (typeof console !== 'undefined' && console.warn) {
                        //warn user if arguments are passed but the locale could not be set
                        console.warn(
                            'Locale ' + key + ' not found. Did you forget to load it?'
                        );
                    }
                }
            }
    
            return globalLocale._abbr;
        }
    
        function defineLocale(name, config) {
            if (config !== null) {
                var locale,
                    parentConfig = baseConfig;
                config.abbr = name;
                if (locales[name] != null) {
                    deprecateSimple(
                        'defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                            'an existing locale. moment.defineLocale(localeName, ' +
                            'config) should only be used for creating a new locale ' +
                            'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                    );
                    parentConfig = locales[name]._config;
                } else if (config.parentLocale != null) {
                    if (locales[config.parentLocale] != null) {
                        parentConfig = locales[config.parentLocale]._config;
                    } else {
                        locale = loadLocale(config.parentLocale);
                        if (locale != null) {
                            parentConfig = locale._config;
                        } else {
                            if (!localeFamilies[config.parentLocale]) {
                                localeFamilies[config.parentLocale] = [];
                            }
                            localeFamilies[config.parentLocale].push({
                                name: name,
                                config: config,
                            });
                            return null;
                        }
                    }
                }
                locales[name] = new Locale(mergeConfigs(parentConfig, config));
    
                if (localeFamilies[name]) {
                    localeFamilies[name].forEach(function (x) {
                        defineLocale(x.name, x.config);
                    });
                }
    
                // backwards compat for now: also set the locale
                // make sure we set the locale AFTER all child locales have been
                // created, so we won't end up with the child locale set.
                getSetGlobalLocale(name);
    
                return locales[name];
            } else {
                // useful for testing
                delete locales[name];
                return null;
            }
        }
    
        function updateLocale(name, config) {
            if (config != null) {
                var locale,
                    tmpLocale,
                    parentConfig = baseConfig;
    
                if (locales[name] != null && locales[name].parentLocale != null) {
                    // Update existing child locale in-place to avoid memory-leaks
                    locales[name].set(mergeConfigs(locales[name]._config, config));
                } else {
                    // MERGE
                    tmpLocale = loadLocale(name);
                    if (tmpLocale != null) {
                        parentConfig = tmpLocale._config;
                    }
                    config = mergeConfigs(parentConfig, config);
                    if (tmpLocale == null) {
                        // updateLocale is called for creating a new locale
                        // Set abbr so it will have a name (getters return
                        // undefined otherwise).
                        config.abbr = name;
                    }
                    locale = new Locale(config);
                    locale.parentLocale = locales[name];
                    locales[name] = locale;
                }
    
                // backwards compat for now: also set the locale
                getSetGlobalLocale(name);
            } else {
                // pass null for config to unupdate, useful for tests
                if (locales[name] != null) {
                    if (locales[name].parentLocale != null) {
                        locales[name] = locales[name].parentLocale;
                        if (name === getSetGlobalLocale()) {
                            getSetGlobalLocale(name);
                        }
                    } else if (locales[name] != null) {
                        delete locales[name];
                    }
                }
            }
            return locales[name];
        }
    
        // returns locale data
        function getLocale(key) {
            var locale;
    
            if (key && key._locale && key._locale._abbr) {
                key = key._locale._abbr;
            }
    
            if (!key) {
                return globalLocale;
            }
    
            if (!isArray(key)) {
                //short-circuit everything else
                locale = loadLocale(key);
                if (locale) {
                    return locale;
                }
                key = [key];
            }
    
            return chooseLocale(key);
        }
    
        function listLocales() {
            return keys(locales);
        }
    
        function checkOverflow(m) {
            var overflow,
                a = m._a;
    
            if (a && getParsingFlags(m).overflow === -2) {
                overflow =
                    a[MONTH] < 0 || a[MONTH] > 11
                        ? MONTH
                        : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                          ? DATE
                          : a[HOUR] < 0 ||
                              a[HOUR] > 24 ||
                              (a[HOUR] === 24 &&
                                  (a[MINUTE] !== 0 ||
                                      a[SECOND] !== 0 ||
                                      a[MILLISECOND] !== 0))
                            ? HOUR
                            : a[MINUTE] < 0 || a[MINUTE] > 59
                              ? MINUTE
                              : a[SECOND] < 0 || a[SECOND] > 59
                                ? SECOND
                                : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                                  ? MILLISECOND
                                  : -1;
    
                if (
                    getParsingFlags(m)._overflowDayOfYear &&
                    (overflow < YEAR || overflow > DATE)
                ) {
                    overflow = DATE;
                }
                if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                    overflow = WEEK;
                }
                if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                    overflow = WEEKDAY;
                }
    
                getParsingFlags(m).overflow = overflow;
            }
    
            return m;
        }
    
        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        var extendedIsoRegex =
                /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            basicIsoRegex =
                /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
            isoDates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/],
                ['YYYYMM', /\d{6}/, false],
                ['YYYY', /\d{4}/, false],
            ],
            // iso time formats and regexes
            isoTimes = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/],
            ],
            aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
            // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
            rfc2822 =
                /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
            obsOffsets = {
                UT: 0,
                GMT: 0,
                EDT: -4 * 60,
                EST: -5 * 60,
                CDT: -5 * 60,
                CST: -6 * 60,
                MDT: -6 * 60,
                MST: -7 * 60,
                PDT: -7 * 60,
                PST: -8 * 60,
            };
    
        // date from iso format
        function configFromISO(config) {
            var i,
                l,
                string = config._i,
                match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                allowTime,
                dateFormat,
                timeFormat,
                tzFormat,
                isoDatesLen = isoDates.length,
                isoTimesLen = isoTimes.length;
    
            if (match) {
                getParsingFlags(config).iso = true;
                for (i = 0, l = isoDatesLen; i < l; i++) {
                    if (isoDates[i][1].exec(match[1])) {
                        dateFormat = isoDates[i][0];
                        allowTime = isoDates[i][2] !== false;
                        break;
                    }
                }
                if (dateFormat == null) {
                    config._isValid = false;
                    return;
                }
                if (match[3]) {
                    for (i = 0, l = isoTimesLen; i < l; i++) {
                        if (isoTimes[i][1].exec(match[3])) {
                            // match[2] should be 'T' or space
                            timeFormat = (match[2] || ' ') + isoTimes[i][0];
                            break;
                        }
                    }
                    if (timeFormat == null) {
                        config._isValid = false;
                        return;
                    }
                }
                if (!allowTime && timeFormat != null) {
                    config._isValid = false;
                    return;
                }
                if (match[4]) {
                    if (tzRegex.exec(match[4])) {
                        tzFormat = 'Z';
                    } else {
                        config._isValid = false;
                        return;
                    }
                }
                config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
                configFromStringAndFormat(config);
            } else {
                config._isValid = false;
            }
        }
    
        function extractFromRFC2822Strings(
            yearStr,
            monthStr,
            dayStr,
            hourStr,
            minuteStr,
            secondStr
        ) {
            var result = [
                untruncateYear(yearStr),
                defaultLocaleMonthsShort.indexOf(monthStr),
                parseInt(dayStr, 10),
                parseInt(hourStr, 10),
                parseInt(minuteStr, 10),
            ];
    
            if (secondStr) {
                result.push(parseInt(secondStr, 10));
            }
    
            return result;
        }
    
        function untruncateYear(yearStr) {
            var year = parseInt(yearStr, 10);
            if (year <= 49) {
                return 2000 + year;
            } else if (year <= 999) {
                return 1900 + year;
            }
            return year;
        }
    
        function preprocessRFC2822(s) {
            // Remove comments and folding whitespace and replace multiple-spaces with a single space
            return s
                .replace(/\([^()]*\)|[\n\t]/g, ' ')
                .replace(/(\s\s+)/g, ' ')
                .replace(/^\s\s*/, '')
                .replace(/\s\s*$/, '');
        }
    
        function checkWeekday(weekdayStr, parsedInput, config) {
            if (weekdayStr) {
                // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
                var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                    weekdayActual = new Date(
                        parsedInput[0],
                        parsedInput[1],
                        parsedInput[2]
                    ).getDay();
                if (weekdayProvided !== weekdayActual) {
                    getParsingFlags(config).weekdayMismatch = true;
                    config._isValid = false;
                    return false;
                }
            }
            return true;
        }
    
        function calculateOffset(obsOffset, militaryOffset, numOffset) {
            if (obsOffset) {
                return obsOffsets[obsOffset];
            } else if (militaryOffset) {
                // the only allowed military tz is Z
                return 0;
            } else {
                var hm = parseInt(numOffset, 10),
                    m = hm % 100,
                    h = (hm - m) / 100;
                return h * 60 + m;
            }
        }
    
        // date and time from ref 2822 format
        function configFromRFC2822(config) {
            var match = rfc2822.exec(preprocessRFC2822(config._i)),
                parsedArray;
            if (match) {
                parsedArray = extractFromRFC2822Strings(
                    match[4],
                    match[3],
                    match[2],
                    match[5],
                    match[6],
                    match[7]
                );
                if (!checkWeekday(match[1], parsedArray, config)) {
                    return;
                }
    
                config._a = parsedArray;
                config._tzm = calculateOffset(match[8], match[9], match[10]);
    
                config._d = createUTCDate.apply(null, config._a);
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    
                getParsingFlags(config).rfc2822 = true;
            } else {
                config._isValid = false;
            }
        }
    
        // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
        function configFromString(config) {
            var matched = aspNetJsonRegex.exec(config._i);
            if (matched !== null) {
                config._d = new Date(+matched[1]);
                return;
            }
    
            configFromISO(config);
            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }
    
            configFromRFC2822(config);
            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }
    
            if (config._strict) {
                config._isValid = false;
            } else {
                // Final attempt, use Input Fallback
                hooks.createFromInputFallback(config);
            }
        }
    
        hooks.createFromInputFallback = deprecate(
            'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
                'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
                'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
            function (config) {
                config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
            }
        );
    
        // Pick the first defined of two or three arguments.
        function defaults(a, b, c) {
            if (a != null) {
                return a;
            }
            if (b != null) {
                return b;
            }
            return c;
        }
    
        function currentDateArray(config) {
            // hooks is actually the exported moment object
            var nowValue = new Date(hooks.now());
            if (config._useUTC) {
                return [
                    nowValue.getUTCFullYear(),
                    nowValue.getUTCMonth(),
                    nowValue.getUTCDate(),
                ];
            }
            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
        }
    
        // convert an array to a date.
        // the array should mirror the parameters below
        // note: all values past the year are optional and will default to the lowest possible value.
        // [year, month, day , hour, minute, second, millisecond]
        function configFromArray(config) {
            var i,
                date,
                input = [],
                currentDate,
                expectedWeekday,
                yearToUse;
    
            if (config._d) {
                return;
            }
    
            currentDate = currentDateArray(config);
    
            //compute day of the year from weeks and weekdays
            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                dayOfYearFromWeekInfo(config);
            }
    
            //if the day of the year is set, figure out what it is
            if (config._dayOfYear != null) {
                yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
    
                if (
                    config._dayOfYear > daysInYear(yearToUse) ||
                    config._dayOfYear === 0
                ) {
                    getParsingFlags(config)._overflowDayOfYear = true;
                }
    
                date = createUTCDate(yearToUse, 0, config._dayOfYear);
                config._a[MONTH] = date.getUTCMonth();
                config._a[DATE] = date.getUTCDate();
            }
    
            // Default to current date.
            // * if no year, month, day of month are given, default to today
            // * if day of month is given, default month and year
            // * if month is given, default only year
            // * if year is given, don't default anything
            for (i = 0; i < 3 && config._a[i] == null; ++i) {
                config._a[i] = input[i] = currentDate[i];
            }
    
            // Zero out whatever was not defaulted, including time
            for (; i < 7; i++) {
                config._a[i] = input[i] =
                    config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
            }
    
            // Check for 24:00:00.000
            if (
                config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0
            ) {
                config._nextDay = true;
                config._a[HOUR] = 0;
            }
    
            config._d = (config._useUTC ? createUTCDate : createDate).apply(
                null,
                input
            );
            expectedWeekday = config._useUTC
                ? config._d.getUTCDay()
                : config._d.getDay();
    
            // Apply timezone offset from input. The actual utcOffset can be changed
            // with parseZone.
            if (config._tzm != null) {
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            }
    
            if (config._nextDay) {
                config._a[HOUR] = 24;
            }
    
            // check for mismatching day of week
            if (
                config._w &&
                typeof config._w.d !== 'undefined' &&
                config._w.d !== expectedWeekday
            ) {
                getParsingFlags(config).weekdayMismatch = true;
            }
        }
    
        function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
    
            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
                dow = 1;
                doy = 4;
    
                // TODO: We need to take the current isoWeekYear, but that depends on
                // how we interpret now (local, utc, fixed offset). So create
                // a now version of current config (take local/utc/offset flags, and
                // create now).
                weekYear = defaults(
                    w.GG,
                    config._a[YEAR],
                    weekOfYear(createLocal(), 1, 4).year
                );
                week = defaults(w.W, 1);
                weekday = defaults(w.E, 1);
                if (weekday < 1 || weekday > 7) {
                    weekdayOverflow = true;
                }
            } else {
                dow = config._locale._week.dow;
                doy = config._locale._week.doy;
    
                curWeek = weekOfYear(createLocal(), dow, doy);
    
                weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
    
                // Default to current week.
                week = defaults(w.w, curWeek.week);
    
                if (w.d != null) {
                    // weekday -- low day numbers are considered next week
                    weekday = w.d;
                    if (weekday < 0 || weekday > 6) {
                        weekdayOverflow = true;
                    }
                } else if (w.e != null) {
                    // local weekday -- counting starts from beginning of week
                    weekday = w.e + dow;
                    if (w.e < 0 || w.e > 6) {
                        weekdayOverflow = true;
                    }
                } else {
                    // default to beginning of week
                    weekday = dow;
                }
            }
            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                getParsingFlags(config)._overflowWeeks = true;
            } else if (weekdayOverflow != null) {
                getParsingFlags(config)._overflowWeekday = true;
            } else {
                temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                config._a[YEAR] = temp.year;
                config._dayOfYear = temp.dayOfYear;
            }
        }
    
        // constant that refers to the ISO standard
        hooks.ISO_8601 = function () {};
    
        // constant that refers to the RFC 2822 form
        hooks.RFC_2822 = function () {};
    
        // date from string and format string
        function configFromStringAndFormat(config) {
            // TODO: Move this to another part of the creation flow to prevent circular deps
            if (config._f === hooks.ISO_8601) {
                configFromISO(config);
                return;
            }
            if (config._f === hooks.RFC_2822) {
                configFromRFC2822(config);
                return;
            }
            config._a = [];
            getParsingFlags(config).empty = true;
    
            // This array is used to make a Date, either with `new Date` or `Date.UTC`
            var string = '' + config._i,
                i,
                parsedInput,
                tokens,
                token,
                skipped,
                stringLength = string.length,
                totalParsedInputLength = 0,
                era,
                tokenLen;
    
            tokens =
                expandFormat(config._f, config._locale).match(formattingTokens) || [];
            tokenLen = tokens.length;
            for (i = 0; i < tokenLen; i++) {
                token = tokens[i];
                parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                    [])[0];
                if (parsedInput) {
                    skipped = string.substr(0, string.indexOf(parsedInput));
                    if (skipped.length > 0) {
                        getParsingFlags(config).unusedInput.push(skipped);
                    }
                    string = string.slice(
                        string.indexOf(parsedInput) + parsedInput.length
                    );
                    totalParsedInputLength += parsedInput.length;
                }
                // don't parse if it's not a known token
                if (formatTokenFunctions[token]) {
                    if (parsedInput) {
                        getParsingFlags(config).empty = false;
                    } else {
                        getParsingFlags(config).unusedTokens.push(token);
                    }
                    addTimeToArrayFromToken(token, parsedInput, config);
                } else if (config._strict && !parsedInput) {
                    getParsingFlags(config).unusedTokens.push(token);
                }
            }
    
            // add remaining unparsed input length to the string
            getParsingFlags(config).charsLeftOver =
                stringLength - totalParsedInputLength;
            if (string.length > 0) {
                getParsingFlags(config).unusedInput.push(string);
            }
    
            // clear _12h flag if hour is <= 12
            if (
                config._a[HOUR] <= 12 &&
                getParsingFlags(config).bigHour === true &&
                config._a[HOUR] > 0
            ) {
                getParsingFlags(config).bigHour = undefined;
            }
    
            getParsingFlags(config).parsedDateParts = config._a.slice(0);
            getParsingFlags(config).meridiem = config._meridiem;
            // handle meridiem
            config._a[HOUR] = meridiemFixWrap(
                config._locale,
                config._a[HOUR],
                config._meridiem
            );
    
            // handle era
            era = getParsingFlags(config).era;
            if (era !== null) {
                config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
            }
    
            configFromArray(config);
            checkOverflow(config);
        }
    
        function meridiemFixWrap(locale, hour, meridiem) {
            var isPm;
    
            if (meridiem == null) {
                // nothing to do
                return hour;
            }
            if (locale.meridiemHour != null) {
                return locale.meridiemHour(hour, meridiem);
            } else if (locale.isPM != null) {
                // Fallback
                isPm = locale.isPM(meridiem);
                if (isPm && hour < 12) {
                    hour += 12;
                }
                if (!isPm && hour === 12) {
                    hour = 0;
                }
                return hour;
            } else {
                // this is not supposed to happen
                return hour;
            }
        }
    
        // date from string and array of format strings
        function configFromStringAndArray(config) {
            var tempConfig,
                bestMoment,
                scoreToBeat,
                i,
                currentScore,
                validFormatFound,
                bestFormatIsValid = false,
                configfLen = config._f.length;
    
            if (configfLen === 0) {
                getParsingFlags(config).invalidFormat = true;
                config._d = new Date(NaN);
                return;
            }
    
            for (i = 0; i < configfLen; i++) {
                currentScore = 0;
                validFormatFound = false;
                tempConfig = copyConfig({}, config);
                if (config._useUTC != null) {
                    tempConfig._useUTC = config._useUTC;
                }
                tempConfig._f = config._f[i];
                configFromStringAndFormat(tempConfig);
    
                if (isValid(tempConfig)) {
                    validFormatFound = true;
                }
    
                // if there is any input that was not parsed add a penalty for that format
                currentScore += getParsingFlags(tempConfig).charsLeftOver;
    
                //or tokens
                currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
    
                getParsingFlags(tempConfig).score = currentScore;
    
                if (!bestFormatIsValid) {
                    if (
                        scoreToBeat == null ||
                        currentScore < scoreToBeat ||
                        validFormatFound
                    ) {
                        scoreToBeat = currentScore;
                        bestMoment = tempConfig;
                        if (validFormatFound) {
                            bestFormatIsValid = true;
                        }
                    }
                } else {
                    if (currentScore < scoreToBeat) {
                        scoreToBeat = currentScore;
                        bestMoment = tempConfig;
                    }
                }
            }
    
            extend(config, bestMoment || tempConfig);
        }
    
        function configFromObject(config) {
            if (config._d) {
                return;
            }
    
            var i = normalizeObjectUnits(config._i),
                dayOrDate = i.day === undefined ? i.date : i.day;
            config._a = map(
                [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
                function (obj) {
                    return obj && parseInt(obj, 10);
                }
            );
    
            configFromArray(config);
        }
    
        function createFromConfig(config) {
            var res = new Moment(checkOverflow(prepareConfig(config)));
            if (res._nextDay) {
                // Adding is smart enough around DST
                res.add(1, 'd');
                res._nextDay = undefined;
            }
    
            return res;
        }
    
        function prepareConfig(config) {
            var input = config._i,
                format = config._f;
    
            config._locale = config._locale || getLocale(config._l);
    
            if (input === null || (format === undefined && input === '')) {
                return createInvalid({ nullInput: true });
            }
    
            if (typeof input === 'string') {
                config._i = input = config._locale.preparse(input);
            }
    
            if (isMoment(input)) {
                return new Moment(checkOverflow(input));
            } else if (isDate(input)) {
                config._d = input;
            } else if (isArray(format)) {
                configFromStringAndArray(config);
            } else if (format) {
                configFromStringAndFormat(config);
            } else {
                configFromInput(config);
            }
    
            if (!isValid(config)) {
                config._d = null;
            }
    
            return config;
        }
    
        function configFromInput(config) {
            var input = config._i;
            if (isUndefined(input)) {
                config._d = new Date(hooks.now());
            } else if (isDate(input)) {
                config._d = new Date(input.valueOf());
            } else if (typeof input === 'string') {
                configFromString(config);
            } else if (isArray(input)) {
                config._a = map(input.slice(0), function (obj) {
                    return parseInt(obj, 10);
                });
                configFromArray(config);
            } else if (isObject(input)) {
                configFromObject(config);
            } else if (isNumber(input)) {
                // from milliseconds
                config._d = new Date(input);
            } else {
                hooks.createFromInputFallback(config);
            }
        }
    
        function createLocalOrUTC(input, format, locale, strict, isUTC) {
            var c = {};
    
            if (format === true || format === false) {
                strict = format;
                format = undefined;
            }
    
            if (locale === true || locale === false) {
                strict = locale;
                locale = undefined;
            }
    
            if (
                (isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)
            ) {
                input = undefined;
            }
            // object construction must be done this way.
            // https://github.com/moment/moment/issues/1423
            c._isAMomentObject = true;
            c._useUTC = c._isUTC = isUTC;
            c._l = locale;
            c._i = input;
            c._f = format;
            c._strict = strict;
    
            return createFromConfig(c);
        }
    
        function createLocal(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, false);
        }
    
        var prototypeMin = deprecate(
                'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
                function () {
                    var other = createLocal.apply(null, arguments);
                    if (this.isValid() && other.isValid()) {
                        return other < this ? this : other;
                    } else {
                        return createInvalid();
                    }
                }
            ),
            prototypeMax = deprecate(
                'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
                function () {
                    var other = createLocal.apply(null, arguments);
                    if (this.isValid() && other.isValid()) {
                        return other > this ? this : other;
                    } else {
                        return createInvalid();
                    }
                }
            );
    
        // Pick a moment m from moments so that m[fn](other) is true for all
        // other. This relies on the function fn to be transitive.
        //
        // moments should either be an array of moment objects or an array, whose
        // first element is an array of moment objects.
        function pickBy(fn, moments) {
            var res, i;
            if (moments.length === 1 && isArray(moments[0])) {
                moments = moments[0];
            }
            if (!moments.length) {
                return createLocal();
            }
            res = moments[0];
            for (i = 1; i < moments.length; ++i) {
                if (!moments[i].isValid() || moments[i][fn](res)) {
                    res = moments[i];
                }
            }
            return res;
        }
    
        // TODO: Use [].sort instead?
        function min() {
            var args = [].slice.call(arguments, 0);
    
            return pickBy('isBefore', args);
        }
    
        function max() {
            var args = [].slice.call(arguments, 0);
    
            return pickBy('isAfter', args);
        }
    
        var now = function () {
            return Date.now ? Date.now() : +new Date();
        };
    
        var ordering = [
            'year',
            'quarter',
            'month',
            'week',
            'day',
            'hour',
            'minute',
            'second',
            'millisecond',
        ];
    
        function isDurationValid(m) {
            var key,
                unitHasDecimal = false,
                i,
                orderLen = ordering.length;
            for (key in m) {
                if (
                    hasOwnProp(m, key) &&
                    !(
                        indexOf.call(ordering, key) !== -1 &&
                        (m[key] == null || !isNaN(m[key]))
                    )
                ) {
                    return false;
                }
            }
    
            for (i = 0; i < orderLen; ++i) {
                if (m[ordering[i]]) {
                    if (unitHasDecimal) {
                        return false; // only allow non-integers for smallest unit
                    }
                    if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                        unitHasDecimal = true;
                    }
                }
            }
    
            return true;
        }
    
        function isValid$1() {
            return this._isValid;
        }
    
        function createInvalid$1() {
            return createDuration(NaN);
        }
    
        function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration),
                years = normalizedInput.year || 0,
                quarters = normalizedInput.quarter || 0,
                months = normalizedInput.month || 0,
                weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
                days = normalizedInput.day || 0,
                hours = normalizedInput.hour || 0,
                minutes = normalizedInput.minute || 0,
                seconds = normalizedInput.second || 0,
                milliseconds = normalizedInput.millisecond || 0;
    
            this._isValid = isDurationValid(normalizedInput);
    
            // representation for dateAddRemove
            this._milliseconds =
                +milliseconds +
                seconds * 1e3 + // 1000
                minutes * 6e4 + // 1000 * 60
                hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
            // Because of dateAddRemove treats 24 hours as different from a
            // day when working around DST, we need to store them separately
            this._days = +days + weeks * 7;
            // It is impossible to translate months into days without knowing
            // which months you are are talking about, so we have to store
            // it separately.
            this._months = +months + quarters * 3 + years * 12;
    
            this._data = {};
    
            this._locale = getLocale();
    
            this._bubble();
        }
    
        function isDuration(obj) {
            return obj instanceof Duration;
        }
    
        function absRound(number) {
            if (number < 0) {
                return Math.round(-1 * number) * -1;
            } else {
                return Math.round(number);
            }
        }
    
        // compare two arrays, return the number of differences
        function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length),
                lengthDiff = Math.abs(array1.length - array2.length),
                diffs = 0,
                i;
            for (i = 0; i < len; i++) {
                if (
                    (dontConvert && array1[i] !== array2[i]) ||
                    (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
                ) {
                    diffs++;
                }
            }
            return diffs + lengthDiff;
        }
    
        // FORMATTING
    
        function offset(token, separator) {
            addFormatToken(token, 0, 0, function () {
                var offset = this.utcOffset(),
                    sign = '+';
                if (offset < 0) {
                    offset = -offset;
                    sign = '-';
                }
                return (
                    sign +
                    zeroFill(~~(offset / 60), 2) +
                    separator +
                    zeroFill(~~offset % 60, 2)
                );
            });
        }
    
        offset('Z', ':');
        offset('ZZ', '');
    
        // PARSING
    
        addRegexToken('Z', matchShortOffset);
        addRegexToken('ZZ', matchShortOffset);
        addParseToken(['Z', 'ZZ'], function (input, array, config) {
            config._useUTC = true;
            config._tzm = offsetFromString(matchShortOffset, input);
        });
    
        // HELPERS
    
        // timezone chunker
        // '+10:00' > ['10',  '00']
        // '-1530'  > ['-15', '30']
        var chunkOffset = /([\+\-]|\d\d)/gi;
    
        function offsetFromString(matcher, string) {
            var matches = (string || '').match(matcher),
                chunk,
                parts,
                minutes;
    
            if (matches === null) {
                return null;
            }
    
            chunk = matches[matches.length - 1] || [];
            parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
            minutes = +(parts[1] * 60) + toInt(parts[2]);
    
            return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
        }
    
        // Return a moment from input, that is local/utc/zone equivalent to model.
        function cloneWithOffset(input, model) {
            var res, diff;
            if (model._isUTC) {
                res = model.clone();
                diff =
                    (isMoment(input) || isDate(input)
                        ? input.valueOf()
                        : createLocal(input).valueOf()) - res.valueOf();
                // Use low-level api, because this fn is low-level api.
                res._d.setTime(res._d.valueOf() + diff);
                hooks.updateOffset(res, false);
                return res;
            } else {
                return createLocal(input).local();
            }
        }
    
        function getDateOffset(m) {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(m._d.getTimezoneOffset());
        }
    
        // HOOKS
    
        // This function will be called whenever a moment is mutated.
        // It is intended to keep the offset in sync with the timezone.
        hooks.updateOffset = function () {};
    
        // MOMENTS
    
        // keepLocalTime = true means only change the timezone, without
        // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
        // +0200, so we adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        function getSetOffset(input, keepLocalTime, keepMinutes) {
            var offset = this._offset || 0,
                localAdjust;
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            if (input != null) {
                if (typeof input === 'string') {
                    input = offsetFromString(matchShortOffset, input);
                    if (input === null) {
                        return this;
                    }
                } else if (Math.abs(input) < 16 && !keepMinutes) {
                    input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                    localAdjust = getDateOffset(this);
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                    this.add(localAdjust, 'm');
                }
                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addSubtract(
                            this,
                            createDuration(input - offset, 'm'),
                            1,
                            false
                        );
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        hooks.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }
                return this;
            } else {
                return this._isUTC ? offset : getDateOffset(this);
            }
        }
    
        function getSetZone(input, keepLocalTime) {
            if (input != null) {
                if (typeof input !== 'string') {
                    input = -input;
                }
    
                this.utcOffset(input, keepLocalTime);
    
                return this;
            } else {
                return -this.utcOffset();
            }
        }
    
        function setOffsetToUTC(keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
        }
    
        function setOffsetToLocal(keepLocalTime) {
            if (this._isUTC) {
                this.utcOffset(0, keepLocalTime);
                this._isUTC = false;
    
                if (keepLocalTime) {
                    this.subtract(getDateOffset(this), 'm');
                }
            }
            return this;
        }
    
        function setOffsetToParsedOffset() {
            if (this._tzm != null) {
                this.utcOffset(this._tzm, false, true);
            } else if (typeof this._i === 'string') {
                var tZone = offsetFromString(matchOffset, this._i);
                if (tZone != null) {
                    this.utcOffset(tZone);
                } else {
                    this.utcOffset(0, true);
                }
            }
            return this;
        }
    
        function hasAlignedHourOffset(input) {
            if (!this.isValid()) {
                return false;
            }
            input = input ? createLocal(input).utcOffset() : 0;
    
            return (this.utcOffset() - input) % 60 === 0;
        }
    
        function isDaylightSavingTime() {
            return (
                this.utcOffset() > this.clone().month(0).utcOffset() ||
                this.utcOffset() > this.clone().month(5).utcOffset()
            );
        }
    
        function isDaylightSavingTimeShifted() {
            if (!isUndefined(this._isDSTShifted)) {
                return this._isDSTShifted;
            }
    
            var c = {},
                other;
    
            copyConfig(c, this);
            c = prepareConfig(c);
    
            if (c._a) {
                other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                this._isDSTShifted =
                    this.isValid() && compareArrays(c._a, other.toArray()) > 0;
            } else {
                this._isDSTShifted = false;
            }
    
            return this._isDSTShifted;
        }
    
        function isLocal() {
            return this.isValid() ? !this._isUTC : false;
        }
    
        function isUtcOffset() {
            return this.isValid() ? this._isUTC : false;
        }
    
        function isUtc() {
            return this.isValid() ? this._isUTC && this._offset === 0 : false;
        }
    
        // ASP.NET json date format regex
        var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
            // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
            // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
            // and further modified to allow for strings containing both week and day
            isoRegex =
                /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    
        function createDuration(input, key) {
            var duration = input,
                // matching against regexp is expensive, do it on demand
                match = null,
                sign,
                ret,
                diffRes;
    
            if (isDuration(input)) {
                duration = {
                    ms: input._milliseconds,
                    d: input._days,
                    M: input._months,
                };
            } else if (isNumber(input) || !isNaN(+input)) {
                duration = {};
                if (key) {
                    duration[key] = +input;
                } else {
                    duration.milliseconds = +input;
                }
            } else if ((match = aspNetRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: 0,
                    d: toInt(match[DATE]) * sign,
                    h: toInt(match[HOUR]) * sign,
                    m: toInt(match[MINUTE]) * sign,
                    s: toInt(match[SECOND]) * sign,
                    ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
                };
            } else if ((match = isoRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: parseIso(match[2], sign),
                    M: parseIso(match[3], sign),
                    w: parseIso(match[4], sign),
                    d: parseIso(match[5], sign),
                    h: parseIso(match[6], sign),
                    m: parseIso(match[7], sign),
                    s: parseIso(match[8], sign),
                };
            } else if (duration == null) {
                // checks for null or undefined
                duration = {};
            } else if (
                typeof duration === 'object' &&
                ('from' in duration || 'to' in duration)
            ) {
                diffRes = momentsDifference(
                    createLocal(duration.from),
                    createLocal(duration.to)
                );
    
                duration = {};
                duration.ms = diffRes.milliseconds;
                duration.M = diffRes.months;
            }
    
            ret = new Duration(duration);
    
            if (isDuration(input) && hasOwnProp(input, '_locale')) {
                ret._locale = input._locale;
            }
    
            if (isDuration(input) && hasOwnProp(input, '_isValid')) {
                ret._isValid = input._isValid;
            }
    
            return ret;
        }
    
        createDuration.fn = Duration.prototype;
        createDuration.invalid = createInvalid$1;
    
        function parseIso(inp, sign) {
            // We'd normally use ~~inp for this, but unfortunately it also
            // converts floats to ints.
            // inp may be undefined, so careful calling replace on it.
            var res = inp && parseFloat(inp.replace(',', '.'));
            // apply sign while we're at it
            return (isNaN(res) ? 0 : res) * sign;
        }
    
        function positiveMomentsDifference(base, other) {
            var res = {};
    
            res.months =
                other.month() - base.month() + (other.year() - base.year()) * 12;
            if (base.clone().add(res.months, 'M').isAfter(other)) {
                --res.months;
            }
    
            res.milliseconds = +other - +base.clone().add(res.months, 'M');
    
            return res;
        }
    
        function momentsDifference(base, other) {
            var res;
            if (!(base.isValid() && other.isValid())) {
                return { milliseconds: 0, months: 0 };
            }
    
            other = cloneWithOffset(other, base);
            if (base.isBefore(other)) {
                res = positiveMomentsDifference(base, other);
            } else {
                res = positiveMomentsDifference(other, base);
                res.milliseconds = -res.milliseconds;
                res.months = -res.months;
            }
    
            return res;
        }
    
        // TODO: remove 'name' arg after deprecation is removed
        function createAdder(direction, name) {
            return function (val, period) {
                var dur, tmp;
                //invert the arguments, but complain about it
                if (period !== null && !isNaN(+period)) {
                    deprecateSimple(
                        name,
                        'moment().' +
                            name +
                            '(period, number) is deprecated. Please use moment().' +
                            name +
                            '(number, period). ' +
                            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                    );
                    tmp = val;
                    val = period;
                    period = tmp;
                }
    
                dur = createDuration(val, period);
                addSubtract(this, dur, direction);
                return this;
            };
        }
    
        function addSubtract(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds,
                days = absRound(duration._days),
                months = absRound(duration._months);
    
            if (!mom.isValid()) {
                // No op
                return;
            }
    
            updateOffset = updateOffset == null ? true : updateOffset;
    
            if (months) {
                setMonth(mom, get(mom, 'Month') + months * isAdding);
            }
            if (days) {
                set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
            }
            if (milliseconds) {
                mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
            }
            if (updateOffset) {
                hooks.updateOffset(mom, days || months);
            }
        }
    
        var add = createAdder(1, 'add'),
            subtract = createAdder(-1, 'subtract');
    
        function isString(input) {
            return typeof input === 'string' || input instanceof String;
        }
    
        // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
        function isMomentInput(input) {
            return (
                isMoment(input) ||
                isDate(input) ||
                isString(input) ||
                isNumber(input) ||
                isNumberOrStringArray(input) ||
                isMomentInputObject(input) ||
                input === null ||
                input === undefined
            );
        }
    
        function isMomentInputObject(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
                propertyTest = false,
                properties = [
                    'years',
                    'year',
                    'y',
                    'months',
                    'month',
                    'M',
                    'days',
                    'day',
                    'd',
                    'dates',
                    'date',
                    'D',
                    'hours',
                    'hour',
                    'h',
                    'minutes',
                    'minute',
                    'm',
                    'seconds',
                    'second',
                    's',
                    'milliseconds',
                    'millisecond',
                    'ms',
                ],
                i,
                property,
                propertyLen = properties.length;
    
            for (i = 0; i < propertyLen; i += 1) {
                property = properties[i];
                propertyTest = propertyTest || hasOwnProp(input, property);
            }
    
            return objectTest && propertyTest;
        }
    
        function isNumberOrStringArray(input) {
            var arrayTest = isArray(input),
                dataTypeTest = false;
            if (arrayTest) {
                dataTypeTest =
                    input.filter(function (item) {
                        return !isNumber(item) && isString(input);
                    }).length === 0;
            }
            return arrayTest && dataTypeTest;
        }
    
        function isCalendarSpec(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
                propertyTest = false,
                properties = [
                    'sameDay',
                    'nextDay',
                    'lastDay',
                    'nextWeek',
                    'lastWeek',
                    'sameElse',
                ],
                i,
                property;
    
            for (i = 0; i < properties.length; i += 1) {
                property = properties[i];
                propertyTest = propertyTest || hasOwnProp(input, property);
            }
    
            return objectTest && propertyTest;
        }
    
        function getCalendarFormat(myMoment, now) {
            var diff = myMoment.diff(now, 'days', true);
            return diff < -6
                ? 'sameElse'
                : diff < -1
                  ? 'lastWeek'
                  : diff < 0
                    ? 'lastDay'
                    : diff < 1
                      ? 'sameDay'
                      : diff < 2
                        ? 'nextDay'
                        : diff < 7
                          ? 'nextWeek'
                          : 'sameElse';
        }
    
        function calendar$1(time, formats) {
            // Support for single parameter, formats only overload to the calendar function
            if (arguments.length === 1) {
                if (!arguments[0]) {
                    time = undefined;
                    formats = undefined;
                } else if (isMomentInput(arguments[0])) {
                    time = arguments[0];
                    formats = undefined;
                } else if (isCalendarSpec(arguments[0])) {
                    formats = arguments[0];
                    time = undefined;
                }
            }
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're local/utc/offset or not.
            var now = time || createLocal(),
                sod = cloneWithOffset(now, this).startOf('day'),
                format = hooks.calendarFormat(this, sod) || 'sameElse',
                output =
                    formats &&
                    (isFunction(formats[format])
                        ? formats[format].call(this, now)
                        : formats[format]);
    
            return this.format(
                output || this.localeData().calendar(format, this, createLocal(now))
            );
        }
    
        function clone() {
            return new Moment(this);
        }
    
        function isAfter(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() > localInput.valueOf();
            } else {
                return localInput.valueOf() < this.clone().startOf(units).valueOf();
            }
        }
    
        function isBefore(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() < localInput.valueOf();
            } else {
                return this.clone().endOf(units).valueOf() < localInput.valueOf();
            }
        }
    
        function isBetween(from, to, units, inclusivity) {
            var localFrom = isMoment(from) ? from : createLocal(from),
                localTo = isMoment(to) ? to : createLocal(to);
            if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
                return false;
            }
            inclusivity = inclusivity || '()';
            return (
                (inclusivity[0] === '('
                    ? this.isAfter(localFrom, units)
                    : !this.isBefore(localFrom, units)) &&
                (inclusivity[1] === ')'
                    ? this.isBefore(localTo, units)
                    : !this.isAfter(localTo, units))
            );
        }
    
        function isSame(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input),
                inputMs;
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() === localInput.valueOf();
            } else {
                inputMs = localInput.valueOf();
                return (
                    this.clone().startOf(units).valueOf() <= inputMs &&
                    inputMs <= this.clone().endOf(units).valueOf()
                );
            }
        }
    
        function isSameOrAfter(input, units) {
            return this.isSame(input, units) || this.isAfter(input, units);
        }
    
        function isSameOrBefore(input, units) {
            return this.isSame(input, units) || this.isBefore(input, units);
        }
    
        function diff(input, units, asFloat) {
            var that, zoneDelta, output;
    
            if (!this.isValid()) {
                return NaN;
            }
    
            that = cloneWithOffset(input, this);
    
            if (!that.isValid()) {
                return NaN;
            }
    
            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
    
            units = normalizeUnits(units);
    
            switch (units) {
                case 'year':
                    output = monthDiff(this, that) / 12;
                    break;
                case 'month':
                    output = monthDiff(this, that);
                    break;
                case 'quarter':
                    output = monthDiff(this, that) / 3;
                    break;
                case 'second':
                    output = (this - that) / 1e3;
                    break; // 1000
                case 'minute':
                    output = (this - that) / 6e4;
                    break; // 1000 * 60
                case 'hour':
                    output = (this - that) / 36e5;
                    break; // 1000 * 60 * 60
                case 'day':
                    output = (this - that - zoneDelta) / 864e5;
                    break; // 1000 * 60 * 60 * 24, negate dst
                case 'week':
                    output = (this - that - zoneDelta) / 6048e5;
                    break; // 1000 * 60 * 60 * 24 * 7, negate dst
                default:
                    output = this - that;
            }
    
            return asFloat ? output : absFloor(output);
        }
    
        function monthDiff(a, b) {
            if (a.date() < b.date()) {
                // end-of-month calculations work correct when the start month has more
                // days than the end month.
                return -monthDiff(b, a);
            }
            // difference in months
            var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
                // b is in (anchor - 1 month, anchor + 1 month)
                anchor = a.clone().add(wholeMonthDiff, 'months'),
                anchor2,
                adjust;
    
            if (b - anchor < 0) {
                anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor - anchor2);
            } else {
                anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor2 - anchor);
            }
    
            //check for negative zero, return zero if negative zero
            return -(wholeMonthDiff + adjust) || 0;
        }
    
        hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
        hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
    
        function toString() {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        }
    
        function toISOString(keepOffset) {
            if (!this.isValid()) {
                return null;
            }
            var utc = keepOffset !== true,
                m = utc ? this.clone().utc() : this;
            if (m.year() < 0 || m.year() > 9999) {
                return formatMoment(
                    m,
                    utc
                        ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                        : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
                );
            }
            if (isFunction(Date.prototype.toISOString)) {
                // native implementation is ~50x faster, use it when we can
                if (utc) {
                    return this.toDate().toISOString();
                } else {
                    return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                        .toISOString()
                        .replace('Z', formatMoment(m, 'Z'));
                }
            }
            return formatMoment(
                m,
                utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }
    
        /**
         * Return a human readable representation of a moment that can
         * also be evaluated to get a new moment which is the same
         *
         * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
         */
        function inspect() {
            if (!this.isValid()) {
                return 'moment.invalid(/* ' + this._i + ' */)';
            }
            var func = 'moment',
                zone = '',
                prefix,
                year,
                datetime,
                suffix;
            if (!this.isLocal()) {
                func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
                zone = 'Z';
            }
            prefix = '[' + func + '("]';
            year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
            datetime = '-MM-DD[T]HH:mm:ss.SSS';
            suffix = zone + '[")]';
    
            return this.format(prefix + year + datetime + suffix);
        }
    
        function format(inputString) {
            if (!inputString) {
                inputString = this.isUtc()
                    ? hooks.defaultFormatUtc
                    : hooks.defaultFormat;
            }
            var output = formatMoment(this, inputString);
            return this.localeData().postformat(output);
        }
    
        function from(time, withoutSuffix) {
            if (
                this.isValid() &&
                ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
            ) {
                return createDuration({ to: this, from: time })
                    .locale(this.locale())
                    .humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }
    
        function fromNow(withoutSuffix) {
            return this.from(createLocal(), withoutSuffix);
        }
    
        function to(time, withoutSuffix) {
            if (
                this.isValid() &&
                ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
            ) {
                return createDuration({ from: this, to: time })
                    .locale(this.locale())
                    .humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }
    
        function toNow(withoutSuffix) {
            return this.to(createLocal(), withoutSuffix);
        }
    
        // If passed a locale key, it will set the locale for this
        // instance.  Otherwise, it will return the locale configuration
        // variables for this instance.
        function locale(key) {
            var newLocaleData;
    
            if (key === undefined) {
                return this._locale._abbr;
            } else {
                newLocaleData = getLocale(key);
                if (newLocaleData != null) {
                    this._locale = newLocaleData;
                }
                return this;
            }
        }
    
        var lang = deprecate(
            'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
            function (key) {
                if (key === undefined) {
                    return this.localeData();
                } else {
                    return this.locale(key);
                }
            }
        );
    
        function localeData() {
            return this._locale;
        }
    
        var MS_PER_SECOND = 1000,
            MS_PER_MINUTE = 60 * MS_PER_SECOND,
            MS_PER_HOUR = 60 * MS_PER_MINUTE,
            MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
    
        // actual modulo - handles negative numbers (for dates before 1970):
        function mod$1(dividend, divisor) {
            return ((dividend % divisor) + divisor) % divisor;
        }
    
        function localStartOfDate(y, m, d) {
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return new Date(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
                return new Date(y, m, d).valueOf();
            }
        }
    
        function utcStartOfDate(y, m, d) {
            // Date.UTC remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
                return Date.UTC(y, m, d);
            }
        }
    
        function startOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
                return this;
            }
    
            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
    
            switch (units) {
                case 'year':
                    time = startOfDate(this.year(), 0, 1);
                    break;
                case 'quarter':
                    time = startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3),
                        1
                    );
                    break;
                case 'month':
                    time = startOfDate(this.year(), this.month(), 1);
                    break;
                case 'week':
                    time = startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday()
                    );
                    break;
                case 'isoWeek':
                    time = startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1)
                    );
                    break;
                case 'day':
                case 'date':
                    time = startOfDate(this.year(), this.month(), this.date());
                    break;
                case 'hour':
                    time = this._d.valueOf();
                    time -= mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    );
                    break;
                case 'minute':
                    time = this._d.valueOf();
                    time -= mod$1(time, MS_PER_MINUTE);
                    break;
                case 'second':
                    time = this._d.valueOf();
                    time -= mod$1(time, MS_PER_SECOND);
                    break;
            }
    
            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
        }
    
        function endOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
                return this;
            }
    
            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
    
            switch (units) {
                case 'year':
                    time = startOfDate(this.year() + 1, 0, 1) - 1;
                    break;
                case 'quarter':
                    time =
                        startOfDate(
                            this.year(),
                            this.month() - (this.month() % 3) + 3,
                            1
                        ) - 1;
                    break;
                case 'month':
                    time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                    break;
                case 'week':
                    time =
                        startOfDate(
                            this.year(),
                            this.month(),
                            this.date() - this.weekday() + 7
                        ) - 1;
                    break;
                case 'isoWeek':
                    time =
                        startOfDate(
                            this.year(),
                            this.month(),
                            this.date() - (this.isoWeekday() - 1) + 7
                        ) - 1;
                    break;
                case 'day':
                case 'date':
                    time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                    break;
                case 'hour':
                    time = this._d.valueOf();
                    time +=
                        MS_PER_HOUR -
                        mod$1(
                            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                            MS_PER_HOUR
                        ) -
                        1;
                    break;
                case 'minute':
                    time = this._d.valueOf();
                    time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                    break;
                case 'second':
                    time = this._d.valueOf();
                    time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                    break;
            }
    
            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
        }
    
        function valueOf() {
            return this._d.valueOf() - (this._offset || 0) * 60000;
        }
    
        function unix() {
            return Math.floor(this.valueOf() / 1000);
        }
    
        function toDate() {
            return new Date(this.valueOf());
        }
    
        function toArray() {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hour(),
                m.minute(),
                m.second(),
                m.millisecond(),
            ];
        }
    
        function toObject() {
            var m = this;
            return {
                years: m.year(),
                months: m.month(),
                date: m.date(),
                hours: m.hours(),
                minutes: m.minutes(),
                seconds: m.seconds(),
                milliseconds: m.milliseconds(),
            };
        }
    
        function toJSON() {
            // new Date(NaN).toJSON() === null
            return this.isValid() ? this.toISOString() : null;
        }
    
        function isValid$2() {
            return isValid(this);
        }
    
        function parsingFlags() {
            return extend({}, getParsingFlags(this));
        }
    
        function invalidAt() {
            return getParsingFlags(this).overflow;
        }
    
        function creationData() {
            return {
                input: this._i,
                format: this._f,
                locale: this._locale,
                isUTC: this._isUTC,
                strict: this._strict,
            };
        }
    
        addFormatToken('N', 0, 0, 'eraAbbr');
        addFormatToken('NN', 0, 0, 'eraAbbr');
        addFormatToken('NNN', 0, 0, 'eraAbbr');
        addFormatToken('NNNN', 0, 0, 'eraName');
        addFormatToken('NNNNN', 0, 0, 'eraNarrow');
    
        addFormatToken('y', ['y', 1], 'yo', 'eraYear');
        addFormatToken('y', ['yy', 2], 0, 'eraYear');
        addFormatToken('y', ['yyy', 3], 0, 'eraYear');
        addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
    
        addRegexToken('N', matchEraAbbr);
        addRegexToken('NN', matchEraAbbr);
        addRegexToken('NNN', matchEraAbbr);
        addRegexToken('NNNN', matchEraName);
        addRegexToken('NNNNN', matchEraNarrow);
    
        addParseToken(
            ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
            function (input, array, config, token) {
                var era = config._locale.erasParse(input, token, config._strict);
                if (era) {
                    getParsingFlags(config).era = era;
                } else {
                    getParsingFlags(config).invalidEra = input;
                }
            }
        );
    
        addRegexToken('y', matchUnsigned);
        addRegexToken('yy', matchUnsigned);
        addRegexToken('yyy', matchUnsigned);
        addRegexToken('yyyy', matchUnsigned);
        addRegexToken('yo', matchEraYearOrdinal);
    
        addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
        addParseToken(['yo'], function (input, array, config, token) {
            var match;
            if (config._locale._eraYearOrdinalRegex) {
                match = input.match(config._locale._eraYearOrdinalRegex);
            }
    
            if (config._locale.eraYearOrdinalParse) {
                array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
            } else {
                array[YEAR] = parseInt(input, 10);
            }
        });
    
        function localeEras(m, format) {
            var i,
                l,
                date,
                eras = this._eras || getLocale('en')._eras;
            for (i = 0, l = eras.length; i < l; ++i) {
                switch (typeof eras[i].since) {
                    case 'string':
                        // truncate time
                        date = hooks(eras[i].since).startOf('day');
                        eras[i].since = date.valueOf();
                        break;
                }
    
                switch (typeof eras[i].until) {
                    case 'undefined':
                        eras[i].until = +Infinity;
                        break;
                    case 'string':
                        // truncate time
                        date = hooks(eras[i].until).startOf('day').valueOf();
                        eras[i].until = date.valueOf();
                        break;
                }
            }
            return eras;
        }
    
        function localeErasParse(eraName, format, strict) {
            var i,
                l,
                eras = this.eras(),
                name,
                abbr,
                narrow;
            eraName = eraName.toUpperCase();
    
            for (i = 0, l = eras.length; i < l; ++i) {
                name = eras[i].name.toUpperCase();
                abbr = eras[i].abbr.toUpperCase();
                narrow = eras[i].narrow.toUpperCase();
    
                if (strict) {
                    switch (format) {
                        case 'N':
                        case 'NN':
                        case 'NNN':
                            if (abbr === eraName) {
                                return eras[i];
                            }
                            break;
    
                        case 'NNNN':
                            if (name === eraName) {
                                return eras[i];
                            }
                            break;
    
                        case 'NNNNN':
                            if (narrow === eraName) {
                                return eras[i];
                            }
                            break;
                    }
                } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                    return eras[i];
                }
            }
        }
    
        function localeErasConvertYear(era, year) {
            var dir = era.since <= era.until ? +1 : -1;
            if (year === undefined) {
                return hooks(era.since).year();
            } else {
                return hooks(era.since).year() + (year - era.offset) * dir;
            }
        }
    
        function getEraName() {
            var i,
                l,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();
    
                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].name;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].name;
                }
            }
    
            return '';
        }
    
        function getEraNarrow() {
            var i,
                l,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();
    
                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].narrow;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].narrow;
                }
            }
    
            return '';
        }
    
        function getEraAbbr() {
            var i,
                l,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();
    
                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].abbr;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].abbr;
                }
            }
    
            return '';
        }
    
        function getEraYear() {
            var i,
                l,
                dir,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                dir = eras[i].since <= eras[i].until ? +1 : -1;
    
                // truncate time
                val = this.clone().startOf('day').valueOf();
    
                if (
                    (eras[i].since <= val && val <= eras[i].until) ||
                    (eras[i].until <= val && val <= eras[i].since)
                ) {
                    return (
                        (this.year() - hooks(eras[i].since).year()) * dir +
                        eras[i].offset
                    );
                }
            }
    
            return this.year();
        }
    
        function erasNameRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNameRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasNameRegex : this._erasRegex;
        }
    
        function erasAbbrRegex(isStrict) {
            if (!hasOwnProp(this, '_erasAbbrRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasAbbrRegex : this._erasRegex;
        }
    
        function erasNarrowRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNarrowRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasNarrowRegex : this._erasRegex;
        }
    
        function matchEraAbbr(isStrict, locale) {
            return locale.erasAbbrRegex(isStrict);
        }
    
        function matchEraName(isStrict, locale) {
            return locale.erasNameRegex(isStrict);
        }
    
        function matchEraNarrow(isStrict, locale) {
            return locale.erasNarrowRegex(isStrict);
        }
    
        function matchEraYearOrdinal(isStrict, locale) {
            return locale._eraYearOrdinalRegex || matchUnsigned;
        }
    
        function computeErasParse() {
            var abbrPieces = [],
                namePieces = [],
                narrowPieces = [],
                mixedPieces = [],
                i,
                l,
                erasName,
                erasAbbr,
                erasNarrow,
                eras = this.eras();
    
            for (i = 0, l = eras.length; i < l; ++i) {
                erasName = regexEscape(eras[i].name);
                erasAbbr = regexEscape(eras[i].abbr);
                erasNarrow = regexEscape(eras[i].narrow);
    
                namePieces.push(erasName);
                abbrPieces.push(erasAbbr);
                narrowPieces.push(erasNarrow);
                mixedPieces.push(erasName);
                mixedPieces.push(erasAbbr);
                mixedPieces.push(erasNarrow);
            }
    
            this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
            this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
            this._erasNarrowRegex = new RegExp(
                '^(' + narrowPieces.join('|') + ')',
                'i'
            );
        }
    
        // FORMATTING
    
        addFormatToken(0, ['gg', 2], 0, function () {
            return this.weekYear() % 100;
        });
    
        addFormatToken(0, ['GG', 2], 0, function () {
            return this.isoWeekYear() % 100;
        });
    
        function addWeekYearFormatToken(token, getter) {
            addFormatToken(0, [token, token.length], 0, getter);
        }
    
        addWeekYearFormatToken('gggg', 'weekYear');
        addWeekYearFormatToken('ggggg', 'weekYear');
        addWeekYearFormatToken('GGGG', 'isoWeekYear');
        addWeekYearFormatToken('GGGGG', 'isoWeekYear');
    
        // ALIASES
    
        // PARSING
    
        addRegexToken('G', matchSigned);
        addRegexToken('g', matchSigned);
        addRegexToken('GG', match1to2, match2);
        addRegexToken('gg', match1to2, match2);
        addRegexToken('GGGG', match1to4, match4);
        addRegexToken('gggg', match1to4, match4);
        addRegexToken('GGGGG', match1to6, match6);
        addRegexToken('ggggg', match1to6, match6);
    
        addWeekParseToken(
            ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
            function (input, week, config, token) {
                week[token.substr(0, 2)] = toInt(input);
            }
        );
    
        addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
            week[token] = hooks.parseTwoDigitYear(input);
        });
    
        // MOMENTS
    
        function getSetWeekYear(input) {
            return getSetWeekYearHelper.call(
                this,
                input,
                this.week(),
                this.weekday() + this.localeData()._week.dow,
                this.localeData()._week.dow,
                this.localeData()._week.doy
            );
        }
    
        function getSetISOWeekYear(input) {
            return getSetWeekYearHelper.call(
                this,
                input,
                this.isoWeek(),
                this.isoWeekday(),
                1,
                4
            );
        }
    
        function getISOWeeksInYear() {
            return weeksInYear(this.year(), 1, 4);
        }
    
        function getISOWeeksInISOWeekYear() {
            return weeksInYear(this.isoWeekYear(), 1, 4);
        }
    
        function getWeeksInYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        }
    
        function getWeeksInWeekYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
        }
    
        function getSetWeekYearHelper(input, week, weekday, dow, doy) {
            var weeksTarget;
            if (input == null) {
                return weekOfYear(this, dow, doy).year;
            } else {
                weeksTarget = weeksInYear(input, dow, doy);
                if (week > weeksTarget) {
                    week = weeksTarget;
                }
                return setWeekAll.call(this, input, week, weekday, dow, doy);
            }
        }
    
        function setWeekAll(weekYear, week, weekday, dow, doy) {
            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
    
            this.year(date.getUTCFullYear());
            this.month(date.getUTCMonth());
            this.date(date.getUTCDate());
            return this;
        }
    
        // FORMATTING
    
        addFormatToken('Q', 0, 'Qo', 'quarter');
    
        // PARSING
    
        addRegexToken('Q', match1);
        addParseToken('Q', function (input, array) {
            array[MONTH] = (toInt(input) - 1) * 3;
        });
    
        // MOMENTS
    
        function getSetQuarter(input) {
            return input == null
                ? Math.ceil((this.month() + 1) / 3)
                : this.month((input - 1) * 3 + (this.month() % 3));
        }
    
        // FORMATTING
    
        addFormatToken('D', ['DD', 2], 'Do', 'date');
    
        // PARSING
    
        addRegexToken('D', match1to2, match1to2NoLeadingZero);
        addRegexToken('DD', match1to2, match2);
        addRegexToken('Do', function (isStrict, locale) {
            // TODO: Remove "ordinalParse" fallback in next major release.
            return isStrict
                ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
                : locale._dayOfMonthOrdinalParseLenient;
        });
    
        addParseToken(['D', 'DD'], DATE);
        addParseToken('Do', function (input, array) {
            array[DATE] = toInt(input.match(match1to2)[0]);
        });
    
        // MOMENTS
    
        var getSetDayOfMonth = makeGetSet('Date', true);
    
        // FORMATTING
    
        addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
    
        // PARSING
    
        addRegexToken('DDD', match1to3);
        addRegexToken('DDDD', match3);
        addParseToken(['DDD', 'DDDD'], function (input, array, config) {
            config._dayOfYear = toInt(input);
        });
    
        // HELPERS
    
        // MOMENTS
    
        function getSetDayOfYear(input) {
            var dayOfYear =
                Math.round(
                    (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
                ) + 1;
            return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
        }
    
        // FORMATTING
    
        addFormatToken('m', ['mm', 2], 0, 'minute');
    
        // PARSING
    
        addRegexToken('m', match1to2, match1to2HasZero);
        addRegexToken('mm', match1to2, match2);
        addParseToken(['m', 'mm'], MINUTE);
    
        // MOMENTS
    
        var getSetMinute = makeGetSet('Minutes', false);
    
        // FORMATTING
    
        addFormatToken('s', ['ss', 2], 0, 'second');
    
        // PARSING
    
        addRegexToken('s', match1to2, match1to2HasZero);
        addRegexToken('ss', match1to2, match2);
        addParseToken(['s', 'ss'], SECOND);
    
        // MOMENTS
    
        var getSetSecond = makeGetSet('Seconds', false);
    
        // FORMATTING
    
        addFormatToken('S', 0, 0, function () {
            return ~~(this.millisecond() / 100);
        });
    
        addFormatToken(0, ['SS', 2], 0, function () {
            return ~~(this.millisecond() / 10);
        });
    
        addFormatToken(0, ['SSS', 3], 0, 'millisecond');
        addFormatToken(0, ['SSSS', 4], 0, function () {
            return this.millisecond() * 10;
        });
        addFormatToken(0, ['SSSSS', 5], 0, function () {
            return this.millisecond() * 100;
        });
        addFormatToken(0, ['SSSSSS', 6], 0, function () {
            return this.millisecond() * 1000;
        });
        addFormatToken(0, ['SSSSSSS', 7], 0, function () {
            return this.millisecond() * 10000;
        });
        addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
            return this.millisecond() * 100000;
        });
        addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
            return this.millisecond() * 1000000;
        });
    
        // PARSING
    
        addRegexToken('S', match1to3, match1);
        addRegexToken('SS', match1to3, match2);
        addRegexToken('SSS', match1to3, match3);
    
        var token, getSetMillisecond;
        for (token = 'SSSS'; token.length <= 9; token += 'S') {
            addRegexToken(token, matchUnsigned);
        }
    
        function parseMs(input, array) {
            array[MILLISECOND] = toInt(('0.' + input) * 1000);
        }
    
        for (token = 'S'; token.length <= 9; token += 'S') {
            addParseToken(token, parseMs);
        }
    
        getSetMillisecond = makeGetSet('Milliseconds', false);
    
        // FORMATTING
    
        addFormatToken('z', 0, 0, 'zoneAbbr');
        addFormatToken('zz', 0, 0, 'zoneName');
    
        // MOMENTS
    
        function getZoneAbbr() {
            return this._isUTC ? 'UTC' : '';
        }
    
        function getZoneName() {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        }
    
        var proto = Moment.prototype;
    
        proto.add = add;
        proto.calendar = calendar$1;
        proto.clone = clone;
        proto.diff = diff;
        proto.endOf = endOf;
        proto.format = format;
        proto.from = from;
        proto.fromNow = fromNow;
        proto.to = to;
        proto.toNow = toNow;
        proto.get = stringGet;
        proto.invalidAt = invalidAt;
        proto.isAfter = isAfter;
        proto.isBefore = isBefore;
        proto.isBetween = isBetween;
        proto.isSame = isSame;
        proto.isSameOrAfter = isSameOrAfter;
        proto.isSameOrBefore = isSameOrBefore;
        proto.isValid = isValid$2;
        proto.lang = lang;
        proto.locale = locale;
        proto.localeData = localeData;
        proto.max = prototypeMax;
        proto.min = prototypeMin;
        proto.parsingFlags = parsingFlags;
        proto.set = stringSet;
        proto.startOf = startOf;
        proto.subtract = subtract;
        proto.toArray = toArray;
        proto.toObject = toObject;
        proto.toDate = toDate;
        proto.toISOString = toISOString;
        proto.inspect = inspect;
        if (typeof Symbol !== 'undefined' && Symbol.for != null) {
            proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
                return 'Moment<' + this.format() + '>';
            };
        }
        proto.toJSON = toJSON;
        proto.toString = toString;
        proto.unix = unix;
        proto.valueOf = valueOf;
        proto.creationData = creationData;
        proto.eraName = getEraName;
        proto.eraNarrow = getEraNarrow;
        proto.eraAbbr = getEraAbbr;
        proto.eraYear = getEraYear;
        proto.year = getSetYear;
        proto.isLeapYear = getIsLeapYear;
        proto.weekYear = getSetWeekYear;
        proto.isoWeekYear = getSetISOWeekYear;
        proto.quarter = proto.quarters = getSetQuarter;
        proto.month = getSetMonth;
        proto.daysInMonth = getDaysInMonth;
        proto.week = proto.weeks = getSetWeek;
        proto.isoWeek = proto.isoWeeks = getSetISOWeek;
        proto.weeksInYear = getWeeksInYear;
        proto.weeksInWeekYear = getWeeksInWeekYear;
        proto.isoWeeksInYear = getISOWeeksInYear;
        proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
        proto.date = getSetDayOfMonth;
        proto.day = proto.days = getSetDayOfWeek;
        proto.weekday = getSetLocaleDayOfWeek;
        proto.isoWeekday = getSetISODayOfWeek;
        proto.dayOfYear = getSetDayOfYear;
        proto.hour = proto.hours = getSetHour;
        proto.minute = proto.minutes = getSetMinute;
        proto.second = proto.seconds = getSetSecond;
        proto.millisecond = proto.milliseconds = getSetMillisecond;
        proto.utcOffset = getSetOffset;
        proto.utc = setOffsetToUTC;
        proto.local = setOffsetToLocal;
        proto.parseZone = setOffsetToParsedOffset;
        proto.hasAlignedHourOffset = hasAlignedHourOffset;
        proto.isDST = isDaylightSavingTime;
        proto.isLocal = isLocal;
        proto.isUtcOffset = isUtcOffset;
        proto.isUtc = isUtc;
        proto.isUTC = isUtc;
        proto.zoneAbbr = getZoneAbbr;
        proto.zoneName = getZoneName;
        proto.dates = deprecate(
            'dates accessor is deprecated. Use date instead.',
            getSetDayOfMonth
        );
        proto.months = deprecate(
            'months accessor is deprecated. Use month instead',
            getSetMonth
        );
        proto.years = deprecate(
            'years accessor is deprecated. Use year instead',
            getSetYear
        );
        proto.zone = deprecate(
            'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
            getSetZone
        );
        proto.isDSTShifted = deprecate(
            'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
            isDaylightSavingTimeShifted
        );
    
        function createUnix(input) {
            return createLocal(input * 1000);
        }
    
        function createInZone() {
            return createLocal.apply(null, arguments).parseZone();
        }
    
        function preParsePostFormat(string) {
            return string;
        }
    
        var proto$1 = Locale.prototype;
    
        proto$1.calendar = calendar;
        proto$1.longDateFormat = longDateFormat;
        proto$1.invalidDate = invalidDate;
        proto$1.ordinal = ordinal;
        proto$1.preparse = preParsePostFormat;
        proto$1.postformat = preParsePostFormat;
        proto$1.relativeTime = relativeTime;
        proto$1.pastFuture = pastFuture;
        proto$1.set = set;
        proto$1.eras = localeEras;
        proto$1.erasParse = localeErasParse;
        proto$1.erasConvertYear = localeErasConvertYear;
        proto$1.erasAbbrRegex = erasAbbrRegex;
        proto$1.erasNameRegex = erasNameRegex;
        proto$1.erasNarrowRegex = erasNarrowRegex;
    
        proto$1.months = localeMonths;
        proto$1.monthsShort = localeMonthsShort;
        proto$1.monthsParse = localeMonthsParse;
        proto$1.monthsRegex = monthsRegex;
        proto$1.monthsShortRegex = monthsShortRegex;
        proto$1.week = localeWeek;
        proto$1.firstDayOfYear = localeFirstDayOfYear;
        proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    
        proto$1.weekdays = localeWeekdays;
        proto$1.weekdaysMin = localeWeekdaysMin;
        proto$1.weekdaysShort = localeWeekdaysShort;
        proto$1.weekdaysParse = localeWeekdaysParse;
    
        proto$1.weekdaysRegex = weekdaysRegex;
        proto$1.weekdaysShortRegex = weekdaysShortRegex;
        proto$1.weekdaysMinRegex = weekdaysMinRegex;
    
        proto$1.isPM = localeIsPM;
        proto$1.meridiem = localeMeridiem;
    
        function get$1(format, index, field, setter) {
            var locale = getLocale(),
                utc = createUTC().set(setter, index);
            return locale[field](utc, format);
        }
    
        function listMonthsImpl(format, index, field) {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
    
            format = format || '';
    
            if (index != null) {
                return get$1(format, index, field, 'month');
            }
    
            var i,
                out = [];
            for (i = 0; i < 12; i++) {
                out[i] = get$1(format, i, field, 'month');
            }
            return out;
        }
    
        // ()
        // (5)
        // (fmt, 5)
        // (fmt)
        // (true)
        // (true, 5)
        // (true, fmt, 5)
        // (true, fmt)
        function listWeekdaysImpl(localeSorted, format, index, field) {
            if (typeof localeSorted === 'boolean') {
                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }
    
                format = format || '';
            } else {
                format = localeSorted;
                index = format;
                localeSorted = false;
    
                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }
    
                format = format || '';
            }
    
            var locale = getLocale(),
                shift = localeSorted ? locale._week.dow : 0,
                i,
                out = [];
    
            if (index != null) {
                return get$1(format, (index + shift) % 7, field, 'day');
            }
    
            for (i = 0; i < 7; i++) {
                out[i] = get$1(format, (i + shift) % 7, field, 'day');
            }
            return out;
        }
    
        function listMonths(format, index) {
            return listMonthsImpl(format, index, 'months');
        }
    
        function listMonthsShort(format, index) {
            return listMonthsImpl(format, index, 'monthsShort');
        }
    
        function listWeekdays(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
        }
    
        function listWeekdaysShort(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
        }
    
        function listWeekdaysMin(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
        }
    
        getSetGlobalLocale('en', {
            eras: [
                {
                    since: '0001-01-01',
                    until: +Infinity,
                    offset: 1,
                    name: 'Anno Domini',
                    narrow: 'AD',
                    abbr: 'AD',
                },
                {
                    since: '0000-12-31',
                    until: -Infinity,
                    offset: 1,
                    name: 'Before Christ',
                    narrow: 'BC',
                    abbr: 'BC',
                },
            ],
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function (number) {
                var b = number % 10,
                    output =
                        toInt((number % 100) / 10) === 1
                            ? 'th'
                            : b === 1
                              ? 'st'
                              : b === 2
                                ? 'nd'
                                : b === 3
                                  ? 'rd'
                                  : 'th';
                return number + output;
            },
        });
    
        // Side effect imports
    
        hooks.lang = deprecate(
            'moment.lang is deprecated. Use moment.locale instead.',
            getSetGlobalLocale
        );
        hooks.langData = deprecate(
            'moment.langData is deprecated. Use moment.localeData instead.',
            getLocale
        );
    
        var mathAbs = Math.abs;
    
        function abs() {
            var data = this._data;
    
            this._milliseconds = mathAbs(this._milliseconds);
            this._days = mathAbs(this._days);
            this._months = mathAbs(this._months);
    
            data.milliseconds = mathAbs(data.milliseconds);
            data.seconds = mathAbs(data.seconds);
            data.minutes = mathAbs(data.minutes);
            data.hours = mathAbs(data.hours);
            data.months = mathAbs(data.months);
            data.years = mathAbs(data.years);
    
            return this;
        }
    
        function addSubtract$1(duration, input, value, direction) {
            var other = createDuration(input, value);
    
            duration._milliseconds += direction * other._milliseconds;
            duration._days += direction * other._days;
            duration._months += direction * other._months;
    
            return duration._bubble();
        }
    
        // supports only 2.0-style add(1, 's') or add(duration)
        function add$1(input, value) {
            return addSubtract$1(this, input, value, 1);
        }
    
        // supports only 2.0-style subtract(1, 's') or subtract(duration)
        function subtract$1(input, value) {
            return addSubtract$1(this, input, value, -1);
        }
    
        function absCeil(number) {
            if (number < 0) {
                return Math.floor(number);
            } else {
                return Math.ceil(number);
            }
        }
    
        function bubble() {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds,
                minutes,
                hours,
                years,
                monthsFromDays;
    
            // if we have a mix of positive and negative values, bubble down first
            // check: https://github.com/moment/moment/issues/2166
            if (
                !(
                    (milliseconds >= 0 && days >= 0 && months >= 0) ||
                    (milliseconds <= 0 && days <= 0 && months <= 0)
                )
            ) {
                milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                days = 0;
                months = 0;
            }
    
            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;
    
            seconds = absFloor(milliseconds / 1000);
            data.seconds = seconds % 60;
    
            minutes = absFloor(seconds / 60);
            data.minutes = minutes % 60;
    
            hours = absFloor(minutes / 60);
            data.hours = hours % 24;
    
            days += absFloor(hours / 24);
    
            // convert days to months
            monthsFromDays = absFloor(daysToMonths(days));
            months += monthsFromDays;
            days -= absCeil(monthsToDays(monthsFromDays));
    
            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;
    
            data.days = days;
            data.months = months;
            data.years = years;
    
            return this;
        }
    
        function daysToMonths(days) {
            // 400 years have 146097 days (taking into account leap year rules)
            // 400 years have 12 months === 4800
            return (days * 4800) / 146097;
        }
    
        function monthsToDays(months) {
            // the reverse of daysToMonths
            return (months * 146097) / 4800;
        }
    
        function as(units) {
            if (!this.isValid()) {
                return NaN;
            }
            var days,
                months,
                milliseconds = this._milliseconds;
    
            units = normalizeUnits(units);
    
            if (units === 'month' || units === 'quarter' || units === 'year') {
                days = this._days + milliseconds / 864e5;
                months = this._months + daysToMonths(days);
                switch (units) {
                    case 'month':
                        return months;
                    case 'quarter':
                        return months / 3;
                    case 'year':
                        return months / 12;
                }
            } else {
                // handle milliseconds separately because of floating point math errors (issue #1867)
                days = this._days + Math.round(monthsToDays(this._months));
                switch (units) {
                    case 'week':
                        return days / 7 + milliseconds / 6048e5;
                    case 'day':
                        return days + milliseconds / 864e5;
                    case 'hour':
                        return days * 24 + milliseconds / 36e5;
                    case 'minute':
                        return days * 1440 + milliseconds / 6e4;
                    case 'second':
                        return days * 86400 + milliseconds / 1000;
                    // Math.floor prevents floating point math errors here
                    case 'millisecond':
                        return Math.floor(days * 864e5) + milliseconds;
                    default:
                        throw new Error('Unknown unit ' + units);
                }
            }
        }
    
        function makeAs(alias) {
            return function () {
                return this.as(alias);
            };
        }
    
        var asMilliseconds = makeAs('ms'),
            asSeconds = makeAs('s'),
            asMinutes = makeAs('m'),
            asHours = makeAs('h'),
            asDays = makeAs('d'),
            asWeeks = makeAs('w'),
            asMonths = makeAs('M'),
            asQuarters = makeAs('Q'),
            asYears = makeAs('y'),
            valueOf$1 = asMilliseconds;
    
        function clone$1() {
            return createDuration(this);
        }
    
        function get$2(units) {
            units = normalizeUnits(units);
            return this.isValid() ? this[units + 's']() : NaN;
        }
    
        function makeGetter(name) {
            return function () {
                return this.isValid() ? this._data[name] : NaN;
            };
        }
    
        var milliseconds = makeGetter('milliseconds'),
            seconds = makeGetter('seconds'),
            minutes = makeGetter('minutes'),
            hours = makeGetter('hours'),
            days = makeGetter('days'),
            months = makeGetter('months'),
            years = makeGetter('years');
    
        function weeks() {
            return absFloor(this.days() / 7);
        }
    
        var round = Math.round,
            thresholds = {
                ss: 44, // a few seconds to seconds
                s: 45, // seconds to minute
                m: 45, // minutes to hour
                h: 22, // hours to day
                d: 26, // days to month/week
                w: null, // weeks to month
                M: 11, // months to year
            };
    
        // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
        function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
        }
    
        function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
            var duration = createDuration(posNegDuration).abs(),
                seconds = round(duration.as('s')),
                minutes = round(duration.as('m')),
                hours = round(duration.as('h')),
                days = round(duration.as('d')),
                months = round(duration.as('M')),
                weeks = round(duration.as('w')),
                years = round(duration.as('y')),
                a =
                    (seconds <= thresholds.ss && ['s', seconds]) ||
                    (seconds < thresholds.s && ['ss', seconds]) ||
                    (minutes <= 1 && ['m']) ||
                    (minutes < thresholds.m && ['mm', minutes]) ||
                    (hours <= 1 && ['h']) ||
                    (hours < thresholds.h && ['hh', hours]) ||
                    (days <= 1 && ['d']) ||
                    (days < thresholds.d && ['dd', days]);
    
            if (thresholds.w != null) {
                a =
                    a ||
                    (weeks <= 1 && ['w']) ||
                    (weeks < thresholds.w && ['ww', weeks]);
            }
            a = a ||
                (months <= 1 && ['M']) ||
                (months < thresholds.M && ['MM', months]) ||
                (years <= 1 && ['y']) || ['yy', years];
    
            a[2] = withoutSuffix;
            a[3] = +posNegDuration > 0;
            a[4] = locale;
            return substituteTimeAgo.apply(null, a);
        }
    
        // This function allows you to set the rounding function for relative time strings
        function getSetRelativeTimeRounding(roundingFunction) {
            if (roundingFunction === undefined) {
                return round;
            }
            if (typeof roundingFunction === 'function') {
                round = roundingFunction;
                return true;
            }
            return false;
        }
    
        // This function allows you to set a threshold for relative time strings
        function getSetRelativeTimeThreshold(threshold, limit) {
            if (thresholds[threshold] === undefined) {
                return false;
            }
            if (limit === undefined) {
                return thresholds[threshold];
            }
            thresholds[threshold] = limit;
            if (threshold === 's') {
                thresholds.ss = limit - 1;
            }
            return true;
        }
    
        function humanize(argWithSuffix, argThresholds) {
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }
    
            var withSuffix = false,
                th = thresholds,
                locale,
                output;
    
            if (typeof argWithSuffix === 'object') {
                argThresholds = argWithSuffix;
                argWithSuffix = false;
            }
            if (typeof argWithSuffix === 'boolean') {
                withSuffix = argWithSuffix;
            }
            if (typeof argThresholds === 'object') {
                th = Object.assign({}, thresholds, argThresholds);
                if (argThresholds.s != null && argThresholds.ss == null) {
                    th.ss = argThresholds.s - 1;
                }
            }
    
            locale = this.localeData();
            output = relativeTime$1(this, !withSuffix, th, locale);
    
            if (withSuffix) {
                output = locale.pastFuture(+this, output);
            }
    
            return locale.postformat(output);
        }
    
        var abs$1 = Math.abs;
    
        function sign(x) {
            return (x > 0) - (x < 0) || +x;
        }
    
        function toISOString$1() {
            // for ISO strings we do not use the normal bubbling rules:
            //  * milliseconds bubble up until they become hours
            //  * days do not bubble at all
            //  * months bubble up until they become years
            // This is because there is no context-free conversion between hours and days
            // (think of clock changes)
            // and also not between days and months (28-31 days per month)
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }
    
            var seconds = abs$1(this._milliseconds) / 1000,
                days = abs$1(this._days),
                months = abs$1(this._months),
                minutes,
                hours,
                years,
                s,
                total = this.asSeconds(),
                totalSign,
                ymSign,
                daysSign,
                hmsSign;
    
            if (!total) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }
    
            // 3600 seconds -> 60 minutes -> 1 hour
            minutes = absFloor(seconds / 60);
            hours = absFloor(minutes / 60);
            seconds %= 60;
            minutes %= 60;
    
            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;
    
            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
    
            totalSign = total < 0 ? '-' : '';
            ymSign = sign(this._months) !== sign(total) ? '-' : '';
            daysSign = sign(this._days) !== sign(total) ? '-' : '';
            hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
    
            return (
                totalSign +
                'P' +
                (years ? ymSign + years + 'Y' : '') +
                (months ? ymSign + months + 'M' : '') +
                (days ? daysSign + days + 'D' : '') +
                (hours || minutes || seconds ? 'T' : '') +
                (hours ? hmsSign + hours + 'H' : '') +
                (minutes ? hmsSign + minutes + 'M' : '') +
                (seconds ? hmsSign + s + 'S' : '')
            );
        }
    
        var proto$2 = Duration.prototype;
    
        proto$2.isValid = isValid$1;
        proto$2.abs = abs;
        proto$2.add = add$1;
        proto$2.subtract = subtract$1;
        proto$2.as = as;
        proto$2.asMilliseconds = asMilliseconds;
        proto$2.asSeconds = asSeconds;
        proto$2.asMinutes = asMinutes;
        proto$2.asHours = asHours;
        proto$2.asDays = asDays;
        proto$2.asWeeks = asWeeks;
        proto$2.asMonths = asMonths;
        proto$2.asQuarters = asQuarters;
        proto$2.asYears = asYears;
        proto$2.valueOf = valueOf$1;
        proto$2._bubble = bubble;
        proto$2.clone = clone$1;
        proto$2.get = get$2;
        proto$2.milliseconds = milliseconds;
        proto$2.seconds = seconds;
        proto$2.minutes = minutes;
        proto$2.hours = hours;
        proto$2.days = days;
        proto$2.weeks = weeks;
        proto$2.months = months;
        proto$2.years = years;
        proto$2.humanize = humanize;
        proto$2.toISOString = toISOString$1;
        proto$2.toString = toISOString$1;
        proto$2.toJSON = toISOString$1;
        proto$2.locale = locale;
        proto$2.localeData = localeData;
    
        proto$2.toIsoString = deprecate(
            'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
            toISOString$1
        );
        proto$2.lang = lang;
    
        // FORMATTING
    
        addFormatToken('X', 0, 0, 'unix');
        addFormatToken('x', 0, 0, 'valueOf');
    
        // PARSING
    
        addRegexToken('x', matchSigned);
        addRegexToken('X', matchTimestamp);
        addParseToken('X', function (input, array, config) {
            config._d = new Date(parseFloat(input) * 1000);
        });
        addParseToken('x', function (input, array, config) {
            config._d = new Date(toInt(input));
        });
    
        //! moment.js
    
        hooks.version = '2.30.1';
    
        setHookCallback(createLocal);
    
        hooks.fn = proto;
        hooks.min = min;
        hooks.max = max;
        hooks.now = now;
        hooks.utc = createUTC;
        hooks.unix = createUnix;
        hooks.months = listMonths;
        hooks.isDate = isDate;
        hooks.locale = getSetGlobalLocale;
        hooks.invalid = createInvalid;
        hooks.duration = createDuration;
        hooks.isMoment = isMoment;
        hooks.weekdays = listWeekdays;
        hooks.parseZone = createInZone;
        hooks.localeData = getLocale;
        hooks.isDuration = isDuration;
        hooks.monthsShort = listMonthsShort;
        hooks.weekdaysMin = listWeekdaysMin;
        hooks.defineLocale = defineLocale;
        hooks.updateLocale = updateLocale;
        hooks.locales = listLocales;
        hooks.weekdaysShort = listWeekdaysShort;
        hooks.normalizeUnits = normalizeUnits;
        hooks.relativeTimeRounding = getSetRelativeTimeRounding;
        hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
        hooks.calendarFormat = getCalendarFormat;
        hooks.prototype = proto;
    
        // currently HTML5 input type only supports 24-hour formats
        hooks.HTML5_FMT = {
            DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
            DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
            DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
            DATE: 'YYYY-MM-DD', // <input type="date" />
            TIME: 'HH:mm', // <input type="time" />
            TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
            TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
            WEEK: 'GGGG-[W]WW', // <input type="week" />
            MONTH: 'YYYY-MM', // <input type="month" />
        };
    
        return hooks;
    
    })));
    
    },{}],420:[function(require,module,exports){
    /*!
     * Pikaday
     *
     * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/Pikaday/Pikaday
     */
    
    (function (root, factory)
    {
        'use strict';
    
        var moment;
        if (typeof exports === 'object') {
            // CommonJS module
            // Load moment.js as an optional dependency
            try { moment = require('moment'); } catch (e) {}
            module.exports = factory(moment);
        } else if (typeof define === 'function' && define.amd) {
            // AMD. Register as an anonymous module.
            define(function (req)
            {
                // Load moment.js as an optional dependency
                var id = 'moment';
                try { moment = req(id); } catch (e) {}
                return factory(moment);
            });
        } else {
            root.Pikaday = factory(root.moment);
        }
    }(this, function (moment)
    {
        'use strict';
    
        /**
         * feature detection and helper functions
         */
        var hasMoment = typeof moment === 'function',
    
        hasEventListeners = !!window.addEventListener,
    
        document = window.document,
    
        sto = window.setTimeout,
    
        addEvent = function(el, e, callback, capture)
        {
            if (hasEventListeners) {
                el.addEventListener(e, callback, !!capture);
            } else {
                el.attachEvent('on' + e, callback);
            }
        },
    
        removeEvent = function(el, e, callback, capture)
        {
            if (hasEventListeners) {
                el.removeEventListener(e, callback, !!capture);
            } else {
                el.detachEvent('on' + e, callback);
            }
        },
    
        trim = function(str)
        {
            return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g,'');
        },
    
        hasClass = function(el, cn)
        {
            return (' ' + el.className + ' ').indexOf(' ' + cn + ' ') !== -1;
        },
    
        addClass = function(el, cn)
        {
            if (!hasClass(el, cn)) {
                el.className = (el.className === '') ? cn : el.className + ' ' + cn;
            }
        },
    
        removeClass = function(el, cn)
        {
            el.className = trim((' ' + el.className + ' ').replace(' ' + cn + ' ', ' '));
        },
    
        isArray = function(obj)
        {
            return (/Array/).test(Object.prototype.toString.call(obj));
        },
    
        isDate = function(obj)
        {
            return (/Date/).test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
        },
    
        isWeekend = function(date)
        {
            var day = date.getDay();
            return day === 0 || day === 6;
        },
    
        isLeapYear = function(year)
        {
            // solution lifted from date.js (MIT license): https://github.com/datejs/Datejs
            return ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
        },
    
        getDaysInMonth = function(year, month)
        {
            return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
        },
    
        setToStartOfDay = function(date)
        {
            if (isDate(date)) date.setHours(0,0,0,0);
        },
    
        compareDates = function(a,b)
        {
            // weak date comparison (use setToStartOfDay(date) to ensure correct result)
            return a.getTime() === b.getTime();
        },
    
        extend = function(to, from, overwrite)
        {
            var prop, hasProp;
            for (prop in from) {
                hasProp = to[prop] !== undefined;
                if (hasProp && typeof from[prop] === 'object' && from[prop] !== null && from[prop].nodeName === undefined) {
                    if (isDate(from[prop])) {
                        if (overwrite) {
                            to[prop] = new Date(from[prop].getTime());
                        }
                    }
                    else if (isArray(from[prop])) {
                        if (overwrite) {
                            to[prop] = from[prop].slice(0);
                        }
                    } else {
                        to[prop] = extend({}, from[prop], overwrite);
                    }
                } else if (overwrite || !hasProp) {
                    to[prop] = from[prop];
                }
            }
            return to;
        },
    
        fireEvent = function(el, eventName, data)
        {
            var ev;
    
            if (document.createEvent) {
                ev = document.createEvent('HTMLEvents');
                ev.initEvent(eventName, true, false);
                ev = extend(ev, data);
                el.dispatchEvent(ev);
            } else if (document.createEventObject) {
                ev = document.createEventObject();
                ev = extend(ev, data);
                el.fireEvent('on' + eventName, ev);
            }
        },
    
        adjustCalendar = function(calendar) {
            if (calendar.month < 0) {
                calendar.year -= Math.ceil(Math.abs(calendar.month)/12);
                calendar.month += 12;
            }
            if (calendar.month > 11) {
                calendar.year += Math.floor(Math.abs(calendar.month)/12);
                calendar.month -= 12;
            }
            return calendar;
        },
    
        /**
         * defaults and localisation
         */
        defaults = {
    
            // bind the picker to a form field
            field: null,
    
            // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
            bound: undefined,
    
            // data-attribute on the input field with an aria assistance text (only applied when `bound` is set)
            ariaLabel: 'Use the arrow keys to pick a date',
    
            // position of the datepicker, relative to the field (default to bottom & left)
            // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
            position: 'bottom left',
    
            // automatically fit in the viewport even if it means repositioning from the position option
            reposition: true,
    
            // the default output format for `.toString()` and `field` value
            format: 'YYYY-MM-DD',
    
            // the toString function which gets passed a current date object and format
            // and returns a string
            toString: null,
    
            // used to create date object from current input string
            parse: null,
    
            // the initial date to view when first opened
            defaultDate: null,
    
            // make the `defaultDate` the initial selected value
            setDefaultDate: false,
    
            // first day of week (0: Sunday, 1: Monday etc)
            firstDay: 0,
    
            // minimum number of days in the week that gets week number one
            // default ISO 8601, week 01 is the week with the first Thursday (4)
            firstWeekOfYearMinDays: 4,
    
            // the default flag for moment's strict date parsing
            formatStrict: false,
    
            // the minimum/earliest date that can be selected
            minDate: null,
            // the maximum/latest date that can be selected
            maxDate: null,
    
            // number of years either side, or array of upper/lower range
            yearRange: 10,
    
            // show week numbers at head of row
            showWeekNumber: false,
    
            // Week picker mode
            pickWholeWeek: false,
    
            // used internally (don't config outside)
            minYear: 0,
            maxYear: 9999,
            minMonth: undefined,
            maxMonth: undefined,
    
            startRange: null,
            endRange: null,
    
            isRTL: false,
    
            // Additional text to append to the year in the calendar title
            yearSuffix: '',
    
            // Render the month after year in the calendar title
            showMonthAfterYear: false,
    
            // Render days of the calendar grid that fall in the next or previous month
            showDaysInNextAndPreviousMonths: false,
    
            // Allows user to select days that fall in the next or previous month
            enableSelectionDaysInNextAndPreviousMonths: false,
    
            // how many months are visible
            numberOfMonths: 1,
    
            // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
            // only used for the first display or when a selected date is not visible
            mainCalendar: 'left',
    
            // Specify a DOM element to render the calendar in
            container: undefined,
    
            // Blur field when date is selected
            blurFieldOnSelect : true,
    
            // internationalization
            i18n: {
                previousMonth : 'Previous Month',
                nextMonth     : 'Next Month',
                months        : ['January','February','March','April','May','June','July','August','September','October','November','December'],
                weekdays      : ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
                weekdaysShort : ['Sun','Mon','Tue','Wed','Thu','Fri','Sat']
            },
    
            // Theme Classname
            theme: null,
    
            // events array
            events: [],
    
            // callback function
            onSelect: null,
            onOpen: null,
            onClose: null,
            onDraw: null,
    
            // Enable keyboard input
            keyboardInput: true
        },
    
    
        /**
         * templating functions to abstract HTML rendering
         */
        renderDayName = function(opts, day, abbr)
        {
            day += opts.firstDay;
            while (day >= 7) {
                day -= 7;
            }
            return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
        },
    
        renderDay = function(opts)
        {
            var arr = [];
            var ariaSelected = 'false';
            if (opts.isEmpty) {
                if (opts.showDaysInNextAndPreviousMonths) {
                    arr.push('is-outside-current-month');
    
                    if(!opts.enableSelectionDaysInNextAndPreviousMonths) {
                        arr.push('is-selection-disabled');
                    }
    
                } else {
                    return '<td class="is-empty"></td>';
                }
            }
            if (opts.isDisabled) {
                arr.push('is-disabled');
            }
            if (opts.isToday) {
                arr.push('is-today');
            }
            if (opts.isSelected) {
                arr.push('is-selected');
                ariaSelected = 'true';
            }
            if (opts.hasEvent) {
                arr.push('has-event');
            }
            if (opts.isInRange) {
                arr.push('is-inrange');
            }
            if (opts.isStartRange) {
                arr.push('is-startrange');
            }
            if (opts.isEndRange) {
                arr.push('is-endrange');
            }
            return '<td data-day="' + opts.day + '" class="' + arr.join(' ') + '" aria-selected="' + ariaSelected + '">' +
                     '<button class="pika-button pika-day" type="button" ' +
                        'data-pika-year="' + opts.year + '" data-pika-month="' + opts.month + '" data-pika-day="' + opts.day + '">' +
                            opts.day +
                     '</button>' +
                   '</td>';
        },
    
        isoWeek = function(date, firstWeekOfYearMinDays) {
            // Ensure we're at the start of the day.
            date.setHours(0, 0, 0, 0);
    
            // Thursday in current week decides the year because January 4th
            // is always in the first week according to ISO8601.
            var yearDay        = date.getDate(),
                weekDay        = date.getDay(),
                dayInFirstWeek = firstWeekOfYearMinDays,
                dayShift       = dayInFirstWeek - 1, // counting starts at 0
                daysPerWeek    = 7,
                prevWeekDay    = function(day) { return (day + daysPerWeek - 1) % daysPerWeek; };
    
            // Adjust to Thursday in week 1 and count number of weeks from date to week 1.
            date.setDate(yearDay + dayShift - prevWeekDay(weekDay));
    
            var jan4th      = new Date(date.getFullYear(), 0, dayInFirstWeek),
                msPerDay    = 24 * 60 * 60 * 1000,
                daysBetween = (date.getTime() - jan4th.getTime()) / msPerDay,
                weekNum     = 1 + Math.round((daysBetween - dayShift + prevWeekDay(jan4th.getDay())) / daysPerWeek);
    
            return weekNum;
        },
    
        renderWeek = function (d, m, y, firstWeekOfYearMinDays) {
            var date = new Date(y, m, d),
                week = hasMoment ? moment(date).isoWeek() : isoWeek(date, firstWeekOfYearMinDays);
    
            return '<td class="pika-week">' + week + '</td>';
        },
    
        renderRow = function(days, isRTL, pickWholeWeek, isRowSelected)
        {
            return '<tr class="pika-row' + (pickWholeWeek ? ' pick-whole-week' : '') + (isRowSelected ? ' is-selected' : '') + '">' + (isRTL ? days.reverse() : days).join('') + '</tr>';
        },
    
        renderBody = function(rows)
        {
            return '<tbody>' + rows.join('') + '</tbody>';
        },
    
        renderHead = function(opts)
        {
            var i, arr = [];
            if (opts.showWeekNumber) {
                arr.push('<th></th>');
            }
            for (i = 0; i < 7; i++) {
                arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + '</abbr></th>');
            }
            return '<thead><tr>' + (opts.isRTL ? arr.reverse() : arr).join('') + '</tr></thead>';
        },
    
        renderTitle = function(instance, c, year, month, refYear, randId)
        {
            var i, j, arr,
                opts = instance._o,
                isMinYear = year === opts.minYear,
                isMaxYear = year === opts.maxYear,
                html = '<div id="' + randId + '" class="pika-title" role="heading" aria-live="assertive">',
                monthHtml,
                yearHtml,
                prev = true,
                next = true;
    
            for (arr = [], i = 0; i < 12; i++) {
                arr.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' +
                    (i === month ? ' selected="selected"': '') +
                    ((isMinYear && i < opts.minMonth) || (isMaxYear && i > opts.maxMonth) ? ' disabled="disabled"' : '') + '>' +
                    opts.i18n.months[i] + '</option>');
            }
    
            monthHtml = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month" tabindex="-1">' + arr.join('') + '</select></div>';
    
            if (isArray(opts.yearRange)) {
                i = opts.yearRange[0];
                j = opts.yearRange[1] + 1;
            } else {
                i = year - opts.yearRange;
                j = 1 + year + opts.yearRange;
            }
    
            for (arr = []; i < j && i <= opts.maxYear; i++) {
                if (i >= opts.minYear) {
                    arr.push('<option value="' + i + '"' + (i === year ? ' selected="selected"': '') + '>' + (i) + '</option>');
                }
            }
            yearHtml = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + arr.join('') + '</select></div>';
    
            if (opts.showMonthAfterYear) {
                html += yearHtml + monthHtml;
            } else {
                html += monthHtml + yearHtml;
            }
    
            if (isMinYear && (month === 0 || opts.minMonth >= month)) {
                prev = false;
            }
    
            if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
                next = false;
            }
    
            if (c === 0) {
                html += '<button class="pika-prev' + (prev ? '' : ' is-disabled') + '" type="button">' + opts.i18n.previousMonth + '</button>';
            }
            if (c === (instance._o.numberOfMonths - 1) ) {
                html += '<button class="pika-next' + (next ? '' : ' is-disabled') + '" type="button">' + opts.i18n.nextMonth + '</button>';
            }
    
            return html += '</div>';
        },
    
        renderTable = function(opts, data, randId)
        {
            return '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' + randId + '">' + renderHead(opts) + renderBody(data) + '</table>';
        },
    
    
        /**
         * Pikaday constructor
         */
        Pikaday = function(options)
        {
            var self = this,
                opts = self.config(options);
    
            self._onMouseDown = function(e)
            {
                if (!self._v) {
                    return;
                }
                e = e || window.event;
                var target = e.target || e.srcElement;
                if (!target) {
                    return;
                }
    
                if (!hasClass(target, 'is-disabled')) {
                    if (hasClass(target, 'pika-button') && !hasClass(target, 'is-empty') && !hasClass(target.parentNode, 'is-disabled')) {
                        self.setDate(new Date(target.getAttribute('data-pika-year'), target.getAttribute('data-pika-month'), target.getAttribute('data-pika-day')));
                        if (opts.bound) {
                            sto(function() {
                                self.hide();
                                if (opts.blurFieldOnSelect && opts.field) {
                                    opts.field.blur();
                                }
                            }, 100);
                        }
                    }
                    else if (hasClass(target, 'pika-prev')) {
                        self.prevMonth();
                    }
                    else if (hasClass(target, 'pika-next')) {
                        self.nextMonth();
                    }
                }
                if (!hasClass(target, 'pika-select')) {
                    // if this is touch event prevent mouse events emulation
                    if (e.preventDefault) {
                        e.preventDefault();
                    } else {
                        e.returnValue = false;
                        return false;
                    }
                } else {
                    self._c = true;
                }
            };
    
            self._onChange = function(e)
            {
                e = e || window.event;
                var target = e.target || e.srcElement;
                if (!target) {
                    return;
                }
                if (hasClass(target, 'pika-select-month')) {
                    self.gotoMonth(target.value);
                }
                else if (hasClass(target, 'pika-select-year')) {
                    self.gotoYear(target.value);
                }
            };
    
            self._onKeyChange = function(e)
            {
                e = e || window.event;
    
                if (self.isVisible()) {
    
                    switch(e.keyCode){
                        case 13:
                        case 27:
                            if (opts.field) {
                                opts.field.blur();
                            }
                            break;
                        case 37:
                            self.adjustDate('subtract', 1);
                            break;
                        case 38:
                            self.adjustDate('subtract', 7);
                            break;
                        case 39:
                            self.adjustDate('add', 1);
                            break;
                        case 40:
                            self.adjustDate('add', 7);
                            break;
                        case 8:
                        case 46:
                            self.setDate(null);
                            break;
                    }
                }
            };
    
            self._parseFieldValue = function()
            {
                if (opts.parse) {
                    return opts.parse(opts.field.value, opts.format);
                } else if (hasMoment) {
                    var date = moment(opts.field.value, opts.format, opts.formatStrict);
                    return (date && date.isValid()) ? date.toDate() : null;
                } else {
                    return new Date(Date.parse(opts.field.value));
                }
            };
    
            self._onInputChange = function(e)
            {
                var date;
    
                if (e.firedBy === self) {
                    return;
                }
                date = self._parseFieldValue();
                if (isDate(date)) {
                  self.setDate(date);
                }
                if (!self._v) {
                    self.show();
                }
            };
    
            self._onInputFocus = function()
            {
                self.show();
            };
    
            self._onInputClick = function()
            {
                self.show();
            };
    
            self._onInputBlur = function()
            {
                // IE allows pika div to gain focus; catch blur the input field
                var pEl = document.activeElement;
                do {
                    if (hasClass(pEl, 'pika-single')) {
                        return;
                    }
                }
                while ((pEl = pEl.parentNode));
    
                if (!self._c) {
                    self._b = sto(function() {
                        self.hide();
                    }, 50);
                }
                self._c = false;
            };
    
            self._onClick = function(e)
            {
                e = e || window.event;
                var target = e.target || e.srcElement,
                    pEl = target;
                if (!target) {
                    return;
                }
                if (!hasEventListeners && hasClass(target, 'pika-select')) {
                    if (!target.onchange) {
                        target.setAttribute('onchange', 'return;');
                        addEvent(target, 'change', self._onChange);
                    }
                }
                do {
                    if (hasClass(pEl, 'pika-single') || pEl === opts.trigger) {
                        return;
                    }
                }
                while ((pEl = pEl.parentNode));
                if (self._v && target !== opts.trigger && pEl !== opts.trigger) {
                    self.hide();
                }
            };
    
            self.el = document.createElement('div');
            self.el.className = 'pika-single' + (opts.isRTL ? ' is-rtl' : '') + (opts.theme ? ' ' + opts.theme : '');
    
            addEvent(self.el, 'mousedown', self._onMouseDown, true);
            addEvent(self.el, 'touchend', self._onMouseDown, true);
            addEvent(self.el, 'change', self._onChange);
    
            if (opts.keyboardInput) {
                addEvent(document, 'keydown', self._onKeyChange);
            }
    
            if (opts.field) {
                if (opts.container) {
                    opts.container.appendChild(self.el);
                } else if (opts.bound) {
                    document.body.appendChild(self.el);
                } else {
                    opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
                }
                addEvent(opts.field, 'change', self._onInputChange);
    
                if (!opts.defaultDate) {
                    opts.defaultDate = self._parseFieldValue();
                    opts.setDefaultDate = true;
                }
            }
    
            var defDate = opts.defaultDate;
    
            if (isDate(defDate)) {
                if (opts.setDefaultDate) {
                    self.setDate(defDate, true);
                } else {
                    self.gotoDate(defDate);
                }
            } else {
                self.gotoDate(new Date());
            }
    
            if (opts.bound) {
                this.hide();
                self.el.className += ' is-bound';
                addEvent(opts.trigger, 'click', self._onInputClick);
                addEvent(opts.trigger, 'focus', self._onInputFocus);
                addEvent(opts.trigger, 'blur', self._onInputBlur);
            } else {
                this.show();
            }
        };
    
    
        /**
         * public Pikaday API
         */
        Pikaday.prototype = {
    
    
            /**
             * configure functionality
             */
            config: function(options)
            {
                if (!this._o) {
                    this._o = extend({}, defaults, true);
                }
    
                var opts = extend(this._o, options, true);
    
                opts.isRTL = !!opts.isRTL;
    
                opts.field = (opts.field && opts.field.nodeName) ? opts.field : null;
    
                opts.theme = (typeof opts.theme) === 'string' && opts.theme ? opts.theme : null;
    
                opts.bound = !!(opts.bound !== undefined ? opts.field && opts.bound : opts.field);
    
                opts.trigger = (opts.trigger && opts.trigger.nodeName) ? opts.trigger : opts.field;
    
                opts.disableWeekends = !!opts.disableWeekends;
    
                opts.disableDayFn = (typeof opts.disableDayFn) === 'function' ? opts.disableDayFn : null;
    
                var nom = parseInt(opts.numberOfMonths, 10) || 1;
                opts.numberOfMonths = nom > 4 ? 4 : nom;
    
                if (!isDate(opts.minDate)) {
                    opts.minDate = false;
                }
                if (!isDate(opts.maxDate)) {
                    opts.maxDate = false;
                }
                if ((opts.minDate && opts.maxDate) && opts.maxDate < opts.minDate) {
                    opts.maxDate = opts.minDate = false;
                }
                if (opts.minDate) {
                    this.setMinDate(opts.minDate);
                }
                if (opts.maxDate) {
                    this.setMaxDate(opts.maxDate);
                }
    
                if (isArray(opts.yearRange)) {
                    var fallback = new Date().getFullYear() - 10;
                    opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
                    opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
                } else {
                    opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange;
                    if (opts.yearRange > 100) {
                        opts.yearRange = 100;
                    }
                }
    
                return opts;
            },
    
            /**
             * return a formatted string of the current selection (using Moment.js if available)
             */
            toString: function(format)
            {
                format = format || this._o.format;
                if (!isDate(this._d)) {
                    return '';
                }
                if (this._o.toString) {
                  return this._o.toString(this._d, format);
                }
                if (hasMoment) {
                  return moment(this._d).format(format);
                }
                return this._d.toDateString();
            },
    
            /**
             * return a Moment.js object of the current selection (if available)
             */
            getMoment: function()
            {
                return hasMoment ? moment(this._d) : null;
            },
    
            /**
             * set the current selection from a Moment.js object (if available)
             */
            setMoment: function(date, preventOnSelect)
            {
                if (hasMoment && moment.isMoment(date)) {
                    this.setDate(date.toDate(), preventOnSelect);
                }
            },
    
            /**
             * return a Date object of the current selection
             */
            getDate: function()
            {
                return isDate(this._d) ? new Date(this._d.getTime()) : null;
            },
    
            /**
             * set the current selection
             */
            setDate: function(date, preventOnSelect)
            {
                if (!date) {
                    this._d = null;
    
                    if (this._o.field) {
                        this._o.field.value = '';
                        fireEvent(this._o.field, 'change', { firedBy: this });
                    }
    
                    return this.draw();
                }
                if (typeof date === 'string') {
                    date = new Date(Date.parse(date));
                }
                if (!isDate(date)) {
                    return;
                }
    
                var min = this._o.minDate,
                    max = this._o.maxDate;
    
                if (isDate(min) && date < min) {
                    date = min;
                } else if (isDate(max) && date > max) {
                    date = max;
                }
    
                this._d = new Date(date.getTime());
                setToStartOfDay(this._d);
                this.gotoDate(this._d);
    
                if (this._o.field) {
                    this._o.field.value = this.toString();
                    fireEvent(this._o.field, 'change', { firedBy: this });
                }
                if (!preventOnSelect && typeof this._o.onSelect === 'function') {
                    this._o.onSelect.call(this, this.getDate());
                }
            },
    
            /**
             * clear and reset the date
             */
            clear: function()
            {
                this.setDate(null);
            },
    
            /**
             * change view to a specific date
             */
            gotoDate: function(date)
            {
                var newCalendar = true;
    
                if (!isDate(date)) {
                    return;
                }
    
                if (this.calendars) {
                    var firstVisibleDate = new Date(this.calendars[0].year, this.calendars[0].month, 1),
                        lastVisibleDate = new Date(this.calendars[this.calendars.length-1].year, this.calendars[this.calendars.length-1].month, 1),
                        visibleDate = date.getTime();
                    // get the end of the month
                    lastVisibleDate.setMonth(lastVisibleDate.getMonth()+1);
                    lastVisibleDate.setDate(lastVisibleDate.getDate()-1);
                    newCalendar = (visibleDate < firstVisibleDate.getTime() || lastVisibleDate.getTime() < visibleDate);
                }
    
                if (newCalendar) {
                    this.calendars = [{
                        month: date.getMonth(),
                        year: date.getFullYear()
                    }];
                    if (this._o.mainCalendar === 'right') {
                        this.calendars[0].month += 1 - this._o.numberOfMonths;
                    }
                }
    
                this.adjustCalendars();
            },
    
            adjustDate: function(sign, days) {
    
                var day = this.getDate() || new Date();
                var difference = parseInt(days)*24*60*60*1000;
    
                var newDay;
    
                if (sign === 'add') {
                    newDay = new Date(day.valueOf() + difference);
                } else if (sign === 'subtract') {
                    newDay = new Date(day.valueOf() - difference);
                }
    
                this.setDate(newDay);
            },
    
            adjustCalendars: function() {
                this.calendars[0] = adjustCalendar(this.calendars[0]);
                for (var c = 1; c < this._o.numberOfMonths; c++) {
                    this.calendars[c] = adjustCalendar({
                        month: this.calendars[0].month + c,
                        year: this.calendars[0].year
                    });
                }
                this.draw();
            },
    
            gotoToday: function()
            {
                this.gotoDate(new Date());
            },
    
            /**
             * change view to a specific month (zero-index, e.g. 0: January)
             */
            gotoMonth: function(month)
            {
                if (!isNaN(month)) {
                    this.calendars[0].month = parseInt(month, 10);
                    this.adjustCalendars();
                }
            },
    
            nextMonth: function()
            {
                this.calendars[0].month++;
                this.adjustCalendars();
            },
    
            prevMonth: function()
            {
                this.calendars[0].month--;
                this.adjustCalendars();
            },
    
            /**
             * change view to a specific full year (e.g. "2012")
             */
            gotoYear: function(year)
            {
                if (!isNaN(year)) {
                    this.calendars[0].year = parseInt(year, 10);
                    this.adjustCalendars();
                }
            },
    
            /**
             * change the minDate
             */
            setMinDate: function(value)
            {
                if(value instanceof Date) {
                    setToStartOfDay(value);
                    this._o.minDate = value;
                    this._o.minYear  = value.getFullYear();
                    this._o.minMonth = value.getMonth();
                } else {
                    this._o.minDate = defaults.minDate;
                    this._o.minYear  = defaults.minYear;
                    this._o.minMonth = defaults.minMonth;
                    this._o.startRange = defaults.startRange;
                }
    
                this.draw();
            },
    
            /**
             * change the maxDate
             */
            setMaxDate: function(value)
            {
                if(value instanceof Date) {
                    setToStartOfDay(value);
                    this._o.maxDate = value;
                    this._o.maxYear = value.getFullYear();
                    this._o.maxMonth = value.getMonth();
                } else {
                    this._o.maxDate = defaults.maxDate;
                    this._o.maxYear = defaults.maxYear;
                    this._o.maxMonth = defaults.maxMonth;
                    this._o.endRange = defaults.endRange;
                }
    
                this.draw();
            },
    
            setStartRange: function(value)
            {
                this._o.startRange = value;
            },
    
            setEndRange: function(value)
            {
                this._o.endRange = value;
            },
    
            /**
             * refresh the HTML
             */
            draw: function(force)
            {
                if (!this._v && !force) {
                    return;
                }
                var opts = this._o,
                    minYear = opts.minYear,
                    maxYear = opts.maxYear,
                    minMonth = opts.minMonth,
                    maxMonth = opts.maxMonth,
                    html = '',
                    randId;
    
                if (this._y <= minYear) {
                    this._y = minYear;
                    if (!isNaN(minMonth) && this._m < minMonth) {
                        this._m = minMonth;
                    }
                }
                if (this._y >= maxYear) {
                    this._y = maxYear;
                    if (!isNaN(maxMonth) && this._m > maxMonth) {
                        this._m = maxMonth;
                    }
                }
    
                for (var c = 0; c < opts.numberOfMonths; c++) {
                    randId = 'pika-title-' + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 2);
                    html += '<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year, randId) + this.render(this.calendars[c].year, this.calendars[c].month, randId) + '</div>';
                }
    
                this.el.innerHTML = html;
    
                if (opts.bound) {
                    if(opts.field.type !== 'hidden') {
                        sto(function() {
                            opts.trigger.focus();
                        }, 1);
                    }
                }
    
                if (typeof this._o.onDraw === 'function') {
                    this._o.onDraw(this);
                }
    
                if (opts.bound) {
                    // let the screen reader user know to use arrow keys
                    opts.field.setAttribute('aria-label', opts.ariaLabel);
                }
            },
    
            adjustPosition: function()
            {
                var field, pEl, width, height, viewportWidth, viewportHeight, scrollTop, left, top, clientRect, leftAligned, bottomAligned;
    
                if (this._o.container) return;
    
                this.el.style.position = 'absolute';
    
                field = this._o.trigger;
                pEl = field;
                width = this.el.offsetWidth;
                height = this.el.offsetHeight;
                viewportWidth = window.innerWidth || document.documentElement.clientWidth;
                viewportHeight = window.innerHeight || document.documentElement.clientHeight;
                scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
                leftAligned = true;
                bottomAligned = true;
    
                if (typeof field.getBoundingClientRect === 'function') {
                    clientRect = field.getBoundingClientRect();
                    left = clientRect.left + window.pageXOffset;
                    top = clientRect.bottom + window.pageYOffset;
                } else {
                    left = pEl.offsetLeft;
                    top  = pEl.offsetTop + pEl.offsetHeight;
                    while((pEl = pEl.offsetParent)) {
                        left += pEl.offsetLeft;
                        top  += pEl.offsetTop;
                    }
                }
    
                // default position is bottom & left
                if ((this._o.reposition && left + width > viewportWidth) ||
                    (
                        this._o.position.indexOf('right') > -1 &&
                        left - width + field.offsetWidth > 0
                    )
                ) {
                    left = left - width + field.offsetWidth;
                    leftAligned = false;
                }
                if ((this._o.reposition && top + height > viewportHeight + scrollTop) ||
                    (
                        this._o.position.indexOf('top') > -1 &&
                        top - height - field.offsetHeight > 0
                    )
                ) {
                    top = top - height - field.offsetHeight;
                    bottomAligned = false;
                }
    
                this.el.style.left = left + 'px';
                this.el.style.top = top + 'px';
    
                addClass(this.el, leftAligned ? 'left-aligned' : 'right-aligned');
                addClass(this.el, bottomAligned ? 'bottom-aligned' : 'top-aligned');
                removeClass(this.el, !leftAligned ? 'left-aligned' : 'right-aligned');
                removeClass(this.el, !bottomAligned ? 'bottom-aligned' : 'top-aligned');
            },
    
            /**
             * render HTML for a particular month
             */
            render: function(year, month, randId)
            {
                var opts   = this._o,
                    now    = new Date(),
                    days   = getDaysInMonth(year, month),
                    before = new Date(year, month, 1).getDay(),
                    data   = [],
                    row    = [];
                setToStartOfDay(now);
                if (opts.firstDay > 0) {
                    before -= opts.firstDay;
                    if (before < 0) {
                        before += 7;
                    }
                }
                var previousMonth = month === 0 ? 11 : month - 1,
                    nextMonth = month === 11 ? 0 : month + 1,
                    yearOfPreviousMonth = month === 0 ? year - 1 : year,
                    yearOfNextMonth = month === 11 ? year + 1 : year,
                    daysInPreviousMonth = getDaysInMonth(yearOfPreviousMonth, previousMonth);
                var cells = days + before,
                    after = cells;
                while(after > 7) {
                    after -= 7;
                }
                cells += 7 - after;
                var isWeekSelected = false;
                for (var i = 0, r = 0; i < cells; i++)
                {
                    var day = new Date(year, month, 1 + (i - before)),
                        isSelected = isDate(this._d) ? compareDates(day, this._d) : false,
                        isToday = compareDates(day, now),
                        hasEvent = opts.events.indexOf(day.toDateString()) !== -1 ? true : false,
                        isEmpty = i < before || i >= (days + before),
                        dayNumber = 1 + (i - before),
                        monthNumber = month,
                        yearNumber = year,
                        isStartRange = opts.startRange && compareDates(opts.startRange, day),
                        isEndRange = opts.endRange && compareDates(opts.endRange, day),
                        isInRange = opts.startRange && opts.endRange && opts.startRange < day && day < opts.endRange,
                        isDisabled = (opts.minDate && day < opts.minDate) ||
                                     (opts.maxDate && day > opts.maxDate) ||
                                     (opts.disableWeekends && isWeekend(day)) ||
                                     (opts.disableDayFn && opts.disableDayFn(day));
    
                    if (isEmpty) {
                        if (i < before) {
                            dayNumber = daysInPreviousMonth + dayNumber;
                            monthNumber = previousMonth;
                            yearNumber = yearOfPreviousMonth;
                        } else {
                            dayNumber = dayNumber - days;
                            monthNumber = nextMonth;
                            yearNumber = yearOfNextMonth;
                        }
                    }
    
                    var dayConfig = {
                            day: dayNumber,
                            month: monthNumber,
                            year: yearNumber,
                            hasEvent: hasEvent,
                            isSelected: isSelected,
                            isToday: isToday,
                            isDisabled: isDisabled,
                            isEmpty: isEmpty,
                            isStartRange: isStartRange,
                            isEndRange: isEndRange,
                            isInRange: isInRange,
                            showDaysInNextAndPreviousMonths: opts.showDaysInNextAndPreviousMonths,
                            enableSelectionDaysInNextAndPreviousMonths: opts.enableSelectionDaysInNextAndPreviousMonths
                        };
    
                    if (opts.pickWholeWeek && isSelected) {
                        isWeekSelected = true;
                    }
    
                    row.push(renderDay(dayConfig));
    
                    if (++r === 7) {
                        if (opts.showWeekNumber) {
                            row.unshift(renderWeek(i - before, month, year, opts.firstWeekOfYearMinDays));
                        }
                        data.push(renderRow(row, opts.isRTL, opts.pickWholeWeek, isWeekSelected));
                        row = [];
                        r = 0;
                        isWeekSelected = false;
                    }
                }
                return renderTable(opts, data, randId);
            },
    
            isVisible: function()
            {
                return this._v;
            },
    
            show: function()
            {
                if (!this.isVisible()) {
                    this._v = true;
                    this.draw();
                    removeClass(this.el, 'is-hidden');
                    if (this._o.bound) {
                        addEvent(document, 'click', this._onClick);
                        this.adjustPosition();
                    }
                    if (typeof this._o.onOpen === 'function') {
                        this._o.onOpen.call(this);
                    }
                }
            },
    
            hide: function()
            {
                var v = this._v;
                if (v !== false) {
                    if (this._o.bound) {
                        removeEvent(document, 'click', this._onClick);
                    }
    
                    if (!this._o.container) {
                        this.el.style.position = 'static'; // reset
                        this.el.style.left = 'auto';
                        this.el.style.top = 'auto';
                    }
                    addClass(this.el, 'is-hidden');
                    this._v = false;
                    if (v !== undefined && typeof this._o.onClose === 'function') {
                        this._o.onClose.call(this);
                    }
                }
            },
    
            /**
             * GAME OVER
             */
            destroy: function()
            {
                var opts = this._o;
    
                this.hide();
                removeEvent(this.el, 'mousedown', this._onMouseDown, true);
                removeEvent(this.el, 'touchend', this._onMouseDown, true);
                removeEvent(this.el, 'change', this._onChange);
                if (opts.keyboardInput) {
                    removeEvent(document, 'keydown', this._onKeyChange);
                }
                if (opts.field) {
                    removeEvent(opts.field, 'change', this._onInputChange);
                    if (opts.bound) {
                        removeEvent(opts.trigger, 'click', this._onInputClick);
                        removeEvent(opts.trigger, 'focus', this._onInputFocus);
                        removeEvent(opts.trigger, 'blur', this._onInputBlur);
                    }
                }
                if (this.el.parentNode) {
                    this.el.parentNode.removeChild(this.el);
                }
            }
    
        };
    
        return Pikaday;
    }));
    
    },{"moment":419}],421:[function(require,module,exports){
    /*!
     * Pikaday jQuery plugin.
     *
     * Copyright © 2013 David Bushell | BSD & MIT license | https://github.com/Pikaday/Pikaday
     */
    
    (function (root, factory)
    {
        'use strict';
    
        if (typeof exports === 'object') {
            // CommonJS module
            factory(require('jquery'), require('pikaday'));
        } else if (typeof define === 'function' && define.amd) {
            // AMD. Register as an anonymous module.
            define(['jquery', 'pikaday'], factory);
        } else {
            // Browser globals
            factory(root.jQuery, root.Pikaday);
        }
    }(this, function ($, Pikaday)
    {
        'use strict';
    
        $.fn.pikaday = function()
        {
            var args = arguments;
    
            if (!args || !args.length) {
                args = [{ }];
            }
    
            return this.each(function()
            {
                var self   = $(this),
                    plugin = self.data('pikaday');
    
                if (!(plugin instanceof Pikaday)) {
                    if (typeof args[0] === 'object') {
                        var options = $.extend({}, args[0]);
                        options.field = self[0];
                        self.data('pikaday', new Pikaday(options));
                    }
                } else {
                    if (typeof args[0] === 'string' && typeof plugin[args[0]] === 'function') {
                        plugin[args[0]].apply(plugin, Array.prototype.slice.call(args,1));
    
                        if (args[0] === 'destroy') {
                            self.removeData('pikaday');
                        }
                    }
                }
            });
        };
    
    }));
    
    },{"jquery":416,"pikaday":420}],422:[function(require,module,exports){
    (function (global){(function (){
    /**!
     * @fileOverview Kickass library to create and place poppers near their reference elements.
     * @version 1.16.1
     * @license
     * Copyright (c) 2016 Federico Zivolo and contributors
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     */
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
        (global.Popper = factory());
    }(this, (function () { 'use strict';
    
    var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';
    
    var timeoutDuration = function () {
      var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
      for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
        if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
          return 1;
        }
      }
      return 0;
    }();
    
    function microtaskDebounce(fn) {
      var called = false;
      return function () {
        if (called) {
          return;
        }
        called = true;
        window.Promise.resolve().then(function () {
          called = false;
          fn();
        });
      };
    }
    
    function taskDebounce(fn) {
      var scheduled = false;
      return function () {
        if (!scheduled) {
          scheduled = true;
          setTimeout(function () {
            scheduled = false;
            fn();
          }, timeoutDuration);
        }
      };
    }
    
    var supportsMicroTasks = isBrowser && window.Promise;
    
    /**
    * Create a debounced version of a method, that's asynchronously deferred
    * but called in the minimum time possible.
    *
    * @method
    * @memberof Popper.Utils
    * @argument {Function} fn
    * @returns {Function}
    */
    var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;
    
    /**
     * Check if the given variable is a function
     * @method
     * @memberof Popper.Utils
     * @argument {Any} functionToCheck - variable to check
     * @returns {Boolean} answer to: is a function?
     */
    function isFunction(functionToCheck) {
      var getType = {};
      return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
    }
    
    /**
     * Get CSS computed property of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Eement} element
     * @argument {String} property
     */
    function getStyleComputedProperty(element, property) {
      if (element.nodeType !== 1) {
        return [];
      }
      // NOTE: 1 DOM access here
      var window = element.ownerDocument.defaultView;
      var css = window.getComputedStyle(element, null);
      return property ? css[property] : css;
    }
    
    /**
     * Returns the parentNode or the host of the element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} parent
     */
    function getParentNode(element) {
      if (element.nodeName === 'HTML') {
        return element;
      }
      return element.parentNode || element.host;
    }
    
    /**
     * Returns the scrolling parent of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} scroll parent
     */
    function getScrollParent(element) {
      // Return body, `getScroll` will take care to get the correct `scrollTop` from it
      if (!element) {
        return document.body;
      }
    
      switch (element.nodeName) {
        case 'HTML':
        case 'BODY':
          return element.ownerDocument.body;
        case '#document':
          return element.body;
      }
    
      // Firefox want us to check `-x` and `-y` variations as well
    
      var _getStyleComputedProp = getStyleComputedProperty(element),
          overflow = _getStyleComputedProp.overflow,
          overflowX = _getStyleComputedProp.overflowX,
          overflowY = _getStyleComputedProp.overflowY;
    
      if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
        return element;
      }
    
      return getScrollParent(getParentNode(element));
    }
    
    /**
     * Returns the reference node of the reference object, or the reference object itself.
     * @method
     * @memberof Popper.Utils
     * @param {Element|Object} reference - the reference element (the popper will be relative to this)
     * @returns {Element} parent
     */
    function getReferenceNode(reference) {
      return reference && reference.referenceNode ? reference.referenceNode : reference;
    }
    
    var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
    var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);
    
    /**
     * Determines if the browser is Internet Explorer
     * @method
     * @memberof Popper.Utils
     * @param {Number} version to check
     * @returns {Boolean} isIE
     */
    function isIE(version) {
      if (version === 11) {
        return isIE11;
      }
      if (version === 10) {
        return isIE10;
      }
      return isIE11 || isIE10;
    }
    
    /**
     * Returns the offset parent of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} offset parent
     */
    function getOffsetParent(element) {
      if (!element) {
        return document.documentElement;
      }
    
      var noOffsetParent = isIE(10) ? document.body : null;
    
      // NOTE: 1 DOM access here
      var offsetParent = element.offsetParent || null;
      // Skip hidden elements which don't have an offsetParent
      while (offsetParent === noOffsetParent && element.nextElementSibling) {
        offsetParent = (element = element.nextElementSibling).offsetParent;
      }
    
      var nodeName = offsetParent && offsetParent.nodeName;
    
      if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
        return element ? element.ownerDocument.documentElement : document.documentElement;
      }
    
      // .offsetParent will return the closest TH, TD or TABLE in case
      // no offsetParent is present, I hate this job...
      if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
        return getOffsetParent(offsetParent);
      }
    
      return offsetParent;
    }
    
    function isOffsetContainer(element) {
      var nodeName = element.nodeName;
    
      if (nodeName === 'BODY') {
        return false;
      }
      return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
    }
    
    /**
     * Finds the root node (document, shadowDOM root) of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} node
     * @returns {Element} root node
     */
    function getRoot(node) {
      if (node.parentNode !== null) {
        return getRoot(node.parentNode);
      }
    
      return node;
    }
    
    /**
     * Finds the offset parent common to the two provided nodes
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element1
     * @argument {Element} element2
     * @returns {Element} common offset parent
     */
    function findCommonOffsetParent(element1, element2) {
      // This check is needed to avoid errors in case one of the elements isn't defined for any reason
      if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
        return document.documentElement;
      }
    
      // Here we make sure to give as "start" the element that comes first in the DOM
      var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
      var start = order ? element1 : element2;
      var end = order ? element2 : element1;
    
      // Get common ancestor container
      var range = document.createRange();
      range.setStart(start, 0);
      range.setEnd(end, 0);
      var commonAncestorContainer = range.commonAncestorContainer;
    
      // Both nodes are inside #document
    
      if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
        if (isOffsetContainer(commonAncestorContainer)) {
          return commonAncestorContainer;
        }
    
        return getOffsetParent(commonAncestorContainer);
      }
    
      // one of the nodes is inside shadowDOM, find which one
      var element1root = getRoot(element1);
      if (element1root.host) {
        return findCommonOffsetParent(element1root.host, element2);
      } else {
        return findCommonOffsetParent(element1, getRoot(element2).host);
      }
    }
    
    /**
     * Gets the scroll value of the given element in the given side (top and left)
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @argument {String} side `top` or `left`
     * @returns {number} amount of scrolled pixels
     */
    function getScroll(element) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';
    
      var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
      var nodeName = element.nodeName;
    
      if (nodeName === 'BODY' || nodeName === 'HTML') {
        var html = element.ownerDocument.documentElement;
        var scrollingElement = element.ownerDocument.scrollingElement || html;
        return scrollingElement[upperSide];
      }
    
      return element[upperSide];
    }
    
    /*
     * Sum or subtract the element scroll values (left and top) from a given rect object
     * @method
     * @memberof Popper.Utils
     * @param {Object} rect - Rect object you want to change
     * @param {HTMLElement} element - The element from the function reads the scroll values
     * @param {Boolean} subtract - set to true if you want to subtract the scroll values
     * @return {Object} rect - The modifier rect object
     */
    function includeScroll(rect, element) {
      var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      var modifier = subtract ? -1 : 1;
      rect.top += scrollTop * modifier;
      rect.bottom += scrollTop * modifier;
      rect.left += scrollLeft * modifier;
      rect.right += scrollLeft * modifier;
      return rect;
    }
    
    /*
     * Helper to detect borders of a given element
     * @method
     * @memberof Popper.Utils
     * @param {CSSStyleDeclaration} styles
     * Result of `getStyleComputedProperty` on the given element
     * @param {String} axis - `x` or `y`
     * @return {number} borders - The borders size of the given axis
     */
    
    function getBordersSize(styles, axis) {
      var sideA = axis === 'x' ? 'Left' : 'Top';
      var sideB = sideA === 'Left' ? 'Right' : 'Bottom';
    
      return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);
    }
    
    function getSize(axis, body, html, computedStyle) {
      return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
    }
    
    function getWindowSizes(document) {
      var body = document.body;
      var html = document.documentElement;
      var computedStyle = isIE(10) && getComputedStyle(html);
    
      return {
        height: getSize('Height', body, html, computedStyle),
        width: getSize('Width', body, html, computedStyle)
      };
    }
    
    var classCallCheck = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };
    
    var createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
    
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    
    
    
    
    
    var defineProperty = function (obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
    
      return obj;
    };
    
    var _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
    
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
    
      return target;
    };
    
    /**
     * Given element offsets, generate an output similar to getBoundingClientRect
     * @method
     * @memberof Popper.Utils
     * @argument {Object} offsets
     * @returns {Object} ClientRect like output
     */
    function getClientRect(offsets) {
      return _extends({}, offsets, {
        right: offsets.left + offsets.width,
        bottom: offsets.top + offsets.height
      });
    }
    
    /**
     * Get bounding client rect of given element
     * @method
     * @memberof Popper.Utils
     * @param {HTMLElement} element
     * @return {Object} client rect
     */
    function getBoundingClientRect(element) {
      var rect = {};
    
      // IE10 10 FIX: Please, don't ask, the element isn't
      // considered in DOM in some circumstances...
      // This isn't reproducible in IE10 compatibility mode of IE11
      try {
        if (isIE(10)) {
          rect = element.getBoundingClientRect();
          var scrollTop = getScroll(element, 'top');
          var scrollLeft = getScroll(element, 'left');
          rect.top += scrollTop;
          rect.left += scrollLeft;
          rect.bottom += scrollTop;
          rect.right += scrollLeft;
        } else {
          rect = element.getBoundingClientRect();
        }
      } catch (e) {}
    
      var result = {
        left: rect.left,
        top: rect.top,
        width: rect.right - rect.left,
        height: rect.bottom - rect.top
      };
    
      // subtract scrollbar size from sizes
      var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
      var width = sizes.width || element.clientWidth || result.width;
      var height = sizes.height || element.clientHeight || result.height;
    
      var horizScrollbar = element.offsetWidth - width;
      var vertScrollbar = element.offsetHeight - height;
    
      // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
      // we make this check conditional for performance reasons
      if (horizScrollbar || vertScrollbar) {
        var styles = getStyleComputedProperty(element);
        horizScrollbar -= getBordersSize(styles, 'x');
        vertScrollbar -= getBordersSize(styles, 'y');
    
        result.width -= horizScrollbar;
        result.height -= vertScrollbar;
      }
    
      return getClientRect(result);
    }
    
    function getOffsetRectRelativeToArbitraryNode(children, parent) {
      var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    
      var isIE10 = isIE(10);
      var isHTML = parent.nodeName === 'HTML';
      var childrenRect = getBoundingClientRect(children);
      var parentRect = getBoundingClientRect(parent);
      var scrollParent = getScrollParent(children);
    
      var styles = getStyleComputedProperty(parent);
      var borderTopWidth = parseFloat(styles.borderTopWidth);
      var borderLeftWidth = parseFloat(styles.borderLeftWidth);
    
      // In cases where the parent is fixed, we must ignore negative scroll in offset calc
      if (fixedPosition && isHTML) {
        parentRect.top = Math.max(parentRect.top, 0);
        parentRect.left = Math.max(parentRect.left, 0);
      }
      var offsets = getClientRect({
        top: childrenRect.top - parentRect.top - borderTopWidth,
        left: childrenRect.left - parentRect.left - borderLeftWidth,
        width: childrenRect.width,
        height: childrenRect.height
      });
      offsets.marginTop = 0;
      offsets.marginLeft = 0;
    
      // Subtract margins of documentElement in case it's being used as parent
      // we do this only on HTML because it's the only element that behaves
      // differently when margins are applied to it. The margins are included in
      // the box of the documentElement, in the other cases not.
      if (!isIE10 && isHTML) {
        var marginTop = parseFloat(styles.marginTop);
        var marginLeft = parseFloat(styles.marginLeft);
    
        offsets.top -= borderTopWidth - marginTop;
        offsets.bottom -= borderTopWidth - marginTop;
        offsets.left -= borderLeftWidth - marginLeft;
        offsets.right -= borderLeftWidth - marginLeft;
    
        // Attach marginTop and marginLeft because in some circumstances we may need them
        offsets.marginTop = marginTop;
        offsets.marginLeft = marginLeft;
      }
    
      if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
        offsets = includeScroll(offsets, parent);
      }
    
      return offsets;
    }
    
    function getViewportOffsetRectRelativeToArtbitraryNode(element) {
      var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    
      var html = element.ownerDocument.documentElement;
      var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
      var width = Math.max(html.clientWidth, window.innerWidth || 0);
      var height = Math.max(html.clientHeight, window.innerHeight || 0);
    
      var scrollTop = !excludeScroll ? getScroll(html) : 0;
      var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;
    
      var offset = {
        top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
        left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
        width: width,
        height: height
      };
    
      return getClientRect(offset);
    }
    
    /**
     * Check if the given element is fixed or is inside a fixed parent
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @argument {Element} customContainer
     * @returns {Boolean} answer to "isFixed?"
     */
    function isFixed(element) {
      var nodeName = element.nodeName;
      if (nodeName === 'BODY' || nodeName === 'HTML') {
        return false;
      }
      if (getStyleComputedProperty(element, 'position') === 'fixed') {
        return true;
      }
      var parentNode = getParentNode(element);
      if (!parentNode) {
        return false;
      }
      return isFixed(parentNode);
    }
    
    /**
     * Finds the first parent of an element that has a transformed property defined
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} first transformed parent or documentElement
     */
    
    function getFixedPositionOffsetParent(element) {
      // This check is needed to avoid errors in case one of the elements isn't defined for any reason
      if (!element || !element.parentElement || isIE()) {
        return document.documentElement;
      }
      var el = element.parentElement;
      while (el && getStyleComputedProperty(el, 'transform') === 'none') {
        el = el.parentElement;
      }
      return el || document.documentElement;
    }
    
    /**
     * Computed the boundaries limits and return them
     * @method
     * @memberof Popper.Utils
     * @param {HTMLElement} popper
     * @param {HTMLElement} reference
     * @param {number} padding
     * @param {HTMLElement} boundariesElement - Element used to define the boundaries
     * @param {Boolean} fixedPosition - Is in fixed position mode
     * @returns {Object} Coordinates of the boundaries
     */
    function getBoundaries(popper, reference, padding, boundariesElement) {
      var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    
      // NOTE: 1 DOM access here
    
      var boundaries = { top: 0, left: 0 };
      var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
    
      // Handle viewport case
      if (boundariesElement === 'viewport') {
        boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
      } else {
        // Handle other cases based on DOM element used as boundaries
        var boundariesNode = void 0;
        if (boundariesElement === 'scrollParent') {
          boundariesNode = getScrollParent(getParentNode(reference));
          if (boundariesNode.nodeName === 'BODY') {
            boundariesNode = popper.ownerDocument.documentElement;
          }
        } else if (boundariesElement === 'window') {
          boundariesNode = popper.ownerDocument.documentElement;
        } else {
          boundariesNode = boundariesElement;
        }
    
        var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);
    
        // In case of HTML, we need a different computation
        if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
          var _getWindowSizes = getWindowSizes(popper.ownerDocument),
              height = _getWindowSizes.height,
              width = _getWindowSizes.width;
    
          boundaries.top += offsets.top - offsets.marginTop;
          boundaries.bottom = height + offsets.top;
          boundaries.left += offsets.left - offsets.marginLeft;
          boundaries.right = width + offsets.left;
        } else {
          // for all the other DOM elements, this one is good
          boundaries = offsets;
        }
      }
    
      // Add paddings
      padding = padding || 0;
      var isPaddingNumber = typeof padding === 'number';
      boundaries.left += isPaddingNumber ? padding : padding.left || 0;
      boundaries.top += isPaddingNumber ? padding : padding.top || 0;
      boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
      boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;
    
      return boundaries;
    }
    
    function getArea(_ref) {
      var width = _ref.width,
          height = _ref.height;
    
      return width * height;
    }
    
    /**
     * Utility used to transform the `auto` placement to the placement with more
     * available space.
     * @method
     * @memberof Popper.Utils
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
      var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
    
      if (placement.indexOf('auto') === -1) {
        return placement;
      }
    
      var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
    
      var rects = {
        top: {
          width: boundaries.width,
          height: refRect.top - boundaries.top
        },
        right: {
          width: boundaries.right - refRect.right,
          height: boundaries.height
        },
        bottom: {
          width: boundaries.width,
          height: boundaries.bottom - refRect.bottom
        },
        left: {
          width: refRect.left - boundaries.left,
          height: boundaries.height
        }
      };
    
      var sortedAreas = Object.keys(rects).map(function (key) {
        return _extends({
          key: key
        }, rects[key], {
          area: getArea(rects[key])
        });
      }).sort(function (a, b) {
        return b.area - a.area;
      });
    
      var filteredAreas = sortedAreas.filter(function (_ref2) {
        var width = _ref2.width,
            height = _ref2.height;
        return width >= popper.clientWidth && height >= popper.clientHeight;
      });
    
      var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
    
      var variation = placement.split('-')[1];
    
      return computedPlacement + (variation ? '-' + variation : '');
    }
    
    /**
     * Get offsets to the reference element
     * @method
     * @memberof Popper.Utils
     * @param {Object} state
     * @param {Element} popper - the popper element
     * @param {Element} reference - the reference element (the popper will be relative to this)
     * @param {Element} fixedPosition - is in fixed position mode
     * @returns {Object} An object containing the offsets which will be applied to the popper
     */
    function getReferenceOffsets(state, popper, reference) {
      var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    
      var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
      return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
    }
    
    /**
     * Get the outer sizes of the given element (offset size + margins)
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Object} object containing width and height properties
     */
    function getOuterSizes(element) {
      var window = element.ownerDocument.defaultView;
      var styles = window.getComputedStyle(element);
      var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
      var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
      var result = {
        width: element.offsetWidth + y,
        height: element.offsetHeight + x
      };
      return result;
    }
    
    /**
     * Get the opposite placement of the given one
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement
     * @returns {String} flipped placement
     */
    function getOppositePlacement(placement) {
      var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
      return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash[matched];
      });
    }
    
    /**
     * Get offsets to the popper
     * @method
     * @memberof Popper.Utils
     * @param {Object} position - CSS position the Popper will get applied
     * @param {HTMLElement} popper - the popper element
     * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
     * @param {String} placement - one of the valid placement options
     * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
     */
    function getPopperOffsets(popper, referenceOffsets, placement) {
      placement = placement.split('-')[0];
    
      // Get popper node sizes
      var popperRect = getOuterSizes(popper);
    
      // Add position, width and height to our offsets object
      var popperOffsets = {
        width: popperRect.width,
        height: popperRect.height
      };
    
      // depending by the popper placement we have to compute its offsets slightly differently
      var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
      var mainSide = isHoriz ? 'top' : 'left';
      var secondarySide = isHoriz ? 'left' : 'top';
      var measurement = isHoriz ? 'height' : 'width';
      var secondaryMeasurement = !isHoriz ? 'height' : 'width';
    
      popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
      if (placement === secondarySide) {
        popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
      } else {
        popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
      }
    
      return popperOffsets;
    }
    
    /**
     * Mimics the `find` method of Array
     * @method
     * @memberof Popper.Utils
     * @argument {Array} arr
     * @argument prop
     * @argument value
     * @returns index or -1
     */
    function find(arr, check) {
      // use native find if supported
      if (Array.prototype.find) {
        return arr.find(check);
      }
    
      // use `filter` to obtain the same behavior of `find`
      return arr.filter(check)[0];
    }
    
    /**
     * Return the index of the matching object
     * @method
     * @memberof Popper.Utils
     * @argument {Array} arr
     * @argument prop
     * @argument value
     * @returns index or -1
     */
    function findIndex(arr, prop, value) {
      // use native findIndex if supported
      if (Array.prototype.findIndex) {
        return arr.findIndex(function (cur) {
          return cur[prop] === value;
        });
      }
    
      // use `find` + `indexOf` if `findIndex` isn't supported
      var match = find(arr, function (obj) {
        return obj[prop] === value;
      });
      return arr.indexOf(match);
    }
    
    /**
     * Loop trough the list of modifiers and run them in order,
     * each of them will then edit the data object.
     * @method
     * @memberof Popper.Utils
     * @param {dataObject} data
     * @param {Array} modifiers
     * @param {String} ends - Optional modifier name used as stopper
     * @returns {dataObject}
     */
    function runModifiers(modifiers, data, ends) {
      var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));
    
      modifiersToRun.forEach(function (modifier) {
        if (modifier['function']) {
          // eslint-disable-line dot-notation
          console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
        }
        var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
        if (modifier.enabled && isFunction(fn)) {
          // Add properties to offsets to make them a complete clientRect object
          // we do this before each modifier to make sure the previous one doesn't
          // mess with these values
          data.offsets.popper = getClientRect(data.offsets.popper);
          data.offsets.reference = getClientRect(data.offsets.reference);
    
          data = fn(data, modifier);
        }
      });
    
      return data;
    }
    
    /**
     * Updates the position of the popper, computing the new offsets and applying
     * the new style.<br />
     * Prefer `scheduleUpdate` over `update` because of performance reasons.
     * @method
     * @memberof Popper
     */
    function update() {
      // if popper is destroyed, don't perform any further update
      if (this.state.isDestroyed) {
        return;
      }
    
      var data = {
        instance: this,
        styles: {},
        arrowStyles: {},
        attributes: {},
        flipped: false,
        offsets: {}
      };
    
      // compute reference element offsets
      data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);
    
      // compute auto placement, store placement inside the data object,
      // modifiers will be able to edit `placement` if needed
      // and refer to originalPlacement to know the original value
      data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);
    
      // store the computed placement inside `originalPlacement`
      data.originalPlacement = data.placement;
    
      data.positionFixed = this.options.positionFixed;
    
      // compute the popper offsets
      data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
    
      data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';
    
      // run the modifiers
      data = runModifiers(this.modifiers, data);
    
      // the first `update` will call `onCreate` callback
      // the other ones will call `onUpdate` callback
      if (!this.state.isCreated) {
        this.state.isCreated = true;
        this.options.onCreate(data);
      } else {
        this.options.onUpdate(data);
      }
    }
    
    /**
     * Helper used to know if the given modifier is enabled.
     * @method
     * @memberof Popper.Utils
     * @returns {Boolean}
     */
    function isModifierEnabled(modifiers, modifierName) {
      return modifiers.some(function (_ref) {
        var name = _ref.name,
            enabled = _ref.enabled;
        return enabled && name === modifierName;
      });
    }
    
    /**
     * Get the prefixed supported property name
     * @method
     * @memberof Popper.Utils
     * @argument {String} property (camelCase)
     * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
     */
    function getSupportedPropertyName(property) {
      var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
      var upperProp = property.charAt(0).toUpperCase() + property.slice(1);
    
      for (var i = 0; i < prefixes.length; i++) {
        var prefix = prefixes[i];
        var toCheck = prefix ? '' + prefix + upperProp : property;
        if (typeof document.body.style[toCheck] !== 'undefined') {
          return toCheck;
        }
      }
      return null;
    }
    
    /**
     * Destroys the popper.
     * @method
     * @memberof Popper
     */
    function destroy() {
      this.state.isDestroyed = true;
    
      // touch DOM only if `applyStyle` modifier is enabled
      if (isModifierEnabled(this.modifiers, 'applyStyle')) {
        this.popper.removeAttribute('x-placement');
        this.popper.style.position = '';
        this.popper.style.top = '';
        this.popper.style.left = '';
        this.popper.style.right = '';
        this.popper.style.bottom = '';
        this.popper.style.willChange = '';
        this.popper.style[getSupportedPropertyName('transform')] = '';
      }
    
      this.disableEventListeners();
    
      // remove the popper if user explicitly asked for the deletion on destroy
      // do not use `remove` because IE11 doesn't support it
      if (this.options.removeOnDestroy) {
        this.popper.parentNode.removeChild(this.popper);
      }
      return this;
    }
    
    /**
     * Get the window associated with the element
     * @argument {Element} element
     * @returns {Window}
     */
    function getWindow(element) {
      var ownerDocument = element.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView : window;
    }
    
    function attachToScrollParents(scrollParent, event, callback, scrollParents) {
      var isBody = scrollParent.nodeName === 'BODY';
      var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
      target.addEventListener(event, callback, { passive: true });
    
      if (!isBody) {
        attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
      }
      scrollParents.push(target);
    }
    
    /**
     * Setup needed event listeners used to update the popper position
     * @method
     * @memberof Popper.Utils
     * @private
     */
    function setupEventListeners(reference, options, state, updateBound) {
      // Resize event listener on window
      state.updateBound = updateBound;
      getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });
    
      // Scroll event listener on scroll parents
      var scrollElement = getScrollParent(reference);
      attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
      state.scrollElement = scrollElement;
      state.eventsEnabled = true;
    
      return state;
    }
    
    /**
     * It will add resize/scroll events and start recalculating
     * position of the popper element when they are triggered.
     * @method
     * @memberof Popper
     */
    function enableEventListeners() {
      if (!this.state.eventsEnabled) {
        this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
      }
    }
    
    /**
     * Remove event listeners used to update the popper position
     * @method
     * @memberof Popper.Utils
     * @private
     */
    function removeEventListeners(reference, state) {
      // Remove resize event listener on window
      getWindow(reference).removeEventListener('resize', state.updateBound);
    
      // Remove scroll event listener on scroll parents
      state.scrollParents.forEach(function (target) {
        target.removeEventListener('scroll', state.updateBound);
      });
    
      // Reset state
      state.updateBound = null;
      state.scrollParents = [];
      state.scrollElement = null;
      state.eventsEnabled = false;
      return state;
    }
    
    /**
     * It will remove resize/scroll events and won't recalculate popper position
     * when they are triggered. It also won't trigger `onUpdate` callback anymore,
     * unless you call `update` method manually.
     * @method
     * @memberof Popper
     */
    function disableEventListeners() {
      if (this.state.eventsEnabled) {
        cancelAnimationFrame(this.scheduleUpdate);
        this.state = removeEventListeners(this.reference, this.state);
      }
    }
    
    /**
     * Tells if a given input is a number
     * @method
     * @memberof Popper.Utils
     * @param {*} input to check
     * @return {Boolean}
     */
    function isNumeric(n) {
      return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
    }
    
    /**
     * Set the style to the given popper
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element - Element to apply the style to
     * @argument {Object} styles
     * Object with a list of properties and values which will be applied to the element
     */
    function setStyles(element, styles) {
      Object.keys(styles).forEach(function (prop) {
        var unit = '';
        // add unit if the value is numeric and is one of the following
        if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
          unit = 'px';
        }
        element.style[prop] = styles[prop] + unit;
      });
    }
    
    /**
     * Set the attributes to the given popper
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element - Element to apply the attributes to
     * @argument {Object} styles
     * Object with a list of properties and values which will be applied to the element
     */
    function setAttributes(element, attributes) {
      Object.keys(attributes).forEach(function (prop) {
        var value = attributes[prop];
        if (value !== false) {
          element.setAttribute(prop, attributes[prop]);
        } else {
          element.removeAttribute(prop);
        }
      });
    }
    
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} data.styles - List of style properties - values to apply to popper element
     * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The same data object
     */
    function applyStyle(data) {
      // any property present in `data.styles` will be applied to the popper,
      // in this way we can make the 3rd party modifiers add custom styles to it
      // Be aware, modifiers could override the properties defined in the previous
      // lines of this modifier!
      setStyles(data.instance.popper, data.styles);
    
      // any property present in `data.attributes` will be applied to the popper,
      // they will be set as HTML attributes of the element
      setAttributes(data.instance.popper, data.attributes);
    
      // if arrowElement is defined and arrowStyles has some properties
      if (data.arrowElement && Object.keys(data.arrowStyles).length) {
        setStyles(data.arrowElement, data.arrowStyles);
      }
    
      return data;
    }
    
    /**
     * Set the x-placement attribute before everything else because it could be used
     * to add margins to the popper margins needs to be calculated to get the
     * correct popper offsets.
     * @method
     * @memberof Popper.modifiers
     * @param {HTMLElement} reference - The reference element used to position the popper
     * @param {HTMLElement} popper - The HTML element used as popper
     * @param {Object} options - Popper.js options
     */
    function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
      // compute reference element offsets
      var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);
    
      // compute auto placement, store placement inside the data object,
      // modifiers will be able to edit `placement` if needed
      // and refer to originalPlacement to know the original value
      var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
    
      popper.setAttribute('x-placement', placement);
    
      // Apply `position` to popper before anything else because
      // without the position applied we can't guarantee correct computations
      setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });
    
      return options;
    }
    
    /**
     * @function
     * @memberof Popper.Utils
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Boolean} shouldRound - If the offsets should be rounded at all
     * @returns {Object} The popper's position offsets rounded
     *
     * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
     * good as it can be within reason.
     * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
     *
     * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
     * as well on High DPI screens).
     *
     * Firefox prefers no rounding for positioning and does not have blurriness on
     * high DPI screens.
     *
     * Only horizontal placement and left/right values need to be considered.
     */
    function getRoundedOffsets(data, shouldRound) {
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;
      var round = Math.round,
          floor = Math.floor;
    
      var noRound = function noRound(v) {
        return v;
      };
    
      var referenceWidth = round(reference.width);
      var popperWidth = round(popper.width);
    
      var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
      var isVariation = data.placement.indexOf('-') !== -1;
      var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
      var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;
    
      var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
      var verticalToInteger = !shouldRound ? noRound : round;
    
      return {
        left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
        top: verticalToInteger(popper.top),
        bottom: verticalToInteger(popper.bottom),
        right: horizontalToInteger(popper.right)
      };
    }
    
    var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);
    
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function computeStyle(data, options) {
      var x = options.x,
          y = options.y;
      var popper = data.offsets.popper;
    
      // Remove this legacy support in Popper.js v2
    
      var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
        return modifier.name === 'applyStyle';
      }).gpuAcceleration;
      if (legacyGpuAccelerationOption !== undefined) {
        console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
      }
      var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;
    
      var offsetParent = getOffsetParent(data.instance.popper);
      var offsetParentRect = getBoundingClientRect(offsetParent);
    
      // Styles
      var styles = {
        position: popper.position
      };
    
      var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);
    
      var sideA = x === 'bottom' ? 'top' : 'bottom';
      var sideB = y === 'right' ? 'left' : 'right';
    
      // if gpuAcceleration is set to `true` and transform is supported,
      //  we use `translate3d` to apply the position to the popper we
      // automatically use the supported prefixed version if needed
      var prefixedProperty = getSupportedPropertyName('transform');
    
      // now, let's make a step back and look at this code closely (wtf?)
      // If the content of the popper grows once it's been positioned, it
      // may happen that the popper gets misplaced because of the new content
      // overflowing its reference element
      // To avoid this problem, we provide two options (x and y), which allow
      // the consumer to define the offset origin.
      // If we position a popper on top of a reference element, we can set
      // `x` to `top` to make the popper grow towards its top instead of
      // its bottom.
      var left = void 0,
          top = void 0;
      if (sideA === 'bottom') {
        // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
        // and not the bottom of the html element
        if (offsetParent.nodeName === 'HTML') {
          top = -offsetParent.clientHeight + offsets.bottom;
        } else {
          top = -offsetParentRect.height + offsets.bottom;
        }
      } else {
        top = offsets.top;
      }
      if (sideB === 'right') {
        if (offsetParent.nodeName === 'HTML') {
          left = -offsetParent.clientWidth + offsets.right;
        } else {
          left = -offsetParentRect.width + offsets.right;
        }
      } else {
        left = offsets.left;
      }
      if (gpuAcceleration && prefixedProperty) {
        styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
        styles[sideA] = 0;
        styles[sideB] = 0;
        styles.willChange = 'transform';
      } else {
        // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
        var invertTop = sideA === 'bottom' ? -1 : 1;
        var invertLeft = sideB === 'right' ? -1 : 1;
        styles[sideA] = top * invertTop;
        styles[sideB] = left * invertLeft;
        styles.willChange = sideA + ', ' + sideB;
      }
    
      // Attributes
      var attributes = {
        'x-placement': data.placement
      };
    
      // Update `data` attributes, styles and arrowStyles
      data.attributes = _extends({}, attributes, data.attributes);
      data.styles = _extends({}, styles, data.styles);
      data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);
    
      return data;
    }
    
    /**
     * Helper used to know if the given modifier depends from another one.<br />
     * It checks if the needed modifier is listed and enabled.
     * @method
     * @memberof Popper.Utils
     * @param {Array} modifiers - list of modifiers
     * @param {String} requestingName - name of requesting modifier
     * @param {String} requestedName - name of requested modifier
     * @returns {Boolean}
     */
    function isModifierRequired(modifiers, requestingName, requestedName) {
      var requesting = find(modifiers, function (_ref) {
        var name = _ref.name;
        return name === requestingName;
      });
    
      var isRequired = !!requesting && modifiers.some(function (modifier) {
        return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
      });
    
      if (!isRequired) {
        var _requesting = '`' + requestingName + '`';
        var requested = '`' + requestedName + '`';
        console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
      }
      return isRequired;
    }
    
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function arrow(data, options) {
      var _data$offsets$arrow;
    
      // arrow depends on keepTogether in order to work
      if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
        return data;
      }
    
      var arrowElement = options.element;
    
      // if arrowElement is a string, suppose it's a CSS selector
      if (typeof arrowElement === 'string') {
        arrowElement = data.instance.popper.querySelector(arrowElement);
    
        // if arrowElement is not found, don't run the modifier
        if (!arrowElement) {
          return data;
        }
      } else {
        // if the arrowElement isn't a query selector we must check that the
        // provided DOM node is child of its popper node
        if (!data.instance.popper.contains(arrowElement)) {
          console.warn('WARNING: `arrow.element` must be child of its popper element!');
          return data;
        }
      }
    
      var placement = data.placement.split('-')[0];
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;
    
      var isVertical = ['left', 'right'].indexOf(placement) !== -1;
    
      var len = isVertical ? 'height' : 'width';
      var sideCapitalized = isVertical ? 'Top' : 'Left';
      var side = sideCapitalized.toLowerCase();
      var altSide = isVertical ? 'left' : 'top';
      var opSide = isVertical ? 'bottom' : 'right';
      var arrowElementSize = getOuterSizes(arrowElement)[len];
    
      //
      // extends keepTogether behavior making sure the popper and its
      // reference have enough pixels in conjunction
      //
    
      // top/left side
      if (reference[opSide] - arrowElementSize < popper[side]) {
        data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
      }
      // bottom/right side
      if (reference[side] + arrowElementSize > popper[opSide]) {
        data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
      }
      data.offsets.popper = getClientRect(data.offsets.popper);
    
      // compute center of the popper
      var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;
    
      // Compute the sideValue using the updated popper offsets
      // take popper margin in account because we don't have this info available
      var css = getStyleComputedProperty(data.instance.popper);
      var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);
      var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);
      var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;
    
      // prevent arrowElement from being placed not contiguously to its popper
      sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
    
      data.arrowElement = arrowElement;
      data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);
    
      return data;
    }
    
    /**
     * Get the opposite placement variation of the given one
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement variation
     * @returns {String} flipped placement variation
     */
    function getOppositeVariation(variation) {
      if (variation === 'end') {
        return 'start';
      } else if (variation === 'start') {
        return 'end';
      }
      return variation;
    }
    
    /**
     * List of accepted placements to use as values of the `placement` option.<br />
     * Valid placements are:
     * - `auto`
     * - `top`
     * - `right`
     * - `bottom`
     * - `left`
     *
     * Each placement can have a variation from this list:
     * - `-start`
     * - `-end`
     *
     * Variations are interpreted easily if you think of them as the left to right
     * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
     * is right.<br />
     * Vertically (`left` and `right`), `start` is top and `end` is bottom.
     *
     * Some valid examples are:
     * - `top-end` (on top of reference, right aligned)
     * - `right-start` (on right of reference, top aligned)
     * - `bottom` (on bottom, centered)
     * - `auto-end` (on the side with more space available, alignment depends by placement)
     *
     * @static
     * @type {Array}
     * @enum {String}
     * @readonly
     * @method placements
     * @memberof Popper
     */
    var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];
    
    // Get rid of `auto` `auto-start` and `auto-end`
    var validPlacements = placements.slice(3);
    
    /**
     * Given an initial placement, returns all the subsequent placements
     * clockwise (or counter-clockwise).
     *
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement - A valid placement (it accepts variations)
     * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
     * @returns {Array} placements including their variations
     */
    function clockwise(placement) {
      var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    
      var index = validPlacements.indexOf(placement);
      var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
      return counter ? arr.reverse() : arr;
    }
    
    var BEHAVIORS = {
      FLIP: 'flip',
      CLOCKWISE: 'clockwise',
      COUNTERCLOCKWISE: 'counterclockwise'
    };
    
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function flip(data, options) {
      // if `inner` modifier is enabled, we can't use the `flip` modifier
      if (isModifierEnabled(data.instance.modifiers, 'inner')) {
        return data;
      }
    
      if (data.flipped && data.placement === data.originalPlacement) {
        // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
        return data;
      }
    
      var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);
    
      var placement = data.placement.split('-')[0];
      var placementOpposite = getOppositePlacement(placement);
      var variation = data.placement.split('-')[1] || '';
    
      var flipOrder = [];
    
      switch (options.behavior) {
        case BEHAVIORS.FLIP:
          flipOrder = [placement, placementOpposite];
          break;
        case BEHAVIORS.CLOCKWISE:
          flipOrder = clockwise(placement);
          break;
        case BEHAVIORS.COUNTERCLOCKWISE:
          flipOrder = clockwise(placement, true);
          break;
        default:
          flipOrder = options.behavior;
      }
    
      flipOrder.forEach(function (step, index) {
        if (placement !== step || flipOrder.length === index + 1) {
          return data;
        }
    
        placement = data.placement.split('-')[0];
        placementOpposite = getOppositePlacement(placement);
    
        var popperOffsets = data.offsets.popper;
        var refOffsets = data.offsets.reference;
    
        // using floor because the reference offsets may contain decimals we are not going to consider here
        var floor = Math.floor;
        var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);
    
        var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
        var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
        var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
        var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
    
        var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;
    
        // flip the variation if required
        var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
    
        // flips variation if reference element overflows boundaries
        var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);
    
        // flips variation if popper content overflows boundaries
        var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);
    
        var flippedVariation = flippedVariationByRef || flippedVariationByContent;
    
        if (overlapsRef || overflowsBoundaries || flippedVariation) {
          // this boolean to detect any flip loop
          data.flipped = true;
    
          if (overlapsRef || overflowsBoundaries) {
            placement = flipOrder[index + 1];
          }
    
          if (flippedVariation) {
            variation = getOppositeVariation(variation);
          }
    
          data.placement = placement + (variation ? '-' + variation : '');
    
          // this object contains `position`, we want to preserve it along with
          // any additional property we may add in the future
          data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
    
          data = runModifiers(data.instance.modifiers, data, 'flip');
        }
      });
      return data;
    }
    
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function keepTogether(data) {
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;
    
      var placement = data.placement.split('-')[0];
      var floor = Math.floor;
      var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
      var side = isVertical ? 'right' : 'bottom';
      var opSide = isVertical ? 'left' : 'top';
      var measurement = isVertical ? 'width' : 'height';
    
      if (popper[side] < floor(reference[opSide])) {
        data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
      }
      if (popper[opSide] > floor(reference[side])) {
        data.offsets.popper[opSide] = floor(reference[side]);
      }
    
      return data;
    }
    
    /**
     * Converts a string containing value + unit into a px value number
     * @function
     * @memberof {modifiers~offset}
     * @private
     * @argument {String} str - Value + unit string
     * @argument {String} measurement - `height` or `width`
     * @argument {Object} popperOffsets
     * @argument {Object} referenceOffsets
     * @returns {Number|String}
     * Value in pixels, or original string if no values were extracted
     */
    function toValue(str, measurement, popperOffsets, referenceOffsets) {
      // separate value from unit
      var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
      var value = +split[1];
      var unit = split[2];
    
      // If it's not a number it's an operator, I guess
      if (!value) {
        return str;
      }
    
      if (unit.indexOf('%') === 0) {
        var element = void 0;
        switch (unit) {
          case '%p':
            element = popperOffsets;
            break;
          case '%':
          case '%r':
          default:
            element = referenceOffsets;
        }
    
        var rect = getClientRect(element);
        return rect[measurement] / 100 * value;
      } else if (unit === 'vh' || unit === 'vw') {
        // if is a vh or vw, we calculate the size based on the viewport
        var size = void 0;
        if (unit === 'vh') {
          size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        } else {
          size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
        }
        return size / 100 * value;
      } else {
        // if is an explicit pixel unit, we get rid of the unit and keep the value
        // if is an implicit unit, it's px, and we return just the value
        return value;
      }
    }
    
    /**
     * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
     * @function
     * @memberof {modifiers~offset}
     * @private
     * @argument {String} offset
     * @argument {Object} popperOffsets
     * @argument {Object} referenceOffsets
     * @argument {String} basePlacement
     * @returns {Array} a two cells array with x and y offsets in numbers
     */
    function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
      var offsets = [0, 0];
    
      // Use height if placement is left or right and index is 0 otherwise use width
      // in this way the first offset will use an axis and the second one
      // will use the other one
      var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;
    
      // Split the offset string to obtain a list of values and operands
      // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
      var fragments = offset.split(/(\+|\-)/).map(function (frag) {
        return frag.trim();
      });
    
      // Detect if the offset string contains a pair of values or a single one
      // they could be separated by comma or space
      var divider = fragments.indexOf(find(fragments, function (frag) {
        return frag.search(/,|\s/) !== -1;
      }));
    
      if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
        console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
      }
    
      // If divider is found, we divide the list of values and operands to divide
      // them by ofset X and Y.
      var splitRegex = /\s*,\s*|\s+/;
      var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];
    
      // Convert the values with units to absolute pixels to allow our computations
      ops = ops.map(function (op, index) {
        // Most of the units rely on the orientation of the popper
        var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
        var mergeWithPrevious = false;
        return op
        // This aggregates any `+` or `-` sign that aren't considered operators
        // e.g.: 10 + +5 => [10, +, +5]
        .reduce(function (a, b) {
          if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
            a[a.length - 1] = b;
            mergeWithPrevious = true;
            return a;
          } else if (mergeWithPrevious) {
            a[a.length - 1] += b;
            mergeWithPrevious = false;
            return a;
          } else {
            return a.concat(b);
          }
        }, [])
        // Here we convert the string values into number values (in px)
        .map(function (str) {
          return toValue(str, measurement, popperOffsets, referenceOffsets);
        });
      });
    
      // Loop trough the offsets arrays and execute the operations
      ops.forEach(function (op, index) {
        op.forEach(function (frag, index2) {
          if (isNumeric(frag)) {
            offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
          }
        });
      });
      return offsets;
    }
    
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @argument {Number|String} options.offset=0
     * The offset value as described in the modifier description
     * @returns {Object} The data object, properly modified
     */
    function offset(data, _ref) {
      var offset = _ref.offset;
      var placement = data.placement,
          _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;
    
      var basePlacement = placement.split('-')[0];
    
      var offsets = void 0;
      if (isNumeric(+offset)) {
        offsets = [+offset, 0];
      } else {
        offsets = parseOffset(offset, popper, reference, basePlacement);
      }
    
      if (basePlacement === 'left') {
        popper.top += offsets[0];
        popper.left -= offsets[1];
      } else if (basePlacement === 'right') {
        popper.top += offsets[0];
        popper.left += offsets[1];
      } else if (basePlacement === 'top') {
        popper.left += offsets[0];
        popper.top -= offsets[1];
      } else if (basePlacement === 'bottom') {
        popper.left += offsets[0];
        popper.top += offsets[1];
      }
    
      data.popper = popper;
      return data;
    }
    
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function preventOverflow(data, options) {
      var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);
    
      // If offsetParent is the reference element, we really want to
      // go one step up and use the next offsetParent as reference to
      // avoid to make this modifier completely useless and look like broken
      if (data.instance.reference === boundariesElement) {
        boundariesElement = getOffsetParent(boundariesElement);
      }
    
      // NOTE: DOM access here
      // resets the popper's position so that the document size can be calculated excluding
      // the size of the popper element itself
      var transformProp = getSupportedPropertyName('transform');
      var popperStyles = data.instance.popper.style; // assignment to help minification
      var top = popperStyles.top,
          left = popperStyles.left,
          transform = popperStyles[transformProp];
    
      popperStyles.top = '';
      popperStyles.left = '';
      popperStyles[transformProp] = '';
    
      var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);
    
      // NOTE: DOM access here
      // restores the original style properties after the offsets have been computed
      popperStyles.top = top;
      popperStyles.left = left;
      popperStyles[transformProp] = transform;
    
      options.boundaries = boundaries;
    
      var order = options.priority;
      var popper = data.offsets.popper;
    
      var check = {
        primary: function primary(placement) {
          var value = popper[placement];
          if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
            value = Math.max(popper[placement], boundaries[placement]);
          }
          return defineProperty({}, placement, value);
        },
        secondary: function secondary(placement) {
          var mainSide = placement === 'right' ? 'left' : 'top';
          var value = popper[mainSide];
          if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
            value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
          }
          return defineProperty({}, mainSide, value);
        }
      };
    
      order.forEach(function (placement) {
        var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
        popper = _extends({}, popper, check[side](placement));
      });
    
      data.offsets.popper = popper;
    
      return data;
    }
    
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function shift(data) {
      var placement = data.placement;
      var basePlacement = placement.split('-')[0];
      var shiftvariation = placement.split('-')[1];
    
      // if shift shiftvariation is specified, run the modifier
      if (shiftvariation) {
        var _data$offsets = data.offsets,
            reference = _data$offsets.reference,
            popper = _data$offsets.popper;
    
        var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
        var side = isVertical ? 'left' : 'top';
        var measurement = isVertical ? 'width' : 'height';
    
        var shiftOffsets = {
          start: defineProperty({}, side, reference[side]),
          end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
        };
    
        data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
      }
    
      return data;
    }
    
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function hide(data) {
      if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
        return data;
      }
    
      var refRect = data.offsets.reference;
      var bound = find(data.instance.modifiers, function (modifier) {
        return modifier.name === 'preventOverflow';
      }).boundaries;
    
      if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
        // Avoid unnecessary DOM access if visibility hasn't changed
        if (data.hide === true) {
          return data;
        }
    
        data.hide = true;
        data.attributes['x-out-of-boundaries'] = '';
      } else {
        // Avoid unnecessary DOM access if visibility hasn't changed
        if (data.hide === false) {
          return data;
        }
    
        data.hide = false;
        data.attributes['x-out-of-boundaries'] = false;
      }
    
      return data;
    }
    
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function inner(data) {
      var placement = data.placement;
      var basePlacement = placement.split('-')[0];
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;
    
      var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;
    
      var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;
    
      popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);
    
      data.placement = getOppositePlacement(placement);
      data.offsets.popper = getClientRect(popper);
    
      return data;
    }
    
    /**
     * Modifier function, each modifier can have a function of this type assigned
     * to its `fn` property.<br />
     * These functions will be called on each update, this means that you must
     * make sure they are performant enough to avoid performance bottlenecks.
     *
     * @function ModifierFn
     * @argument {dataObject} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {dataObject} The data object, properly modified
     */
    
    /**
     * Modifiers are plugins used to alter the behavior of your poppers.<br />
     * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
     * needed by the library.
     *
     * Usually you don't want to override the `order`, `fn` and `onLoad` props.
     * All the other properties are configurations that could be tweaked.
     * @namespace modifiers
     */
    var modifiers = {
      /**
       * Modifier used to shift the popper on the start or end of its reference
       * element.<br />
       * It will read the variation of the `placement` property.<br />
       * It can be one either `-end` or `-start`.
       * @memberof modifiers
       * @inner
       */
      shift: {
        /** @prop {number} order=100 - Index used to define the order of execution */
        order: 100,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: shift
      },
    
      /**
       * The `offset` modifier can shift your popper on both its axis.
       *
       * It accepts the following units:
       * - `px` or unit-less, interpreted as pixels
       * - `%` or `%r`, percentage relative to the length of the reference element
       * - `%p`, percentage relative to the length of the popper element
       * - `vw`, CSS viewport width unit
       * - `vh`, CSS viewport height unit
       *
       * For length is intended the main axis relative to the placement of the popper.<br />
       * This means that if the placement is `top` or `bottom`, the length will be the
       * `width`. In case of `left` or `right`, it will be the `height`.
       *
       * You can provide a single value (as `Number` or `String`), or a pair of values
       * as `String` divided by a comma or one (or more) white spaces.<br />
       * The latter is a deprecated method because it leads to confusion and will be
       * removed in v2.<br />
       * Additionally, it accepts additions and subtractions between different units.
       * Note that multiplications and divisions aren't supported.
       *
       * Valid examples are:
       * ```
       * 10
       * '10%'
       * '10, 10'
       * '10%, 10'
       * '10 + 10%'
       * '10 - 5vh + 3%'
       * '-10px + 5vh, 5px - 6%'
       * ```
       * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
       * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
       * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
       *
       * @memberof modifiers
       * @inner
       */
      offset: {
        /** @prop {number} order=200 - Index used to define the order of execution */
        order: 200,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: offset,
        /** @prop {Number|String} offset=0
         * The offset value as described in the modifier description
         */
        offset: 0
      },
    
      /**
       * Modifier used to prevent the popper from being positioned outside the boundary.
       *
       * A scenario exists where the reference itself is not within the boundaries.<br />
       * We can say it has "escaped the boundaries" — or just "escaped".<br />
       * In this case we need to decide whether the popper should either:
       *
       * - detach from the reference and remain "trapped" in the boundaries, or
       * - if it should ignore the boundary and "escape with its reference"
       *
       * When `escapeWithReference` is set to`true` and reference is completely
       * outside its boundaries, the popper will overflow (or completely leave)
       * the boundaries in order to remain attached to the edge of the reference.
       *
       * @memberof modifiers
       * @inner
       */
      preventOverflow: {
        /** @prop {number} order=300 - Index used to define the order of execution */
        order: 300,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: preventOverflow,
        /**
         * @prop {Array} [priority=['left','right','top','bottom']]
         * Popper will try to prevent overflow following these priorities by default,
         * then, it could overflow on the left and on top of the `boundariesElement`
         */
        priority: ['left', 'right', 'top', 'bottom'],
        /**
         * @prop {number} padding=5
         * Amount of pixel used to define a minimum distance between the boundaries
         * and the popper. This makes sure the popper always has a little padding
         * between the edges of its container
         */
        padding: 5,
        /**
         * @prop {String|HTMLElement} boundariesElement='scrollParent'
         * Boundaries used by the modifier. Can be `scrollParent`, `window`,
         * `viewport` or any DOM element.
         */
        boundariesElement: 'scrollParent'
      },
    
      /**
       * Modifier used to make sure the reference and its popper stay near each other
       * without leaving any gap between the two. Especially useful when the arrow is
       * enabled and you want to ensure that it points to its reference element.
       * It cares only about the first axis. You can still have poppers with margin
       * between the popper and its reference element.
       * @memberof modifiers
       * @inner
       */
      keepTogether: {
        /** @prop {number} order=400 - Index used to define the order of execution */
        order: 400,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: keepTogether
      },
    
      /**
       * This modifier is used to move the `arrowElement` of the popper to make
       * sure it is positioned between the reference element and its popper element.
       * It will read the outer size of the `arrowElement` node to detect how many
       * pixels of conjunction are needed.
       *
       * It has no effect if no `arrowElement` is provided.
       * @memberof modifiers
       * @inner
       */
      arrow: {
        /** @prop {number} order=500 - Index used to define the order of execution */
        order: 500,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: arrow,
        /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
        element: '[x-arrow]'
      },
    
      /**
       * Modifier used to flip the popper's placement when it starts to overlap its
       * reference element.
       *
       * Requires the `preventOverflow` modifier before it in order to work.
       *
       * **NOTE:** this modifier will interrupt the current update cycle and will
       * restart it if it detects the need to flip the placement.
       * @memberof modifiers
       * @inner
       */
      flip: {
        /** @prop {number} order=600 - Index used to define the order of execution */
        order: 600,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: flip,
        /**
         * @prop {String|Array} behavior='flip'
         * The behavior used to change the popper's placement. It can be one of
         * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
         * placements (with optional variations)
         */
        behavior: 'flip',
        /**
         * @prop {number} padding=5
         * The popper will flip if it hits the edges of the `boundariesElement`
         */
        padding: 5,
        /**
         * @prop {String|HTMLElement} boundariesElement='viewport'
         * The element which will define the boundaries of the popper position.
         * The popper will never be placed outside of the defined boundaries
         * (except if `keepTogether` is enabled)
         */
        boundariesElement: 'viewport',
        /**
         * @prop {Boolean} flipVariations=false
         * The popper will switch placement variation between `-start` and `-end` when
         * the reference element overlaps its boundaries.
         *
         * The original placement should have a set variation.
         */
        flipVariations: false,
        /**
         * @prop {Boolean} flipVariationsByContent=false
         * The popper will switch placement variation between `-start` and `-end` when
         * the popper element overlaps its reference boundaries.
         *
         * The original placement should have a set variation.
         */
        flipVariationsByContent: false
      },
    
      /**
       * Modifier used to make the popper flow toward the inner of the reference element.
       * By default, when this modifier is disabled, the popper will be placed outside
       * the reference element.
       * @memberof modifiers
       * @inner
       */
      inner: {
        /** @prop {number} order=700 - Index used to define the order of execution */
        order: 700,
        /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
        enabled: false,
        /** @prop {ModifierFn} */
        fn: inner
      },
    
      /**
       * Modifier used to hide the popper when its reference element is outside of the
       * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
       * be used to hide with a CSS selector the popper when its reference is
       * out of boundaries.
       *
       * Requires the `preventOverflow` modifier before it in order to work.
       * @memberof modifiers
       * @inner
       */
      hide: {
        /** @prop {number} order=800 - Index used to define the order of execution */
        order: 800,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: hide
      },
    
      /**
       * Computes the style that will be applied to the popper element to gets
       * properly positioned.
       *
       * Note that this modifier will not touch the DOM, it just prepares the styles
       * so that `applyStyle` modifier can apply it. This separation is useful
       * in case you need to replace `applyStyle` with a custom implementation.
       *
       * This modifier has `850` as `order` value to maintain backward compatibility
       * with previous versions of Popper.js. Expect the modifiers ordering method
       * to change in future major versions of the library.
       *
       * @memberof modifiers
       * @inner
       */
      computeStyle: {
        /** @prop {number} order=850 - Index used to define the order of execution */
        order: 850,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: computeStyle,
        /**
         * @prop {Boolean} gpuAcceleration=true
         * If true, it uses the CSS 3D transformation to position the popper.
         * Otherwise, it will use the `top` and `left` properties
         */
        gpuAcceleration: true,
        /**
         * @prop {string} [x='bottom']
         * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
         * Change this if your popper should grow in a direction different from `bottom`
         */
        x: 'bottom',
        /**
         * @prop {string} [x='left']
         * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
         * Change this if your popper should grow in a direction different from `right`
         */
        y: 'right'
      },
    
      /**
       * Applies the computed styles to the popper element.
       *
       * All the DOM manipulations are limited to this modifier. This is useful in case
       * you want to integrate Popper.js inside a framework or view library and you
       * want to delegate all the DOM manipulations to it.
       *
       * Note that if you disable this modifier, you must make sure the popper element
       * has its position set to `absolute` before Popper.js can do its work!
       *
       * Just disable this modifier and define your own to achieve the desired effect.
       *
       * @memberof modifiers
       * @inner
       */
      applyStyle: {
        /** @prop {number} order=900 - Index used to define the order of execution */
        order: 900,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: applyStyle,
        /** @prop {Function} */
        onLoad: applyStyleOnLoad,
        /**
         * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
         * @prop {Boolean} gpuAcceleration=true
         * If true, it uses the CSS 3D transformation to position the popper.
         * Otherwise, it will use the `top` and `left` properties
         */
        gpuAcceleration: undefined
      }
    };
    
    /**
     * The `dataObject` is an object containing all the information used by Popper.js.
     * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
     * @name dataObject
     * @property {Object} data.instance The Popper.js instance
     * @property {String} data.placement Placement applied to popper
     * @property {String} data.originalPlacement Placement originally defined on init
     * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
     * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
     * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
     * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
     * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
     * @property {Object} data.boundaries Offsets of the popper boundaries
     * @property {Object} data.offsets The measurements of popper, reference and arrow elements
     * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
     * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
     * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
     */
    
    /**
     * Default options provided to Popper.js constructor.<br />
     * These can be overridden using the `options` argument of Popper.js.<br />
     * To override an option, simply pass an object with the same
     * structure of the `options` object, as the 3rd argument. For example:
     * ```
     * new Popper(ref, pop, {
     *   modifiers: {
     *     preventOverflow: { enabled: false }
     *   }
     * })
     * ```
     * @type {Object}
     * @static
     * @memberof Popper
     */
    var Defaults = {
      /**
       * Popper's placement.
       * @prop {Popper.placements} placement='bottom'
       */
      placement: 'bottom',
    
      /**
       * Set this to true if you want popper to position it self in 'fixed' mode
       * @prop {Boolean} positionFixed=false
       */
      positionFixed: false,
    
      /**
       * Whether events (resize, scroll) are initially enabled.
       * @prop {Boolean} eventsEnabled=true
       */
      eventsEnabled: true,
    
      /**
       * Set to true if you want to automatically remove the popper when
       * you call the `destroy` method.
       * @prop {Boolean} removeOnDestroy=false
       */
      removeOnDestroy: false,
    
      /**
       * Callback called when the popper is created.<br />
       * By default, it is set to no-op.<br />
       * Access Popper.js instance with `data.instance`.
       * @prop {onCreate}
       */
      onCreate: function onCreate() {},
    
      /**
       * Callback called when the popper is updated. This callback is not called
       * on the initialization/creation of the popper, but only on subsequent
       * updates.<br />
       * By default, it is set to no-op.<br />
       * Access Popper.js instance with `data.instance`.
       * @prop {onUpdate}
       */
      onUpdate: function onUpdate() {},
    
      /**
       * List of modifiers used to modify the offsets before they are applied to the popper.
       * They provide most of the functionalities of Popper.js.
       * @prop {modifiers}
       */
      modifiers: modifiers
    };
    
    /**
     * @callback onCreate
     * @param {dataObject} data
     */
    
    /**
     * @callback onUpdate
     * @param {dataObject} data
     */
    
    // Utils
    // Methods
    var Popper = function () {
      /**
       * Creates a new Popper.js instance.
       * @class Popper
       * @param {Element|referenceObject} reference - The reference element used to position the popper
       * @param {Element} popper - The HTML / XML element used as the popper
       * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
       * @return {Object} instance - The generated Popper.js instance
       */
      function Popper(reference, popper) {
        var _this = this;
    
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        classCallCheck(this, Popper);
    
        this.scheduleUpdate = function () {
          return requestAnimationFrame(_this.update);
        };
    
        // make update() debounced, so that it only runs at most once-per-tick
        this.update = debounce(this.update.bind(this));
    
        // with {} we create a new object with the options inside it
        this.options = _extends({}, Popper.Defaults, options);
    
        // init state
        this.state = {
          isDestroyed: false,
          isCreated: false,
          scrollParents: []
        };
    
        // get reference and popper elements (allow jQuery wrappers)
        this.reference = reference && reference.jquery ? reference[0] : reference;
        this.popper = popper && popper.jquery ? popper[0] : popper;
    
        // Deep merge modifiers options
        this.options.modifiers = {};
        Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
          _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
        });
    
        // Refactoring modifiers' list (Object => Array)
        this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
          return _extends({
            name: name
          }, _this.options.modifiers[name]);
        })
        // sort the modifiers by order
        .sort(function (a, b) {
          return a.order - b.order;
        });
    
        // modifiers have the ability to execute arbitrary code when Popper.js get inited
        // such code is executed in the same order of its modifier
        // they could add new properties to their options configuration
        // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
        this.modifiers.forEach(function (modifierOptions) {
          if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
            modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
          }
        });
    
        // fire the first update to position the popper in the right place
        this.update();
    
        var eventsEnabled = this.options.eventsEnabled;
        if (eventsEnabled) {
          // setup event listeners, they will take care of update the position in specific situations
          this.enableEventListeners();
        }
    
        this.state.eventsEnabled = eventsEnabled;
      }
    
      // We can't use class properties because they don't get listed in the
      // class prototype and break stuff like Sinon stubs
    
    
      createClass(Popper, [{
        key: 'update',
        value: function update$$1() {
          return update.call(this);
        }
      }, {
        key: 'destroy',
        value: function destroy$$1() {
          return destroy.call(this);
        }
      }, {
        key: 'enableEventListeners',
        value: function enableEventListeners$$1() {
          return enableEventListeners.call(this);
        }
      }, {
        key: 'disableEventListeners',
        value: function disableEventListeners$$1() {
          return disableEventListeners.call(this);
        }
    
        /**
         * Schedules an update. It will run on the next UI update available.
         * @method scheduleUpdate
         * @memberof Popper
         */
    
    
        /**
         * Collection of utilities useful when writing custom modifiers.
         * Starting from version 1.7, this method is available only if you
         * include `popper-utils.js` before `popper.js`.
         *
         * **DEPRECATION**: This way to access PopperUtils is deprecated
         * and will be removed in v2! Use the PopperUtils module directly instead.
         * Due to the high instability of the methods contained in Utils, we can't
         * guarantee them to follow semver. Use them at your own risk!
         * @static
         * @private
         * @type {Object}
         * @deprecated since version 1.8
         * @member Utils
         * @memberof Popper
         */
    
      }]);
      return Popper;
    }();
    
    /**
     * The `referenceObject` is an object that provides an interface compatible with Popper.js
     * and lets you use it as replacement of a real DOM node.<br />
     * You can use this method to position a popper relatively to a set of coordinates
     * in case you don't have a DOM node to use as reference.
     *
     * ```
     * new Popper(referenceObject, popperNode);
     * ```
     *
     * NB: This feature isn't supported in Internet Explorer 10.
     * @name referenceObject
     * @property {Function} data.getBoundingClientRect
     * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
     * @property {number} data.clientWidth
     * An ES6 getter that will return the width of the virtual reference element.
     * @property {number} data.clientHeight
     * An ES6 getter that will return the height of the virtual reference element.
     */
    
    
    Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
    Popper.placements = placements;
    Popper.Defaults = Defaults;
    
    return Popper;
    
    })));
    
    
    }).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    
    },{}],423:[function(require,module,exports){
    // shim for using process in browser
    var process = module.exports = {};
    
    // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.
    
    var cachedSetTimeout;
    var cachedClearTimeout;
    
    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    (function () {
        try {
            if (typeof setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            } else {
                cachedSetTimeout = defaultSetTimout;
            }
        } catch (e) {
            cachedSetTimeout = defaultSetTimout;
        }
        try {
            if (typeof clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            } else {
                cachedClearTimeout = defaultClearTimeout;
            }
        } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
        }
    } ())
    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }
    
    
    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }
    
    
    
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    
    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }
    
    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
    
        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    
    process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    };
    
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};
    
    function noop() {}
    
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;
    
    process.listeners = function (name) { return [] }
    
    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };
    
    process.cwd = function () { return '/' };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    process.umask = function() { return 0; };
    
    },{}],424:[function(require,module,exports){
    'use strict';
    
    var DatePickerFactory = require('./js/DatePickerFactory');
    
    module.exports = DatePickerFactory.create();
    
    },{"./js/DatePickerFactory":427}],425:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = window.$ || require("jquery");
    require('jquery-ui/ui/widgets/datepicker');
    
    var DatePicker = function () {
        /**
         * DatePicker
         * @param {DatePickerUtils} utils
         * @param {DatePickerHighlightUtils} highlightUtils
         * @param {DatePickerAccessibleLabelUtils} accessibleLabelUtils
         * @param {DatePickerNavigationManager} navigationManager
         */
        function DatePicker(utils, highlightUtils, accessibleLabelUtils, navigationManager) {
            _classCallCheck(this, DatePicker);
    
            /**
             * Root html element
             * @type {JQuery|null}
             */
            this.$html = null;
            /**
             * Calendar trigger button
             * @type {JQuery|null}
             */
            this.$triggerButton = null;
            /**
             * Date input
             * @type {JQuery|null}
             */
            this.$dateInput = null;
            /**
             * Calendar next month link
             * @type {JQuery|null}
             */
            this.$nextLink = null;
            /**
             * Calendar previous month link
             * @type {JQuery|null}
             */
            this.$prevLink = null;
            /**
             * Calendar today link
             * @type {JQuery|null}
             */
            this.$todayLink = null;
            /**
             * Calendar wrapper
             * @type {JQuery|null}
             */
            this.$datePickerContainer = null;
    
            this.utils = utils;
            this.highlightUtils = highlightUtils;
            this.accessibleLabelUtils = accessibleLabelUtils;
            this.navigationManager = navigationManager;
        }
    
        /**
         * Initialize
         * @param {jQuery} $html
         */
    
    
        _createClass(DatePicker, [{
            key: 'init',
            value: function init($html) {
                var _this = this;
    
                this.$html = $html;
    
                var $datePickers = $html.find('[data-pulsar-datepicker="true"]');
                var defaultDateFormat = void 0;
                var inputPlaceholder = void 0;
    
                $datePickers.each(function (index, element) {
                    var $datePickerInput = $(element);
                    var dateFormat = $datePickerInput.attr('data-pulsar-datepicker-format');
                    var linkedTriggerButtonId = $datePickerInput.attr('data-pulsar-datepicker-trigger');
                    var $linkedTriggerButton = _this.$html.find('#' + linkedTriggerButtonId);
                    var altField = $datePickerInput.attr('data-pulsar-datepicker-altfield');
                    var altFormat = $datePickerInput.attr('data-pulsar-datepicker-altformat');
    
                    if ($datePickerInput.attr('data-pulsar-datepicker-trigger') === undefined) {
                        console.warn('Datepicker: The date input must include a data-pulsar-datepicker-trigger data attribute with the value matching the ID of the trigger button');
                        return;
                    }
    
                    if (!$linkedTriggerButton.length) {
                        console.warn('Datepicker: The trigger button element with the ID given in data-pulsar-datepicker-trigger cannot be found');
                        return;
                    }
    
                    // Check if data-pulsar-datepicker-format attribute exists and lowercase it
                    // to eliminate different styles of writing issues
                    if (dateFormat !== undefined) {
                        dateFormat = dateFormat.toLowerCase();
                    }
    
                    // Set date formats
                    switch (dateFormat) {
                        case 'us':
                            defaultDateFormat = 'mm/dd/yy';
                            inputPlaceholder = 'mm/dd/yyyy';
                            break;
                        case 'reverse':
                            defaultDateFormat = 'yy/mm/dd';
                            inputPlaceholder = 'yyyy/mm/dd';
                            break;
                        default:
                            defaultDateFormat = 'dd/mm/yy';
                            inputPlaceholder = 'dd/mm/yyyy';
                    }
    
                    // Initialize date pickers
                    $datePickerInput.datepicker({
                        altField: altField ? '#' + altField : "",
                        altFormat: altFormat ? altFormat : "",
                        closeText: 'Close',
                        dayNamesShort: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                        dateFormat: defaultDateFormat,
                        onClose: _this.utils.removeAria.bind(_this, $html),
                        showAnim: '',
                        showButtonPanel: true,
                        showOn: 'button',
                        // Hide the default JQUI trigger button so we can attach to our own
                        beforeShow: function beforeShow(input, inst) {
                            $(inst.dpDiv).addClass('pulsar-datepicker');
                        }
                    });
    
                    // Add placeholder matching the date format, allowing for difference in string format
                    $datePickerInput.attr('placeholder', inputPlaceholder);
    
                    // Switch off autocomplete to avoid it overlapping the date picker
                    $datePickerInput.attr('autocomplete', 'off');
    
                    $linkedTriggerButton.on('click', _this.enhanceDatePicker.bind(_this, $datePickerInput));
                });
    
                $html.on('click', '#ui-datepicker-div .ui-datepicker-close', function () {
                    _this.closeCalendar();
                });
            }
    
            /**
             * Enhance the jQuery UI datepicker on trigger button click event
             * @param {Event} event
             */
    
        }, {
            key: 'enhanceDatePicker',
            value: function enhanceDatePicker($datePickerInput, event) {
                event.preventDefault();
    
                this.$triggerButton = $(event.target);
                this.$dateInput = $datePickerInput;
                this.$dateInput.datepicker('show');
                this.$datePickerContainer = this.$html.find('#ui-datepicker-div');
    
                // Hide the entire page (except the date picker)
                // from screen readers to prevent document navigation
                // (by headings, etc.) while the popup is open
                this.$html.find('.container').attr('aria-hidden', 'true');
                this.$html.find('.skip-link').attr('aria-hidden', 'true');
                this.$html.find('.footer').attr('aria-hidden', 'true');
    
                // Hide the "today" button because it doesn't work as expected
                this.$html.find('.ui-datepicker-current').addClass('u-display-none');
    
                var $today = this.$html.find('.ui-datepicker-today a');
                if (!$today.length) {
                    // If today isn't on the displayed month, use either the selected date (active) or the first of the month
                    $today = this.$html.find('.ui-state-active') || this.$html.find('.ui-state-default').first();
                }
                $today.trigger('focus');
    
                this.$datePickerContainer.attr('role', 'application');
                this.$datePickerContainer.attr('aria-label', 'Calendar view date-picker');
                this.updateHeaderElements();
    
                // Remove previously bound handler so it doesn't bind twice
                // when mutiple date pickers are opened and closed
                this.$datePickerContainer.off('keydown');
    
                // Attach keyboard accessibility enhancements
                this.boundDatePickerKeyHandler = this.datePickerKeyHandler.bind(this, this.$datePickerContainer);
                this.$datePickerContainer.on('keydown', this.boundDatePickerKeyHandler);
            }
    
            /**
             * Handle calendar keypress event
             * @param {jQuery} $container
             * @param {Event} keyEvent
             */
    
        }, {
            key: 'datePickerKeyHandler',
            value: function datePickerKeyHandler($container, keyEvent) {
                var _this2 = this;
    
                var keyCode = keyEvent.keyCode;
                var $target = $(keyEvent.target);
                var keyCodes = {
                    'ESC': 27,
                    'TAB': 9,
                    'LEFT': 37,
                    'RIGHT': 39,
                    'UP': 38,
                    'DOWN': 40,
                    'ENTER': 13,
                    'SPACE': 32,
                    'PAGEUP': 33,
                    'PAGEDOWN': 34,
                    'HOME': 36,
                    'END': 35
                };
    
                var $activeDate = void 0;
    
                if (keyCode === keyCodes.ESC) {
                    keyEvent.stopPropagation();
                    this.closeCalendar();
                } else if (keyCode === keyCodes.TAB && keyEvent.shiftKey) {
                    keyEvent.preventDefault();
    
                    if ($target.hasClass('ui-datepicker-close')) {
                        $container.find('.ui-datepicker-prev').trigger('focus');
                    } else if ($target.hasClass('ui-state-default')) {
                        $container.find('.ui-datepicker-close').trigger('focus');
                    } else if ($target.hasClass('ui-datepicker-prev')) {
                        $container.find('.ui-datepicker-next').trigger('focus');
                    } else if ($target.hasClass('ui-datepicker-next')) {
                        // Check if a chosen date or today exists in month
                        if ($container.find('.ui-state-highlight').length) {
                            $activeDate = $container.find('.ui-state-highlight');
                        } else if ($container.find('.ui-state-active').length) {
                            $activeDate = $container.find('.ui-state-active');
                        }
    
                        if ($activeDate.length) {
                            $activeDate.trigger('focus');
                        }
                    }
                } else if (keyCode === keyCodes.TAB) {
                    keyEvent.preventDefault();
    
                    if ($target.hasClass('ui-datepicker-close')) {
                        // Check if a chosen date or today exists in month
                        if ($container.find('.ui-state-highlight').length) {
                            $activeDate = $container.find('.ui-state-highlight');
                        } else if ($container.find('.ui-state-active').length) {
                            $activeDate = $container.find('.ui-state-active');
                        }
                        if ($activeDate.length) {
                            $activeDate.trigger('focus');
                        }
                    } else if ($target.hasClass('ui-state-default')) {
                        $container.find('.ui-datepicker-next').trigger('focus');
                    } else if ($target.hasClass('ui-datepicker-next')) {
                        $container.find('.ui-datepicker-prev').trigger('focus');
                    } else if ($target.hasClass('ui-datepicker-prev')) {
                        $container.find('.ui-datepicker-close').trigger('focus');
                    }
                } else if (keyCode === keyCodes.LEFT) {
                    if ($target.is('a.ui-state-default')) {
                        keyEvent.preventDefault();
                        this.navigationManager.goToPreviousDay($target, this.$datePickerContainer);
                    }
                } else if (keyCode === keyCodes.RIGHT) {
                    if ($target.is('a.ui-state-default')) {
                        keyEvent.preventDefault();
                        this.navigationManager.goToNextDay($target, this.$datePickerContainer);
                    }
                } else if (keyCode === keyCodes.UP) {
                    if ($target.is('a.ui-state-default')) {
                        keyEvent.preventDefault();
                        this.navigationManager.goUp($target, $container);
                    }
                } else if (keyCode === keyCodes.DOWN) {
                    if ($target.is('a.ui-state-default')) {
                        keyEvent.preventDefault();
                        this.navigationManager.goDown($target, $container);
                    }
                } else if (keyCode === keyCodes.ENTER) {
                    if ($target.hasClass('ui-state-default')) {
                        // Need to allow for selection of the date and then cal close
                        setTimeout(function () {
                            _this2.closeCalendar();
                        }, 100);
                    } else if ($target.hasClass('ui-datepicker-prev')) {
                        this.handlePrevLinkClicks();
                    } else if ($target.hasClass('ui-datepicker-next')) {
                        this.handleNextLinkClicks();
                    }
                } else if (keyCode === keyCodes.SPACE) {
                    if ($target.hasClass('ui-datepicker-prev')) {
                        keyEvent.preventDefault();
                        $target.trigger('click');
                    } else if ($target.hasClass('ui-datepicker-next')) {
                        keyEvent.preventDefault();
                        $target.trigger('click');
                    } else if ($target.is('a.ui-state-default')) {
                        keyEvent.preventDefault();
                        $target.trigger('click');
                        this.closeCalendar();
                    }
                } else if (keyCode === keyCodes.PAGEUP) {
                    if ($target.is('a.ui-state-default')) {
                        keyEvent.preventDefault();
                        this.navigationManager.navigateOneMonth($target, 'prev', this.$datePickerContainer, this.$nextLink, this.$prevLink);
                    }
                } else if (keyCode === keyCodes.PAGEDOWN) {
                    if ($target.is('a.ui-state-default')) {
                        keyEvent.preventDefault();
                        this.navigationManager.navigateOneMonth($target, 'next', this.$datePickerContainer, this.$nextLink, this.$prevLink);
                    }
                } else if (keyCode === keyCodes.HOME) {
                    if ($target.is('a.ui-state-default')) {
                        keyEvent.preventDefault();
    
                        var $firstOfMonth = $target.closest('tbody').find('.ui-state-default').first();
                        if ($firstOfMonth) {
                            $firstOfMonth.trigger('focus');
                            this.highlightUtils.setHighlightState($firstOfMonth, $container);
                        }
                    }
                } else if (keyCode === keyCodes.END) {
                    if ($target.is('a.ui-state-default')) {
                        keyEvent.preventDefault();
    
                        var $lastDay = $target.closest('tbody').find('.ui-state-default').last();
                        if ($lastDay) {
                            $lastDay.trigger('focus');
                            this.highlightUtils.setHighlightState($lastDay, $container);
                        }
                    }
                }
            }
    
            /**
             * Handle calendar close
             */
    
        }, {
            key: 'closeCalendar',
            value: function closeCalendar() {
                this.$html.find('#ui-datepicker-div').off('keydown');
                this.$dateInput.datepicker('hide');
                this.$dateInput.trigger('focus');
            }
    
            /**
             * Handle next month link click event
             * @param {Event} event
             */
    
        }, {
            key: 'handleNextLinkClicks',
            value: function handleNextLinkClicks(event) {
                if (event !== undefined) {
                    event.preventDefault();
                }
    
                // Update the header elements after change of month (as elements change)
                this.updateHeaderElements();
                // Highlight date in new month
                this.highlightUtils.prepHighlightState(this.$datePickerContainer);
                // Refocus the next button (otherwise focus returns to date input)
                this.$html.find('.ui-datepicker-next').trigger('focus');
                // Re-hide the today button (as elements change)
                this.$html.find('.ui-datepicker-current').addClass('u-display-none');
            }
    
            /**
             * Handle previous month link click event
             * @param {Event} event
             */
    
        }, {
            key: 'handlePrevLinkClicks',
            value: function handlePrevLinkClicks(event) {
                if (event !== undefined) {
                    event.preventDefault();
                }
    
                // Update the header elements after change of month (as elements change)
                this.updateHeaderElements();
                // Highlight date in new month
                this.highlightUtils.prepHighlightState(this.$datePickerContainer);
                // Refocus the prev button (otherwise focus returns to date input)
                this.$html.find('.ui-datepicker-prev').trigger('focus');
                // Re-hide the today button (as elements change)
                this.$html.find('.ui-datepicker-current').addClass('u-display-none');
            }
    
            /**
             * Update calendar header elements after month change
             */
    
        }, {
            key: 'updateHeaderElements',
            value: function updateHeaderElements() {
                // Re-get the next/prev buttons as they change when the month changes
                this.$prevLink = this.$datePickerContainer.find('.ui-datepicker-prev');
                this.$nextLink = this.$datePickerContainer.find('.ui-datepicker-next');
    
                // Make them focusable
                this.$nextLink.attr('href', '#');
                this.$prevLink.attr('href', '#');
    
                // Make the next/prev links buttons and remove unneeded title
                this.$nextLink.attr('role', 'button');
                this.$prevLink.attr('role', 'button');
                this.$nextLink.removeAttr('title');
                this.$prevLink.removeAttr('title');
    
                // Append accessible hidden text to prev/next links
                this.accessibleLabelUtils.addControlLabels(this.$nextLink, this.$html);
                this.accessibleLabelUtils.addControlLabels(this.$prevLink, this.$html);
    
                // Bind click handlers again as the element have changed
                this.$nextLink.on('click', this.handleNextLinkClicks.bind(this));
                this.$prevLink.on('click', this.handlePrevLinkClicks.bind(this));
    
                // Add accessible date labels to individual dates
                this.accessibleLabelUtils.addDateLabels(this.$datePickerContainer);
            }
        }]);
    
        return DatePicker;
    }();
    
    module.exports = DatePicker;
    
    },{"jquery":416,"jquery-ui/ui/widgets/datepicker":413}],426:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = window.$ || require("jquery");
    
    var DatePickerAccessibleLabelsUtils = function () {
        /**
         * DatePickerAccessibleLabelsUtils
         * @param {DatePickerUtils} utils
         */
        function DatePickerAccessibleLabelsUtils(utils) {
            _classCallCheck(this, DatePickerAccessibleLabelsUtils);
    
            this.utils = utils;
        }
    
        /**
         * Add accessible date labels to individual month dates
         * @param {jQuery} $datePickerContainer
         */
    
    
        _createClass(DatePickerAccessibleLabelsUtils, [{
            key: 'addDateLabels',
            value: function addDateLabels($datePickerContainer) {
                var $dates = $datePickerContainer.find('a.ui-state-default');
    
                // Make date links sound like buttons in SRs
                $dates.attr('role', 'button');
    
                // Loop through displayed calendar month, create and append accessible labels to each date
                $dates.each(function (index, date) {
                    var dateText = void 0,
                        $date = $(date),
                        dayNumber = $date.text(),
                        $currentRow = $date.closest('tr'),
                        $currentTds = $currentRow.find('td'),
                        currentIndex = $.inArray($date.parent()[0], $currentTds),
                        $headThs = $datePickerContainer.find('thead tr th'),
                        dayIndex = $headThs[currentIndex],
                        dayWord = $(dayIndex).find('span').attr('title'),
                        monthName = $datePickerContainer.find('.ui-datepicker-month').text(),
                        year = $datePickerContainer.find('.ui-datepicker-year').text();
    
                    if (!dayNumber || !monthName || !year || !dayWord) {
                        return;
                    }
    
                    // SR Reads: "15 April 2020 Wednesday"
                    dateText = dayNumber + ' ' + monthName + ' ' + year + ' ' + dayWord;
                    $date.attr('aria-label', dateText);
                });
            }
    
            /**
             * Appends accessible text to the next/previous month buttons
             * @param {jQuery} $button
             * @param {jQuery} $html
             */
    
        }, {
            key: 'addControlLabels',
            value: function addControlLabels($button, $html) {
                var isNext = $button.hasClass('ui-datepicker-next');
                var months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];
                var currentMonth = $html.find('.ui-datepicker-title .ui-datepicker-month').text().toLowerCase();
                var monthIndex = $.inArray(currentMonth.toLowerCase(), months);
                var currentYear = $html.find('.ui-datepicker-title .ui-datepicker-year').text().toLowerCase();
                var adjacentIndex = isNext ? monthIndex + 1 : monthIndex - 1;
                var buttonText = void 0;
    
                if (isNext && currentMonth === 'december') {
                    currentYear = parseInt(currentYear, 10) + 1;
                    adjacentIndex = 0;
                } else if (!isNext && currentMonth === 'january') {
                    currentYear = parseInt(currentYear, 10) - 1;
                    adjacentIndex = months.length - 1;
                }
    
                buttonText = isNext ? 'Next Month, ' + this.utils.firstToCap(months[adjacentIndex]) + ' ' + currentYear : 'Previous Month, ' + this.utils.firstToCap(months[adjacentIndex]) + ' ' + currentYear;
    
                $button.find('.ui-icon').html('<span class="hide">' + buttonText + '</span>');
            }
        }]);
    
        return DatePickerAccessibleLabelsUtils;
    }();
    
    module.exports = DatePickerAccessibleLabelsUtils;
    
    },{"jquery":416}],427:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _DatePickerUtils = require('./DatePickerUtils');
    
    var _DatePickerUtils2 = _interopRequireDefault(_DatePickerUtils);
    
    var _DatePickerHighlightUtils = require('./DatePickerHighlightUtils');
    
    var _DatePickerHighlightUtils2 = _interopRequireDefault(_DatePickerHighlightUtils);
    
    var _DatePickerAccessibleLabelsUtils = require('./DatePickerAccessibleLabelsUtils');
    
    var _DatePickerAccessibleLabelsUtils2 = _interopRequireDefault(_DatePickerAccessibleLabelsUtils);
    
    var _DatePickerNavigationManager = require('./DatePickerNavigationManager');
    
    var _DatePickerNavigationManager2 = _interopRequireDefault(_DatePickerNavigationManager);
    
    var _DatePicker = require('./DatePicker');
    
    var _DatePicker2 = _interopRequireDefault(_DatePicker);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DatePickerFactory = function () {
        function DatePickerFactory() {
            _classCallCheck(this, DatePickerFactory);
        }
    
        _createClass(DatePickerFactory, null, [{
            key: 'create',
    
            /**
             * Create an instance of a Datepicker with it's options and dependencies
             * @returns {DatePicker}
             */
            value: function create() {
                var utils = new _DatePickerUtils2.default();
                var highlightUtils = new _DatePickerHighlightUtils2.default(utils);
                var navigationManager = new _DatePickerNavigationManager2.default(utils, highlightUtils);
    
                return new _DatePicker2.default(utils, highlightUtils, new _DatePickerAccessibleLabelsUtils2.default(utils), navigationManager);
            }
        }]);
    
        return DatePickerFactory;
    }();
    
    module.exports = DatePickerFactory;
    
    },{"./DatePicker":425,"./DatePickerAccessibleLabelsUtils":426,"./DatePickerHighlightUtils":428,"./DatePickerNavigationManager":429,"./DatePickerUtils":430}],428:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DatePickerHighlightUtils = function () {
        /**
         * DatePickerHighlightUtils
         * @param {DatePickerUtils} utils
         */
        function DatePickerHighlightUtils(utils) {
            _classCallCheck(this, DatePickerHighlightUtils);
    
            this.utils = utils;
        }
    
        /**
         * Calculate which date should be highlighted in month
         * @param {jQuery} $container
         */
    
    
        _createClass(DatePickerHighlightUtils, [{
            key: 'prepHighlightState',
            value: function prepHighlightState($datePickerContainer) {
                var $highlight = void 0;
    
                // If we have an existing highlight use that, if not grab the first of the month
                if ($datePickerContainer.find('.ui-state-highlight').length) {
                    $highlight = $datePickerContainer.find('.ui-state-highlight').first();
                } else {
                    $highlight = $datePickerContainer.find('.ui-state-default').first();
                }
    
                // Set the highlight
                if ($highlight.length && $datePickerContainer.length) {
                    this.setHighlightState($highlight, $datePickerContainer);
                }
            }
    
            /**
             * Highlight appropriate date
             * @param {jQuery} $newHighlight element to highlight
             * @param {jQuery} $container
             */
    
        }, {
            key: 'setHighlightState',
            value: function setHighlightState($newHighlight, $container) {
                var $prevHighlight = this.utils.getCurrentDate($container);
                // Remove the highlight state from previously
                // highlighted date and add it to our newly active date
                $prevHighlight.removeClass('ui-state-highlight');
                $newHighlight.addClass('ui-state-highlight');
            }
        }]);
    
        return DatePickerHighlightUtils;
    }();
    
    module.exports = DatePickerHighlightUtils;
    
    },{}],429:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var $ = window.$ || require("jquery");
    
    var DatePickerNavigationManager = function () {
        /**
         * DatePickerNavigationManager
         * @param {DatePickerUtils} utils
         * @param {DatePickerHighlightUtils} highlightUtils
         */
        function DatePickerNavigationManager(utils, highlightUtils) {
            _classCallCheck(this, DatePickerNavigationManager);
    
            this.utils = utils;
            this.highlightUtils = highlightUtils;
        }
    
        /**
         * Navigate one month forwards or backwards
         * @param {jQuery} $currentDate
         * @param {string} direction
         * @param {jQuery} $datePickerContainer
         * @param {jQuery} $nextLink
         * @param {jQuery} $prevLink
         */
    
    
        _createClass(DatePickerNavigationManager, [{
            key: 'navigateOneMonth',
            value: function navigateOneMonth($currentDate, direction, $datePickerContainer, $nextLink, $prevLink) {
                // Selector for enable dates
                var ENABLED_SELECTOR = 'tbody td:not(.ui-state-disabled)';
    
                // Get details on the current month and selected date
                var $currentMonthsCells = $datePickerContainer.find(ENABLED_SELECTOR);
                var currentMonthsSelectedDateIndex = $.inArray($currentDate.parent()[0], $currentMonthsCells);
    
                // Click the appropriate calendar control
                if (direction === 'next') {
                    $nextLink.trigger('click');
                } else {
                    $prevLink.trigger('click');
                }
    
                // Get cells and corresponding TD in new month
                var $newCells = $datePickerContainer.find(ENABLED_SELECTOR);
                var newTd = $newCells[currentMonthsSelectedDateIndex];
    
                // New months corresponding date link
                var $newAnchor = newTd && $(newTd).find('a');
    
                // If the corresponding date in the new month doesn't exist, go back a date until we find one
                while (!$newAnchor) {
                    currentMonthsSelectedDateIndex--;
                    newTd = $newCells[currentMonthsSelectedDateIndex];
                    $newAnchor = newTd && $(newTd).find('a');
                }
    
                // Highlight the corresponding date
                this.highlightUtils.setHighlightState($newAnchor, $datePickerContainer);
    
                // Focus the date
                $newAnchor.trigger('focus');
            }
    
            /**
             * Go back one day
             * @param {jQuery} $currentDate existing date before move
             * @param {jQuery} $datePickerContainer
             */
    
        }, {
            key: 'goToPreviousDay',
            value: function goToPreviousDay($currentDate, $datePickerContainer) {
                var $td = $currentDate.closest('td');
                var $prevTd = $td.prev();
                var $prevDateLink = $prevTd.find('a.ui-state-default');
    
                if ($prevTd.length && $prevDateLink.length) {
                    // Highlight and focus new date
                    this.highlightUtils.setHighlightState($prevDateLink, $datePickerContainer);
                    $prevDateLink.trigger('focus');
                } else {
                    this.goToPreviousDayInPreviousWeek($currentDate, $datePickerContainer);
                }
            }
    
            /**
             * Go back to previous day when previous day is in previous week
             * @param {jQuery} $currentDate existing date before move
             * @param {jQuery} $datePickerContainer
             */
    
        }, {
            key: 'goToPreviousDayInPreviousWeek',
            value: function goToPreviousDayInPreviousWeek($currentDate, $datePickerContainer) {
                var $currentRow = $currentDate.closest('tr');
                var $previousRow = $currentRow.prev();
    
                if (!$previousRow || $previousRow.length === 0) {
                    // No previous row, so go to previous month
                    this.goToPreviousMonth($datePickerContainer);
                } else {
                    var $prevRowDates = $previousRow.find('td a.ui-state-default'),
                        $prevRowDate = $prevRowDates.last();
    
                    if ($prevRowDate.length) {
                        // Highlight and focus new date
                        this.highlightUtils.setHighlightState($prevRowDate, $datePickerContainer);
                        $prevRowDate.trigger('focus');
                    }
                }
            }
    
            /**
             * Go back to previous day when previous day is in previous month
             * @param {jQuery} $datePickerContainer
             */
    
        }, {
            key: 'goToPreviousMonth',
            value: function goToPreviousMonth($datePickerContainer) {
                var $prevLink = $datePickerContainer.find('.ui-datepicker-prev');
                $prevLink.trigger('click');
    
                // Focus last day of new month
                var $trs = $datePickerContainer.find('tr');
                var $lastRowTdLinks = $trs.last().find('td a.ui-state-default');
                var $lastDate = $lastRowTdLinks.last();
    
                // Highlight and focus new date
                this.highlightUtils.setHighlightState($lastDate, $datePickerContainer);
                $lastDate.trigger('focus');
            }
    
            /**
             * Go forward one day
             * @param {jQuery} $currentDate existing date before move
             * @param {jQuery} $datePickerContainer
             */
    
        }, {
            key: 'goToNextDay',
            value: function goToNextDay($currentDate, $datePickerContainer) {
                var $td = $currentDate.closest('td');
                var $nextTd = $td.next();
                var $nextDateLink = $nextTd.find('a.ui-state-default');
    
                // If date in same row as current
                if ($nextTd.length && $nextDateLink.length) {
                    // Highlight and focus new date
                    this.highlightUtils.setHighlightState($nextDateLink, $datePickerContainer);
                    $nextDateLink.trigger('focus');
                } else {
                    // If date on new row, shift to first date in row
                    this.goToNextDayInNextWeek($currentDate, $datePickerContainer);
                }
            }
    
            /**
             * Go to next day when next day is in next week
             * @param {jQuery} $currentDate existing date before move
             * @param {jQuery} $datePickerContainer
             */
    
        }, {
            key: 'goToNextDayInNextWeek',
            value: function goToNextDayInNextWeek($currentDate, $datePickerContainer) {
                var $currentRow = $currentDate.closest('tr');
                var $nextRow = $currentRow.next();
    
                if (!$nextRow || $nextRow.length === 0) {
                    this.goToNextMonth($datePickerContainer);
                } else {
                    var $nextRowFirstDate = $nextRow.find('a.ui-state-default').first();
    
                    if ($nextRowFirstDate.length) {
                        // Highlight and focus new date
                        this.highlightUtils.setHighlightState($nextRowFirstDate, $datePickerContainer);
                        $nextRowFirstDate.trigger('focus');
                    }
                }
            }
    
            /**
             * Go to next day when next day is in next month
             * @param {jQuery} $datePickerContainer
             */
    
        }, {
            key: 'goToNextMonth',
            value: function goToNextMonth($datePickerContainer) {
                var $nextLink = $datePickerContainer.find('.ui-datepicker-next');
                $nextLink.trigger('click');
    
                var $firstDate = $datePickerContainer.find('a.ui-state-default').first();
    
                // Highlight and focus new date
                this.highlightUtils.setHighlightState($firstDate, $datePickerContainer);
                $firstDate.trigger('focus');
            }
    
            /**
             * Go to previous date directly above the current date
             * @param {jQuery} $currentDate
             * @param {jQuery} $datePickerContainer
             */
    
        }, {
            key: 'goUp',
            value: function goUp($currentDate, $datePickerContainer) {
                var $currentDateRow = $currentDate.closest('tr');
                var $prevLink = $datePickerContainer.find('.ui-datepicker-prev');
                var $rowTds = $currentDateRow.find('td');
                var $rowLinks = $currentDateRow.find('a.ui-state-default');
                var currentDateIndex = $.inArray($currentDate[0], $rowLinks);
                var $prevRow = $currentDateRow.prev();
                var $prevRowTds = $prevRow.find('td');
                var parallel = $prevRowTds[currentDateIndex];
    
                var $linkCheck = $(parallel).find('a.ui-state-default');
    
                if ($prevRow.length && parallel && $linkCheck.length) {
                    // there is a previous row, a td at the same index
                    // of the current date AND theres a link in that td
                    this.highlightUtils.setHighlightState($linkCheck, $datePickerContainer);
                    $linkCheck.trigger('focus');
                } else {
                    // we're either on the first row of a month, or we're on the
                    // second and there is not a date link directly above the current date
                    $prevLink.trigger('click');
    
                    var $newRows = $datePickerContainer.find('tr');
                    var lastRow = $newRows[$newRows.length - 1];
                    var $lastRowTds = $(lastRow).find('td');
                    var tdParallelIndex = $.inArray($currentDate.parent()[0], $rowTds);
                    var newParallel = $lastRowTds[tdParallelIndex];
                    var $newCheck = $(newParallel).find('a.ui-state-default');
    
                    if (lastRow && newParallel && $newCheck.length) {
                        this.highlightUtils.setHighlightState($newCheck, $datePickerContainer);
                        $newCheck.trigger('focus');
                    } else {
                        // theres no date link on the last week (row) of the new month
                        // meaning its an empty cell, so we'll try the 2nd to last week
                        var secondLastRow = $newRows[$newRows.length - 2];
                        var $secondTds = $(secondLastRow).find('td');
                        var targetTd = $secondTds[tdParallelIndex];
    
                        $linkCheck = $(targetTd).find('a.ui-state-default');
    
                        if ($linkCheck.length) {
                            this.highlightUtils.setHighlightState($linkCheck, $datePickerContainer);
                            $linkCheck.trigger('focus');
                        }
                    }
                }
            }
    
            /**
             * Go to the date directly below the current date
             * @param {jQuery} $currentDate
             * @param {jQuery} $datePickerContainer
             */
    
        }, {
            key: 'goDown',
            value: function goDown($currentDate, $datePickerContainer) {
                var $currentDateRow = $currentDate.closest('tr');
                var $nextLink = $datePickerContainer.find('.ui-datepicker-next');
                var $currentDateRowCells = $currentDateRow.find('td');
                var cellIndex = $.inArray($currentDate.parent()[0], $currentDateRowCells);
                var $nextRow = $currentDateRow.next();
                var $nextRowCells = $nextRow.find('td');
                var nextWeekTd = $nextRowCells[cellIndex];
                var $nextWeekCheck = $(nextWeekTd).find('a.ui-state-default');
    
                if ($nextRow.length && nextWeekTd && $nextWeekCheck.length) {
                    // theres a next row, a TD at the same index of the current date,
                    // and theres an anchor within that td
                    this.highlightUtils.setHighlightState($nextWeekCheck, $datePickerContainer);
                    $nextWeekCheck.trigger('focus');
                } else {
                    $nextLink.trigger('click');
    
                    var $nextMonthTrs = $datePickerContainer.find('tbody tr');
                    var $firstTds = $nextMonthTrs.find('td');
                    var firstParallel = $firstTds[cellIndex];
                    var $firstCheck = $(firstParallel).find('a.ui-state-default');
    
                    // if next week parallel date is in same month
                    if (firstParallel && $firstCheck.length) {
                        this.highlightUtils.setHighlightState($firstCheck, $datePickerContainer);
                        $firstCheck.trigger('focus');
                    } else {
                        // if not in same month
                        // lets try the second row b/c we didnt find a
                        // date link in the first row at the current dates index
                        var secondRow = $nextMonthTrs[1];
                        var $secondTds = $(secondRow).find('td');
                        var secondRowTargetTd = $secondTds[cellIndex];
                        var $secondCheck = $(secondRowTargetTd).find('a.ui-state-default');
    
                        if (secondRow && $secondCheck.length) {
                            this.highlightUtils.setHighlightState($secondCheck, $datePickerContainer);
                            $secondCheck.trigger('focus');
                        }
                    }
                }
            }
        }]);
    
        return DatePickerNavigationManager;
    }();
    
    module.exports = DatePickerNavigationManager;
    
    },{"jquery":416}],430:[function(require,module,exports){
    'use strict';
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var DatePickerUtils = function () {
        function DatePickerUtils() {
            _classCallCheck(this, DatePickerUtils);
        }
    
        _createClass(DatePickerUtils, [{
            key: 'getCurrentDate',
    
            /**
             * Gets the current date based on the highlight class
             * @param {jQuery} $container
             */
            value: function getCurrentDate($container) {
                var $currentDate = $container.find('.ui-state-highlight');
                return $currentDate;
            }
    
            /**
             * Remove aria-hidden from main main structure to make the rest of the page accessible again
             */
    
        }, {
            key: 'removeAria',
            value: function removeAria($html) {
                $html.find('.container').removeAttr('aria-hidden');
                $html.find('.skip-link').removeAttr('aria-hidden');
                $html.find('.footer').removeAttr('aria-hidden');
            }
    
            /**
             * Returns the string with the first letter capitalized
             * @param {string} string
             */
    
        }, {
            key: 'firstToCap',
            value: function firstToCap(string) {
                return string.charAt(0).toUpperCase() + string.slice(1);
            }
        }]);
    
        return DatePickerUtils;
    }();
    
    module.exports = DatePickerUtils;
    
    },{}],431:[function(require,module,exports){
    /*!
     * SelectWoo (JADU) 1.0.1
     * https://github.com/woocommerce/selectWoo
     *
     * Released under the MIT license
     * https://github.com/woocommerce/selectWoo/blob/master/LICENSE.md
     */
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
      } else if (typeof module === 'object' && module.exports) {
        // Node/CommonJS
        module.exports = function (root, jQuery) {
          if (jQuery === undefined) {
            // require('jQuery') returns a factory that requires window to
            // build a jQuery instance, we normalize how we use modules
            // that require this pattern but the window provided is a noop
            // if it's defined (how jquery works)
            if (typeof window !== 'undefined') {
              jQuery = require('jquery');
            }
            else {
              jQuery = require('jquery')(root);
            }
          }
          factory(jQuery);
          return jQuery;
        };
      } else {
        // Browser globals
        factory(jQuery);
      }
    } (function (jQuery) {
      // This is needed so we can catch the AMD loader configuration and use it
      // The inner file should be wrapped (by `banner.start.js`) in a function that
      // returns the AMD loader references.
      var S2 =
    (function () {
      // Restore the Select2 AMD loader so it can be used
      // Needed mostly in the language files, where the loader is not inserted
      if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
        var S2 = jQuery.fn.select2.amd;
      }
    var S2;(function () { if (!S2 || !S2.requirejs) {
    if (!S2) { S2 = {}; } else { require = S2; }
    /**
     * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
     * Released under MIT license, http://github.com/requirejs/almond/LICENSE
     */
    //Going sloppy to avoid 'use strict' string cost, but strict practices should
    //be followed.
    /*global setTimeout: false */
    
    var requirejs, require, define;
    (function (undef) {
        var main, req, makeMap, handlers,
            defined = {},
            waiting = {},
            config = {},
            defining = {},
            hasOwn = Object.prototype.hasOwnProperty,
            aps = [].slice,
            jsSuffixRegExp = /\.js$/;
    
        function hasProp(obj, prop) {
            return hasOwn.call(obj, prop);
        }
    
        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @returns {String} normalized name
         */
        function normalize(name, baseName) {
            var nameParts, nameSegment, mapValue, foundMap, lastIndex,
                foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,
                baseParts = baseName && baseName.split("/"),
                map = config.map,
                starMap = (map && map['*']) || {};
    
            //Adjust any relative paths.
            if (name) {
                name = name.split('/');
                lastIndex = name.length - 1;
    
                // If wanting node ID compatibility, strip .js from end
                // of IDs. Have to do this here, and not in nameToUrl
                // because node allows either .js or non .js to map
                // to same file.
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }
    
                // Starts with a '.' so need the baseName
                if (name[0].charAt(0) === '.' && baseParts) {
                    //Convert baseName to array, and lop off the last part,
                    //so that . matches that 'directory' and not name of the baseName's
                    //module. For instance, baseName of 'one/two/three', maps to
                    //'one/two/three.js', but we want the directory, 'one/two' for
                    //this normalization.
                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    name = normalizedBaseParts.concat(name);
                }
    
                //start trimDots
                for (i = 0; i < name.length; i++) {
                    part = name[i];
                    if (part === '.') {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === '..') {
                        // If at the start, or previous value is still ..,
                        // keep them so that when converted to a path it may
                        // still work when converted to a path, even though
                        // as an ID it is less than ideal. In larger point
                        // releases, may be better to just kick out an error.
                        if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {
                            continue;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots
    
                name = name.join('/');
            }
    
            //Apply map config if available.
            if ((baseParts || starMap) && map) {
                nameParts = name.split('/');
    
                for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join("/");
    
                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = map[baseParts.slice(0, j).join('/')];
    
                            //baseName segment has  config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = mapValue[nameSegment];
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break;
                                }
                            }
                        }
                    }
    
                    if (foundMap) {
                        break;
                    }
    
                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && starMap[nameSegment]) {
                        foundStarMap = starMap[nameSegment];
                        starI = i;
                    }
                }
    
                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }
    
                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }
    
            return name;
        }
    
        function makeRequire(relName, forceSync) {
            return function () {
                //A version of a require function that passes a moduleName
                //value for items that may need to
                //look up paths relative to the moduleName
                var args = aps.call(arguments, 0);
    
                //If first arg is not require('string'), and there is only
                //one arg, it is the array form without a callback. Insert
                //a null so that the following concat is correct.
                if (typeof args[0] !== 'string' && args.length === 1) {
                    args.push(null);
                }
                return req.apply(undef, args.concat([relName, forceSync]));
            };
        }
    
        function makeNormalize(relName) {
            return function (name) {
                return normalize(name, relName);
            };
        }
    
        function makeLoad(depName) {
            return function (value) {
                defined[depName] = value;
            };
        }
    
        function callDep(name) {
            if (hasProp(waiting, name)) {
                var args = waiting[name];
                delete waiting[name];
                defining[name] = true;
                main.apply(undef, args);
            }
    
            if (!hasProp(defined, name) && !hasProp(defining, name)) {
                throw new Error('No ' + name);
            }
            return defined[name];
        }
    
        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }
    
        //Creates a parts array for a relName where first part is plugin ID,
        //second part is resource ID. Assumes relName has already been normalized.
        function makeRelParts(relName) {
            return relName ? splitPrefix(relName) : [];
        }
    
        /**
         * Makes a name map, normalizing the name, and using a plugin
         * for normalization if necessary. Grabs a ref to plugin
         * too, as an optimization.
         */
        makeMap = function (name, relParts) {
            var plugin,
                parts = splitPrefix(name),
                prefix = parts[0],
                relResourceName = relParts[1];
    
            name = parts[1];
    
            if (prefix) {
                prefix = normalize(prefix, relResourceName);
                plugin = callDep(prefix);
            }
    
            //Normalize according
            if (prefix) {
                if (plugin && plugin.normalize) {
                    name = plugin.normalize(name, makeNormalize(relResourceName));
                } else {
                    name = normalize(name, relResourceName);
                }
            } else {
                name = normalize(name, relResourceName);
                parts = splitPrefix(name);
                prefix = parts[0];
                name = parts[1];
                if (prefix) {
                    plugin = callDep(prefix);
                }
            }
    
            //Using ridiculous property names for space reasons
            return {
                f: prefix ? prefix + '!' + name : name, //fullName
                n: name,
                pr: prefix,
                p: plugin
            };
        };
    
        function makeConfig(name) {
            return function () {
                return (config && config.config && config.config[name]) || {};
            };
        }
    
        handlers = {
            require: function (name) {
                return makeRequire(name);
            },
            exports: function (name) {
                var e = defined[name];
                if (typeof e !== 'undefined') {
                    return e;
                } else {
                    return (defined[name] = {});
                }
            },
            module: function (name) {
                return {
                    id: name,
                    uri: '',
                    exports: defined[name],
                    config: makeConfig(name)
                };
            }
        };
    
        main = function (name, deps, callback, relName) {
            var cjsModule, depName, ret, map, i, relParts,
                args = [],
                callbackType = typeof callback,
                usingExports;
    
            //Use name if no relName
            relName = relName || name;
            relParts = makeRelParts(relName);
    
            //Call the callback to define the module, if necessary.
            if (callbackType === 'undefined' || callbackType === 'function') {
                //Pull out the defined dependencies and pass the ordered
                //values to the callback.
                //Default to [require, exports, module] if no deps
                deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
                for (i = 0; i < deps.length; i += 1) {
                    map = makeMap(deps[i], relParts);
                    depName = map.f;
    
                    //Fast path CommonJS standard dependencies.
                    if (depName === "require") {
                        args[i] = handlers.require(name);
                    } else if (depName === "exports") {
                        //CommonJS module spec 1.1
                        args[i] = handlers.exports(name);
                        usingExports = true;
                    } else if (depName === "module") {
                        //CommonJS module spec 1.1
                        cjsModule = args[i] = handlers.module(name);
                    } else if (hasProp(defined, depName) ||
                               hasProp(waiting, depName) ||
                               hasProp(defining, depName)) {
                        args[i] = callDep(depName);
                    } else if (map.p) {
                        map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                        args[i] = defined[depName];
                    } else {
                        throw new Error(name + ' missing ' + depName);
                    }
                }
    
                ret = callback ? callback.apply(defined[name], args) : undefined;
    
                if (name) {
                    //If setting exports via "module" is in play,
                    //favor that over return value and exports. After that,
                    //favor a non-undefined return value over exports use.
                    if (cjsModule && cjsModule.exports !== undef &&
                            cjsModule.exports !== defined[name]) {
                        defined[name] = cjsModule.exports;
                    } else if (ret !== undef || !usingExports) {
                        //Use the return value from the function.
                        defined[name] = ret;
                    }
                }
            } else if (name) {
                //May just be an object definition for the module. Only
                //worry about defining if have a module name.
                defined[name] = callback;
            }
        };
    
        requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
            if (typeof deps === "string") {
                if (handlers[deps]) {
                    //callback in this case is really relName
                    return handlers[deps](callback);
                }
                //Just return the module wanted. In this scenario, the
                //deps arg is the module name, and second arg (if passed)
                //is just the relName.
                //Normalize module name, if it contains . or ..
                return callDep(makeMap(deps, makeRelParts(callback)).f);
            } else if (!deps.splice) {
                //deps is a config object, not an array.
                config = deps;
                if (config.deps) {
                    req(config.deps, config.callback);
                }
                if (!callback) {
                    return;
                }
    
                if (callback.splice) {
                    //callback is an array, which means it is a dependency list.
                    //Adjust args if there are dependencies
                    deps = callback;
                    callback = relName;
                    relName = null;
                } else {
                    deps = undef;
                }
            }
    
            //Support require(['a'])
            callback = callback || function () {};
    
            //If relName is a function, it is an errback handler,
            //so remove it.
            if (typeof relName === 'function') {
                relName = forceSync;
                forceSync = alt;
            }
    
            //Simulate async callback;
            if (forceSync) {
                main(undef, deps, callback, relName);
            } else {
                //Using a non-zero value because of concern for what old browsers
                //do, and latest browsers "upgrade" to 4 if lower value is used:
                //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
                //If want a value immediately, use require('id') instead -- something
                //that works in almond on the global level, but not guaranteed and
                //unlikely to work in other AMD implementations.
                setTimeout(function () {
                    main(undef, deps, callback, relName);
                }, 4);
            }
    
            return req;
        };
    
        /**
         * Just drops the config on the floor, but returns req in case
         * the config return value is used.
         */
        req.config = function (cfg) {
            return req(cfg);
        };
    
        /**
         * Expose module registry for debugging and tooling
         */
        requirejs._defined = defined;
    
        define = function (name, deps, callback) {
            if (typeof name !== 'string') {
                throw new Error('See almond README: incorrect module build, no module name');
            }
    
            //This module may not have dependencies
            if (!deps.splice) {
                //deps is not an array, so probably means
                //an object literal or factory function for
                //the value. Adjust args.
                callback = deps;
                deps = [];
            }
    
            if (!hasProp(defined, name) && !hasProp(waiting, name)) {
                waiting[name] = [name, deps, callback];
            }
        };
    
        define.amd = {
            jQuery: true
        };
    }());
    
    S2.requirejs = requirejs;S2.require = require;S2.define = define;
    }
    }());
    S2.define("almond", function(){});
    
    /* global jQuery:false, $:false */
    S2.define('jquery',[],function () {
      var _$ = jQuery || $;
    
      if (_$ == null && console && console.error) {
        console.error(
          'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
          'found. Make sure that you are including jQuery before Select2 on your ' +
          'web page.'
        );
      }
    
      return _$;
    });
    
    S2.define('select2/utils',[
      'jquery'
    ], function ($) {
      var Utils = {};
    
      Utils.Extend = function (ChildClass, SuperClass) {
        var __hasProp = {}.hasOwnProperty;
    
        function BaseConstructor () {
          this.constructor = ChildClass;
        }
    
        for (var key in SuperClass) {
          if (__hasProp.call(SuperClass, key)) {
            ChildClass[key] = SuperClass[key];
          }
        }
    
        BaseConstructor.prototype = SuperClass.prototype;
        ChildClass.prototype = new BaseConstructor();
        ChildClass.__super__ = SuperClass.prototype;
    
        return ChildClass;
      };
    
      function getMethods (theClass) {
        var proto = theClass.prototype;
    
        var methods = [];
    
        for (var methodName in proto) {
          var m = proto[methodName];
    
          if (typeof m !== 'function') {
            continue;
          }
    
          if (methodName === 'constructor') {
            continue;
          }
    
          methods.push(methodName);
        }
    
        return methods;
      }
    
      Utils.Decorate = function (SuperClass, DecoratorClass) {
        var decoratedMethods = getMethods(DecoratorClass);
        var superMethods = getMethods(SuperClass);
    
        function DecoratedClass () {
          var unshift = Array.prototype.unshift;
    
          var argCount = DecoratorClass.prototype.constructor.length;
    
          var calledConstructor = SuperClass.prototype.constructor;
    
          if (argCount > 0) {
            unshift.call(arguments, SuperClass.prototype.constructor);
    
            calledConstructor = DecoratorClass.prototype.constructor;
          }
    
          calledConstructor.apply(this, arguments);
        }
    
        DecoratorClass.displayName = SuperClass.displayName;
    
        function ctr () {
          this.constructor = DecoratedClass;
        }
    
        DecoratedClass.prototype = new ctr();
    
        for (var m = 0; m < superMethods.length; m++) {
            var superMethod = superMethods[m];
    
            DecoratedClass.prototype[superMethod] =
              SuperClass.prototype[superMethod];
        }
    
        var calledMethod = function (methodName) {
          // Stub out the original method if it's not decorating an actual method
          var originalMethod = function () {};
    
          if (methodName in DecoratedClass.prototype) {
            originalMethod = DecoratedClass.prototype[methodName];
          }
    
          var decoratedMethod = DecoratorClass.prototype[methodName];
    
          return function () {
            var unshift = Array.prototype.unshift;
    
            unshift.call(arguments, originalMethod);
    
            return decoratedMethod.apply(this, arguments);
          };
        };
    
        for (var d = 0; d < decoratedMethods.length; d++) {
          var decoratedMethod = decoratedMethods[d];
    
          DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
        }
    
        return DecoratedClass;
      };
    
      var Observable = function () {
        this.listeners = {};
      };
    
      Observable.prototype.on = function (event, callback) {
        this.listeners = this.listeners || {};
    
        if (event in this.listeners) {
          this.listeners[event].push(callback);
        } else {
          this.listeners[event] = [callback];
        }
      };
    
      Observable.prototype.trigger = function (event) {
        var slice = Array.prototype.slice;
        var params = slice.call(arguments, 1);
    
        this.listeners = this.listeners || {};
    
        // Params should always come in as an array
        if (params == null) {
          params = [];
        }
    
        // If there are no arguments to the event, use a temporary object
        if (params.length === 0) {
          params.push({});
        }
    
        // Set the `_type` of the first object to the event
        params[0]._type = event;
    
        if (event in this.listeners) {
          this.invoke(this.listeners[event], slice.call(arguments, 1));
        }
    
        if ('*' in this.listeners) {
          this.invoke(this.listeners['*'], arguments);
        }
      };
    
      Observable.prototype.invoke = function (listeners, params) {
        for (var i = 0, len = listeners.length; i < len; i++) {
          listeners[i].apply(this, params);
        }
      };
    
      Utils.Observable = Observable;
    
      Utils.generateChars = function (length) {
        var chars = '';
    
        for (var i = 0; i < length; i++) {
          var randomChar = Math.floor(Math.random() * 36);
          chars += randomChar.toString(36);
        }
    
        return chars;
      };
    
      Utils.bind = function (func, context) {
        return function () {
          func.apply(context, arguments);
        };
      };
    
      Utils._convertData = function (data) {
        for (var originalKey in data) {
          var keys = originalKey.split('-');
    
          var dataLevel = data;
    
          if (keys.length === 1) {
            continue;
          }
    
          for (var k = 0; k < keys.length; k++) {
            var key = keys[k];
    
            // Lowercase the first letter
            // By default, dash-separated becomes camelCase
            key = key.substring(0, 1).toLowerCase() + key.substring(1);
    
            if (!(key in dataLevel)) {
              dataLevel[key] = {};
            }
    
            if (k == keys.length - 1) {
              dataLevel[key] = data[originalKey];
            }
    
            dataLevel = dataLevel[key];
          }
    
          delete data[originalKey];
        }
    
        return data;
      };
    
      Utils.hasScroll = function (index, el) {
        // Adapted from the function created by @ShadowScripter
        // and adapted by @BillBarry on the Stack Exchange Code Review website.
        // The original code can be found at
        // http://codereview.stackexchange.com/q/13338
        // and was designed to be used with the Sizzle selector engine.
    
        var $el = $(el);
        var overflowX = el.style.overflowX;
        var overflowY = el.style.overflowY;
    
        //Check both x and y declarations
        if (overflowX === overflowY &&
            (overflowY === 'hidden' || overflowY === 'visible')) {
          return false;
        }
    
        if (overflowX === 'scroll' || overflowY === 'scroll') {
          return true;
        }
    
        return ($el.innerHeight() < el.scrollHeight ||
          $el.innerWidth() < el.scrollWidth);
      };
    
      Utils.escapeMarkup = function (markup) {
        var replaceMap = {
          '\\': '&#92;',
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          '\'': '&#39;',
          '/': '&#47;'
        };
    
        // Do not try to escape the markup if it's not a string
        if (typeof markup !== 'string') {
          return markup;
        }
    
        return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
          return replaceMap[match];
        });
      };
    
      // Append an array of jQuery nodes to a given element.
      Utils.appendMany = function ($element, $nodes) {
        // jQuery 1.7.x does not support $.fn.append() with an array
        // Fall back to a jQuery object collection using $.fn.add()
        if ($.fn.jquery.substr(0, 3) === '1.7') {
          var $jqNodes = $();
    
          $.map($nodes, function (node) {
            $jqNodes = $jqNodes.add(node);
          });
    
          $nodes = $jqNodes;
        }
    
        $element.append($nodes);
      };
    
      // Determine whether the browser is on a touchscreen device.
      Utils.isTouchscreen = function() {
        if ('undefined' === typeof Utils._isTouchscreenCache) {
          Utils._isTouchscreenCache = 'ontouchstart' in document.documentElement;
        }
        return Utils._isTouchscreenCache;
      };
    
      return Utils;
    });
    
    S2.define('select2/results',[
      'jquery',
      './utils'
    ], function ($, Utils) {
      function Results ($element, options, dataAdapter) {
        this.$element = $element;
        this.data = dataAdapter;
        this.options = options;
    
        Results.__super__.constructor.call(this);
      }
    
      Utils.Extend(Results, Utils.Observable);
    
      Results.prototype.render = function () {
        var label = this.options.get('label');
        var ariaLabelAttr = '';
    
        // If a label is passed via options,
        // set aria label on the results UL as
        // role="listbox" must have an accessible name
        if (label) {
          ariaLabelAttr = 'aria-label="' + label + '"';
        }
    
        var $results = $(
          '<ul ' +
          'class="select2-results__options" ' +
          'role="listbox" ' +
          'tabindex="-1" ' +
          ariaLabelAttr +
          '></ul>'
        );
    
        if (this.options.get('multiple')) {
          $results.attr('aria-multiselectable', 'true');
        }
    
        this.$results = $results;
    
        return $results;
      };
    
      Results.prototype.clear = function () {
        this.$results.empty();
      };
    
      Results.prototype.displayMessage = function (params) {
        var escapeMarkup = this.options.get('escapeMarkup');
    
        this.clear();
        this.hideLoading();
    
        var $message = $(
          '<li role="alert" aria-live="assertive"' +
          ' class="select2-results__option"></li>'
        );
    
        var message = this.options.get('translations').get(params.message);
    
        $message.append(
          escapeMarkup(
            message(params.args)
          )
        );
    
        $message[0].className += ' select2-results__message';
    
        this.$results.append($message);
      };
    
      Results.prototype.hideMessages = function () {
        this.$results.find('.select2-results__message').remove();
      };
    
      Results.prototype.append = function (data) {
        this.hideLoading();
    
        var $options = [];
    
        if (data.results == null || data.results.length === 0) {
          if (this.$results.children().length === 0) {
            this.trigger('results:message', {
              message: 'noResults'
            });
          }
    
          return;
        }
    
        data.results = this.sort(data.results);
    
        for (var d = 0; d < data.results.length; d++) {
          var item = data.results[d];
    
          var $option = this.option(item);
    
          $options.push($option);
        }
    
        this.$results.append($options);
      };
    
      Results.prototype.position = function ($results, $dropdown) {
        var $resultsContainer = $dropdown.find('.select2-results');
        $resultsContainer.append($results);
      };
    
      Results.prototype.sort = function (data) {
        var sorter = this.options.get('sorter');
    
        return sorter(data);
      };
    
      Results.prototype.highlightFirstItem = function () {
        var $options = this.$results
          .find('.select2-results__option[data-selected]');
    
        var $selected = $options.filter('[data-selected=true]');
    
        // Check if there are any selected options
        if ($selected.length > 0) {
          // If there are selected options, highlight the first
          $selected.first().trigger('mouseenter');
        } else {
          // If there are no selected options, highlight the first option
          // in the dropdown
          $options.first().trigger('mouseenter');
        }
    
        this.ensureHighlightVisible();
      };
    
      Results.prototype.setClasses = function () {
        var self = this;
    
        this.data.current(function (selected) {
          var selectedIds = $.map(selected, function (s) {
            return s.id.toString();
          });
    
          var $options = self.$results
            .find('.select2-results__option[data-selected]');
    
          $options.each(function () {
            var $option = $(this);
    
            var item = $.data(this, 'data');
    
            // id needs to be converted to a string when comparing
            var id = '' + item.id;
    
            if ((item.element != null && item.element.selected) ||
                (item.element == null && $.inArray(id, selectedIds) > -1)) {
              $option.attr('data-selected', 'true');
            } else {
              $option.attr('data-selected', 'false');
            }
          });
    
        });
      };
    
      Results.prototype.showLoading = function (params) {
        this.hideLoading();
    
        var loadingMore = this.options.get('translations').get('searching');
    
        var loading = {
          disabled: true,
          loading: true,
          text: loadingMore(params)
        };
        var $loading = this.option(loading);
        $loading.className += ' loading-results';
    
        this.$results.prepend($loading);
      };
    
      Results.prototype.hideLoading = function () {
        this.$results.find('.loading-results').remove();
      };
    
      Results.prototype.option = function (data) {
        var option = document.createElement('li');
        option.className = 'select2-results__option';
    
        var attrs = {
          'role': 'option',
          'data-selected': 'false',
          'aria-selected': 'false',
          'tabindex': -1
        };
    
        if (data.disabled) {
          delete attrs['data-selected'];
          attrs['aria-disabled'] = 'true';
        }
    
        if (data.id == null) {
          delete attrs['data-selected'];
        }
    
        if (data._resultId != null) {
          option.id = data._resultId;
        }
    
        if (data.title) {
          option.title = data.title;
        }
    
        if (data.children) {
          attrs['aria-label'] = data.text;
          delete attrs['data-selected'];
        }
    
        for (var attr in attrs) {
          var val = attrs[attr];
    
          option.setAttribute(attr, val);
        }
    
        if (data.children) {
          var $option = $(option);
    
          var label = document.createElement('strong');
          label.className = 'select2-results__group';
    
          var $label = $(label);
          this.template(data, label);
          $label.attr('role', 'presentation');
    
          var $children = [];
    
          for (var c = 0; c < data.children.length; c++) {
            var child = data.children[c];
    
            var $child = this.option(child);
    
            $children.push($child);
          }
    
          var $childrenContainer = $('<ul></ul>', {
            'class': 'select2-results__options select2-results__options--nested',
            'role': 'listbox'
          });
          $childrenContainer.append($children);
          $option.attr('role', 'list');
    
          $option.append(label);
          $option.append($childrenContainer);
        } else {
          this.template(data, option);
        }
    
        $.data(option, 'data', data);
    
        return option;
      };
    
      Results.prototype.bind = function (container, $container) {
        var self = this;
    
        var id = container.id + '-results';
    
        this.$results.attr('id', id);
    
        container.on('results:all', function (params) {
          self.clear();
          self.append(params.data);
    
          if (container.isOpen()) {
            self.setClasses();
            self.highlightFirstItem();
          }
        });
    
        container.on('results:append', function (params) {
          self.append(params.data);
    
          if (container.isOpen()) {
            self.setClasses();
          }
        });
    
        container.on('query', function (params) {
          self.hideMessages();
          self.showLoading(params);
        });
    
        container.on('select', function () {
          if (!container.isOpen()) {
            return;
          }
    
          self.setClasses();
          self.highlightFirstItem();
        });
    
        container.on('unselect', function () {
          if (!container.isOpen()) {
            return;
          }
    
          self.setClasses();
          self.highlightFirstItem();
        });
    
        container.on('open', function () {
          // When the dropdown is open, aria-expended="true"
          self.$results.attr('aria-expanded', 'true');
          self.$results.attr('aria-hidden', 'false');
    
          self.setClasses();
          self.ensureHighlightVisible();
        });
    
        container.on('close', function () {
          // When the dropdown is closed, aria-expended="false"
          self.$results.attr('aria-expanded', 'false');
          self.$results.attr('aria-hidden', 'true');
          self.$results.removeAttr('aria-activedescendant');
        });
    
        container.on('results:toggle', function () {
          var $highlighted = self.getHighlightedResults();
    
          if ($highlighted.length === 0) {
            return;
          }
    
          $highlighted.trigger('mouseup');
        });
    
        container.on('results:select', function () {
          var $highlighted = self.getHighlightedResults();
    
          if ($highlighted.length === 0) {
            return;
          }
    
          var data = $highlighted.data('data');
    
          if ($highlighted.attr('data-selected') == 'true') {
            self.trigger('close', {});
          } else {
            self.trigger('select', {
              data: data
            });
          }
        });
    
        container.on('results:previous', function () {
          var $highlighted = self.getHighlightedResults();
    
          var $options = self.$results.find('[data-selected]');
    
          var currentIndex = $options.index($highlighted);
    
          // If we are already at te top, don't move further
          if (currentIndex === 0) {
            return;
          }
    
          var nextIndex = currentIndex - 1;
    
          // If none are highlighted, highlight the first
          if ($highlighted.length === 0) {
            nextIndex = 0;
          }
    
          var $next = $options.eq(nextIndex);
    
          $next.trigger('mouseenter');
    
          var currentOffset = self.$results.offset().top;
          var nextTop = $next.offset().top;
          var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);
    
          if (nextIndex === 0) {
            self.$results.scrollTop(0);
          } else if (nextTop - currentOffset < 0) {
            self.$results.scrollTop(nextOffset);
          }
        });
    
        container.on('results:next', function () {
          var $highlighted = self.getHighlightedResults();
    
          var $options = self.$results.find('[data-selected]');
    
          var currentIndex = $options.index($highlighted);
    
          var nextIndex = currentIndex + 1;
    
          // If we are at the last option, stay there
          if (nextIndex >= $options.length) {
            return;
          }
    
          var $next = $options.eq(nextIndex);
    
          $next.trigger('mouseenter');
    
          var currentOffset = self.$results.offset().top +
            self.$results.outerHeight(false);
          var nextBottom = $next.offset().top + $next.outerHeight(false);
          var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;
    
          if (nextIndex === 0) {
            self.$results.scrollTop(0);
          } else if (nextBottom > currentOffset) {
            self.$results.scrollTop(nextOffset);
          }
        });
    
        container.on('results:focus', function (params) {
          params.element.addClass('select2-results__option--highlighted')
            .attr('aria-selected', 'true');
          self.$results.attr('aria-activedescendant', params.element.attr('id'));
        });
    
        container.on('results:message', function (params) {
          self.displayMessage(params);
        });
    
        if ($.fn.mousewheel) {
          this.$results.on('mousewheel', function (e) {
            var top = self.$results.scrollTop();
    
            var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;
    
            var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
            var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();
    
            if (isAtTop) {
              self.$results.scrollTop(0);
    
              e.preventDefault();
              e.stopPropagation();
            } else if (isAtBottom) {
              self.$results.scrollTop(
                self.$results.get(0).scrollHeight - self.$results.height()
              );
    
              e.preventDefault();
              e.stopPropagation();
            }
          });
        }
    
        this.$results.on('mouseup', '.select2-results__option[data-selected]',
          function (evt) {
          var $this = $(this);
    
          var data = $this.data('data');
    
          if ($this.attr('data-selected') === 'true') {
            if (self.options.get('multiple')) {
              self.trigger('unselect', {
                originalEvent: evt,
                data: data
              });
            } else {
              self.trigger('close', {});
            }
    
            return;
          }
    
          self.trigger('select', {
            originalEvent: evt,
            data: data
          });
        });
    
        this.$results.on('mouseenter', '.select2-results__option[data-selected]',
          function (evt) {
          var data = $(this).data('data');
    
          self.getHighlightedResults()
              .removeClass('select2-results__option--highlighted')
              .attr('aria-selected', 'false');
    
          self.trigger('results:focus', {
            data: data,
            element: $(this)
          });
        });
      };
    
      Results.prototype.getHighlightedResults = function () {
        var $highlighted = this.$results
        .find('.select2-results__option--highlighted');
    
        return $highlighted;
      };
    
      Results.prototype.destroy = function () {
        this.$results.remove();
      };
    
      Results.prototype.ensureHighlightVisible = function () {
        var $highlighted = this.getHighlightedResults();
    
        if ($highlighted.length === 0) {
          return;
        }
    
        var $options = this.$results.find('[data-selected]');
    
        var currentIndex = $options.index($highlighted);
    
        var currentOffset = this.$results.offset().top;
        var nextTop = $highlighted.offset().top;
        var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);
    
        var offsetDelta = nextTop - currentOffset;
        nextOffset -= $highlighted.outerHeight(false) * 2;
    
        if (currentIndex <= 2) {
          this.$results.scrollTop(0);
        } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
          this.$results.scrollTop(nextOffset);
        }
      };
    
      Results.prototype.template = function (result, container) {
        var template = this.options.get('templateResult');
        var escapeMarkup = this.options.get('escapeMarkup');
    
        var content = template(result, container);
    
        if (content == null) {
          container.style.display = 'none';
        } else if (typeof content === 'string') {
          container.innerHTML = escapeMarkup(content);
        } else {
          $(container).append(content);
        }
      };
    
      return Results;
    });
    
    S2.define('select2/keys',[
    
    ], function () {
      var KEYS = {
        BACKSPACE: 8,
        TAB: 9,
        ENTER: 13,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        ESC: 27,
        SPACE: 32,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        END: 35,
        HOME: 36,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        DELETE: 46
      };
    
      return KEYS;
    });
    
    S2.define('select2/selection/base',[
      'jquery',
      '../utils',
      '../keys'
    ], function ($, Utils, KEYS) {
      function BaseSelection ($element, options) {
        this.$element = $element;
        this.options = options;
    
        BaseSelection.__super__.constructor.call(this);
      }
    
      Utils.Extend(BaseSelection, Utils.Observable);
    
      BaseSelection.prototype.render = function () {
        var $selection = $(
          '<span class="select2-selection"></span>'
        );
    
        this._tabindex = 0;
    
        if (this.$element.data('old-tabindex') != null) {
          this._tabindex = this.$element.data('old-tabindex');
        } else if (this.$element.attr('tabindex') != null) {
          this._tabindex = this.$element.attr('tabindex');
        }
    
        $selection.attr('title', this.$element.attr('title'));
        $selection.attr('tabindex', this._tabindex);
    
        this.$selection = $selection;
    
        return $selection;
      };
    
      BaseSelection.prototype.bind = function (container, $container) {
        var self = this;
    
        var id = container.id + '-container';
        var resultsId = container.id + '-results';
        var searchHidden = this.options.get('minimumResultsForSearch') === Infinity;
    
        this.container = container;
    
        this.$selection.on('focus', function (evt) {
          self.trigger('focus', evt);
        });
    
        this.$selection.on('blur', function (evt) {
          self._handleBlur(evt);
        });
    
        this.$selection.on('keydown', function (evt) {
          self.trigger('keypress', evt);
    
          if (evt.which === KEYS.SPACE) {
            evt.preventDefault();
          }
        });
    
        container.on('selection:update', function (params) {
          self.update(params.data);
        });
    
        container.on('open', function () {
          self._attachCloseHandler(container);
        });
    
        container.on('close', function () {
          // This needs to be delayed as the active element is the body when the
          // key is pressed.
          window.setTimeout(function () {
            self.$selection.trigger('focus');
          }, 1);
    
          self._detachCloseHandler(container);
        });
    
        container.on('enable', function () {
          self.$selection.attr('tabindex', self._tabindex);
        });
    
        container.on('disable', function () {
          self.$selection.attr('tabindex', '-1');
        });
      };
    
      BaseSelection.prototype._handleBlur = function (evt) {
        var self = this;
    
        // This needs to be delayed as the active element is the body when the tab
        // key is pressed, possibly along with others.
        window.setTimeout(function () {
          // Don't trigger `blur` if the focus is still in the selection
          if (
            (document.activeElement == self.$selection[0]) ||
            ($.contains(self.$selection[0], document.activeElement))
          ) {
            return;
          }
    
          self.trigger('blur', evt);
        }, 1);
      };
    
      BaseSelection.prototype._attachCloseHandler = function (container) {
        var self = this;
    
        $(document.body).on('mousedown.select2.' + container.id, function (e) {
          var $target = $(e.target);
    
          var $select = $target.closest('.select2');
    
          var $all = $('.select2.select2-container--open');
    
          $all.each(function () {
            var $this = $(this);
    
            if (this == $select[0]) {
              return;
            }
    
            var $element = $this.data('element');
            $element.select2('close');
    
            // Remove any focus when dropdown is closed by
            // clicking outside the select area. Timeout of
            // 1 required for close to finish wrapping up.
            setTimeout(function(){
             $this.find('*:focus').trigger('blur');
             $target.trigger('focus');
            }, 1);
          });
        });
      };
    
      BaseSelection.prototype._detachCloseHandler = function (container) {
        $(document.body).off('mousedown.select2.' + container.id);
      };
    
      BaseSelection.prototype.position = function ($selection, $container) {
        var $selectionContainer = $container.find('.selection');
        $selectionContainer.append($selection);
      };
    
      BaseSelection.prototype.destroy = function () {
        this._detachCloseHandler(this.container);
      };
    
      BaseSelection.prototype.update = function (data) {
        throw new Error('The `update` method must be defined in child classes.');
      };
    
      return BaseSelection;
    });
    
    S2.define('select2/selection/single',[
      'jquery',
      './base',
      '../utils',
      '../keys'
    ], function ($, BaseSelection, Utils, KEYS) {
      function SingleSelection () {
        SingleSelection.__super__.constructor.apply(this, arguments);
      }
    
      Utils.Extend(SingleSelection, BaseSelection);
    
      SingleSelection.prototype.render = function () {
        var $selection = SingleSelection.__super__.render.call(this);
    
        $selection.addClass('select2-selection--single');
    
        $selection.html(
          '<span class="select2-selection__rendered"></span>' +
          '<span class="select2-selection__arrow" role="presentation">' +
            '<b role="presentation"></b>' +
          '</span>'
        );
    
        return $selection;
      };
    
      SingleSelection.prototype.bind = function (container, $container) {
        var self = this;
    
        SingleSelection.__super__.bind.apply(this, arguments);
    
        var id = container.id + '-container';
        var label = this.options.get('label');
        var placeholder = this.options.get('placeholder');
    
        this.$selection.find('.select2-selection__rendered')
          .attr('id', id)
          .attr('role', 'textbox')
          .attr('aria-readonly', 'true');
    
        if (placeholder) {
          // role="textbox" requires a text label
          // not needed when placeholder absent as first option is selected
          this.$selection.find('.select2-selection__rendered')
            .attr('aria-label', placeholder);
    
          if (label) {
            // role=combobox requires a label
            // we're adding the label and placeholder here
            // so they both get announced
            this.$selection.attr('aria-label', label + ', ' + placeholder);
          }
        }
    
        // If element is disabled,
        // add aria-disabled to rendered element for screen readers
        if (this.container.$element.attr('disabled')) {
          this.$selection.find('.select2-selection__rendered')
            .attr('aria-disabled', 'true');
        }
    
        this.$selection.attr('role', 'combobox');
        this.$selection.attr('aria-controls', id);
        this.$selection.attr('aria-owns', id);
        this.$selection.attr('aria-expanded', 'false');
    
        this.$selection.on('mousedown', function (evt) {
          // Only respond to left clicks
          if (evt.which !== 1) {
            return;
          }
    
          self.trigger('toggle', {
            originalEvent: evt
          });
        });
    
        this.$selection.on('focus', function (evt) {
          // User focuses on the container
        });
    
        this.$selection.on('keydown', function (evt) {
          // If user starts typing an alphanumeric key on the keyboard,
          // open if not opened.
          if (!container.isOpen() && evt.which >= 48 && evt.which <= 90) {
            container.open();
          }
        });
    
        this.$selection.on('blur', function (evt) {
          // User exits the container
        });
    
        container.on('open', function () {
          // When the dropdown is open, aria-expanded="true"
          self.$selection.attr('aria-expanded', 'true');
        });
    
        container.on('close', function () {
          // When the dropdown is open, aria-expanded="false"
          self.$selection.attr('aria-expanded', 'false');
    
          self.$selection.removeAttr('aria-activedescendant');
        });
    
        container.on('focus', function (evt) {
          if (!container.isOpen()) {
            self.$selection.trigger('focus');
          }
        });
    
        container.on('results:focus', function (params) {
          self.$selection.attr('aria-activedescendant', params.data._resultId);
        });
    
        container.on('selection:update', function (params) {
          self.update(params.data);
        });
      };
    
      SingleSelection.prototype.clear = function () {
        this.$selection.find('.select2-selection__rendered').empty();
      };
    
      SingleSelection.prototype.display = function (data, container) {
        var template = this.options.get('templateSelection');
        var escapeMarkup = this.options.get('escapeMarkup');
    
        return escapeMarkup(template(data, container));
      };
    
      SingleSelection.prototype.selectionContainer = function () {
        return $('<span></span>');
      };
    
      SingleSelection.prototype.update = function (data) {
        if (data.length === 0) {
          this.clear();
          return;
        }
    
        var selection = data[0];
    
        var $rendered = this.$selection.find('.select2-selection__rendered');
        var formatted = this.display(selection, $rendered);
    
        $rendered.empty().append(formatted);
    
        // Update aria-label with selected option (role="textbox" requires a label)
        $rendered.attr('aria-label', selection.title || selection.text);
    
        var label = this.options.get('label');
        var selectedValueText = selection.title || selection.text;
        var placeholder = this.options.get('placeholder');
    
        // selection has role="combobox" and therefore requires a label
        // but adding just the label results in only the label being read
        // and not the selection/placeholder (in JAWS & NVDA)
        // so we add the label and the selection/placeholder
        if (label) {
          this.$selection.attr('aria-label', label + ', ' + selectedValueText);
        } else {
          this.$selection.attr('aria-label', selectedValueText);
        }
      };
    
      return SingleSelection;
    });
    
    S2.define('select2/selection/multiple',[
      'jquery',
      './base',
      '../utils'
    ], function ($, BaseSelection, Utils) {
      function MultipleSelection ($element, options) {
        MultipleSelection.__super__.constructor.apply(this, arguments);
      }
    
      Utils.Extend(MultipleSelection, BaseSelection);
    
      MultipleSelection.prototype.render = function () {
        var $selection = MultipleSelection.__super__.render.call(this);
    
        $selection.addClass('select2-selection--multiple');
        $selection.html(
          '<ul class="select2-selection__rendered" ' +
          'aria-live="polite" ' +
          'aria-relevant="additions removals" ' +
          'aria-atomic="true"></ul>'
        );
    
        return $selection;
      };
    
      MultipleSelection.prototype.bind = function (container, $container) {
        var self = this;
    
        MultipleSelection.__super__.bind.apply(this, arguments);
    
        this.$selection.on('click', function (evt) {
          self.trigger('toggle', {
            originalEvent: evt
          });
        });
    
        this.$selection.on(
          'click',
          '.select2-selection__choice__remove',
          function (evt) {
            // Ignore the event if it is disabled
            if (self.options.get('disabled')) {
              return;
            }
    
            var $remove = $(this);
            var $selection = $remove.parent();
    
            var data = $selection.data('data');
    
            self.trigger('unselect', {
              originalEvent: evt,
              data: data
            });
          }
        );
    
        this.$selection.on('keydown', function (evt) {
          // If user starts typing an alphanumeric key on the keyboard,
          // open if not opened.
          if (!container.isOpen() && evt.which >= 48 && evt.which <= 90) {
            container.open();
          }
        });
    
        // Focus on the search field when the container
        // is focused instead of the main container.
        container.on( 'focus', function(){
          self.focusOnSearch();
        });
      };
    
      MultipleSelection.prototype.clear = function () {
        this.$selection.find('.select2-selection__rendered').empty();
      };
    
      MultipleSelection.prototype.display = function (data, container) {
        var template = this.options.get('templateSelection');
        var escapeMarkup = this.options.get('escapeMarkup');
    
        return escapeMarkup(template(data, container));
      };
    
      MultipleSelection.prototype.selectionContainer = function () {
        var $container = $(
          '<li class="select2-selection__choice">' +
            '<span class="select2-selection__choice__remove" ' +
            'role="presentation" ' +
            'aria-hidden="true">' +
              '&times;' +
            '</span>' +
          '</li>'
        );
    
        return $container;
      };
    
      /**
       * Focus on the search field instead of the main multiselect container.
       */
      MultipleSelection.prototype.focusOnSearch = function() {
        var self = this;
    
        if ('undefined' !== typeof self.$search) {
          // Needs 1 ms delay because of other 1 ms setTimeouts when rendering.
          setTimeout(function(){
            // Prevent the dropdown opening again when focused from this.
            // This gets reset automatically when focus is triggered.
            self._keyUpPrevented = true;
    
            self.$search.trigger('focus');
          }, 1);
        }
      };
    
      MultipleSelection.prototype.update = function (data) {
        this.clear();
    
        if (data.length === 0) {
          return;
        }
    
        var $selections = [];
    
        for (var d = 0; d < data.length; d++) {
          var selection = data[d];
    
          var $selection = this.selectionContainer();
          var formatted = this.display(selection, $selection);
          if ('string' === typeof formatted) {
            formatted = formatted.trim();
          }
    
          $selection.append(formatted);
          $selection.prop('title', selection.title || selection.text);
    
          $selection.data('data', selection);
    
          $selections.push($selection);
        }
    
        var $rendered = this.$selection.find('.select2-selection__rendered');
    
        Utils.appendMany($rendered, $selections);
      };
    
      return MultipleSelection;
    });
    
    S2.define('select2/selection/placeholder',[
      '../utils'
    ], function (Utils) {
      function Placeholder (decorated, $element, options) {
        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));
    
        decorated.call(this, $element, options);
      }
    
      Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
        if (typeof placeholder === 'string') {
          placeholder = {
            id: '',
            text: placeholder
          };
        }
    
        return placeholder;
      };
    
      Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
        var $placeholder = this.selectionContainer();
    
        $placeholder.html(this.display(placeholder));
        $placeholder.addClass('select2-selection__placeholder')
                    .removeClass('select2-selection__choice');
    
        return $placeholder;
      };
    
      Placeholder.prototype.update = function (decorated, data) {
        var singlePlaceholder = (
          data.length == 1 && data[0].id != this.placeholder.id
        );
        var multipleSelections = data.length > 1;
    
        if (multipleSelections || singlePlaceholder) {
          return decorated.call(this, data);
        }
    
        this.clear();
    
        var $placeholder = this.createPlaceholder(this.placeholder);
    
        this.$selection.find('.select2-selection__rendered').append($placeholder);
      };
    
      return Placeholder;
    });
    
    S2.define('select2/selection/allowClear',[
      'jquery',
      '../keys'
    ], function ($, KEYS) {
      function AllowClear () { }
    
      AllowClear.prototype.bind = function (decorated, container, $container) {
        var self = this;
    
        decorated.call(this, container, $container);
    
        if (this.placeholder == null) {
          if (this.options.get('debug') && window.console && console.error) {
            console.error(
              'Select2: The `allowClear` option should be used in combination ' +
              'with the `placeholder` option.'
            );
          }
        }
    
        this.$selection.on('mousedown', '.select2-selection__clear',
          function (evt) {
            self._handleClear(evt);
        });
    
        container.on('keypress', function (evt) {
          self._handleKeyboardClear(evt, container);
        });
      };
    
      AllowClear.prototype._handleClear = function (_, evt) {
        // Ignore the event if it is disabled
        if (this.options.get('disabled')) {
          return;
        }
    
        var $clear = this.$selection.find('.select2-selection__clear');
    
        // Ignore the event if nothing has been selected
        if ($clear.length === 0) {
          return;
        }
    
        evt.stopPropagation();
    
        var data = $clear.data('data');
    
        for (var d = 0; d < data.length; d++) {
          var unselectData = {
            data: data[d]
          };
    
          // Trigger the `unselect` event, so people can prevent it from being
          // cleared.
          this.trigger('unselect', unselectData);
    
          // If the event was prevented, don't clear it out.
          if (unselectData.prevented) {
            return;
          }
        }
    
        this.$element.val(this.placeholder.id).trigger('change');
    
        this.trigger('toggle', {});
      };
    
      AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
        if (container.isOpen()) {
          return;
        }
    
        if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
          this._handleClear(evt);
        }
      };
    
      AllowClear.prototype.update = function (decorated, data) {
        decorated.call(this, data);
    
        if (this.$selection.find('.select2-selection__placeholder').length > 0 ||
            data.length === 0) {
          return;
        }
    
        var $remove = $(
          '<span class="select2-selection__clear">' +
            '&times;' +
          '</span>'
        );
        $remove.data('data', data);
    
        this.$selection.find('.select2-selection__rendered').prepend($remove);
      };
    
      return AllowClear;
    });
    
    S2.define('select2/selection/search',[
      'jquery',
      '../utils',
      '../keys'
    ], function ($, Utils, KEYS) {
      function Search (decorated, $element, options) {
        decorated.call(this, $element, options);
      }
    
      Search.prototype.render = function (decorated) {
        var label = this.options.get('label');
        var ariaLabelAttr = '';
    
        // If a label is passed via options,
        // set aria label on the search input as
        // inputs must have an accessible name
        if (label) {
          ariaLabelAttr = 'aria-label ="' + label + '"';
        }
    
        var $search = $(
          '<li class="select2-search select2-search--inline">' +
            '<input class="select2-search__field" type="text" tabindex="-1"' +
            ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
            ' spellcheck="false" role="combobox" aria-autocomplete="list"' +
            ' aria-expanded="false"' +
            ariaLabelAttr +' />' +
          '</li>'
        );
    
        this.$searchContainer = $search;
        this.$search = $search.find('input');
    
        var $rendered = decorated.call(this);
    
        this._transferTabIndex();
    
        return $rendered;
      };
    
      Search.prototype.bind = function (decorated, container, $container) {
        var self = this;
        var resultsId = container.id + '-results';
    
        decorated.call(this, container, $container);
    
        container.on('open', function () {
          self.$search.trigger('focus');
          self.$search
            .attr('aria-controls', resultsId)
            .attr('aria-expanded', 'true');
        });
    
        container.on('close', function () {
          self.$search
            .val('')
            .removeAttr('aria-controls aria-activedescendant')
            .trigger('focus')
            .attr('aria-expanded', 'false');
        });
    
        container.on('enable', function () {
          self.$search.prop('disabled', false);
    
          self._transferTabIndex();
        });
    
        container.on('disable', function () {
          self.$search.prop('disabled', true);
        });
    
        container.on('focus', function (evt) {
          self.$search.trigger('focus');
        });
    
        container.on('results:focus', function (params) {
          self.$search.attr('aria-activedescendant', params.data._resultId);
        });
    
        this.$selection.on('focusin', '.select2-search--inline', function (evt) {
          self.trigger('focus', evt);
        });
    
        this.$selection.on('focusout', '.select2-search--inline', function (evt) {
          self._handleBlur(evt);
        });
    
        this.$selection.on('keydown', '.select2-search--inline', function (evt) {
          evt.stopPropagation();
    
          self.trigger('keypress', evt);
    
          self._keyUpPrevented = evt.isDefaultPrevented();
    
          var key = evt.which;
    
          if (key === KEYS.BACKSPACE && self.$search.val() === '') {
            var $previousChoice = self.$searchContainer
              .prev('.select2-selection__choice');
    
            if ($previousChoice.length > 0) {
              var item = $previousChoice.data('data');
    
              self.searchRemoveChoice(item);
    
              evt.preventDefault();
            }
          } else if (evt.which === KEYS.ENTER) {
            container.open();
            evt.preventDefault();
          }
        });
    
        // Try to detect the IE version should the `documentMode` property that
        // is stored on the document. This is only implemented in IE and is
        // slightly cleaner than doing a user agent check.
        // This property is not available in Edge, but Edge also doesn't have
        // this bug.
        var msie = document.documentMode;
        var disableInputEvents = msie && msie <= 11;
    
        // Workaround for browsers which do not support the `input` event
        // This will prevent double-triggering of events for browsers which support
        // both the `keyup` and `input` events.
        this.$selection.on(
          'input.searchcheck',
          '.select2-search--inline',
          function (evt) {
            // IE will trigger the `input` event when a placeholder is used on a
            // search box. To get around this issue, we are forced to ignore all
            // `input` events in IE and keep using `keyup`.
            if (disableInputEvents) {
              self.$selection.off('input.search input.searchcheck');
              return;
            }
    
            // Unbind the duplicated `keyup` event
            self.$selection.off('keyup.search');
          }
        );
    
        this.$selection.on(
          'keyup.search input.search',
          '.select2-search--inline',
          function (evt) {
            // IE will trigger the `input` event when a placeholder is used on a
            // search box. To get around this issue, we are forced to ignore all
            // `input` events in IE and keep using `keyup`.
            if (disableInputEvents && evt.type === 'input') {
              self.$selection.off('input.search input.searchcheck');
              return;
            }
    
            var key = evt.which;
    
            // We can freely ignore events from modifier keys
            if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
              return;
            }
    
            // Tabbing will be handled during the `keydown` phase
            if (key == KEYS.TAB) {
              return;
            }
    
            self.handleSearch(evt);
          }
        );
      };
    
      /**
       * This method will transfer the tabindex attribute from the rendered
       * selection to the search box. This allows for the search box to be used as
       * the primary focus instead of the selection container.
       *
       * @private
       */
      Search.prototype._transferTabIndex = function (decorated) {
        this.$search.attr('tabindex', this.$selection.attr('tabindex'));
        this.$selection.attr('tabindex', '-1');
      };
    
      Search.prototype.createPlaceholder = function (decorated, placeholder) {
        this.$search.attr('placeholder', placeholder.text);
      };
    
      Search.prototype.update = function (decorated, data) {
        var searchHadFocus = this.$search[0] == document.activeElement;
    
        this.$search.attr('placeholder', '');
    
        decorated.call(this, data);
    
        this.$selection.find('.select2-selection__rendered')
                       .append(this.$searchContainer);
    
        this.resizeSearch();
        if (searchHadFocus) {
          this.$search.trigger('focus');
        }
      };
    
      Search.prototype.handleSearch = function () {
        this.resizeSearch();
    
        if (!this._keyUpPrevented) {
          var input = this.$search.val();
    
          this.trigger('query', {
            term: input
          });
        }
    
        this._keyUpPrevented = false;
      };
    
      Search.prototype.searchRemoveChoice = function (decorated, item) {
        this.trigger('unselect', {
          data: item
        });
    
        this.$search.val(item.text);
        this.handleSearch();
      };
    
      Search.prototype.resizeSearch = function () {
        this.$search.css('width', '25px');
    
        var width = '';
    
        if (this.$search.attr('placeholder') !== '') {
          width = this.$selection.find('.select2-selection__rendered').innerWidth();
        } else {
          var minimumWidth = this.$search.val().length + 1;
    
          width = (minimumWidth * 0.75) + 'em';
        }
    
        this.$search.css('width', width);
      };
    
      return Search;
    });
    
    S2.define('select2/selection/eventRelay',[
      'jquery'
    ], function ($) {
      function EventRelay () { }
    
      EventRelay.prototype.bind = function (decorated, container, $container) {
        var self = this;
        var relayEvents = [
          'open', 'opening',
          'close', 'closing',
          'select', 'selecting',
          'unselect', 'unselecting'
        ];
    
        var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting'];
    
        decorated.call(this, container, $container);
    
        container.on('*', function (name, params) {
          // Ignore events that should not be relayed
          if ($.inArray(name, relayEvents) === -1) {
            return;
          }
    
          // The parameters should always be an object
          params = params || {};
    
          // Generate the jQuery event for the Select2 event
          var evt = $.Event('select2:' + name, {
            params: params
          });
    
          self.$element.trigger(evt);
    
          // Only handle preventable events if it was one
          if ($.inArray(name, preventableEvents) === -1) {
            return;
          }
    
          params.prevented = evt.isDefaultPrevented();
        });
      };
    
      return EventRelay;
    });
    
    S2.define('select2/a11y/a11ySingle',[
      'jquery',
      '../utils'
    ], function ($, Utils) {
      function A11ySingle (decorated, $element, options) {
        decorated.call(this, $element, options);
      }
    
      A11ySingle.prototype.bind = function (decorated, data) {
    
        // If orginal select had aria-describedby, add to select2-selection
        if (this.$element.attr('aria-describedby') !== undefined) {
          this.$selection
            .attr('aria-describedby', this.$element.attr('aria-describedby'));
        }
    
        return decorated.call(this, data);
      };
    
      return A11ySingle;
    });
    
    S2.define('select2/a11y/a11yMulti',[
      'jquery',
      '../utils'
    ], function ($, Utils) {
      function A11yMulti (decorated, $element, options) {
        decorated.call(this, $element, options);
      }
    
      A11yMulti.prototype.bind = function (decorated, container, $container) {
    
        // Add a container for accessible selection summary
        var selectionSummaryId = container.id + '-summary';
        this.$selectionSummary = $(
          '<span id="'+ selectionSummaryId +'" class="select2-selections"></span>'
        );
        $container.append(this.$selectionSummary);
    
        // If orginal select had aria-describedby, add to select2 search
        if (this.$element.attr('aria-describedby') !== undefined) {
          this.$search
            .attr('aria-describedby', this.$element.attr('aria-describedby'));
        }
    
        return decorated.call(this, container);
      };
    
      A11yMulti.prototype.update = function (decorated, data) {
    
        var oldAriaDescBy = this.$element.attr('aria-describedby');
        var newAriaDescBy;
    
        // Empty the summary of previously selected options
        this.$selectionSummary.empty();
    
        // Update accessible selection summary with selections
        for (var d = 0; d < data.length; d++) {
          var selection = data[d];
          var $selection = this.selectionContainer();
          var formatted = this.display(selection, $selection);
    
          // Update selection summary (used for aria-describedby on search input)
          if (typeof formatted === 'string') {
            this.$selectionSummary.append(formatted.trim() + ',');
          }
    
          if (formatted instanceof jQuery) { //jshint ignore:line
            this.$selectionSummary.append(formatted.text().trim() + ',');
          }
        }
    
        // Remove trailing comma if no element aria-describedby
        if (oldAriaDescBy === undefined) {
          this.$selectionSummary
            .text(this.$selectionSummary.text().replace(/,$/, ''));
        }
    
        // Update search field with selection summary aria-describedby
        if (oldAriaDescBy !== undefined) {
          newAriaDescBy = this.$selectionSummary.attr('id') + ' ' + oldAriaDescBy;
        } else {
          newAriaDescBy = this.$selectionSummary.attr('id');
        }
        this.$search.attr('aria-describedby', newAriaDescBy);
    
    
        return decorated.call(this, data);
      };
    
      return A11yMulti;
    });
    
    S2.define('select2/translation',[
      'jquery',
      'require'
    ], function ($, require) {
      function Translation (dict) {
        this.dict = dict || {};
      }
    
      Translation.prototype.all = function () {
        return this.dict;
      };
    
      Translation.prototype.get = function (key) {
        return this.dict[key];
      };
    
      Translation.prototype.extend = function (translation) {
        this.dict = $.extend({}, translation.all(), this.dict);
      };
    
      // Static functions
    
      Translation._cache = {};
    
      Translation.loadPath = function (path) {
        if (!(path in Translation._cache)) {
          var translations = require(path);
    
          Translation._cache[path] = translations;
        }
    
        return new Translation(Translation._cache[path]);
      };
    
      return Translation;
    });
    
    S2.define('select2/diacritics',[
    
    ], function () {
      var diacritics = {
        '\u24B6': 'A',
        '\uFF21': 'A',
        '\u00C0': 'A',
        '\u00C1': 'A',
        '\u00C2': 'A',
        '\u1EA6': 'A',
        '\u1EA4': 'A',
        '\u1EAA': 'A',
        '\u1EA8': 'A',
        '\u00C3': 'A',
        '\u0100': 'A',
        '\u0102': 'A',
        '\u1EB0': 'A',
        '\u1EAE': 'A',
        '\u1EB4': 'A',
        '\u1EB2': 'A',
        '\u0226': 'A',
        '\u01E0': 'A',
        '\u00C4': 'A',
        '\u01DE': 'A',
        '\u1EA2': 'A',
        '\u00C5': 'A',
        '\u01FA': 'A',
        '\u01CD': 'A',
        '\u0200': 'A',
        '\u0202': 'A',
        '\u1EA0': 'A',
        '\u1EAC': 'A',
        '\u1EB6': 'A',
        '\u1E00': 'A',
        '\u0104': 'A',
        '\u023A': 'A',
        '\u2C6F': 'A',
        '\uA732': 'AA',
        '\u00C6': 'AE',
        '\u01FC': 'AE',
        '\u01E2': 'AE',
        '\uA734': 'AO',
        '\uA736': 'AU',
        '\uA738': 'AV',
        '\uA73A': 'AV',
        '\uA73C': 'AY',
        '\u24B7': 'B',
        '\uFF22': 'B',
        '\u1E02': 'B',
        '\u1E04': 'B',
        '\u1E06': 'B',
        '\u0243': 'B',
        '\u0182': 'B',
        '\u0181': 'B',
        '\u24B8': 'C',
        '\uFF23': 'C',
        '\u0106': 'C',
        '\u0108': 'C',
        '\u010A': 'C',
        '\u010C': 'C',
        '\u00C7': 'C',
        '\u1E08': 'C',
        '\u0187': 'C',
        '\u023B': 'C',
        '\uA73E': 'C',
        '\u24B9': 'D',
        '\uFF24': 'D',
        '\u1E0A': 'D',
        '\u010E': 'D',
        '\u1E0C': 'D',
        '\u1E10': 'D',
        '\u1E12': 'D',
        '\u1E0E': 'D',
        '\u0110': 'D',
        '\u018B': 'D',
        '\u018A': 'D',
        '\u0189': 'D',
        '\uA779': 'D',
        '\u01F1': 'DZ',
        '\u01C4': 'DZ',
        '\u01F2': 'Dz',
        '\u01C5': 'Dz',
        '\u24BA': 'E',
        '\uFF25': 'E',
        '\u00C8': 'E',
        '\u00C9': 'E',
        '\u00CA': 'E',
        '\u1EC0': 'E',
        '\u1EBE': 'E',
        '\u1EC4': 'E',
        '\u1EC2': 'E',
        '\u1EBC': 'E',
        '\u0112': 'E',
        '\u1E14': 'E',
        '\u1E16': 'E',
        '\u0114': 'E',
        '\u0116': 'E',
        '\u00CB': 'E',
        '\u1EBA': 'E',
        '\u011A': 'E',
        '\u0204': 'E',
        '\u0206': 'E',
        '\u1EB8': 'E',
        '\u1EC6': 'E',
        '\u0228': 'E',
        '\u1E1C': 'E',
        '\u0118': 'E',
        '\u1E18': 'E',
        '\u1E1A': 'E',
        '\u0190': 'E',
        '\u018E': 'E',
        '\u24BB': 'F',
        '\uFF26': 'F',
        '\u1E1E': 'F',
        '\u0191': 'F',
        '\uA77B': 'F',
        '\u24BC': 'G',
        '\uFF27': 'G',
        '\u01F4': 'G',
        '\u011C': 'G',
        '\u1E20': 'G',
        '\u011E': 'G',
        '\u0120': 'G',
        '\u01E6': 'G',
        '\u0122': 'G',
        '\u01E4': 'G',
        '\u0193': 'G',
        '\uA7A0': 'G',
        '\uA77D': 'G',
        '\uA77E': 'G',
        '\u24BD': 'H',
        '\uFF28': 'H',
        '\u0124': 'H',
        '\u1E22': 'H',
        '\u1E26': 'H',
        '\u021E': 'H',
        '\u1E24': 'H',
        '\u1E28': 'H',
        '\u1E2A': 'H',
        '\u0126': 'H',
        '\u2C67': 'H',
        '\u2C75': 'H',
        '\uA78D': 'H',
        '\u24BE': 'I',
        '\uFF29': 'I',
        '\u00CC': 'I',
        '\u00CD': 'I',
        '\u00CE': 'I',
        '\u0128': 'I',
        '\u012A': 'I',
        '\u012C': 'I',
        '\u0130': 'I',
        '\u00CF': 'I',
        '\u1E2E': 'I',
        '\u1EC8': 'I',
        '\u01CF': 'I',
        '\u0208': 'I',
        '\u020A': 'I',
        '\u1ECA': 'I',
        '\u012E': 'I',
        '\u1E2C': 'I',
        '\u0197': 'I',
        '\u24BF': 'J',
        '\uFF2A': 'J',
        '\u0134': 'J',
        '\u0248': 'J',
        '\u24C0': 'K',
        '\uFF2B': 'K',
        '\u1E30': 'K',
        '\u01E8': 'K',
        '\u1E32': 'K',
        '\u0136': 'K',
        '\u1E34': 'K',
        '\u0198': 'K',
        '\u2C69': 'K',
        '\uA740': 'K',
        '\uA742': 'K',
        '\uA744': 'K',
        '\uA7A2': 'K',
        '\u24C1': 'L',
        '\uFF2C': 'L',
        '\u013F': 'L',
        '\u0139': 'L',
        '\u013D': 'L',
        '\u1E36': 'L',
        '\u1E38': 'L',
        '\u013B': 'L',
        '\u1E3C': 'L',
        '\u1E3A': 'L',
        '\u0141': 'L',
        '\u023D': 'L',
        '\u2C62': 'L',
        '\u2C60': 'L',
        '\uA748': 'L',
        '\uA746': 'L',
        '\uA780': 'L',
        '\u01C7': 'LJ',
        '\u01C8': 'Lj',
        '\u24C2': 'M',
        '\uFF2D': 'M',
        '\u1E3E': 'M',
        '\u1E40': 'M',
        '\u1E42': 'M',
        '\u2C6E': 'M',
        '\u019C': 'M',
        '\u24C3': 'N',
        '\uFF2E': 'N',
        '\u01F8': 'N',
        '\u0143': 'N',
        '\u00D1': 'N',
        '\u1E44': 'N',
        '\u0147': 'N',
        '\u1E46': 'N',
        '\u0145': 'N',
        '\u1E4A': 'N',
        '\u1E48': 'N',
        '\u0220': 'N',
        '\u019D': 'N',
        '\uA790': 'N',
        '\uA7A4': 'N',
        '\u01CA': 'NJ',
        '\u01CB': 'Nj',
        '\u24C4': 'O',
        '\uFF2F': 'O',
        '\u00D2': 'O',
        '\u00D3': 'O',
        '\u00D4': 'O',
        '\u1ED2': 'O',
        '\u1ED0': 'O',
        '\u1ED6': 'O',
        '\u1ED4': 'O',
        '\u00D5': 'O',
        '\u1E4C': 'O',
        '\u022C': 'O',
        '\u1E4E': 'O',
        '\u014C': 'O',
        '\u1E50': 'O',
        '\u1E52': 'O',
        '\u014E': 'O',
        '\u022E': 'O',
        '\u0230': 'O',
        '\u00D6': 'O',
        '\u022A': 'O',
        '\u1ECE': 'O',
        '\u0150': 'O',
        '\u01D1': 'O',
        '\u020C': 'O',
        '\u020E': 'O',
        '\u01A0': 'O',
        '\u1EDC': 'O',
        '\u1EDA': 'O',
        '\u1EE0': 'O',
        '\u1EDE': 'O',
        '\u1EE2': 'O',
        '\u1ECC': 'O',
        '\u1ED8': 'O',
        '\u01EA': 'O',
        '\u01EC': 'O',
        '\u00D8': 'O',
        '\u01FE': 'O',
        '\u0186': 'O',
        '\u019F': 'O',
        '\uA74A': 'O',
        '\uA74C': 'O',
        '\u01A2': 'OI',
        '\uA74E': 'OO',
        '\u0222': 'OU',
        '\u24C5': 'P',
        '\uFF30': 'P',
        '\u1E54': 'P',
        '\u1E56': 'P',
        '\u01A4': 'P',
        '\u2C63': 'P',
        '\uA750': 'P',
        '\uA752': 'P',
        '\uA754': 'P',
        '\u24C6': 'Q',
        '\uFF31': 'Q',
        '\uA756': 'Q',
        '\uA758': 'Q',
        '\u024A': 'Q',
        '\u24C7': 'R',
        '\uFF32': 'R',
        '\u0154': 'R',
        '\u1E58': 'R',
        '\u0158': 'R',
        '\u0210': 'R',
        '\u0212': 'R',
        '\u1E5A': 'R',
        '\u1E5C': 'R',
        '\u0156': 'R',
        '\u1E5E': 'R',
        '\u024C': 'R',
        '\u2C64': 'R',
        '\uA75A': 'R',
        '\uA7A6': 'R',
        '\uA782': 'R',
        '\u24C8': 'S',
        '\uFF33': 'S',
        '\u1E9E': 'S',
        '\u015A': 'S',
        '\u1E64': 'S',
        '\u015C': 'S',
        '\u1E60': 'S',
        '\u0160': 'S',
        '\u1E66': 'S',
        '\u1E62': 'S',
        '\u1E68': 'S',
        '\u0218': 'S',
        '\u015E': 'S',
        '\u2C7E': 'S',
        '\uA7A8': 'S',
        '\uA784': 'S',
        '\u24C9': 'T',
        '\uFF34': 'T',
        '\u1E6A': 'T',
        '\u0164': 'T',
        '\u1E6C': 'T',
        '\u021A': 'T',
        '\u0162': 'T',
        '\u1E70': 'T',
        '\u1E6E': 'T',
        '\u0166': 'T',
        '\u01AC': 'T',
        '\u01AE': 'T',
        '\u023E': 'T',
        '\uA786': 'T',
        '\uA728': 'TZ',
        '\u24CA': 'U',
        '\uFF35': 'U',
        '\u00D9': 'U',
        '\u00DA': 'U',
        '\u00DB': 'U',
        '\u0168': 'U',
        '\u1E78': 'U',
        '\u016A': 'U',
        '\u1E7A': 'U',
        '\u016C': 'U',
        '\u00DC': 'U',
        '\u01DB': 'U',
        '\u01D7': 'U',
        '\u01D5': 'U',
        '\u01D9': 'U',
        '\u1EE6': 'U',
        '\u016E': 'U',
        '\u0170': 'U',
        '\u01D3': 'U',
        '\u0214': 'U',
        '\u0216': 'U',
        '\u01AF': 'U',
        '\u1EEA': 'U',
        '\u1EE8': 'U',
        '\u1EEE': 'U',
        '\u1EEC': 'U',
        '\u1EF0': 'U',
        '\u1EE4': 'U',
        '\u1E72': 'U',
        '\u0172': 'U',
        '\u1E76': 'U',
        '\u1E74': 'U',
        '\u0244': 'U',
        '\u24CB': 'V',
        '\uFF36': 'V',
        '\u1E7C': 'V',
        '\u1E7E': 'V',
        '\u01B2': 'V',
        '\uA75E': 'V',
        '\u0245': 'V',
        '\uA760': 'VY',
        '\u24CC': 'W',
        '\uFF37': 'W',
        '\u1E80': 'W',
        '\u1E82': 'W',
        '\u0174': 'W',
        '\u1E86': 'W',
        '\u1E84': 'W',
        '\u1E88': 'W',
        '\u2C72': 'W',
        '\u24CD': 'X',
        '\uFF38': 'X',
        '\u1E8A': 'X',
        '\u1E8C': 'X',
        '\u24CE': 'Y',
        '\uFF39': 'Y',
        '\u1EF2': 'Y',
        '\u00DD': 'Y',
        '\u0176': 'Y',
        '\u1EF8': 'Y',
        '\u0232': 'Y',
        '\u1E8E': 'Y',
        '\u0178': 'Y',
        '\u1EF6': 'Y',
        '\u1EF4': 'Y',
        '\u01B3': 'Y',
        '\u024E': 'Y',
        '\u1EFE': 'Y',
        '\u24CF': 'Z',
        '\uFF3A': 'Z',
        '\u0179': 'Z',
        '\u1E90': 'Z',
        '\u017B': 'Z',
        '\u017D': 'Z',
        '\u1E92': 'Z',
        '\u1E94': 'Z',
        '\u01B5': 'Z',
        '\u0224': 'Z',
        '\u2C7F': 'Z',
        '\u2C6B': 'Z',
        '\uA762': 'Z',
        '\u24D0': 'a',
        '\uFF41': 'a',
        '\u1E9A': 'a',
        '\u00E0': 'a',
        '\u00E1': 'a',
        '\u00E2': 'a',
        '\u1EA7': 'a',
        '\u1EA5': 'a',
        '\u1EAB': 'a',
        '\u1EA9': 'a',
        '\u00E3': 'a',
        '\u0101': 'a',
        '\u0103': 'a',
        '\u1EB1': 'a',
        '\u1EAF': 'a',
        '\u1EB5': 'a',
        '\u1EB3': 'a',
        '\u0227': 'a',
        '\u01E1': 'a',
        '\u00E4': 'a',
        '\u01DF': 'a',
        '\u1EA3': 'a',
        '\u00E5': 'a',
        '\u01FB': 'a',
        '\u01CE': 'a',
        '\u0201': 'a',
        '\u0203': 'a',
        '\u1EA1': 'a',
        '\u1EAD': 'a',
        '\u1EB7': 'a',
        '\u1E01': 'a',
        '\u0105': 'a',
        '\u2C65': 'a',
        '\u0250': 'a',
        '\uA733': 'aa',
        '\u00E6': 'ae',
        '\u01FD': 'ae',
        '\u01E3': 'ae',
        '\uA735': 'ao',
        '\uA737': 'au',
        '\uA739': 'av',
        '\uA73B': 'av',
        '\uA73D': 'ay',
        '\u24D1': 'b',
        '\uFF42': 'b',
        '\u1E03': 'b',
        '\u1E05': 'b',
        '\u1E07': 'b',
        '\u0180': 'b',
        '\u0183': 'b',
        '\u0253': 'b',
        '\u24D2': 'c',
        '\uFF43': 'c',
        '\u0107': 'c',
        '\u0109': 'c',
        '\u010B': 'c',
        '\u010D': 'c',
        '\u00E7': 'c',
        '\u1E09': 'c',
        '\u0188': 'c',
        '\u023C': 'c',
        '\uA73F': 'c',
        '\u2184': 'c',
        '\u24D3': 'd',
        '\uFF44': 'd',
        '\u1E0B': 'd',
        '\u010F': 'd',
        '\u1E0D': 'd',
        '\u1E11': 'd',
        '\u1E13': 'd',
        '\u1E0F': 'd',
        '\u0111': 'd',
        '\u018C': 'd',
        '\u0256': 'd',
        '\u0257': 'd',
        '\uA77A': 'd',
        '\u01F3': 'dz',
        '\u01C6': 'dz',
        '\u24D4': 'e',
        '\uFF45': 'e',
        '\u00E8': 'e',
        '\u00E9': 'e',
        '\u00EA': 'e',
        '\u1EC1': 'e',
        '\u1EBF': 'e',
        '\u1EC5': 'e',
        '\u1EC3': 'e',
        '\u1EBD': 'e',
        '\u0113': 'e',
        '\u1E15': 'e',
        '\u1E17': 'e',
        '\u0115': 'e',
        '\u0117': 'e',
        '\u00EB': 'e',
        '\u1EBB': 'e',
        '\u011B': 'e',
        '\u0205': 'e',
        '\u0207': 'e',
        '\u1EB9': 'e',
        '\u1EC7': 'e',
        '\u0229': 'e',
        '\u1E1D': 'e',
        '\u0119': 'e',
        '\u1E19': 'e',
        '\u1E1B': 'e',
        '\u0247': 'e',
        '\u025B': 'e',
        '\u01DD': 'e',
        '\u24D5': 'f',
        '\uFF46': 'f',
        '\u1E1F': 'f',
        '\u0192': 'f',
        '\uA77C': 'f',
        '\u24D6': 'g',
        '\uFF47': 'g',
        '\u01F5': 'g',
        '\u011D': 'g',
        '\u1E21': 'g',
        '\u011F': 'g',
        '\u0121': 'g',
        '\u01E7': 'g',
        '\u0123': 'g',
        '\u01E5': 'g',
        '\u0260': 'g',
        '\uA7A1': 'g',
        '\u1D79': 'g',
        '\uA77F': 'g',
        '\u24D7': 'h',
        '\uFF48': 'h',
        '\u0125': 'h',
        '\u1E23': 'h',
        '\u1E27': 'h',
        '\u021F': 'h',
        '\u1E25': 'h',
        '\u1E29': 'h',
        '\u1E2B': 'h',
        '\u1E96': 'h',
        '\u0127': 'h',
        '\u2C68': 'h',
        '\u2C76': 'h',
        '\u0265': 'h',
        '\u0195': 'hv',
        '\u24D8': 'i',
        '\uFF49': 'i',
        '\u00EC': 'i',
        '\u00ED': 'i',
        '\u00EE': 'i',
        '\u0129': 'i',
        '\u012B': 'i',
        '\u012D': 'i',
        '\u00EF': 'i',
        '\u1E2F': 'i',
        '\u1EC9': 'i',
        '\u01D0': 'i',
        '\u0209': 'i',
        '\u020B': 'i',
        '\u1ECB': 'i',
        '\u012F': 'i',
        '\u1E2D': 'i',
        '\u0268': 'i',
        '\u0131': 'i',
        '\u24D9': 'j',
        '\uFF4A': 'j',
        '\u0135': 'j',
        '\u01F0': 'j',
        '\u0249': 'j',
        '\u24DA': 'k',
        '\uFF4B': 'k',
        '\u1E31': 'k',
        '\u01E9': 'k',
        '\u1E33': 'k',
        '\u0137': 'k',
        '\u1E35': 'k',
        '\u0199': 'k',
        '\u2C6A': 'k',
        '\uA741': 'k',
        '\uA743': 'k',
        '\uA745': 'k',
        '\uA7A3': 'k',
        '\u24DB': 'l',
        '\uFF4C': 'l',
        '\u0140': 'l',
        '\u013A': 'l',
        '\u013E': 'l',
        '\u1E37': 'l',
        '\u1E39': 'l',
        '\u013C': 'l',
        '\u1E3D': 'l',
        '\u1E3B': 'l',
        '\u017F': 'l',
        '\u0142': 'l',
        '\u019A': 'l',
        '\u026B': 'l',
        '\u2C61': 'l',
        '\uA749': 'l',
        '\uA781': 'l',
        '\uA747': 'l',
        '\u01C9': 'lj',
        '\u24DC': 'm',
        '\uFF4D': 'm',
        '\u1E3F': 'm',
        '\u1E41': 'm',
        '\u1E43': 'm',
        '\u0271': 'm',
        '\u026F': 'm',
        '\u24DD': 'n',
        '\uFF4E': 'n',
        '\u01F9': 'n',
        '\u0144': 'n',
        '\u00F1': 'n',
        '\u1E45': 'n',
        '\u0148': 'n',
        '\u1E47': 'n',
        '\u0146': 'n',
        '\u1E4B': 'n',
        '\u1E49': 'n',
        '\u019E': 'n',
        '\u0272': 'n',
        '\u0149': 'n',
        '\uA791': 'n',
        '\uA7A5': 'n',
        '\u01CC': 'nj',
        '\u24DE': 'o',
        '\uFF4F': 'o',
        '\u00F2': 'o',
        '\u00F3': 'o',
        '\u00F4': 'o',
        '\u1ED3': 'o',
        '\u1ED1': 'o',
        '\u1ED7': 'o',
        '\u1ED5': 'o',
        '\u00F5': 'o',
        '\u1E4D': 'o',
        '\u022D': 'o',
        '\u1E4F': 'o',
        '\u014D': 'o',
        '\u1E51': 'o',
        '\u1E53': 'o',
        '\u014F': 'o',
        '\u022F': 'o',
        '\u0231': 'o',
        '\u00F6': 'o',
        '\u022B': 'o',
        '\u1ECF': 'o',
        '\u0151': 'o',
        '\u01D2': 'o',
        '\u020D': 'o',
        '\u020F': 'o',
        '\u01A1': 'o',
        '\u1EDD': 'o',
        '\u1EDB': 'o',
        '\u1EE1': 'o',
        '\u1EDF': 'o',
        '\u1EE3': 'o',
        '\u1ECD': 'o',
        '\u1ED9': 'o',
        '\u01EB': 'o',
        '\u01ED': 'o',
        '\u00F8': 'o',
        '\u01FF': 'o',
        '\u0254': 'o',
        '\uA74B': 'o',
        '\uA74D': 'o',
        '\u0275': 'o',
        '\u01A3': 'oi',
        '\u0223': 'ou',
        '\uA74F': 'oo',
        '\u24DF': 'p',
        '\uFF50': 'p',
        '\u1E55': 'p',
        '\u1E57': 'p',
        '\u01A5': 'p',
        '\u1D7D': 'p',
        '\uA751': 'p',
        '\uA753': 'p',
        '\uA755': 'p',
        '\u24E0': 'q',
        '\uFF51': 'q',
        '\u024B': 'q',
        '\uA757': 'q',
        '\uA759': 'q',
        '\u24E1': 'r',
        '\uFF52': 'r',
        '\u0155': 'r',
        '\u1E59': 'r',
        '\u0159': 'r',
        '\u0211': 'r',
        '\u0213': 'r',
        '\u1E5B': 'r',
        '\u1E5D': 'r',
        '\u0157': 'r',
        '\u1E5F': 'r',
        '\u024D': 'r',
        '\u027D': 'r',
        '\uA75B': 'r',
        '\uA7A7': 'r',
        '\uA783': 'r',
        '\u24E2': 's',
        '\uFF53': 's',
        '\u00DF': 's',
        '\u015B': 's',
        '\u1E65': 's',
        '\u015D': 's',
        '\u1E61': 's',
        '\u0161': 's',
        '\u1E67': 's',
        '\u1E63': 's',
        '\u1E69': 's',
        '\u0219': 's',
        '\u015F': 's',
        '\u023F': 's',
        '\uA7A9': 's',
        '\uA785': 's',
        '\u1E9B': 's',
        '\u24E3': 't',
        '\uFF54': 't',
        '\u1E6B': 't',
        '\u1E97': 't',
        '\u0165': 't',
        '\u1E6D': 't',
        '\u021B': 't',
        '\u0163': 't',
        '\u1E71': 't',
        '\u1E6F': 't',
        '\u0167': 't',
        '\u01AD': 't',
        '\u0288': 't',
        '\u2C66': 't',
        '\uA787': 't',
        '\uA729': 'tz',
        '\u24E4': 'u',
        '\uFF55': 'u',
        '\u00F9': 'u',
        '\u00FA': 'u',
        '\u00FB': 'u',
        '\u0169': 'u',
        '\u1E79': 'u',
        '\u016B': 'u',
        '\u1E7B': 'u',
        '\u016D': 'u',
        '\u00FC': 'u',
        '\u01DC': 'u',
        '\u01D8': 'u',
        '\u01D6': 'u',
        '\u01DA': 'u',
        '\u1EE7': 'u',
        '\u016F': 'u',
        '\u0171': 'u',
        '\u01D4': 'u',
        '\u0215': 'u',
        '\u0217': 'u',
        '\u01B0': 'u',
        '\u1EEB': 'u',
        '\u1EE9': 'u',
        '\u1EEF': 'u',
        '\u1EED': 'u',
        '\u1EF1': 'u',
        '\u1EE5': 'u',
        '\u1E73': 'u',
        '\u0173': 'u',
        '\u1E77': 'u',
        '\u1E75': 'u',
        '\u0289': 'u',
        '\u24E5': 'v',
        '\uFF56': 'v',
        '\u1E7D': 'v',
        '\u1E7F': 'v',
        '\u028B': 'v',
        '\uA75F': 'v',
        '\u028C': 'v',
        '\uA761': 'vy',
        '\u24E6': 'w',
        '\uFF57': 'w',
        '\u1E81': 'w',
        '\u1E83': 'w',
        '\u0175': 'w',
        '\u1E87': 'w',
        '\u1E85': 'w',
        '\u1E98': 'w',
        '\u1E89': 'w',
        '\u2C73': 'w',
        '\u24E7': 'x',
        '\uFF58': 'x',
        '\u1E8B': 'x',
        '\u1E8D': 'x',
        '\u24E8': 'y',
        '\uFF59': 'y',
        '\u1EF3': 'y',
        '\u00FD': 'y',
        '\u0177': 'y',
        '\u1EF9': 'y',
        '\u0233': 'y',
        '\u1E8F': 'y',
        '\u00FF': 'y',
        '\u1EF7': 'y',
        '\u1E99': 'y',
        '\u1EF5': 'y',
        '\u01B4': 'y',
        '\u024F': 'y',
        '\u1EFF': 'y',
        '\u24E9': 'z',
        '\uFF5A': 'z',
        '\u017A': 'z',
        '\u1E91': 'z',
        '\u017C': 'z',
        '\u017E': 'z',
        '\u1E93': 'z',
        '\u1E95': 'z',
        '\u01B6': 'z',
        '\u0225': 'z',
        '\u0240': 'z',
        '\u2C6C': 'z',
        '\uA763': 'z',
        '\u0386': '\u0391',
        '\u0388': '\u0395',
        '\u0389': '\u0397',
        '\u038A': '\u0399',
        '\u03AA': '\u0399',
        '\u038C': '\u039F',
        '\u038E': '\u03A5',
        '\u03AB': '\u03A5',
        '\u038F': '\u03A9',
        '\u03AC': '\u03B1',
        '\u03AD': '\u03B5',
        '\u03AE': '\u03B7',
        '\u03AF': '\u03B9',
        '\u03CA': '\u03B9',
        '\u0390': '\u03B9',
        '\u03CC': '\u03BF',
        '\u03CD': '\u03C5',
        '\u03CB': '\u03C5',
        '\u03B0': '\u03C5',
        '\u03C9': '\u03C9',
        '\u03C2': '\u03C3'
      };
    
      return diacritics;
    });
    
    S2.define('select2/data/base',[
      '../utils'
    ], function (Utils) {
      function BaseAdapter ($element, options) {
        BaseAdapter.__super__.constructor.call(this);
      }
    
      Utils.Extend(BaseAdapter, Utils.Observable);
    
      BaseAdapter.prototype.current = function (callback) {
        throw new Error('The `current` method must be defined in child classes.');
      };
    
      BaseAdapter.prototype.query = function (params, callback) {
        throw new Error('The `query` method must be defined in child classes.');
      };
    
      BaseAdapter.prototype.bind = function (container, $container) {
        // Can be implemented in subclasses
      };
    
      BaseAdapter.prototype.destroy = function () {
        // Can be implemented in subclasses
      };
    
      BaseAdapter.prototype.generateResultId = function (container, data) {
        var id = '';
    
        if (container != null) {
          id += container.id;
        } else {
          id += Utils.generateChars(4);
        }
    
        id += '-result-';
        id += Utils.generateChars(4);
    
        if (data.id != null) {
          id += '-' + data.id.toString();
        } else {
          id += '-' + Utils.generateChars(4);
        }
        return id;
      };
    
      return BaseAdapter;
    });
    
    S2.define('select2/data/select',[
      './base',
      '../utils',
      'jquery'
    ], function (BaseAdapter, Utils, $) {
      function SelectAdapter ($element, options) {
        this.$element = $element;
        this.options = options;
    
        SelectAdapter.__super__.constructor.call(this);
      }
    
      Utils.Extend(SelectAdapter, BaseAdapter);
    
      SelectAdapter.prototype.current = function (callback) {
        var data = [];
        var self = this;
    
        this.$element.find(':selected').each(function () {
          var $option = $(this);
    
          var option = self.item($option);
    
          data.push(option);
        });
    
        callback(data);
      };
    
      SelectAdapter.prototype.select = function (data) {
        var self = this;
    
        data.selected = true;
    
        // If data.element is a DOM node, use it instead
        if ($(data.element).is('option')) {
          data.element.selected = true;
    
          this.$element.trigger('change');
    
          return;
        }
    
        if (this.$element.prop('multiple')) {
          this.current(function (currentData) {
            var val = [];
    
            data = [data];
            data.push.apply(data, currentData);
    
            for (var d = 0; d < data.length; d++) {
              var id = data[d].id;
    
              if ($.inArray(id, val) === -1) {
                val.push(id);
              }
            }
    
            self.$element.val(val);
            self.$element.trigger('change');
          });
        } else {
          var val = data.id;
    
          this.$element.val(val);
          this.$element.trigger('change');
        }
      };
    
      SelectAdapter.prototype.unselect = function (data) {
        var self = this;
    
        if (!this.$element.prop('multiple')) {
          return;
        }
    
        data.selected = false;
    
        if ($(data.element).is('option')) {
          data.element.selected = false;
    
          this.$element.trigger('change');
    
          return;
        }
    
        this.current(function (currentData) {
          var val = [];
    
          for (var d = 0; d < currentData.length; d++) {
            var id = currentData[d].id;
    
            if (id !== data.id && $.inArray(id, val) === -1) {
              val.push(id);
            }
          }
    
          self.$element.val(val);
    
          self.$element.trigger('change');
        });
      };
    
      SelectAdapter.prototype.bind = function (container, $container) {
        var self = this;
    
        this.container = container;
    
        container.on('select', function (params) {
          self.select(params.data);
        });
    
        container.on('unselect', function (params) {
          self.unselect(params.data);
        });
      };
    
      SelectAdapter.prototype.destroy = function () {
        // Remove anything added to child elements
        this.$element.find('*').each(function () {
          // Remove any custom data set by Select2
          $.removeData(this, 'data');
        });
      };
    
      SelectAdapter.prototype.query = function (params, callback) {
        var data = [];
        var self = this;
    
        var $options = this.$element.children();
    
        $options.each(function () {
          var $option = $(this);
    
          if (!$option.is('option') && !$option.is('optgroup')) {
            return;
          }
    
          var option = self.item($option);
    
          var matches = self.matches(params, option);
    
          if (matches !== null) {
            data.push(matches);
          }
        });
    
        callback({
          results: data
        });
      };
    
      SelectAdapter.prototype.addOptions = function ($options) {
        Utils.appendMany(this.$element, $options);
      };
    
      SelectAdapter.prototype.option = function (data) {
        var option;
    
        if (data.children) {
          option = document.createElement('optgroup');
          option.label = data.text;
        } else {
          option = document.createElement('option');
    
          if (option.textContent !== undefined) {
            option.textContent = data.text;
          } else {
            option.innerText = data.text;
          }
        }
    
        if (data.id !== undefined) {
          option.value = data.id;
        }
    
        if (data.disabled) {
          option.disabled = true;
        }
    
        if (data.selected) {
          option.selected = true;
        }
    
        if (data.title) {
          option.title = data.title;
        }
    
        var $option = $(option);
    
        var normalizedData = this._normalizeItem(data);
        normalizedData.element = option;
    
        // Override the option's data with the combined data
        $.data(option, 'data', normalizedData);
    
        return $option;
      };
    
      SelectAdapter.prototype.item = function ($option) {
        var data = {};
    
        data = $.data($option[0], 'data');
    
        if (data != null) {
          return data;
        }
    
        if ($option.is('option')) {
          data = {
            id: $option.val(),
            text: $option.text(),
            disabled: $option.prop('disabled'),
            selected: $option.prop('selected'),
            title: $option.prop('title')
          };
        } else if ($option.is('optgroup')) {
          data = {
            text: $option.prop('label'),
            children: [],
            title: $option.prop('title')
          };
    
          var $children = $option.children('option');
          var children = [];
    
          for (var c = 0; c < $children.length; c++) {
            var $child = $($children[c]);
    
            var child = this.item($child);
    
            children.push(child);
          }
    
          data.children = children;
        }
    
        data = this._normalizeItem(data);
        data.element = $option[0];
    
        $.data($option[0], 'data', data);
    
        return data;
      };
    
      SelectAdapter.prototype._normalizeItem = function (item) {
        if (!$.isPlainObject(item)) {
          item = {
            id: item,
            text: item
          };
        }
    
        item = $.extend({}, {
          text: ''
        }, item);
    
        var defaults = {
          selected: false,
          disabled: false
        };
    
        if (item.id != null) {
          item.id = item.id.toString();
        }
    
        if (item.text != null) {
          item.text = item.text.toString();
        }
    
        if (item._resultId == null && item.id) {
          item._resultId = this.generateResultId(this.container, item);
        }
    
        return $.extend({}, defaults, item);
      };
    
      SelectAdapter.prototype.matches = function (params, data) {
        var matcher = this.options.get('matcher');
    
        return matcher(params, data);
      };
    
      return SelectAdapter;
    });
    
    S2.define('select2/data/array',[
      './select',
      '../utils',
      'jquery'
    ], function (SelectAdapter, Utils, $) {
      function ArrayAdapter ($element, options) {
        var data = options.get('data') || [];
    
        ArrayAdapter.__super__.constructor.call(this, $element, options);
    
        this.addOptions(this.convertToOptions(data));
      }
    
      Utils.Extend(ArrayAdapter, SelectAdapter);
    
      ArrayAdapter.prototype.select = function (data) {
        var $option = this.$element.find('option').filter(function (i, elm) {
          return elm.value == data.id.toString();
        });
    
        if ($option.length === 0) {
          $option = this.option(data);
    
          this.addOptions($option);
        }
    
        ArrayAdapter.__super__.select.call(this, data);
      };
    
      ArrayAdapter.prototype.convertToOptions = function (data) {
        var self = this;
    
        var $existing = this.$element.find('option');
        var existingIds = $existing.map(function () {
          return self.item($(this)).id;
        }).get();
    
        var $options = [];
    
        // Filter out all items except for the one passed in the argument
        function onlyItem (item) {
          return function () {
            return $(this).val() == item.id;
          };
        }
    
        for (var d = 0; d < data.length; d++) {
          var item = this._normalizeItem(data[d]);
    
          // Skip items which were pre-loaded, only merge the data
          if ($.inArray(item.id, existingIds) >= 0) {
            var $existingOption = $existing.filter(onlyItem(item));
    
            var existingData = this.item($existingOption);
            var newData = $.extend(true, {}, item, existingData);
    
            var $newOption = this.option(newData);
    
            $existingOption.replaceWith($newOption);
    
            continue;
          }
    
          var $option = this.option(item);
    
          if (item.children) {
            var $children = this.convertToOptions(item.children);
    
            Utils.appendMany($option, $children);
          }
    
          $options.push($option);
        }
    
        return $options;
      };
    
      return ArrayAdapter;
    });
    
    S2.define('select2/data/ajax',[
      './array',
      '../utils',
      'jquery'
    ], function (ArrayAdapter, Utils, $) {
      function AjaxAdapter ($element, options) {
        this.ajaxOptions = this._applyDefaults(options.get('ajax'));
    
        if (this.ajaxOptions.processResults != null) {
          this.processResults = this.ajaxOptions.processResults;
        }
    
        AjaxAdapter.__super__.constructor.call(this, $element, options);
      }
    
      Utils.Extend(AjaxAdapter, ArrayAdapter);
    
      AjaxAdapter.prototype._applyDefaults = function (options) {
        var defaults = {
          data: function (params) {
            return $.extend({}, params, {
              q: params.term
            });
          },
          transport: function (params, success, failure) {
            var $request = $.ajax(params);
    
            $request.then(success);
            $request.fail(failure);
    
            return $request;
          }
        };
    
        return $.extend({}, defaults, options, true);
      };
    
      AjaxAdapter.prototype.processResults = function (results) {
        return results;
      };
    
      AjaxAdapter.prototype.query = function (params, callback) {
        var matches = [];
        var self = this;
    
        if (this._request != null) {
          // JSONP requests cannot always be aborted
          if ($.isFunction(this._request.abort)) {
            this._request.abort();
          }
    
          this._request = null;
        }
    
        var options = $.extend({
          type: 'GET'
        }, this.ajaxOptions);
    
        if (typeof options.url === 'function') {
          options.url = options.url.call(this.$element, params);
        }
    
        if (typeof options.data === 'function') {
          options.data = options.data.call(this.$element, params);
        }
    
        function request () {
          var $request = options.transport(options, function (data) {
            var results = self.processResults(data, params);
    
            if (self.options.get('debug') && window.console && console.error) {
              // Check to make sure that the response included a `results` key.
              if (!results || !results.results || !$.isArray(results.results)) {
                console.error(
                  'Select2: The AJAX results did not return an array in the ' +
                  '`results` key of the response.'
                );
              }
            }
    
            callback(results);
            self.container.focusOnActiveElement();
          }, function () {
            // Attempt to detect if a request was aborted
            // Only works if the transport exposes a status property
            if ('status' in $request && $request.status === 0) {
              return;
            }
    
            self.trigger('results:message', {
              message: 'errorLoading'
            });
          });
    
          self._request = $request;
        }
    
        if (this.ajaxOptions.delay && params.term != null) {
          if (this._queryTimeout) {
            window.clearTimeout(this._queryTimeout);
          }
    
          this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
        } else {
          request();
        }
      };
    
      return AjaxAdapter;
    });
    
    S2.define('select2/data/tags',[
      'jquery'
    ], function ($) {
      function Tags (decorated, $element, options) {
        var tags = options.get('tags');
    
        var createTag = options.get('createTag');
    
        if (createTag !== undefined) {
          this.createTag = createTag;
        }
    
        var insertTag = options.get('insertTag');
    
        if (insertTag !== undefined) {
            this.insertTag = insertTag;
        }
    
        decorated.call(this, $element, options);
    
        if ($.isArray(tags)) {
          for (var t = 0; t < tags.length; t++) {
            var tag = tags[t];
            var item = this._normalizeItem(tag);
    
            var $option = this.option(item);
    
            this.$element.append($option);
          }
        }
      }
    
      Tags.prototype.query = function (decorated, params, callback) {
        var self = this;
    
        this._removeOldTags();
    
        if (params.term == null || params.page != null) {
          decorated.call(this, params, callback);
          return;
        }
    
        function wrapper (obj, child) {
          var data = obj.results;
    
          for (var i = 0; i < data.length; i++) {
            var option = data[i];
    
            var checkChildren = (
              option.children != null &&
              !wrapper({
                results: option.children
              }, true)
            );
    
            var optionText = (option.text || '').toUpperCase();
            var paramsTerm = (params.term || '').toUpperCase();
    
            var checkText = optionText === paramsTerm;
    
            if (checkText || checkChildren) {
              if (child) {
                return false;
              }
    
              obj.data = data;
              callback(obj);
    
              return;
            }
          }
    
          if (child) {
            return true;
          }
    
          var tag = self.createTag(params);
    
          if (tag != null) {
            var $option = self.option(tag);
            $option.attr('data-select2-tag', true);
    
            self.addOptions([$option]);
    
            self.insertTag(data, tag);
          }
    
          obj.results = data;
    
          callback(obj);
        }
    
        decorated.call(this, params, wrapper);
      };
    
      Tags.prototype.createTag = function (decorated, params) {
        var term = $.trim(params.term);
    
        if (term === '') {
          return null;
        }
    
        return {
          id: term,
          text: term
        };
      };
    
      Tags.prototype.insertTag = function (_, data, tag) {
        data.unshift(tag);
      };
    
      Tags.prototype._removeOldTags = function (_) {
        var tag = this._lastTag;
    
        var $options = this.$element.find('option[data-select2-tag]');
    
        $options.each(function () {
          if (this.selected) {
            return;
          }
    
          $(this).remove();
        });
      };
    
      return Tags;
    });
    
    S2.define('select2/data/tokenizer',[
      'jquery'
    ], function ($) {
      function Tokenizer (decorated, $element, options) {
        var tokenizer = options.get('tokenizer');
    
        if (tokenizer !== undefined) {
          this.tokenizer = tokenizer;
        }
    
        decorated.call(this, $element, options);
      }
    
      Tokenizer.prototype.bind = function (decorated, container, $container) {
        decorated.call(this, container, $container);
    
        this.$search =  container.dropdown.$search || container.selection.$search ||
          $container.find('.select2-search__field');
      };
    
      Tokenizer.prototype.query = function (decorated, params, callback) {
        var self = this;
    
        function createAndSelect (data) {
          // Normalize the data object so we can use it for checks
          var item = self._normalizeItem(data);
    
          // Check if the data object already exists as a tag
          // Select it if it doesn't
          var $existingOptions = self.$element.find('option').filter(function () {
            return $(this).val() === item.id;
          });
    
          // If an existing option wasn't found for it, create the option
          if (!$existingOptions.length) {
            var $option = self.option(item);
            $option.attr('data-select2-tag', true);
    
            self._removeOldTags();
            self.addOptions([$option]);
          }
    
          // Select the item, now that we know there is an option for it
          select(item);
        }
    
        function select (data) {
          self.trigger('select', {
            data: data
          });
        }
    
        params.term = params.term || '';
    
        var tokenData = this.tokenizer(params, this.options, createAndSelect);
    
        if (tokenData.term !== params.term) {
          // Replace the search term if we have the search box
          if (this.$search.length) {
            this.$search.val(tokenData.term);
            this.$search.trigger('focus');
          }
    
          params.term = tokenData.term;
        }
    
        decorated.call(this, params, callback);
      };
    
      Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
        var separators = options.get('tokenSeparators') || [];
        var term = params.term;
        var i = 0;
    
        var createTag = this.createTag || function (params) {
          return {
            id: params.term,
            text: params.term
          };
        };
    
        while (i < term.length) {
          var termChar = term[i];
    
          if ($.inArray(termChar, separators) === -1) {
            i++;
    
            continue;
          }
    
          var part = term.substr(0, i);
          var partParams = $.extend({}, params, {
            term: part
          });
    
          var data = createTag(partParams);
    
          if (data == null) {
            i++;
            continue;
          }
    
          callback(data);
    
          // Reset the term to not include the tokenized portion
          term = term.substr(i + 1) || '';
          i = 0;
        }
    
        return {
          term: term
        };
      };
    
      return Tokenizer;
    });
    
    S2.define('select2/data/minimumInputLength',[
    
    ], function () {
      function MinimumInputLength (decorated, $e, options) {
        this.minimumInputLength = options.get('minimumInputLength');
    
        decorated.call(this, $e, options);
      }
    
      MinimumInputLength.prototype.query = function (decorated, params, callback) {
        params.term = params.term || '';
    
        if (params.term.length < this.minimumInputLength) {
          this.trigger('results:message', {
            message: 'inputTooShort',
            args: {
              minimum: this.minimumInputLength,
              input: params.term,
              params: params
            }
          });
    
          return;
        }
    
        decorated.call(this, params, callback);
      };
    
      return MinimumInputLength;
    });
    
    S2.define('select2/data/maximumInputLength',[
    
    ], function () {
      function MaximumInputLength (decorated, $e, options) {
        this.maximumInputLength = options.get('maximumInputLength');
    
        decorated.call(this, $e, options);
      }
    
      MaximumInputLength.prototype.query = function (decorated, params, callback) {
        params.term = params.term || '';
    
        if (this.maximumInputLength > 0 &&
            params.term.length > this.maximumInputLength) {
          this.trigger('results:message', {
            message: 'inputTooLong',
            args: {
              maximum: this.maximumInputLength,
              input: params.term,
              params: params
            }
          });
    
          return;
        }
    
        decorated.call(this, params, callback);
      };
    
      return MaximumInputLength;
    });
    
    S2.define('select2/data/maximumSelectionLength',[
    
    ], function (){
      function MaximumSelectionLength (decorated, $e, options) {
        this.maximumSelectionLength = options.get('maximumSelectionLength');
    
        decorated.call(this, $e, options);
      }
    
      MaximumSelectionLength.prototype.query =
        function (decorated, params, callback) {
          var self = this;
    
          this.current(function (currentData) {
            var count = currentData != null ? currentData.length : 0;
            if (self.maximumSelectionLength > 0 &&
              count >= self.maximumSelectionLength) {
              self.trigger('results:message', {
                message: 'maximumSelected',
                args: {
                  maximum: self.maximumSelectionLength
                }
              });
              return;
            }
            decorated.call(self, params, callback);
          });
      };
    
      return MaximumSelectionLength;
    });
    
    S2.define('select2/dropdown',[
      'jquery',
      './utils'
    ], function ($, Utils) {
      function Dropdown ($element, options) {
        this.$element = $element;
        this.options = options;
    
        Dropdown.__super__.constructor.call(this);
      }
    
      Utils.Extend(Dropdown, Utils.Observable);
    
      Dropdown.prototype.render = function () {
        var $dropdown = $(
          '<span class="select2-dropdown">' +
            '<span class="select2-results"></span>' +
          '</span>'
        );
    
        $dropdown.attr('dir', this.options.get('dir'));
    
        this.$dropdown = $dropdown;
    
        return $dropdown;
      };
    
      Dropdown.prototype.bind = function () {
        // Should be implemented in subclasses
      };
    
      Dropdown.prototype.position = function ($dropdown, $container) {
        // Should be implmented in subclasses
      };
    
      Dropdown.prototype.destroy = function () {
        // Remove the dropdown from the DOM
        this.$dropdown.remove();
      };
    
      return Dropdown;
    });
    
    S2.define('select2/dropdown/search',[
      'jquery',
      '../utils'
    ], function ($, Utils) {
      function Search () { }
    
      Search.prototype.render = function (decorated) {
        var $rendered = decorated.call(this);
        var label = this.options.get('label');
        var ariaLabelAttr = '';
    
        // If a label is passed via options,
        // set aria label on the dropdown search
        // role="combobox" must have an accessible name
        if (label) {
          ariaLabelAttr = 'aria-label ="' + label + '"';
        }
    
        var $search = $(
          '<span class="select2-search select2-search--dropdown">' +
            '<input class="select2-search__field" type="text" tabindex="-1"' +
            ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
            ' spellcheck="false" role="combobox" aria-autocomplete="list" ' +
            'aria-expanded="true" ' + ariaLabelAttr + '/>' +
          '</span>'
        );
    
        this.$searchContainer = $search;
        this.$search = $search.find('input');
    
        $rendered.prepend($search);
    
        return $rendered;
      };
    
      Search.prototype.bind = function (decorated, container, $container) {
        var self = this;
        var resultsId = container.id + '-results';
    
        decorated.call(this, container, $container);
    
        this.$search.on('keydown', function (evt) {
          self.trigger('keypress', evt);
    
          self._keyUpPrevented = evt.isDefaultPrevented();
        });
    
        // Workaround for browsers which do not support the `input` event
        // This will prevent double-triggering of events for browsers which support
        // both the `keyup` and `input` events.
        this.$search.on('input', function (evt) {
          // Unbind the duplicated `keyup` event
          $(this).off('keyup');
        });
    
        this.$search.on('keyup input', function (evt) {
          self.handleSearch(evt);
        });
    
        container.on('open', function () {
          self.$search.attr('tabindex', 0);
          self.$search.attr('aria-controls', resultsId);
          self.$search.trigger('focus');
    
          window.setTimeout(function () {
            self.$search.trigger('focus');
          }, 0);
        });
    
        container.on('close', function () {
          self.$search.attr('tabindex', -1);
          self.$search.removeAttr('aria-controls');
          self.$search.removeAttr('aria-activedescendant');
          self.$search.val('');
        });
    
        container.on('focus', function () {
          if (container.isOpen()) {
            self.$search.trigger('focus');
          }
        });
    
        container.on('results:all', function (params) {
          if (params.query.term == null || params.query.term === '') {
            var showSearch = self.showSearch(params);
    
            if (showSearch) {
              self.$searchContainer.removeClass('select2-search--hide');
            } else {
              self.$searchContainer.addClass('select2-search--hide');
            }
          }
        });
    
        container.on('results:focus', function (params) {
          self.$search.attr('aria-activedescendant', params.data._resultId);
        });
      };
    
      Search.prototype.handleSearch = function (evt) {
        if (!this._keyUpPrevented) {
          var input = this.$search.val();
    
          this.trigger('query', {
            term: input
          });
        }
    
        this._keyUpPrevented = false;
      };
    
      Search.prototype.showSearch = function (_, params) {
        return true;
      };
    
      return Search;
    });
    
    S2.define('select2/dropdown/hidePlaceholder',[
    
    ], function () {
      function HidePlaceholder (decorated, $element, options, dataAdapter) {
        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));
    
        decorated.call(this, $element, options, dataAdapter);
      }
    
      HidePlaceholder.prototype.append = function (decorated, data) {
        data.results = this.removePlaceholder(data.results);
    
        decorated.call(this, data);
      };
    
      HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
        if (typeof placeholder === 'string') {
          placeholder = {
            id: '',
            text: placeholder
          };
        }
    
        return placeholder;
      };
    
      HidePlaceholder.prototype.removePlaceholder = function (_, data) {
        var modifiedData = data.slice(0);
    
        for (var d = data.length - 1; d >= 0; d--) {
          var item = data[d];
    
          if (this.placeholder.id === item.id) {
            modifiedData.splice(d, 1);
          }
        }
    
        return modifiedData;
      };
    
      return HidePlaceholder;
    });
    
    S2.define('select2/dropdown/infiniteScroll',[
      'jquery'
    ], function ($) {
      function InfiniteScroll (decorated, $element, options, dataAdapter) {
        this.lastParams = {};
    
        decorated.call(this, $element, options, dataAdapter);
    
        this.$loadingMore = this.createLoadingMore();
        this.loading = false;
      }
    
      InfiniteScroll.prototype.append = function (decorated, data) {
        this.$loadingMore.remove();
        this.loading = false;
    
        decorated.call(this, data);
    
        if (this.showLoadingMore(data)) {
          this.$results.append(this.$loadingMore);
        }
      };
    
      InfiniteScroll.prototype.bind = function (decorated, container, $container) {
        var self = this;
    
        decorated.call(this, container, $container);
    
        container.on('query', function (params) {
          self.lastParams = params;
          self.loading = true;
        });
    
        container.on('query:append', function (params) {
          self.lastParams = params;
          self.loading = true;
        });
    
        this.$results.on('scroll', function () {
          var isLoadMoreVisible = $.contains(
            document.documentElement,
            self.$loadingMore[0]
          );
    
          if (self.loading || !isLoadMoreVisible) {
            return;
          }
    
          var currentOffset = self.$results.offset().top +
            self.$results.outerHeight(false);
          var loadingMoreOffset = self.$loadingMore.offset().top +
            self.$loadingMore.outerHeight(false);
    
          if (currentOffset + 50 >= loadingMoreOffset) {
            self.loadMore();
          }
        });
      };
    
      InfiniteScroll.prototype.loadMore = function () {
        this.loading = true;
    
        var params = $.extend({}, {page: 1}, this.lastParams);
    
        params.page++;
    
        this.trigger('query:append', params);
      };
    
      InfiniteScroll.prototype.showLoadingMore = function (_, data) {
        return data.pagination && data.pagination.more;
      };
    
      InfiniteScroll.prototype.createLoadingMore = function () {
        var $option = $(
          '<li ' +
          'class="select2-results__option select2-results__option--load-more"' +
          'role="option" aria-disabled="true"></li>'
        );
    
        var message = this.options.get('translations').get('loadingMore');
    
        $option.html(message(this.lastParams));
    
        return $option;
      };
    
      return InfiniteScroll;
    });
    
    S2.define('select2/dropdown/attachBody',[
      'jquery',
      '../utils'
    ], function ($, Utils) {
      function AttachBody (decorated, $element, options) {
        this.$dropdownParent = options.get('dropdownParent') || $(document.body);
    
        decorated.call(this, $element, options);
      }
    
      AttachBody.prototype.bind = function (decorated, container, $container) {
        var self = this;
    
        var setupResultsEvents = false;
    
        decorated.call(this, container, $container);
    
        container.on('open', function () {
          self._showDropdown();
          self._attachPositioningHandler(container);
    
          if (!setupResultsEvents) {
            setupResultsEvents = true;
    
            container.on('results:all', function () {
              self._positionDropdown();
              self._resizeDropdown();
            });
    
            container.on('results:append', function () {
              self._positionDropdown();
              self._resizeDropdown();
            });
          }
        });
    
        container.on('close', function () {
          self._hideDropdown();
          self._detachPositioningHandler(container);
        });
    
        this.$dropdownContainer.on('mousedown', function (evt) {
          evt.stopPropagation();
        });
      };
    
      AttachBody.prototype.destroy = function (decorated) {
        decorated.call(this);
    
        this.$dropdownContainer.remove();
      };
    
      AttachBody.prototype.position = function (decorated, $dropdown, $container) {
        // Clone all of the container classes
        $dropdown.attr('class', $container.attr('class'));
    
        $dropdown.removeClass('select2');
        $dropdown.addClass('select2-container--open');
    
        $dropdown.css({
          position: 'absolute',
          top: -999999
        });
    
        this.$container = $container;
      };
    
      AttachBody.prototype.render = function (decorated) {
        var $container = $('<span></span>');
    
        var $dropdown = decorated.call(this);
        $container.append($dropdown);
    
        this.$dropdownContainer = $container;
    
        return $container;
      };
    
      AttachBody.prototype._hideDropdown = function (decorated) {
        this.$dropdownContainer.detach();
      };
    
      AttachBody.prototype._attachPositioningHandler =
          function (decorated, container) {
        var self = this;
    
        var scrollEvent = 'scroll.select2.' + container.id;
        var resizeEvent = 'resize.select2.' + container.id;
        var orientationEvent = 'orientationchange.select2.' + container.id;
    
        var $watchers = this.$container.parents().filter(Utils.hasScroll);
        $watchers.each(function () {
          $(this).data('select2-scroll-position', {
            x: $(this).scrollLeft(),
            y: $(this).scrollTop()
          });
        });
    
        $watchers.on(scrollEvent, function (ev) {
          var position = $(this).data('select2-scroll-position');
          $(this).scrollTop(position.y);
        });
    
        $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,
          function (e) {
          self._positionDropdown();
          self._resizeDropdown();
        });
      };
    
      AttachBody.prototype._detachPositioningHandler =
          function (decorated, container) {
        var scrollEvent = 'scroll.select2.' + container.id;
        var resizeEvent = 'resize.select2.' + container.id;
        var orientationEvent = 'orientationchange.select2.' + container.id;
    
        var $watchers = this.$container.parents().filter(Utils.hasScroll);
        $watchers.off(scrollEvent);
    
        $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
      };
    
      AttachBody.prototype._positionDropdown = function () {
        var $window = $(window);
    
        var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
        var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');
    
        var newDirection = null;
    
        var offset = this.$container.offset();
    
        offset.bottom = offset.top + this.$container.outerHeight(false);
    
        var container = {
          height: this.$container.outerHeight(false)
        };
    
        container.top = offset.top;
        container.bottom = offset.top + container.height;
    
        var dropdown = {
          height: this.$dropdown.outerHeight(false)
        };
    
        var viewport = {
          top: $window.scrollTop(),
          bottom: $window.scrollTop() + $window.height()
        };
    
        var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
        var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);
    
        var css = {
          left: offset.left,
          top: container.bottom
        };
    
        // Determine what the parent element is to use for calciulating the offset
        var $offsetParent = this.$dropdownParent;
    
        // For statically positoned elements, we need to get the element
        // that is determining the offset
        if ($offsetParent.css('position') === 'static') {
          $offsetParent = $offsetParent.offsetParent();
        }
    
        var parentOffset = $offsetParent.offset();
    
        css.top -= parentOffset.top;
        css.left -= parentOffset.left;
    
        if (!isCurrentlyAbove && !isCurrentlyBelow) {
          newDirection = 'below';
        }
    
        if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
          newDirection = 'above';
        } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
          newDirection = 'below';
        }
    
        if (newDirection == 'above' ||
          (isCurrentlyAbove && newDirection !== 'below')) {
          css.top = container.top - parentOffset.top - dropdown.height;
        }
    
        if (newDirection != null) {
          this.$dropdown
            .removeClass('select2-dropdown--below select2-dropdown--above')
            .addClass('select2-dropdown--' + newDirection);
          this.$container
            .removeClass('select2-container--below select2-container--above')
            .addClass('select2-container--' + newDirection);
        }
    
        this.$dropdownContainer.css(css);
      };
    
      AttachBody.prototype._resizeDropdown = function () {
        var css = {
          width: this.$container.outerWidth(false) + 'px'
        };
    
        if (this.options.get('dropdownAutoWidth')) {
          css.minWidth = css.width;
          css.position = 'relative';
          css.width = 'auto';
        }
    
        this.$dropdown.css(css);
      };
    
      AttachBody.prototype._showDropdown = function (decorated) {
        this.$dropdownContainer.appendTo(this.$dropdownParent);
    
        this._positionDropdown();
        this._resizeDropdown();
      };
    
      return AttachBody;
    });
    
    S2.define('select2/dropdown/minimumResultsForSearch',[
    
    ], function () {
      function countResults (data) {
        var count = 0;
    
        for (var d = 0; d < data.length; d++) {
          var item = data[d];
    
          if (item.children) {
            count += countResults(item.children);
          } else {
            count++;
          }
        }
    
        return count;
      }
    
      function MinimumResultsForSearch (decorated, $element, options, dataAdapter) {
        this.minimumResultsForSearch = options.get('minimumResultsForSearch');
    
        if (this.minimumResultsForSearch < 0) {
          this.minimumResultsForSearch = Infinity;
        }
    
        decorated.call(this, $element, options, dataAdapter);
      }
    
      MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
        if (countResults(params.data.results) < this.minimumResultsForSearch) {
          return false;
        }
    
        return decorated.call(this, params);
      };
    
      return MinimumResultsForSearch;
    });
    
    S2.define('select2/dropdown/selectOnClose',[
    
    ], function () {
      function SelectOnClose () { }
    
      SelectOnClose.prototype.bind = function (decorated, container, $container) {
        var self = this;
    
        decorated.call(this, container, $container);
    
        container.on('close', function (params) {
          self._handleSelectOnClose(params);
        });
      };
    
      SelectOnClose.prototype._handleSelectOnClose = function (_, params) {
        if (params && params.originalSelect2Event != null) {
          var event = params.originalSelect2Event;
    
          // Don't select an item if the close event was triggered from a select or
          // unselect event
          if (event._type === 'select' || event._type === 'unselect') {
            return;
          }
        }
    
        var $highlightedResults = this.getHighlightedResults();
    
        // Only select highlighted results
        if ($highlightedResults.length < 1) {
          return;
        }
    
        var data = $highlightedResults.data('data');
    
        // Don't re-select already selected resulte
        if (
          (data.element != null && data.element.selected) ||
          (data.element == null && data.selected)
        ) {
          return;
        }
    
        this.trigger('select', {
            data: data
        });
      };
    
      return SelectOnClose;
    });
    
    S2.define('select2/dropdown/closeOnSelect',[
    
    ], function () {
      function CloseOnSelect () { }
    
      CloseOnSelect.prototype.bind = function (decorated, container, $container) {
        var self = this;
    
        decorated.call(this, container, $container);
    
        container.on('select', function (evt) {
          self._selectTriggered(evt);
        });
    
        container.on('unselect', function (evt) {
          self._selectTriggered(evt);
        });
      };
    
      CloseOnSelect.prototype._selectTriggered = function (_, evt) {
        var originalEvent = evt.originalEvent;
    
        // Don't close if the control key is being held
        if (originalEvent && originalEvent.ctrlKey) {
          return;
        }
    
        this.trigger('close', {
          originalEvent: originalEvent,
          originalSelect2Event: evt
        });
      };
    
      return CloseOnSelect;
    });
    
    S2.define('select2/i18n/en',[],function () {
      // English
      return {
        errorLoading: function () {
          return 'The results could not be loaded.';
        },
        inputTooLong: function (args) {
          var overChars = args.input.length - args.maximum;
    
          var message = 'Please delete ' + overChars + ' character';
    
          if (overChars != 1) {
            message += 's';
          }
    
          return message;
        },
        inputTooShort: function (args) {
          var remainingChars = args.minimum - args.input.length;
    
          var message = 'Please enter ' + remainingChars + ' or more characters';
    
          return message;
        },
        loadingMore: function () {
          return 'Loading more results…';
        },
        maximumSelected: function (args) {
          var message = 'You can only select ' + args.maximum + ' item';
    
          if (args.maximum != 1) {
            message += 's';
          }
    
          return message;
        },
        noResults: function () {
          return 'No results found';
        },
        searching: function () {
          return 'Searching…';
        }
      };
    });
    
    S2.define('select2/defaults',[
      'jquery',
      'require',
    
      './results',
    
      './selection/single',
      './selection/multiple',
      './selection/placeholder',
      './selection/allowClear',
      './selection/search',
      './selection/eventRelay',
    
      './a11y/a11ySingle',
      './a11y/a11yMulti',
    
      './utils',
      './translation',
      './diacritics',
    
      './data/select',
      './data/array',
      './data/ajax',
      './data/tags',
      './data/tokenizer',
      './data/minimumInputLength',
      './data/maximumInputLength',
      './data/maximumSelectionLength',
    
      './dropdown',
      './dropdown/search',
      './dropdown/hidePlaceholder',
      './dropdown/infiniteScroll',
      './dropdown/attachBody',
      './dropdown/minimumResultsForSearch',
      './dropdown/selectOnClose',
      './dropdown/closeOnSelect',
    
      './i18n/en'
    ], function ($, require,
    
                 ResultsList,
    
                 SingleSelection, MultipleSelection, Placeholder, AllowClear,
                 SelectionSearch, EventRelay,
    
                 A11ySingle, A11yMulti,
    
                 Utils, Translation, DIACRITICS,
    
                 SelectData, ArrayData, AjaxData, Tags, Tokenizer,
                 MinimumInputLength, MaximumInputLength, MaximumSelectionLength,
    
                 Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,
                 AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,
    
                 EnglishTranslation) {
      function Defaults () {
        this.reset();
      }
    
      Defaults.prototype.apply = function (options) {
        options = $.extend(true, {}, this.defaults, options);
    
        if (options.dataAdapter == null) {
          if (options.ajax != null) {
            options.dataAdapter = AjaxData;
          } else if (options.data != null) {
            options.dataAdapter = ArrayData;
          } else {
            options.dataAdapter = SelectData;
          }
    
          if (options.minimumInputLength > 0) {
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              MinimumInputLength
            );
          }
    
          if (options.maximumInputLength > 0) {
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              MaximumInputLength
            );
          }
    
          if (options.maximumSelectionLength > 0) {
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              MaximumSelectionLength
            );
          }
    
          if (options.tags) {
            options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
          }
    
          if (options.tokenSeparators != null || options.tokenizer != null) {
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              Tokenizer
            );
          }
    
          if (options.query != null) {
            var Query = require(options.amdBase + 'compat/query');
    
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              Query
            );
          }
    
          if (options.initSelection != null) {
            var InitSelection = require(options.amdBase + 'compat/initSelection');
    
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              InitSelection
            );
          }
        }
    
        if (options.resultsAdapter == null) {
          options.resultsAdapter = ResultsList;
    
          if (options.ajax != null) {
            options.resultsAdapter = Utils.Decorate(
              options.resultsAdapter,
              InfiniteScroll
            );
          }
    
          if (options.placeholder != null) {
            options.resultsAdapter = Utils.Decorate(
              options.resultsAdapter,
              HidePlaceholder
            );
          }
    
          if (options.selectOnClose) {
            options.resultsAdapter = Utils.Decorate(
              options.resultsAdapter,
              SelectOnClose
            );
          }
        }
    
        if (options.dropdownAdapter == null) {
          if (options.multiple) {
            options.dropdownAdapter = Dropdown;
          } else {
            var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);
    
            options.dropdownAdapter = SearchableDropdown;
          }
    
          if (options.minimumResultsForSearch !== 0) {
            options.dropdownAdapter = Utils.Decorate(
              options.dropdownAdapter,
              MinimumResultsForSearch
            );
          }
    
          if (options.closeOnSelect) {
            options.dropdownAdapter = Utils.Decorate(
              options.dropdownAdapter,
              CloseOnSelect
            );
          }
    
          if (
            options.dropdownCssClass != null ||
            options.dropdownCss != null ||
            options.adaptDropdownCssClass != null
          ) {
            var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');
    
            options.dropdownAdapter = Utils.Decorate(
              options.dropdownAdapter,
              DropdownCSS
            );
          }
    
          options.dropdownAdapter = Utils.Decorate(
            options.dropdownAdapter,
            AttachBody
          );
        }
    
        if (options.selectionAdapter == null) {
          if (options.multiple) {
            options.selectionAdapter = MultipleSelection;
          } else {
            options.selectionAdapter = SingleSelection;
          }
    
          // Add the placeholder mixin if a placeholder was specified
          if (options.placeholder != null) {
            options.selectionAdapter = Utils.Decorate(
              options.selectionAdapter,
              Placeholder
            );
          }
    
          // Mixin a11y decorators
          options.selectionAdapter = Utils.Decorate(
            options.selectionAdapter,
            options.multiple ? A11yMulti : A11ySingle
          );
    
          if (options.allowClear) {
            options.selectionAdapter = Utils.Decorate(
              options.selectionAdapter,
              AllowClear
            );
          }
    
          if (options.multiple) {
            options.selectionAdapter = Utils.Decorate(
              options.selectionAdapter,
              SelectionSearch
            );
          }
    
          if (
            options.containerCssClass != null ||
            options.containerCss != null ||
            options.adaptContainerCssClass != null
          ) {
            var ContainerCSS = require(options.amdBase + 'compat/containerCss');
    
            options.selectionAdapter = Utils.Decorate(
              options.selectionAdapter,
              ContainerCSS
            );
          }
    
          options.selectionAdapter = Utils.Decorate(
            options.selectionAdapter,
            EventRelay
          );
        }
    
        if (typeof options.language === 'string') {
          // Check if the language is specified with a region
          if (options.language.indexOf('-') > 0) {
            // Extract the region information if it is included
            var languageParts = options.language.split('-');
            var baseLanguage = languageParts[0];
    
            options.language = [options.language, baseLanguage];
          } else {
            options.language = [options.language];
          }
        }
    
        if ($.isArray(options.language)) {
          var languages = new Translation();
          options.language.push('en');
    
          var languageNames = options.language;
    
          for (var l = 0; l < languageNames.length; l++) {
            var name = languageNames[l];
            var language = {};
    
            try {
              // Try to load it with the original name
              language = Translation.loadPath(name);
            } catch (e) {
              try {
                // If we couldn't load it, check if it wasn't the full path
                name = this.defaults.amdLanguageBase + name;
                language = Translation.loadPath(name);
              } catch (ex) {
                // The translation could not be loaded at all. Sometimes this is
                // because of a configuration problem, other times this can be
                // because of how Select2 helps load all possible translation files.
                if (options.debug && window.console && console.warn) {
                  console.warn(
                    'Select2: The language file for "' + name + '" could not be ' +
                    'automatically loaded. A fallback will be used instead.'
                  );
                }
    
                continue;
              }
            }
    
            languages.extend(language);
          }
    
          options.translations = languages;
        } else {
          var baseTranslation = Translation.loadPath(
            this.defaults.amdLanguageBase + 'en'
          );
          var customTranslation = new Translation(options.language);
    
          customTranslation.extend(baseTranslation);
    
          options.translations = customTranslation;
        }
    
        return options;
      };
    
      Defaults.prototype.reset = function () {
        function stripDiacritics (text) {
          // Used 'uni range + named function' from http://jsperf.com/diacritics/18
          function match(a) {
            return DIACRITICS[a] || a;
          }
    
          return text.replace(/[^\u0000-\u007E]/g, match);
        }
    
        function matcher (params, data) {
          // Always return the object if there is nothing to compare
          if ($.trim(params.term) === '') {
            return data;
          }
    
          // Do a recursive check for options with children
          if (data.children && data.children.length > 0) {
            // Clone the data object if there are children
            // This is required as we modify the object to remove any non-matches
            var match = $.extend(true, {}, data);
    
            // Check each child of the option
            for (var c = data.children.length - 1; c >= 0; c--) {
              var child = data.children[c];
    
              var matches = matcher(params, child);
    
              // If there wasn't a match, remove the object in the array
              if (matches == null) {
                match.children.splice(c, 1);
              }
            }
    
            // If any children matched, return the new object
            if (match.children.length > 0) {
              return match;
            }
    
            // If there were no matching children, check just the plain object
            return matcher(params, match);
          }
    
          var original = stripDiacritics(data.text).toUpperCase();
          var term = stripDiacritics(params.term).toUpperCase();
    
          // Check if the text contains the term
          if (original.indexOf(term) > -1) {
            return data;
          }
    
          // If it doesn't contain the term, don't return anything
          return null;
        }
    
        this.defaults = {
          amdBase: './',
          amdLanguageBase: './i18n/',
          closeOnSelect: true,
          debug: false,
          dropdownAutoWidth: false,
          escapeMarkup: Utils.escapeMarkup,
          language: EnglishTranslation,
          matcher: matcher,
          minimumInputLength: 0,
          maximumInputLength: 0,
          maximumSelectionLength: 0,
          minimumResultsForSearch: 0,
          selectOnClose: false,
          sorter: function (data) {
            return data;
          },
          templateResult: function (result) {
            return result.text;
          },
          templateSelection: function (selection) {
            return selection.text;
          },
          theme: 'default',
          width: 'resolve'
        };
      };
    
      Defaults.prototype.set = function (key, value) {
        var camelKey = $.camelCase(key);
    
        var data = {};
        data[camelKey] = value;
    
        var convertedData = Utils._convertData(data);
    
        $.extend(this.defaults, convertedData);
      };
    
      var defaults = new Defaults();
    
      return defaults;
    });
    
    S2.define('select2/options',[
      'require',
      'jquery',
      './defaults',
      './utils'
    ], function (require, $, Defaults, Utils) {
      function Options (options, $element) {
        this.options = options;
    
        if ($element != null) {
          this.fromElement($element);
        }
    
        this.options = Defaults.apply(this.options);
    
        if ($element && $element.is('input')) {
          var InputCompat = require(this.get('amdBase') + 'compat/inputData');
    
          this.options.dataAdapter = Utils.Decorate(
            this.options.dataAdapter,
            InputCompat
          );
        }
      }
    
      Options.prototype.fromElement = function ($e) {
        var excludedData = ['select2'];
    
        if (this.options.multiple == null) {
          this.options.multiple = $e.prop('multiple');
        }
    
        if (this.options.disabled == null) {
          this.options.disabled = $e.prop('disabled');
        }
    
        if (this.options.language == null) {
          if ($e.prop('lang')) {
            this.options.language = $e.prop('lang').toLowerCase();
          } else if ($e.closest('[lang]').prop('lang')) {
            this.options.language = $e.closest('[lang]').prop('lang');
          }
        }
    
        if (this.options.dir == null) {
          if ($e.prop('dir')) {
            this.options.dir = $e.prop('dir');
          } else if ($e.closest('[dir]').prop('dir')) {
            this.options.dir = $e.closest('[dir]').prop('dir');
          } else {
            this.options.dir = 'ltr';
          }
        }
    
        $e.prop('disabled', this.options.disabled);
        $e.prop('multiple', this.options.multiple);
    
        if ($e.data('select2Tags')) {
          if (this.options.debug && window.console && console.warn) {
            console.warn(
              'Select2: The `data-select2-tags` attribute has been changed to ' +
              'use the `data-data` and `data-tags="true"` attributes and will be ' +
              'removed in future versions of Select2.'
            );
          }
    
          $e.data('data', $e.data('select2Tags'));
          $e.data('tags', true);
        }
    
        if ($e.data('ajaxUrl')) {
          if (this.options.debug && window.console && console.warn) {
            console.warn(
              'Select2: The `data-ajax-url` attribute has been changed to ' +
              '`data-ajax--url` and support for the old attribute will be removed' +
              ' in future versions of Select2.'
            );
          }
    
          $e.attr('ajax--url', $e.data('ajaxUrl'));
          $e.data('ajax--url', $e.data('ajaxUrl'));
        }
    
        var dataset = {};
    
        // Prefer the element's `dataset` attribute if it exists
        // jQuery 1.x does not correctly handle data attributes with multiple dashes
        if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
          dataset = $.extend(true, {}, $e[0].dataset, $e.data());
        } else {
          dataset = $e.data();
        }
    
        var data = $.extend(true, {}, dataset);
    
        data = Utils._convertData(data);
    
        for (var key in data) {
          if ($.inArray(key, excludedData) > -1) {
            continue;
          }
    
          if ($.isPlainObject(this.options[key])) {
            $.extend(this.options[key], data[key]);
          } else {
            this.options[key] = data[key];
          }
        }
    
        return this;
      };
    
      Options.prototype.get = function (key) {
        return this.options[key];
      };
    
      Options.prototype.set = function (key, val) {
        this.options[key] = val;
      };
    
      return Options;
    });
    
    S2.define('select2/core',[
      'jquery',
      './options',
      './utils',
      './keys'
    ], function ($, Options, Utils, KEYS) {
      var Select2 = function ($element, options) {
        if ($element.data('select2') != null) {
          $element.data('select2').destroy();
        }
    
        this.$element = $element;
    
        this.id = this._generateId($element);
    
        options = options || {};
    
        this.options = new Options(options, $element);
    
        Select2.__super__.constructor.call(this);
    
        // Set up the tabindex
    
        var tabindex = $element.attr('tabindex') || 0;
        $element.data('old-tabindex', tabindex);
        $element.attr('tabindex', '-1');
    
        // Set up containers and adapters
    
        var DataAdapter = this.options.get('dataAdapter');
        this.dataAdapter = new DataAdapter($element, this.options);
    
        var $container = this.render();
    
        this._placeContainer($container);
    
        var SelectionAdapter = this.options.get('selectionAdapter');
        this.selection = new SelectionAdapter($element, this.options);
        this.$selection = this.selection.render();
    
        this.selection.position(this.$selection, $container);
    
        var DropdownAdapter = this.options.get('dropdownAdapter');
        this.dropdown = new DropdownAdapter($element, this.options);
        this.$dropdown = this.dropdown.render();
    
        this.dropdown.position(this.$dropdown, $container);
    
        var ResultsAdapter = this.options.get('resultsAdapter');
        this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
        this.$results = this.results.render();
    
        this.results.position(this.$results, this.$dropdown);
    
        // Bind events
    
        var self = this;
    
        // Bind the container to all of the adapters
        this._bindAdapters();
    
        // Register any DOM event handlers
        this._registerDomEvents();
    
        // Register any internal event handlers
        this._registerDataEvents();
        this._registerSelectionEvents();
        this._registerDropdownEvents();
        this._registerResultsEvents();
        this._registerEvents();
    
        // Set the initial state
        this.dataAdapter.current(function (initialData) {
          self.trigger('selection:update', {
            data: initialData
          });
        });
    
        // Hide the original select
        $element.addClass('select2-hidden-accessible');
        $element.attr('aria-hidden', 'true');
    
        // Synchronize any monitored attributes
        this._syncAttributes();
    
        $element.data('select2', this);
      };
    
      Utils.Extend(Select2, Utils.Observable);
    
      Select2.prototype._generateId = function ($element) {
        var id = '';
    
        if ($element.attr('id') != null) {
          id = $element.attr('id');
        } else if ($element.attr('name') != null) {
          id = $element.attr('name') + '-' + Utils.generateChars(2);
        } else {
          id = Utils.generateChars(4);
        }
    
        id = id.replace(/(:|\.|\[|\]|,)/g, '');
        id = 'select2-' + id;
    
        return id;
      };
    
      Select2.prototype._placeContainer = function ($container) {
        $container.insertAfter(this.$element);
    
        var width = this._resolveWidth(this.$element, this.options.get('width'));
    
        if (width != null) {
          $container.css('width', width);
        }
      };
    
      Select2.prototype._resolveWidth = function ($element, method) {
        var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;
    
        if (method == 'resolve') {
          var styleWidth = this._resolveWidth($element, 'style');
    
          if (styleWidth != null) {
            return styleWidth;
          }
    
          return this._resolveWidth($element, 'element');
        }
    
        if (method == 'element') {
          var elementWidth = $element.outerWidth(false);
    
          if (elementWidth <= 0) {
            return 'auto';
          }
    
          return elementWidth + 'px';
        }
    
        if (method == 'style') {
          var style = $element.attr('style');
    
          if (typeof(style) !== 'string') {
            return null;
          }
    
          var attrs = style.split(';');
    
          for (var i = 0, l = attrs.length; i < l; i = i + 1) {
            var attr = attrs[i].replace(/\s/g, '');
            var matches = attr.match(WIDTH);
    
            if (matches !== null && matches.length >= 1) {
              return matches[1];
            }
          }
    
          return null;
        }
    
        return method;
      };
    
      Select2.prototype._bindAdapters = function () {
        this.dataAdapter.bind(this, this.$container);
        this.selection.bind(this, this.$container);
    
        this.dropdown.bind(this, this.$container);
        this.results.bind(this, this.$container);
      };
    
      Select2.prototype._registerDomEvents = function () {
        var self = this;
    
        this.$element.on('change.select2', function () {
          self.dataAdapter.current(function (data) {
            self.trigger('selection:update', {
              data: data
            });
          });
        });
    
        this.$element.on('focus.select2', function (evt) {
          self.trigger('focus', evt);
        });
    
        this._syncA = Utils.bind(this._syncAttributes, this);
        this._syncS = Utils.bind(this._syncSubtree, this);
    
        if (this.$element[0].attachEvent) {
          this.$element[0].attachEvent('onpropertychange', this._syncA);
        }
    
        var observer = window.MutationObserver ||
          window.WebKitMutationObserver ||
          window.MozMutationObserver
        ;
    
        if (observer != null) {
          this._observer = new observer(function (mutations) {
            $.each(mutations, self._syncA);
            $.each(mutations, self._syncS);
          });
          this._observer.observe(this.$element[0], {
            attributes: true,
            childList: true,
            subtree: false
          });
        } else if (this.$element[0].addEventListener) {
          this.$element[0].addEventListener(
            'DOMAttrModified',
            self._syncA,
            false
          );
          this.$element[0].addEventListener(
            'DOMNodeInserted',
            self._syncS,
            false
          );
          this.$element[0].addEventListener(
            'DOMNodeRemoved',
            self._syncS,
            false
          );
        }
      };
    
      Select2.prototype._registerDataEvents = function () {
        var self = this;
    
        this.dataAdapter.on('*', function (name, params) {
          self.trigger(name, params);
        });
      };
    
      Select2.prototype._registerSelectionEvents = function () {
        var self = this;
        var nonRelayEvents = ['toggle', 'focus'];
    
        this.selection.on('toggle', function () {
          self.toggleDropdown();
        });
    
        this.selection.on('focus', function (params) {
          self.focus(params);
        });
    
        this.selection.on('*', function (name, params) {
          if ($.inArray(name, nonRelayEvents) !== -1) {
            return;
          }
    
          self.trigger(name, params);
        });
      };
    
      Select2.prototype._registerDropdownEvents = function () {
        var self = this;
    
        this.dropdown.on('*', function (name, params) {
          self.trigger(name, params);
        });
      };
    
      Select2.prototype._registerResultsEvents = function () {
        var self = this;
    
        this.results.on('*', function (name, params) {
          self.trigger(name, params);
        });
      };
    
      Select2.prototype._registerEvents = function () {
        var self = this;
    
        this.on('open', function () {
          self.$container.addClass('select2-container--open');
        });
    
        this.on('close', function () {
          self.$container.removeClass('select2-container--open');
        });
    
        this.on('enable', function () {
          self.$container.removeClass('select2-container--disabled');
        });
    
        this.on('disable', function () {
          self.$container.addClass('select2-container--disabled');
        });
    
        this.on('blur', function () {
          self.$container.removeClass('select2-container--focus');
        });
    
        this.on('query', function (params) {
          if (!self.isOpen() && !self.isDisabled()) {
            self.trigger('open', {});
          }
    
          this.dataAdapter.query(params, function (data) {
            self.trigger('results:all', {
              data: data,
              query: params
            });
          });
        });
    
        this.on('query:append', function (params) {
          this.dataAdapter.query(params, function (data) {
            self.trigger('results:append', {
              data: data,
              query: params
            });
          });
        });
    
        this.on('open', function(){
          // Focus on the active element when opening dropdown.
          // Needs 1 ms delay because of other 1 ms setTimeouts when rendering.
          setTimeout(function(){
            self.focusOnActiveElement();
          }, 1);
        });
    
        $(document).on('keydown', function (evt) {
          var key = evt.which;
    
          if (self.isDisabled()) {
            return;
          }
    
          if (self.isOpen()) {
            if (key === KEYS.ESC || key === KEYS.TAB ||
                (key === KEYS.UP && evt.altKey)) {
              self.close();
    
              evt.preventDefault();
            } else if (key === KEYS.ENTER) {
              self.trigger('results:select', {});
    
              evt.preventDefault();
            } else if ((key === KEYS.SPACE && evt.ctrlKey)) {
              self.trigger('results:toggle', {});
    
              evt.preventDefault();
            } else if (key === KEYS.UP) {
              self.trigger('results:previous', {});
    
              evt.preventDefault();
            } else if (key === KEYS.DOWN) {
              self.trigger('results:next', {});
    
              evt.preventDefault();
            }
    
            var $searchField = self.$dropdown.find('.select2-search__field');
            if (! $searchField.length) {
              $searchField = self.$container.find('.select2-search__field');
            }
    
            // Move the focus to the selected element on keyboard navigation.
            // Required for screen readers to work properly.
            if (key === KEYS.DOWN || key === KEYS.UP) {
                self.focusOnActiveElement();
            } else {
              // Focus on the search if user starts typing.
              $searchField[0].focus();
              // Focus back to active selection when finished typing.
              // Small delay so typed character can be read by screen reader.
              setTimeout(function(){
                  self.focusOnActiveElement();
              }, 1000);
            }
          } else if (self.hasFocus()) {
            if (key === KEYS.ENTER || key === KEYS.SPACE ||
                key === KEYS.DOWN) {
              self.open();
              evt.preventDefault();
            }
          }
        });
      };
    
      Select2.prototype.focusOnActiveElement = function () {
        // Don't mess with the focus on touchscreens
        // because it causes havoc with on-screen keyboards.
        if (this.isOpen() && ! Utils.isTouchscreen()) {
          this.$results.find('li.select2-results__option--highlighted')
            .trigger('focus');
        }
      };
    
      Select2.prototype._syncAttributes = function () {
        this.options.set('disabled', this.$element.prop('disabled'));
    
        if (this.options.get('disabled')) {
          if (this.isOpen()) {
            this.close();
          }
    
          this.trigger('disable', {});
        } else {
          this.trigger('enable', {});
        }
      };
    
      Select2.prototype._syncSubtree = function (evt, mutations) {
        var changed = false;
        var self = this;
    
        // Ignore any mutation events raised for elements that aren't options or
        // optgroups. This handles the case when the select element is destroyed
        if (
          evt && evt.target && (
            evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'
          )
        ) {
          return;
        }
    
        if (!mutations) {
          // If mutation events aren't supported, then we can only assume that the
          // change affected the selections
          changed = true;
        } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {
          for (var n = 0; n < mutations.addedNodes.length; n++) {
            var node = mutations.addedNodes[n];
    
            if (node.selected) {
              changed = true;
            }
          }
        } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
          changed = true;
        }
    
        // Only re-pull the data if we think there is a change
        if (changed) {
          this.dataAdapter.current(function (currentData) {
            self.trigger('selection:update', {
              data: currentData
            });
          });
        }
      };
    
      /**
       * Override the trigger method to automatically trigger pre-events when
       * there are events that can be prevented.
       */
      Select2.prototype.trigger = function (name, args) {
        var actualTrigger = Select2.__super__.trigger;
        var preTriggerMap = {
          'open': 'opening',
          'close': 'closing',
          'select': 'selecting',
          'unselect': 'unselecting'
        };
    
        if (args === undefined) {
          args = {};
        }
    
        if (name in preTriggerMap) {
          var preTriggerName = preTriggerMap[name];
          var preTriggerArgs = {
            prevented: false,
            name: name,
            args: args
          };
    
          actualTrigger.call(this, preTriggerName, preTriggerArgs);
    
          if (preTriggerArgs.prevented) {
            args.prevented = true;
    
            return;
          }
        }
    
        actualTrigger.call(this, name, args);
      };
    
      Select2.prototype.toggleDropdown = function () {
        if (this.options.get('disabled')) {
          return;
        }
    
        if (this.isOpen()) {
          this.close();
        } else {
          this.open();
        }
      };
    
      Select2.prototype.open = function () {
        if (this.isOpen()) {
          return;
        }
    
        this.trigger('query', {});
      };
    
      Select2.prototype.close = function () {
        if (!this.isOpen()) {
          return;
        }
    
        this.trigger('close', {});
      };
    
      Select2.prototype.isOpen = function () {
        return this.$container.hasClass('select2-container--open');
      };
    
      Select2.prototype.isDisabled = function () {
        return this.$container.hasClass('select2-container--disabled');
      };
    
      Select2.prototype.hasFocus = function () {
        return this.$container.hasClass('select2-container--focus');
      };
    
      Select2.prototype.focus = function (data) {
        // No need to re-trigger focus events if we are already focused,
        // we will prevent focus if the instance is disabled
        if (this.hasFocus() || this.isDisabled()) {
          return;
        }
    
        this.$container.addClass('select2-container--focus');
        this.trigger('focus', {});
      };
    
      Select2.prototype.enable = function (args) {
        if (this.options.get('debug') && window.console && console.warn) {
          console.warn(
            'Select2: The `select2("enable")` method has been deprecated and will' +
            ' be removed in later Select2 versions. Use $element.prop("disabled")' +
            ' instead.'
          );
        }
    
        if (args == null || args.length === 0) {
          args = [true];
        }
    
        var disabled = !args[0];
    
        this.$element.prop('disabled', disabled);
      };
    
      Select2.prototype.data = function () {
        if (this.options.get('debug') &&
            arguments.length > 0 && window.console && console.warn) {
          console.warn(
            'Select2: Data can no longer be set using `select2("data")`. You ' +
            'should consider setting the value instead using `$element.val()`.'
          );
        }
    
        var data = [];
    
        this.dataAdapter.current(function (currentData) {
          data = currentData;
        });
    
        return data;
      };
    
      Select2.prototype.val = function (args) {
        if (this.options.get('debug') && window.console && console.warn) {
          console.warn(
            'Select2: The `select2("val")` method has been deprecated and will be' +
            ' removed in later Select2 versions. Use $element.val() instead.'
          );
        }
    
        if (args == null || args.length === 0) {
          return this.$element.val();
        }
    
        var newVal = args[0];
    
        if ($.isArray(newVal)) {
          newVal = $.map(newVal, function (obj) {
            return obj.toString();
          });
        }
    
        this.$element.val(newVal).trigger('change');
      };
    
      Select2.prototype.destroy = function () {
        this.$container.remove();
    
        if (this.$element[0].detachEvent) {
          this.$element[0].detachEvent('onpropertychange', this._syncA);
        }
    
        if (this._observer != null) {
          this._observer.disconnect();
          this._observer = null;
        } else if (this.$element[0].removeEventListener) {
          this.$element[0]
            .removeEventListener('DOMAttrModified', this._syncA, false);
          this.$element[0]
            .removeEventListener('DOMNodeInserted', this._syncS, false);
          this.$element[0]
            .removeEventListener('DOMNodeRemoved', this._syncS, false);
        }
    
        this._syncA = null;
        this._syncS = null;
    
        this.$element.off('.select2');
        this.$element.attr('tabindex', this.$element.data('old-tabindex'));
    
        this.$element.removeClass('select2-hidden-accessible');
        this.$element.attr('aria-hidden', 'false');
        this.$element.removeData('select2');
    
        this.dataAdapter.destroy();
        this.selection.destroy();
        this.dropdown.destroy();
        this.results.destroy();
    
        this.dataAdapter = null;
        this.selection = null;
        this.dropdown = null;
        this.results = null;
      };
    
      Select2.prototype.render = function () {
        var $container = $(
          '<span class="select2 select2-container">' +
            '<span class="selection"></span>' +
            '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
          '</span>'
        );
    
        $container.attr('dir', this.options.get('dir'));
    
        this.$container = $container;
    
        this.$container.addClass('select2-container--' + this.options.get('theme'));
    
        $container.data('element', this.$element);
    
        return $container;
      };
    
      return Select2;
    });
    
    S2.define('jquery-mousewheel',[
      'jquery'
    ], function ($) {
      // Used to shim jQuery.mousewheel for non-full builds.
      return $;
    });
    
    S2.define('jquery.select2',[
      'jquery',
      'jquery-mousewheel',
    
      './select2/core',
      './select2/defaults'
    ], function ($, _, Select2, Defaults) {
      if ($.fn.selectWoo == null) {
        // All methods that should return the element
        var thisMethods = ['open', 'close', 'destroy'];
    
        $.fn.selectWoo = function (options) {
          options = options || {};
    
          if (typeof options === 'object') {
            this.each(function () {
              var instanceOptions = $.extend(true, {}, options);
    
              var instance = new Select2($(this), instanceOptions);
            });
    
            return this;
          } else if (typeof options === 'string') {
            var ret;
            var args = Array.prototype.slice.call(arguments, 1);
    
            this.each(function () {
              var instance = $(this).data('select2');
    
              if (instance == null && window.console && console.error) {
                console.error(
                  'The select2(\'' + options + '\') method was called on an ' +
                  'element that is not using Select2.'
                );
              }
    
              ret = instance[options].apply(instance, args);
            });
    
            // Check if we should be returning `this`
            if ($.inArray(options, thisMethods) > -1) {
              return this;
            }
    
            return ret;
          } else {
            throw new Error('Invalid arguments for Select2: ' + options);
          }
        };
      }
    
      if ($.fn.select2 != null && $.fn.select2.defaults != null) {
        $.fn.selectWoo.defaults = $.fn.select2.defaults;
      }
    
      if ($.fn.selectWoo.defaults == null) {
        $.fn.selectWoo.defaults = Defaults;
      }
    
      // Also register selectWoo under select2 if select2 is not already present.
      $.fn.select2 = $.fn.select2 || $.fn.selectWoo;
    
      return Select2;
    });
    
      // Return the AMD loader configuration so it can be used outside of this file
      return {
        define: S2.define,
        require: S2.require
      };
    }());
    
      // Autoload the jQuery bindings
      // We know that all of the modules exist above this, so we're safe
      var select2 = S2.require('jquery.select2');
    
      // Hold the AMD module references on the jQuery function that was just loaded
      // This allows Select2 to use the internal loader outside of this file, such
      // as in the language files.
      jQuery.fn.select2.amd = S2;
      jQuery.fn.selectWoo.amd = S2;
    
      // Return the Select2 instance for anyone who is importing it.
      return select2;
    }));
    
    },{"jquery":416}],432:[function(require,module,exports){
    // Spectrum Colorpicker v1.8.1
    // https://github.com/bgrins/spectrum
    // Author: Brian Grinstead
    // License: MIT
    
    (function (factory) {
        "use strict";
    
        if (typeof define === 'function' && define.amd) { // AMD
            define(['jquery'], factory);
        }
        else if (typeof exports == "object" && typeof module == "object") { // CommonJS
            module.exports = factory(require('jquery'));
        }
        else { // Browser
            factory(jQuery);
        }
    })(function($, undefined) {
        "use strict";
    
        var defaultOpts = {
    
            // Callbacks
            beforeShow: noop,
            move: noop,
            change: noop,
            show: noop,
            hide: noop,
    
            // Options
            color: false,
            flat: false,
            showInput: false,
            allowEmpty: false,
            showButtons: true,
            clickoutFiresChange: true,
            showInitial: false,
            showPalette: false,
            showPaletteOnly: false,
            hideAfterPaletteSelect: false,
            togglePaletteOnly: false,
            showSelectionPalette: true,
            localStorageKey: false,
            appendTo: "body",
            maxSelectionSize: 7,
            cancelText: "cancel",
            chooseText: "choose",
            togglePaletteMoreText: "more",
            togglePaletteLessText: "less",
            clearText: "Clear Color Selection",
            noColorSelectedText: "No Color Selected",
            preferredFormat: false,
            className: "", // Deprecated - use containerClassName and replacerClassName instead.
            containerClassName: "",
            replacerClassName: "",
            showAlpha: false,
            theme: "sp-light",
            palette: [["#ffffff", "#000000", "#ff0000", "#ff8000", "#ffff00", "#008000", "#0000ff", "#4b0082", "#9400d3"]],
            selectionPalette: [],
            disabled: false,
            offset: null
        },
        spectrums = [],
        IE = !!/msie/i.exec( window.navigator.userAgent ),
        rgbaSupport = (function() {
            function contains( str, substr ) {
                return !!~('' + str).indexOf(substr);
            }
    
            var elem = document.createElement('div');
            var style = elem.style;
            style.cssText = 'background-color:rgba(0,0,0,.5)';
            return contains(style.backgroundColor, 'rgba') || contains(style.backgroundColor, 'hsla');
        })(),
        replaceInput = [
            "<div class='sp-replacer'>",
                "<div class='sp-preview'><div class='sp-preview-inner'></div></div>",
                "<div class='sp-dd'>&#9660;</div>",
            "</div>"
        ].join(''),
        markup = (function () {
    
            // IE does not support gradients with multiple stops, so we need to simulate
            //  that for the rainbow slider with 8 divs that each have a single gradient
            var gradientFix = "";
            if (IE) {
                for (var i = 1; i <= 6; i++) {
                    gradientFix += "<div class='sp-" + i + "'></div>";
                }
            }
    
            return [
                "<div class='sp-container sp-hidden'>",
                    "<div class='sp-palette-container'>",
                        "<div class='sp-palette sp-thumb sp-cf'></div>",
                        "<div class='sp-palette-button-container sp-cf'>",
                            "<button type='button' class='sp-palette-toggle'></button>",
                        "</div>",
                    "</div>",
                    "<div class='sp-picker-container'>",
                        "<div class='sp-top sp-cf'>",
                            "<div class='sp-fill'></div>",
                            "<div class='sp-top-inner'>",
                                "<div class='sp-color'>",
                                    "<div class='sp-sat'>",
                                        "<div class='sp-val'>",
                                            "<div class='sp-dragger'></div>",
                                        "</div>",
                                    "</div>",
                                "</div>",
                                "<div class='sp-clear sp-clear-display'>",
                                "</div>",
                                "<div class='sp-hue'>",
                                    "<div class='sp-slider'></div>",
                                    gradientFix,
                                "</div>",
                            "</div>",
                            "<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>",
                        "</div>",
                        "<div class='sp-input-container sp-cf'>",
                            "<input class='sp-input' type='text' spellcheck='false'  />",
                        "</div>",
                        "<div class='sp-initial sp-thumb sp-cf'></div>",
                        "<div class='sp-button-container sp-cf'>",
                            "<a class='sp-cancel' href='#'></a>",
                            "<button type='button' class='sp-choose'></button>",
                        "</div>",
                    "</div>",
                "</div>"
            ].join("");
        })();
    
        function paletteTemplate (p, color, className, opts) {
            var html = [];
            for (var i = 0; i < p.length; i++) {
                var current = p[i];
                if(current) {
                    var tiny = tinycolor(current);
                    var c = tiny.toHsl().l < 0.5 ? "sp-thumb-el sp-thumb-dark" : "sp-thumb-el sp-thumb-light";
                    c += (tinycolor.equals(color, current)) ? " sp-thumb-active" : "";
                    var formattedString = tiny.toString(opts.preferredFormat || "rgb");
                    var swatchStyle = rgbaSupport ? ("background-color:" + tiny.toRgbString()) : "filter:" + tiny.toFilter();
                    html.push('<span title="' + formattedString + '" data-color="' + tiny.toRgbString() + '" class="' + c + '"><span class="sp-thumb-inner" style="' + swatchStyle + ';"></span></span>');
                } else {
                    var cls = 'sp-clear-display';
                    html.push($('<div />')
                        .append($('<span data-color="" style="background-color:transparent;" class="' + cls + '"></span>')
                            .attr('title', opts.noColorSelectedText)
                        )
                        .html()
                    );
                }
            }
            return "<div class='sp-cf " + className + "'>" + html.join('') + "</div>";
        }
    
        function hideAll() {
            for (var i = 0; i < spectrums.length; i++) {
                if (spectrums[i]) {
                    spectrums[i].hide();
                }
            }
        }
    
        function instanceOptions(o, callbackContext) {
            var opts = $.extend({}, defaultOpts, o);
            opts.callbacks = {
                'move': bind(opts.move, callbackContext),
                'change': bind(opts.change, callbackContext),
                'show': bind(opts.show, callbackContext),
                'hide': bind(opts.hide, callbackContext),
                'beforeShow': bind(opts.beforeShow, callbackContext)
            };
    
            return opts;
        }
    
        function spectrum(element, o) {
    
            var opts = instanceOptions(o, element),
                flat = opts.flat,
                showSelectionPalette = opts.showSelectionPalette,
                localStorageKey = opts.localStorageKey,
                theme = opts.theme,
                callbacks = opts.callbacks,
                resize = throttle(reflow, 10),
                visible = false,
                isDragging = false,
                dragWidth = 0,
                dragHeight = 0,
                dragHelperHeight = 0,
                slideHeight = 0,
                slideWidth = 0,
                alphaWidth = 0,
                alphaSlideHelperWidth = 0,
                slideHelperHeight = 0,
                currentHue = 0,
                currentSaturation = 0,
                currentValue = 0,
                currentAlpha = 1,
                palette = [],
                paletteArray = [],
                paletteLookup = {},
                selectionPalette = opts.selectionPalette.slice(0),
                maxSelectionSize = opts.maxSelectionSize,
                draggingClass = "sp-dragging",
                shiftMovementDirection = null;
    
            var doc = element.ownerDocument,
                body = doc.body,
                boundElement = $(element),
                disabled = false,
                container = $(markup, doc).addClass(theme),
                pickerContainer = container.find(".sp-picker-container"),
                dragger = container.find(".sp-color"),
                dragHelper = container.find(".sp-dragger"),
                slider = container.find(".sp-hue"),
                slideHelper = container.find(".sp-slider"),
                alphaSliderInner = container.find(".sp-alpha-inner"),
                alphaSlider = container.find(".sp-alpha"),
                alphaSlideHelper = container.find(".sp-alpha-handle"),
                textInput = container.find(".sp-input"),
                paletteContainer = container.find(".sp-palette"),
                initialColorContainer = container.find(".sp-initial"),
                cancelButton = container.find(".sp-cancel"),
                clearButton = container.find(".sp-clear"),
                chooseButton = container.find(".sp-choose"),
                toggleButton = container.find(".sp-palette-toggle"),
                isInput = boundElement.is("input"),
                isInputTypeColor = isInput && boundElement.attr("type") === "color" && inputTypeColorSupport(),
                shouldReplace = isInput && !flat,
                replacer = (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]),
                offsetElement = (shouldReplace) ? replacer : boundElement,
                previewElement = replacer.find(".sp-preview-inner"),
                initialColor = opts.color || (isInput && boundElement.val()),
                colorOnShow = false,
                currentPreferredFormat = opts.preferredFormat,
                clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange,
                isEmpty = !initialColor,
                allowEmpty = opts.allowEmpty && !isInputTypeColor;
    
            function applyOptions() {
    
                if (opts.showPaletteOnly) {
                    opts.showPalette = true;
                }
    
                toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);
    
                if (opts.palette) {
                    palette = opts.palette.slice(0);
                    paletteArray = $.isArray(palette[0]) ? palette : [palette];
                    paletteLookup = {};
                    for (var i = 0; i < paletteArray.length; i++) {
                        for (var j = 0; j < paletteArray[i].length; j++) {
                            var rgb = tinycolor(paletteArray[i][j]).toRgbString();
                            paletteLookup[rgb] = true;
                        }
                    }
                }
    
                container.toggleClass("sp-flat", flat);
                container.toggleClass("sp-input-disabled", !opts.showInput);
                container.toggleClass("sp-alpha-enabled", opts.showAlpha);
                container.toggleClass("sp-clear-enabled", allowEmpty);
                container.toggleClass("sp-buttons-disabled", !opts.showButtons);
                container.toggleClass("sp-palette-buttons-disabled", !opts.togglePaletteOnly);
                container.toggleClass("sp-palette-disabled", !opts.showPalette);
                container.toggleClass("sp-palette-only", opts.showPaletteOnly);
                container.toggleClass("sp-initial-disabled", !opts.showInitial);
                container.addClass(opts.className).addClass(opts.containerClassName);
    
                reflow();
            }
    
            function initialize() {
    
                if (IE) {
                    container.find("*:not(input)").attr("unselectable", "on");
                }
    
                applyOptions();
    
                if (shouldReplace) {
                    boundElement.after(replacer).hide();
                }
    
                if (!allowEmpty) {
                    clearButton.hide();
                }
    
                if (flat) {
                    boundElement.after(container).hide();
                }
                else {
    
                    var appendTo = opts.appendTo === "parent" ? boundElement.parent() : $(opts.appendTo);
                    if (appendTo.length !== 1) {
                        appendTo = $("body");
                    }
    
                    appendTo.append(container);
                }
    
                updateSelectionPaletteFromStorage();
    
                offsetElement.on("click.spectrum touchstart.spectrum", function (e) {
                    if (!disabled) {
                        toggle();
                    }
    
                    e.stopPropagation();
    
                    if (!$(e.target).is("input")) {
                        e.preventDefault();
                    }
                });
    
                if(boundElement.is(":disabled") || (opts.disabled === true)) {
                    disable();
                }
    
                // Prevent clicks from bubbling up to document.  This would cause it to be hidden.
                container.click(stopPropagation);
    
                // Handle user typed input
                textInput.change(setFromTextInput);
                textInput.on("paste", function () {
                    setTimeout(setFromTextInput, 1);
                });
                textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });
    
                cancelButton.text(opts.cancelText);
                cancelButton.on("click.spectrum", function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                    revert();
                    hide();
                });
    
                clearButton.attr("title", opts.clearText);
                clearButton.on("click.spectrum", function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                    isEmpty = true;
                    move();
    
                    if(flat) {
                        //for the flat style, this is a change event
                        updateOriginalInput(true);
                    }
                });
    
                chooseButton.text(opts.chooseText);
                chooseButton.on("click.spectrum", function (e) {
                    e.stopPropagation();
                    e.preventDefault();
    
                    if (IE && textInput.is(":focus")) {
                        textInput.trigger('change');
                    }
    
                    if (isValid()) {
                        updateOriginalInput(true);
                        hide();
                    }
                });
    
                toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);
                toggleButton.on("click.spectrum", function (e) {
                    e.stopPropagation();
                    e.preventDefault();
    
                    opts.showPaletteOnly = !opts.showPaletteOnly;
    
                    // To make sure the Picker area is drawn on the right, next to the
                    // Palette area (and not below the palette), first move the Palette
                    // to the left to make space for the picker, plus 5px extra.
                    // The 'applyOptions' function puts the whole container back into place
                    // and takes care of the button-text and the sp-palette-only CSS class.
                    if (!opts.showPaletteOnly && !flat) {
                        container.css('left', '-=' + (pickerContainer.outerWidth(true) + 5));
                    }
                    applyOptions();
                });
    
                draggable(alphaSlider, function (dragX, dragY, e) {
                    currentAlpha = (dragX / alphaWidth);
                    isEmpty = false;
                    if (e.shiftKey) {
                        currentAlpha = Math.round(currentAlpha * 10) / 10;
                    }
    
                    move();
                }, dragStart, dragStop);
    
                draggable(slider, function (dragX, dragY) {
                    currentHue = parseFloat(dragY / slideHeight);
                    isEmpty = false;
                    if (!opts.showAlpha) {
                        currentAlpha = 1;
                    }
                    move();
                }, dragStart, dragStop);
    
                draggable(dragger, function (dragX, dragY, e) {
    
                    // shift+drag should snap the movement to either the x or y axis.
                    if (!e.shiftKey) {
                        shiftMovementDirection = null;
                    }
                    else if (!shiftMovementDirection) {
                        var oldDragX = currentSaturation * dragWidth;
                        var oldDragY = dragHeight - (currentValue * dragHeight);
                        var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);
    
                        shiftMovementDirection = furtherFromX ? "x" : "y";
                    }
    
                    var setSaturation = !shiftMovementDirection || shiftMovementDirection === "x";
                    var setValue = !shiftMovementDirection || shiftMovementDirection === "y";
    
                    if (setSaturation) {
                        currentSaturation = parseFloat(dragX / dragWidth);
                    }
                    if (setValue) {
                        currentValue = parseFloat((dragHeight - dragY) / dragHeight);
                    }
    
                    isEmpty = false;
                    if (!opts.showAlpha) {
                        currentAlpha = 1;
                    }
    
                    move();
    
                }, dragStart, dragStop);
    
                if (!!initialColor) {
                    set(initialColor);
    
                    // In case color was black - update the preview UI and set the format
                    // since the set function will not run (default color is black).
                    updateUI();
                    currentPreferredFormat = opts.preferredFormat || tinycolor(initialColor).format;
    
                    addColorToSelectionPalette(initialColor);
                }
                else {
                    updateUI();
                }
    
                if (flat) {
                    show();
                }
    
                function paletteElementClick(e) {
                    if (e.data && e.data.ignore) {
                        set($(e.target).closest(".sp-thumb-el").data("color"));
                        move();
                    }
                    else {
                        set($(e.target).closest(".sp-thumb-el").data("color"));
                        move();
    
                        // If the picker is going to close immediately, a palette selection
                        // is a change.  Otherwise, it's a move only.
                        if (opts.hideAfterPaletteSelect) {
                            updateOriginalInput(true);
                            hide();
                        } else {
                            updateOriginalInput();
                        }
                    }
    
                    return false;
                }
    
                var paletteEvent = IE ? "mousedown.spectrum" : "click.spectrum touchstart.spectrum";
                paletteContainer.on(paletteEvent, ".sp-thumb-el", paletteElementClick);
                initialColorContainer.on(paletteEvent, ".sp-thumb-el:nth-child(1)", { ignore: true }, paletteElementClick);
            }
    
            function updateSelectionPaletteFromStorage() {
    
                if (localStorageKey && window.localStorage) {
    
                    // Migrate old palettes over to new format.  May want to remove this eventually.
                    try {
                        var oldPalette = window.localStorage[localStorageKey].split(",#");
                        if (oldPalette.length > 1) {
                            delete window.localStorage[localStorageKey];
                            $.each(oldPalette, function(i, c) {
                                 addColorToSelectionPalette(c);
                            });
                        }
                    }
                    catch(e) { }
    
                    try {
                        selectionPalette = window.localStorage[localStorageKey].split(";");
                    }
                    catch (e) { }
                }
            }
    
            function addColorToSelectionPalette(color) {
                if (showSelectionPalette) {
                    var rgb = tinycolor(color).toRgbString();
                    if (!paletteLookup[rgb] && $.inArray(rgb, selectionPalette) === -1) {
                        selectionPalette.push(rgb);
                        while(selectionPalette.length > maxSelectionSize) {
                            selectionPalette.shift();
                        }
                    }
    
                    if (localStorageKey && window.localStorage) {
                        try {
                            window.localStorage[localStorageKey] = selectionPalette.join(";");
                        }
                        catch(e) { }
                    }
                }
            }
    
            function getUniqueSelectionPalette() {
                var unique = [];
                if (opts.showPalette) {
                    for (var i = 0; i < selectionPalette.length; i++) {
                        var rgb = tinycolor(selectionPalette[i]).toRgbString();
    
                        if (!paletteLookup[rgb]) {
                            unique.push(selectionPalette[i]);
                        }
                    }
                }
    
                return unique.reverse().slice(0, opts.maxSelectionSize);
            }
    
            function drawPalette() {
    
                var currentColor = get();
    
                var html = $.map(paletteArray, function (palette, i) {
                    return paletteTemplate(palette, currentColor, "sp-palette-row sp-palette-row-" + i, opts);
                });
    
                updateSelectionPaletteFromStorage();
    
                if (selectionPalette) {
                    html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, "sp-palette-row sp-palette-row-selection", opts));
                }
    
                paletteContainer.html(html.join(""));
            }
    
            function drawInitial() {
                if (opts.showInitial) {
                    var initial = colorOnShow;
                    var current = get();
                    initialColorContainer.html(paletteTemplate([initial, current], current, "sp-palette-row-initial", opts));
                }
            }
    
            function dragStart() {
                if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {
                    reflow();
                }
                isDragging = true;
                container.addClass(draggingClass);
                shiftMovementDirection = null;
                boundElement.trigger('dragstart.spectrum', [ get() ]);
            }
    
            function dragStop() {
                isDragging = false;
                container.removeClass(draggingClass);
                boundElement.trigger('dragstop.spectrum', [ get() ]);
            }
    
            function setFromTextInput() {
    
                var value = textInput.val();
    
                if ((value === null || value === "") && allowEmpty) {
                    set(null);
                    move();
                    updateOriginalInput();
                }
                else {
                    var tiny = tinycolor(value);
                    if (tiny.isValid()) {
                        set(tiny);
                        move();
                        updateOriginalInput();
                    }
                    else {
                        textInput.addClass("sp-validation-error");
                    }
                }
            }
    
            function toggle() {
                if (visible) {
                    hide();
                }
                else {
                    show();
                }
            }
    
            function show() {
                var event = $.Event('beforeShow.spectrum');
    
                if (visible) {
                    reflow();
                    return;
                }
    
                boundElement.trigger(event, [ get() ]);
    
                if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {
                    return;
                }
    
                hideAll();
                visible = true;
    
                $(doc).on("keydown.spectrum", onkeydown);
                $(doc).on("click.spectrum", clickout);
                $(window).on("resize.spectrum", resize);
                replacer.addClass("sp-active");
                container.removeClass("sp-hidden");
    
                reflow();
                updateUI();
    
                colorOnShow = get();
    
                drawInitial();
                callbacks.show(colorOnShow);
                boundElement.trigger('show.spectrum', [ colorOnShow ]);
            }
    
            function onkeydown(e) {
                // Close on ESC
                if (e.keyCode === 27) {
                    hide();
                }
            }
    
            function clickout(e) {
                // Return on right click.
                if (e.button == 2) { return; }
    
                // If a drag event was happening during the mouseup, don't hide
                // on click.
                if (isDragging) { return; }
    
                if (clickoutFiresChange) {
                    updateOriginalInput(true);
                }
                else {
                    revert();
                }
                hide();
            }
    
            function hide() {
                // Return if hiding is unnecessary
                if (!visible || flat) { return; }
                visible = false;
    
                $(doc).off("keydown.spectrum", onkeydown);
                $(doc).off("click.spectrum", clickout);
                $(window).off("resize.spectrum", resize);
    
                replacer.removeClass("sp-active");
                container.addClass("sp-hidden");
    
                callbacks.hide(get());
                boundElement.trigger('hide.spectrum', [ get() ]);
            }
    
            function revert() {
                set(colorOnShow, true);
                updateOriginalInput(true);
            }
    
            function set(color, ignoreFormatChange) {
                if (tinycolor.equals(color, get())) {
                    // Update UI just in case a validation error needs
                    // to be cleared.
                    updateUI();
                    return;
                }
    
                var newColor, newHsv;
                if (!color && allowEmpty) {
                    isEmpty = true;
                } else {
                    isEmpty = false;
                    newColor = tinycolor(color);
                    newHsv = newColor.toHsv();
    
                    currentHue = (newHsv.h % 360) / 360;
                    currentSaturation = newHsv.s;
                    currentValue = newHsv.v;
                    currentAlpha = newHsv.a;
                }
                updateUI();
    
                if (newColor && newColor.isValid() && !ignoreFormatChange) {
                    currentPreferredFormat = opts.preferredFormat || newColor.getFormat();
                }
            }
    
            function get(opts) {
                opts = opts || { };
    
                if (allowEmpty && isEmpty) {
                    return null;
                }
    
                return tinycolor.fromRatio({
                    h: currentHue,
                    s: currentSaturation,
                    v: currentValue,
                    a: Math.round(currentAlpha * 1000) / 1000
                }, { format: opts.format || currentPreferredFormat });
            }
    
            function isValid() {
                return !textInput.hasClass("sp-validation-error");
            }
    
            function move() {
                updateUI();
    
                callbacks.move(get());
                boundElement.trigger('move.spectrum', [ get() ]);
            }
    
            function updateUI() {
    
                textInput.removeClass("sp-validation-error");
    
                updateHelperLocations();
    
                // Update dragger background color (gradients take care of saturation and value).
                var flatColor = tinycolor.fromRatio({ h: currentHue, s: 1, v: 1 });
                dragger.css("background-color", flatColor.toHexString());
    
                // Get a format that alpha will be included in (hex and names ignore alpha)
                var format = currentPreferredFormat;
                if (currentAlpha < 1 && !(currentAlpha === 0 && format === "name")) {
                    if (format === "hex" || format === "hex3" || format === "hex6" || format === "name") {
                        format = "rgb";
                    }
                }
    
                var realColor = get({ format: format }),
                    displayColor = '';
    
                 //reset background info for preview element
                previewElement.removeClass("sp-clear-display");
                previewElement.css('background-color', 'transparent');
    
                if (!realColor && allowEmpty) {
                    // Update the replaced elements background with icon indicating no color selection
                    previewElement.addClass("sp-clear-display");
                }
                else {
                    var realHex = realColor.toHexString(),
                        realRgb = realColor.toRgbString();
    
                    // Update the replaced elements background color (with actual selected color)
                    if (rgbaSupport || realColor.alpha === 1) {
                        previewElement.css("background-color", realRgb);
                    }
                    else {
                        previewElement.css("background-color", "transparent");
                        previewElement.css("filter", realColor.toFilter());
                    }
    
                    if (opts.showAlpha) {
                        var rgb = realColor.toRgb();
                        rgb.a = 0;
                        var realAlpha = tinycolor(rgb).toRgbString();
                        var gradient = "linear-gradient(left, " + realAlpha + ", " + realHex + ")";
    
                        if (IE) {
                            alphaSliderInner.css("filter", tinycolor(realAlpha).toFilter({ gradientType: 1 }, realHex));
                        }
                        else {
                            alphaSliderInner.css("background", "-webkit-" + gradient);
                            alphaSliderInner.css("background", "-moz-" + gradient);
                            alphaSliderInner.css("background", "-ms-" + gradient);
                            // Use current syntax gradient on unprefixed property.
                            alphaSliderInner.css("background",
                                "linear-gradient(to right, " + realAlpha + ", " + realHex + ")");
                        }
                    }
    
                    displayColor = realColor.toString(format);
                }
    
                // Update the text entry input as it changes happen
                if (opts.showInput) {
                    textInput.val(displayColor);
                }
    
                if (opts.showPalette) {
                    drawPalette();
                }
    
                drawInitial();
            }
    
            function updateHelperLocations() {
                var s = currentSaturation;
                var v = currentValue;
    
                if(allowEmpty && isEmpty) {
                    //if selected color is empty, hide the helpers
                    alphaSlideHelper.hide();
                    slideHelper.hide();
                    dragHelper.hide();
                }
                else {
                    //make sure helpers are visible
                    alphaSlideHelper.show();
                    slideHelper.show();
                    dragHelper.show();
    
                    // Where to show the little circle in that displays your current selected color
                    var dragX = s * dragWidth;
                    var dragY = dragHeight - (v * dragHeight);
                    dragX = Math.max(
                        -dragHelperHeight,
                        Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight)
                    );
                    dragY = Math.max(
                        -dragHelperHeight,
                        Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight)
                    );
                    dragHelper.css({
                        "top": dragY + "px",
                        "left": dragX + "px"
                    });
    
                    var alphaX = currentAlpha * alphaWidth;
                    alphaSlideHelper.css({
                        "left": (alphaX - (alphaSlideHelperWidth / 2)) + "px"
                    });
    
                    // Where to show the bar that displays your current selected hue
                    var slideY = (currentHue) * slideHeight;
                    slideHelper.css({
                        "top": (slideY - slideHelperHeight) + "px"
                    });
                }
            }
    
            function updateOriginalInput(fireCallback) {
                var color = get(),
                    displayColor = '',
                    hasChanged = !tinycolor.equals(color, colorOnShow);
    
                if (color) {
                    displayColor = color.toString(currentPreferredFormat);
                    // Update the selection palette with the current color
                    addColorToSelectionPalette(color);
                }
    
                if (isInput) {
                    boundElement.val(displayColor);
                }
    
                if (fireCallback && hasChanged) {
                    callbacks.change(color);
                    boundElement.trigger('change', [ color ]);
                }
            }
    
            function reflow() {
                if (!visible) {
                    return; // Calculations would be useless and wouldn't be reliable anyways
                }
                dragWidth = dragger.width();
                dragHeight = dragger.height();
                dragHelperHeight = dragHelper.height();
                slideWidth = slider.width();
                slideHeight = slider.height();
                slideHelperHeight = slideHelper.height();
                alphaWidth = alphaSlider.width();
                alphaSlideHelperWidth = alphaSlideHelper.width();
    
                if (!flat) {
                    container.css("position", "absolute");
                    if (opts.offset) {
                        container.offset(opts.offset);
                    } else {
                        container.offset(getOffset(container, offsetElement));
                    }
                }
    
                updateHelperLocations();
    
                if (opts.showPalette) {
                    drawPalette();
                }
    
                boundElement.trigger('reflow.spectrum');
            }
    
            function destroy() {
                boundElement.show();
                offsetElement.off("click.spectrum touchstart.spectrum");
                container.remove();
                replacer.remove();
                spectrums[spect.id] = null;
            }
    
            function option(optionName, optionValue) {
                if (optionName === undefined) {
                    return $.extend({}, opts);
                }
                if (optionValue === undefined) {
                    return opts[optionName];
                }
    
                opts[optionName] = optionValue;
    
                if (optionName === "preferredFormat") {
                    currentPreferredFormat = opts.preferredFormat;
                }
                applyOptions();
            }
    
            function enable() {
                disabled = false;
                boundElement.attr("disabled", false);
                offsetElement.removeClass("sp-disabled");
            }
    
            function disable() {
                hide();
                disabled = true;
                boundElement.attr("disabled", true);
                offsetElement.addClass("sp-disabled");
            }
    
            function setOffset(coord) {
                opts.offset = coord;
                reflow();
            }
    
            initialize();
    
            var spect = {
                show: show,
                hide: hide,
                toggle: toggle,
                reflow: reflow,
                option: option,
                enable: enable,
                disable: disable,
                offset: setOffset,
                set: function (c) {
                    set(c);
                    updateOriginalInput();
                },
                get: get,
                destroy: destroy,
                container: container
            };
    
            spect.id = spectrums.push(spect) - 1;
    
            return spect;
        }
    
        /**
        * checkOffset - get the offset below/above and left/right element depending on screen position
        * Thanks https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.datepicker.js
        */
        function getOffset(picker, input) {
            var extraY = 0;
            var dpWidth = picker.outerWidth();
            var dpHeight = picker.outerHeight();
            var inputHeight = input.outerHeight();
            var doc = picker[0].ownerDocument;
            var docElem = doc.documentElement;
            var viewWidth = docElem.clientWidth + $(doc).scrollLeft();
            var viewHeight = docElem.clientHeight + $(doc).scrollTop();
            var offset = input.offset();
            var offsetLeft = offset.left;
            var offsetTop = offset.top;
    
            offsetTop += inputHeight;
    
            offsetLeft -=
                Math.min(offsetLeft, (offsetLeft + dpWidth > viewWidth && viewWidth > dpWidth) ?
                Math.abs(offsetLeft + dpWidth - viewWidth) : 0);
    
            offsetTop -=
                Math.min(offsetTop, ((offsetTop + dpHeight > viewHeight && viewHeight > dpHeight) ?
                Math.abs(dpHeight + inputHeight - extraY) : extraY));
    
            return {
                top: offsetTop,
                bottom: offset.bottom,
                left: offsetLeft,
                right: offset.right,
                width: offset.width,
                height: offset.height
            };
        }
    
        /**
        * noop - do nothing
        */
        function noop() {
    
        }
    
        /**
        * stopPropagation - makes the code only doing this a little easier to read in line
        */
        function stopPropagation(e) {
            e.stopPropagation();
        }
    
        /**
        * Create a function bound to a given object
        * Thanks to underscore.js
        */
        function bind(func, obj) {
            var slice = Array.prototype.slice;
            var args = slice.call(arguments, 2);
            return function () {
                return func.apply(obj, args.concat(slice.call(arguments)));
            };
        }
    
        /**
        * Lightweight drag helper.  Handles containment within the element, so that
        * when dragging, the x is within [0,element.width] and y is within [0,element.height]
        */
        function draggable(element, onmove, onstart, onstop) {
            onmove = onmove || function () { };
            onstart = onstart || function () { };
            onstop = onstop || function () { };
            var doc = document;
            var dragging = false;
            var offset = {};
            var maxHeight = 0;
            var maxWidth = 0;
            var hasTouch = ('ontouchstart' in window);
    
            var duringDragEvents = {};
            duringDragEvents["selectstart"] = prevent;
            duringDragEvents["dragstart"] = prevent;
            duringDragEvents["touchmove mousemove"] = move;
            duringDragEvents["touchend mouseup"] = stop;
    
            function prevent(e) {
                if (e.stopPropagation) {
                    e.stopPropagation();
                }
                if (e.preventDefault) {
                    e.preventDefault();
                }
                e.returnValue = false;
            }
    
            function move(e) {
                if (dragging) {
                    // Mouseup happened outside of window
                    if (IE && doc.documentMode < 9 && !e.button) {
                        return stop();
                    }
    
                    var t0 = e.originalEvent && e.originalEvent.touches && e.originalEvent.touches[0];
                    var pageX = t0 && t0.pageX || e.pageX;
                    var pageY = t0 && t0.pageY || e.pageY;
    
                    var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));
                    var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));
    
                    if (hasTouch) {
                        // Stop scrolling in iOS
                        prevent(e);
                    }
    
                    onmove.apply(element, [dragX, dragY, e]);
                }
            }
    
            function start(e) {
                var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);
    
                if (!rightclick && !dragging) {
                    if (onstart.apply(element, arguments) !== false) {
                        dragging = true;
                        maxHeight = $(element).height();
                        maxWidth = $(element).width();
                        offset = $(element).offset();
    
                        $(doc).on(duringDragEvents);
                        $(doc.body).addClass("sp-dragging");
    
                        move(e);
    
                        prevent(e);
                    }
                }
            }
    
            function stop() {
                if (dragging) {
                    $(doc).off(duringDragEvents);
                    $(doc.body).removeClass("sp-dragging");
    
                    // Wait a tick before notifying observers to allow the click event
                    // to fire in Chrome.
                    setTimeout(function() {
                        onstop.apply(element, arguments);
                    }, 0);
                }
                dragging = false;
            }
    
            $(element).on("touchstart mousedown", start);
        }
    
        function throttle(func, wait, debounce) {
            var timeout;
            return function () {
                var context = this, args = arguments;
                var throttler = function () {
                    timeout = null;
                    func.apply(context, args);
                };
                if (debounce) clearTimeout(timeout);
                if (debounce || !timeout) timeout = setTimeout(throttler, wait);
            };
        }
    
        function inputTypeColorSupport() {
            return $.fn.spectrum.inputTypeColorSupport();
        }
    
        /**
        * Define a jQuery plugin
        */
        var dataID = "spectrum.id";
        $.fn.spectrum = function (opts, extra) {
    
            if (typeof opts == "string") {
    
                var returnValue = this;
                var args = Array.prototype.slice.call( arguments, 1 );
    
                this.each(function () {
                    var spect = spectrums[$(this).data(dataID)];
                    if (spect) {
                        var method = spect[opts];
                        if (!method) {
                            throw new Error( "Spectrum: no such method: '" + opts + "'" );
                        }
    
                        if (opts == "get") {
                            returnValue = spect.get();
                        }
                        else if (opts == "container") {
                            returnValue = spect.container;
                        }
                        else if (opts == "option") {
                            returnValue = spect.option.apply(spect, args);
                        }
                        else if (opts == "destroy") {
                            spect.destroy();
                            $(this).removeData(dataID);
                        }
                        else {
                            method.apply(spect, args);
                        }
                    }
                });
    
                return returnValue;
            }
    
            // Initializing a new instance of spectrum
            return this.spectrum("destroy").each(function () {
                var options = $.extend({}, $(this).data(), opts);
                var spect = spectrum(this, options);
                $(this).data(dataID, spect.id);
            });
        };
    
        $.fn.spectrum.load = true;
        $.fn.spectrum.loadOpts = {};
        $.fn.spectrum.draggable = draggable;
        $.fn.spectrum.defaults = defaultOpts;
        $.fn.spectrum.inputTypeColorSupport = function inputTypeColorSupport() {
            if (typeof inputTypeColorSupport._cachedResult === "undefined") {
                var colorInput = $("<input type='color'/>")[0]; // if color element is supported, value will default to not null
                inputTypeColorSupport._cachedResult = colorInput.type === "color" && colorInput.value !== "";
            }
            return inputTypeColorSupport._cachedResult;
        };
    
        $.spectrum = { };
        $.spectrum.localization = { };
        $.spectrum.palettes = { };
    
        $.fn.spectrum.processNativeColorInputs = function () {
            var colorInputs = $("input[type=color]");
            if (colorInputs.length && !inputTypeColorSupport()) {
                colorInputs.spectrum({
                    preferredFormat: "hex6"
                });
            }
        };
    
        // TinyColor v1.1.2
        // https://github.com/bgrins/TinyColor
        // Brian Grinstead, MIT License
    
        (function() {
    
        var trimLeft = /^[\s,#]+/,
            trimRight = /\s+$/,
            tinyCounter = 0,
            math = Math,
            mathRound = math.round,
            mathMin = math.min,
            mathMax = math.max,
            mathRandom = math.random;
    
        var tinycolor = function(color, opts) {
    
            color = (color) ? color : '';
            opts = opts || { };
    
            // If input is already a tinycolor, return itself
            if (color instanceof tinycolor) {
               return color;
            }
            // If we are called as a function, call using new instead
            if (!(this instanceof tinycolor)) {
                return new tinycolor(color, opts);
            }
    
            var rgb = inputToRGB(color);
            this._originalInput = color;
            this._r = rgb.r;
            this._g = rgb.g;
            this._b = rgb.b;
            this._a = rgb.a;
            this._roundA = mathRound(1000 * this._a) / 1000;
            this._format = opts.format || rgb.format;
            this._gradientType = opts.gradientType;
    
            // Don't let the range of [0,255] come back in [0,1].
            // Potentially lose a little bit of precision here, but will fix issues where
            // .5 gets interpreted as half of the total, instead of half of 1
            // If it was supposed to be 128, this was already taken care of by `inputToRgb`
            if (this._r < 1) { this._r = mathRound(this._r); }
            if (this._g < 1) { this._g = mathRound(this._g); }
            if (this._b < 1) { this._b = mathRound(this._b); }
    
            this._ok = rgb.ok;
            this._tc_id = tinyCounter++;
        };
    
        tinycolor.prototype = {
            isDark: function() {
                return this.getBrightness() < 128;
            },
            isLight: function() {
                return !this.isDark();
            },
            isValid: function() {
                return this._ok;
            },
            getOriginalInput: function() {
              return this._originalInput;
            },
            getFormat: function() {
                return this._format;
            },
            getAlpha: function() {
                return this._a;
            },
            getBrightness: function() {
                var rgb = this.toRgb();
                return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
            },
            setAlpha: function(value) {
                this._a = boundAlpha(value);
                this._roundA = mathRound(1000 * this._a) / 1000;
                return this;
            },
            toHsv: function() {
                var hsv = rgbToHsv(this._r, this._g, this._b);
                return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
            },
            toHsvString: function() {
                var hsv = rgbToHsv(this._r, this._g, this._b);
                var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
                return (this._a == 1) ?
                  "hsv("  + h + ", " + s + "%, " + v + "%)" :
                  "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";
            },
            toHsl: function() {
                var hsl = rgbToHsl(this._r, this._g, this._b);
                return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
            },
            toHslString: function() {
                var hsl = rgbToHsl(this._r, this._g, this._b);
                var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
                return (this._a == 1) ?
                  "hsl("  + h + ", " + s + "%, " + l + "%)" :
                  "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";
            },
            toHex: function(allow3Char) {
                return rgbToHex(this._r, this._g, this._b, allow3Char);
            },
            toHexString: function(allow3Char) {
                return '#' + this.toHex(allow3Char);
            },
            toHex8: function() {
                return rgbaToHex(this._r, this._g, this._b, this._a);
            },
            toHex8String: function() {
                return '#' + this.toHex8();
            },
            toRgb: function() {
                return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
            },
            toRgbString: function() {
                return (this._a == 1) ?
                  "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
                  "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
            },
            toPercentageRgb: function() {
                return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
            },
            toPercentageRgbString: function() {
                return (this._a == 1) ?
                  "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
                  "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
            },
            toName: function() {
                if (this._a === 0) {
                    return "transparent";
                }
    
                if (this._a < 1) {
                    return false;
                }
    
                return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
            },
            toFilter: function(secondColor) {
                var hex8String = '#' + rgbaToHex(this._r, this._g, this._b, this._a);
                var secondHex8String = hex8String;
                var gradientType = this._gradientType ? "GradientType = 1, " : "";
    
                if (secondColor) {
                    var s = tinycolor(secondColor);
                    secondHex8String = s.toHex8String();
                }
    
                return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
            },
            toString: function(format) {
                var formatSet = !!format;
                format = format || this._format;
    
                var formattedString = false;
                var hasAlpha = this._a < 1 && this._a >= 0;
                var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "name");
    
                if (needsAlphaFormat) {
                    // Special case for "transparent", all other non-alpha formats
                    // will return rgba when there is transparency.
                    if (format === "name" && this._a === 0) {
                        return this.toName();
                    }
                    return this.toRgbString();
                }
                if (format === "rgb") {
                    formattedString = this.toRgbString();
                }
                if (format === "prgb") {
                    formattedString = this.toPercentageRgbString();
                }
                if (format === "hex" || format === "hex6") {
                    formattedString = this.toHexString();
                }
                if (format === "hex3") {
                    formattedString = this.toHexString(true);
                }
                if (format === "hex8") {
                    formattedString = this.toHex8String();
                }
                if (format === "name") {
                    formattedString = this.toName();
                }
                if (format === "hsl") {
                    formattedString = this.toHslString();
                }
                if (format === "hsv") {
                    formattedString = this.toHsvString();
                }
    
                return formattedString || this.toHexString();
            },
    
            _applyModification: function(fn, args) {
                var color = fn.apply(null, [this].concat([].slice.call(args)));
                this._r = color._r;
                this._g = color._g;
                this._b = color._b;
                this.setAlpha(color._a);
                return this;
            },
            lighten: function() {
                return this._applyModification(lighten, arguments);
            },
            brighten: function() {
                return this._applyModification(brighten, arguments);
            },
            darken: function() {
                return this._applyModification(darken, arguments);
            },
            desaturate: function() {
                return this._applyModification(desaturate, arguments);
            },
            saturate: function() {
                return this._applyModification(saturate, arguments);
            },
            greyscale: function() {
                return this._applyModification(greyscale, arguments);
            },
            spin: function() {
                return this._applyModification(spin, arguments);
            },
    
            _applyCombination: function(fn, args) {
                return fn.apply(null, [this].concat([].slice.call(args)));
            },
            analogous: function() {
                return this._applyCombination(analogous, arguments);
            },
            complement: function() {
                return this._applyCombination(complement, arguments);
            },
            monochromatic: function() {
                return this._applyCombination(monochromatic, arguments);
            },
            splitcomplement: function() {
                return this._applyCombination(splitcomplement, arguments);
            },
            triad: function() {
                return this._applyCombination(triad, arguments);
            },
            tetrad: function() {
                return this._applyCombination(tetrad, arguments);
            }
        };
    
        // If input is an object, force 1 into "1.0" to handle ratios properly
        // String input requires "1.0" as input, so 1 will be treated as 1
        tinycolor.fromRatio = function(color, opts) {
            if (typeof color == "object") {
                var newColor = {};
                for (var i in color) {
                    if (color.hasOwnProperty(i)) {
                        if (i === "a") {
                            newColor[i] = color[i];
                        }
                        else {
                            newColor[i] = convertToPercentage(color[i]);
                        }
                    }
                }
                color = newColor;
            }
    
            return tinycolor(color, opts);
        };
    
        // Given a string or object, convert that input to RGB
        // Possible string inputs:
        //
        //     "red"
        //     "#f00" or "f00"
        //     "#ff0000" or "ff0000"
        //     "#ff000000" or "ff000000"
        //     "rgb 255 0 0" or "rgb (255, 0, 0)"
        //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
        //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
        //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
        //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
        //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
        //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
        //
        function inputToRGB(color) {
    
            var rgb = { r: 0, g: 0, b: 0 };
            var a = 1;
            var ok = false;
            var format = false;
    
            if (typeof color == "string") {
                color = stringInputToObject(color);
            }
    
            if (typeof color == "object") {
                if (color.hasOwnProperty("r") && color.hasOwnProperty("g") && color.hasOwnProperty("b")) {
                    rgb = rgbToRgb(color.r, color.g, color.b);
                    ok = true;
                    format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
                }
                else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("v")) {
                    color.s = convertToPercentage(color.s);
                    color.v = convertToPercentage(color.v);
                    rgb = hsvToRgb(color.h, color.s, color.v);
                    ok = true;
                    format = "hsv";
                }
                else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("l")) {
                    color.s = convertToPercentage(color.s);
                    color.l = convertToPercentage(color.l);
                    rgb = hslToRgb(color.h, color.s, color.l);
                    ok = true;
                    format = "hsl";
                }
    
                if (color.hasOwnProperty("a")) {
                    a = color.a;
                }
            }
    
            a = boundAlpha(a);
    
            return {
                ok: ok,
                format: color.format || format,
                r: mathMin(255, mathMax(rgb.r, 0)),
                g: mathMin(255, mathMax(rgb.g, 0)),
                b: mathMin(255, mathMax(rgb.b, 0)),
                a: a
            };
        }
    
    
        // Conversion Functions
        // --------------------
    
        // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
        // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
    
        // `rgbToRgb`
        // Handle bounds / percentage checking to conform to CSS color spec
        // <http://www.w3.org/TR/css3-color/>
        // *Assumes:* r, g, b in [0, 255] or [0, 1]
        // *Returns:* { r, g, b } in [0, 255]
        function rgbToRgb(r, g, b){
            return {
                r: bound01(r, 255) * 255,
                g: bound01(g, 255) * 255,
                b: bound01(b, 255) * 255
            };
        }
    
        // `rgbToHsl`
        // Converts an RGB color value to HSL.
        // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
        // *Returns:* { h, s, l } in [0,1]
        function rgbToHsl(r, g, b) {
    
            r = bound01(r, 255);
            g = bound01(g, 255);
            b = bound01(b, 255);
    
            var max = mathMax(r, g, b), min = mathMin(r, g, b);
            var h, s, l = (max + min) / 2;
    
            if(max == min) {
                h = s = 0; // achromatic
            }
            else {
                var d = max - min;
                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                switch(max) {
                    case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                    case g: h = (b - r) / d + 2; break;
                    case b: h = (r - g) / d + 4; break;
                }
    
                h /= 6;
            }
    
            return { h: h, s: s, l: l };
        }
    
        // `hslToRgb`
        // Converts an HSL color value to RGB.
        // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
        // *Returns:* { r, g, b } in the set [0, 255]
        function hslToRgb(h, s, l) {
            var r, g, b;
    
            h = bound01(h, 360);
            s = bound01(s, 100);
            l = bound01(l, 100);
    
            function hue2rgb(p, q, t) {
                if(t < 0) t += 1;
                if(t > 1) t -= 1;
                if(t < 1/6) return p + (q - p) * 6 * t;
                if(t < 1/2) return q;
                if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
                return p;
            }
    
            if(s === 0) {
                r = g = b = l; // achromatic
            }
            else {
                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                var p = 2 * l - q;
                r = hue2rgb(p, q, h + 1/3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1/3);
            }
    
            return { r: r * 255, g: g * 255, b: b * 255 };
        }
    
        // `rgbToHsv`
        // Converts an RGB color value to HSV
        // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
        // *Returns:* { h, s, v } in [0,1]
        function rgbToHsv(r, g, b) {
    
            r = bound01(r, 255);
            g = bound01(g, 255);
            b = bound01(b, 255);
    
            var max = mathMax(r, g, b), min = mathMin(r, g, b);
            var h, s, v = max;
    
            var d = max - min;
            s = max === 0 ? 0 : d / max;
    
            if(max == min) {
                h = 0; // achromatic
            }
            else {
                switch(max) {
                    case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                    case g: h = (b - r) / d + 2; break;
                    case b: h = (r - g) / d + 4; break;
                }
                h /= 6;
            }
            return { h: h, s: s, v: v };
        }
    
        // `hsvToRgb`
        // Converts an HSV color value to RGB.
        // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
        // *Returns:* { r, g, b } in the set [0, 255]
         function hsvToRgb(h, s, v) {
    
            h = bound01(h, 360) * 6;
            s = bound01(s, 100);
            v = bound01(v, 100);
    
            var i = math.floor(h),
                f = h - i,
                p = v * (1 - s),
                q = v * (1 - f * s),
                t = v * (1 - (1 - f) * s),
                mod = i % 6,
                r = [v, q, p, p, t, v][mod],
                g = [t, v, v, q, p, p][mod],
                b = [p, p, t, v, v, q][mod];
    
            return { r: r * 255, g: g * 255, b: b * 255 };
        }
    
        // `rgbToHex`
        // Converts an RGB color to hex
        // Assumes r, g, and b are contained in the set [0, 255]
        // Returns a 3 or 6 character hex
        function rgbToHex(r, g, b, allow3Char) {
    
            var hex = [
                pad2(mathRound(r).toString(16)),
                pad2(mathRound(g).toString(16)),
                pad2(mathRound(b).toString(16))
            ];
    
            // Return a 3 character hex if possible
            if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
                return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
            }
    
            return hex.join("");
        }
            // `rgbaToHex`
            // Converts an RGBA color plus alpha transparency to hex
            // Assumes r, g, b and a are contained in the set [0, 255]
            // Returns an 8 character hex
            function rgbaToHex(r, g, b, a) {
    
                var hex = [
                    pad2(convertDecimalToHex(a)),
                    pad2(mathRound(r).toString(16)),
                    pad2(mathRound(g).toString(16)),
                    pad2(mathRound(b).toString(16))
                ];
    
                return hex.join("");
            }
    
        // `equals`
        // Can be called with any tinycolor input
        tinycolor.equals = function (color1, color2) {
            if (!color1 || !color2) { return false; }
            return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
        };
        tinycolor.random = function() {
            return tinycolor.fromRatio({
                r: mathRandom(),
                g: mathRandom(),
                b: mathRandom()
            });
        };
    
    
        // Modification Functions
        // ----------------------
        // Thanks to less.js for some of the basics here
        // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>
    
        function desaturate(color, amount) {
            amount = (amount === 0) ? 0 : (amount || 10);
            var hsl = tinycolor(color).toHsl();
            hsl.s -= amount / 100;
            hsl.s = clamp01(hsl.s);
            return tinycolor(hsl);
        }
    
        function saturate(color, amount) {
            amount = (amount === 0) ? 0 : (amount || 10);
            var hsl = tinycolor(color).toHsl();
            hsl.s += amount / 100;
            hsl.s = clamp01(hsl.s);
            return tinycolor(hsl);
        }
    
        function greyscale(color) {
            return tinycolor(color).desaturate(100);
        }
    
        function lighten (color, amount) {
            amount = (amount === 0) ? 0 : (amount || 10);
            var hsl = tinycolor(color).toHsl();
            hsl.l += amount / 100;
            hsl.l = clamp01(hsl.l);
            return tinycolor(hsl);
        }
    
        function brighten(color, amount) {
            amount = (amount === 0) ? 0 : (amount || 10);
            var rgb = tinycolor(color).toRgb();
            rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));
            rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));
            rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));
            return tinycolor(rgb);
        }
    
        function darken (color, amount) {
            amount = (amount === 0) ? 0 : (amount || 10);
            var hsl = tinycolor(color).toHsl();
            hsl.l -= amount / 100;
            hsl.l = clamp01(hsl.l);
            return tinycolor(hsl);
        }
    
        // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
        // Values outside of this range will be wrapped into this range.
        function spin(color, amount) {
            var hsl = tinycolor(color).toHsl();
            var hue = (mathRound(hsl.h) + amount) % 360;
            hsl.h = hue < 0 ? 360 + hue : hue;
            return tinycolor(hsl);
        }
    
        // Combination Functions
        // ---------------------
        // Thanks to jQuery xColor for some of the ideas behind these
        // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>
    
        function complement(color) {
            var hsl = tinycolor(color).toHsl();
            hsl.h = (hsl.h + 180) % 360;
            return tinycolor(hsl);
        }
    
        function triad(color) {
            var hsl = tinycolor(color).toHsl();
            var h = hsl.h;
            return [
                tinycolor(color),
                tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
                tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
            ];
        }
    
        function tetrad(color) {
            var hsl = tinycolor(color).toHsl();
            var h = hsl.h;
            return [
                tinycolor(color),
                tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
                tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
                tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
            ];
        }
    
        function splitcomplement(color) {
            var hsl = tinycolor(color).toHsl();
            var h = hsl.h;
            return [
                tinycolor(color),
                tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
                tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
            ];
        }
    
        function analogous(color, results, slices) {
            results = results || 6;
            slices = slices || 30;
    
            var hsl = tinycolor(color).toHsl();
            var part = 360 / slices;
            var ret = [tinycolor(color)];
    
            for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
                hsl.h = (hsl.h + part) % 360;
                ret.push(tinycolor(hsl));
            }
            return ret;
        }
    
        function monochromatic(color, results) {
            results = results || 6;
            var hsv = tinycolor(color).toHsv();
            var h = hsv.h, s = hsv.s, v = hsv.v;
            var ret = [];
            var modification = 1 / results;
    
            while (results--) {
                ret.push(tinycolor({ h: h, s: s, v: v}));
                v = (v + modification) % 1;
            }
    
            return ret;
        }
    
        // Utility Functions
        // ---------------------
    
        tinycolor.mix = function(color1, color2, amount) {
            amount = (amount === 0) ? 0 : (amount || 50);
    
            var rgb1 = tinycolor(color1).toRgb();
            var rgb2 = tinycolor(color2).toRgb();
    
            var p = amount / 100;
            var w = p * 2 - 1;
            var a = rgb2.a - rgb1.a;
    
            var w1;
    
            if (w * a == -1) {
                w1 = w;
            } else {
                w1 = (w + a) / (1 + w * a);
            }
    
            w1 = (w1 + 1) / 2;
    
            var w2 = 1 - w1;
    
            var rgba = {
                r: rgb2.r * w1 + rgb1.r * w2,
                g: rgb2.g * w1 + rgb1.g * w2,
                b: rgb2.b * w1 + rgb1.b * w2,
                a: rgb2.a * p  + rgb1.a * (1 - p)
            };
    
            return tinycolor(rgba);
        };
    
    
        // Readability Functions
        // ---------------------
        // <http://www.w3.org/TR/AERT#color-contrast>
    
        // `readability`
        // Analyze the 2 colors and returns an object with the following properties:
        //    `brightness`: difference in brightness between the two colors
        //    `color`: difference in color/hue between the two colors
        tinycolor.readability = function(color1, color2) {
            var c1 = tinycolor(color1);
            var c2 = tinycolor(color2);
            var rgb1 = c1.toRgb();
            var rgb2 = c2.toRgb();
            var brightnessA = c1.getBrightness();
            var brightnessB = c2.getBrightness();
            var colorDiff = (
                Math.max(rgb1.r, rgb2.r) - Math.min(rgb1.r, rgb2.r) +
                Math.max(rgb1.g, rgb2.g) - Math.min(rgb1.g, rgb2.g) +
                Math.max(rgb1.b, rgb2.b) - Math.min(rgb1.b, rgb2.b)
            );
    
            return {
                brightness: Math.abs(brightnessA - brightnessB),
                color: colorDiff
            };
        };
    
        // `readable`
        // http://www.w3.org/TR/AERT#color-contrast
        // Ensure that foreground and background color combinations provide sufficient contrast.
        // *Example*
        //    tinycolor.isReadable("#000", "#111") => false
        tinycolor.isReadable = function(color1, color2) {
            var readability = tinycolor.readability(color1, color2);
            return readability.brightness > 125 && readability.color > 500;
        };
    
        // `mostReadable`
        // Given a base color and a list of possible foreground or background
        // colors for that base, returns the most readable color.
        // *Example*
        //    tinycolor.mostReadable("#123", ["#fff", "#000"]) => "#000"
        tinycolor.mostReadable = function(baseColor, colorList) {
            var bestColor = null;
            var bestScore = 0;
            var bestIsReadable = false;
            for (var i=0; i < colorList.length; i++) {
    
                // We normalize both around the "acceptable" breaking point,
                // but rank brightness constrast higher than hue.
    
                var readability = tinycolor.readability(baseColor, colorList[i]);
                var readable = readability.brightness > 125 && readability.color > 500;
                var score = 3 * (readability.brightness / 125) + (readability.color / 500);
    
                if ((readable && ! bestIsReadable) ||
                    (readable && bestIsReadable && score > bestScore) ||
                    ((! readable) && (! bestIsReadable) && score > bestScore)) {
                    bestIsReadable = readable;
                    bestScore = score;
                    bestColor = tinycolor(colorList[i]);
                }
            }
            return bestColor;
        };
    
    
        // Big List of Colors
        // ------------------
        // <http://www.w3.org/TR/css3-color/#svg-color>
        var names = tinycolor.names = {
            aliceblue: "f0f8ff",
            antiquewhite: "faebd7",
            aqua: "0ff",
            aquamarine: "7fffd4",
            azure: "f0ffff",
            beige: "f5f5dc",
            bisque: "ffe4c4",
            black: "000",
            blanchedalmond: "ffebcd",
            blue: "00f",
            blueviolet: "8a2be2",
            brown: "a52a2a",
            burlywood: "deb887",
            burntsienna: "ea7e5d",
            cadetblue: "5f9ea0",
            chartreuse: "7fff00",
            chocolate: "d2691e",
            coral: "ff7f50",
            cornflowerblue: "6495ed",
            cornsilk: "fff8dc",
            crimson: "dc143c",
            cyan: "0ff",
            darkblue: "00008b",
            darkcyan: "008b8b",
            darkgoldenrod: "b8860b",
            darkgray: "a9a9a9",
            darkgreen: "006400",
            darkgrey: "a9a9a9",
            darkkhaki: "bdb76b",
            darkmagenta: "8b008b",
            darkolivegreen: "556b2f",
            darkorange: "ff8c00",
            darkorchid: "9932cc",
            darkred: "8b0000",
            darksalmon: "e9967a",
            darkseagreen: "8fbc8f",
            darkslateblue: "483d8b",
            darkslategray: "2f4f4f",
            darkslategrey: "2f4f4f",
            darkturquoise: "00ced1",
            darkviolet: "9400d3",
            deeppink: "ff1493",
            deepskyblue: "00bfff",
            dimgray: "696969",
            dimgrey: "696969",
            dodgerblue: "1e90ff",
            firebrick: "b22222",
            floralwhite: "fffaf0",
            forestgreen: "228b22",
            fuchsia: "f0f",
            gainsboro: "dcdcdc",
            ghostwhite: "f8f8ff",
            gold: "ffd700",
            goldenrod: "daa520",
            gray: "808080",
            green: "008000",
            greenyellow: "adff2f",
            grey: "808080",
            honeydew: "f0fff0",
            hotpink: "ff69b4",
            indianred: "cd5c5c",
            indigo: "4b0082",
            ivory: "fffff0",
            khaki: "f0e68c",
            lavender: "e6e6fa",
            lavenderblush: "fff0f5",
            lawngreen: "7cfc00",
            lemonchiffon: "fffacd",
            lightblue: "add8e6",
            lightcoral: "f08080",
            lightcyan: "e0ffff",
            lightgoldenrodyellow: "fafad2",
            lightgray: "d3d3d3",
            lightgreen: "90ee90",
            lightgrey: "d3d3d3",
            lightpink: "ffb6c1",
            lightsalmon: "ffa07a",
            lightseagreen: "20b2aa",
            lightskyblue: "87cefa",
            lightslategray: "789",
            lightslategrey: "789",
            lightsteelblue: "b0c4de",
            lightyellow: "ffffe0",
            lime: "0f0",
            limegreen: "32cd32",
            linen: "faf0e6",
            magenta: "f0f",
            maroon: "800000",
            mediumaquamarine: "66cdaa",
            mediumblue: "0000cd",
            mediumorchid: "ba55d3",
            mediumpurple: "9370db",
            mediumseagreen: "3cb371",
            mediumslateblue: "7b68ee",
            mediumspringgreen: "00fa9a",
            mediumturquoise: "48d1cc",
            mediumvioletred: "c71585",
            midnightblue: "191970",
            mintcream: "f5fffa",
            mistyrose: "ffe4e1",
            moccasin: "ffe4b5",
            navajowhite: "ffdead",
            navy: "000080",
            oldlace: "fdf5e6",
            olive: "808000",
            olivedrab: "6b8e23",
            orange: "ffa500",
            orangered: "ff4500",
            orchid: "da70d6",
            palegoldenrod: "eee8aa",
            palegreen: "98fb98",
            paleturquoise: "afeeee",
            palevioletred: "db7093",
            papayawhip: "ffefd5",
            peachpuff: "ffdab9",
            peru: "cd853f",
            pink: "ffc0cb",
            plum: "dda0dd",
            powderblue: "b0e0e6",
            purple: "800080",
            rebeccapurple: "663399",
            red: "f00",
            rosybrown: "bc8f8f",
            royalblue: "4169e1",
            saddlebrown: "8b4513",
            salmon: "fa8072",
            sandybrown: "f4a460",
            seagreen: "2e8b57",
            seashell: "fff5ee",
            sienna: "a0522d",
            silver: "c0c0c0",
            skyblue: "87ceeb",
            slateblue: "6a5acd",
            slategray: "708090",
            slategrey: "708090",
            snow: "fffafa",
            springgreen: "00ff7f",
            steelblue: "4682b4",
            tan: "d2b48c",
            teal: "008080",
            thistle: "d8bfd8",
            tomato: "ff6347",
            turquoise: "40e0d0",
            violet: "ee82ee",
            wheat: "f5deb3",
            white: "fff",
            whitesmoke: "f5f5f5",
            yellow: "ff0",
            yellowgreen: "9acd32"
        };
    
        // Make it easy to access colors via `hexNames[hex]`
        var hexNames = tinycolor.hexNames = flip(names);
    
    
        // Utilities
        // ---------
    
        // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
        function flip(o) {
            var flipped = { };
            for (var i in o) {
                if (o.hasOwnProperty(i)) {
                    flipped[o[i]] = i;
                }
            }
            return flipped;
        }
    
        // Return a valid alpha value [0,1] with all invalid values being set to 1
        function boundAlpha(a) {
            a = parseFloat(a);
    
            if (isNaN(a) || a < 0 || a > 1) {
                a = 1;
            }
    
            return a;
        }
    
        // Take input from [0, n] and return it as [0, 1]
        function bound01(n, max) {
            if (isOnePointZero(n)) { n = "100%"; }
    
            var processPercent = isPercentage(n);
            n = mathMin(max, mathMax(0, parseFloat(n)));
    
            // Automatically convert percentage into number
            if (processPercent) {
                n = parseInt(n * max, 10) / 100;
            }
    
            // Handle floating point rounding errors
            if ((math.abs(n - max) < 0.000001)) {
                return 1;
            }
    
            // Convert into [0, 1] range if it isn't already
            return (n % max) / parseFloat(max);
        }
    
        // Force a number between 0 and 1
        function clamp01(val) {
            return mathMin(1, mathMax(0, val));
        }
    
        // Parse a base-16 hex value into a base-10 integer
        function parseIntFromHex(val) {
            return parseInt(val, 16);
        }
    
        // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
        // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
        function isOnePointZero(n) {
            return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
        }
    
        // Check to see if string passed in is a percentage
        function isPercentage(n) {
            return typeof n === "string" && n.indexOf('%') != -1;
        }
    
        // Force a hex value to have 2 characters
        function pad2(c) {
            return c.length == 1 ? '0' + c : '' + c;
        }
    
        // Replace a decimal with it's percentage value
        function convertToPercentage(n) {
            if (n <= 1) {
                n = (n * 100) + "%";
            }
    
            return n;
        }
    
        // Converts a decimal to a hex value
        function convertDecimalToHex(d) {
            return Math.round(parseFloat(d) * 255).toString(16);
        }
        // Converts a hex value to a decimal
        function convertHexToDecimal(h) {
            return (parseIntFromHex(h) / 255);
        }
    
        var matchers = (function() {
    
            // <http://www.w3.org/TR/css3-values/#integers>
            var CSS_INTEGER = "[-\\+]?\\d+%?";
    
            // <http://www.w3.org/TR/css3-values/#number-value>
            var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
    
            // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
            var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
    
            // Actual matching.
            // Parentheses and commas are optional, but not required.
            // Whitespace can take the place of commas or opening paren
            var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
            var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    
            return {
                rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
                rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
                hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
                hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
                hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
                hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
                hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
                hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
                hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
            };
        })();
    
        // `stringInputToObject`
        // Permissive string parsing.  Take in a number of formats, and output an object
        // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
        function stringInputToObject(color) {
    
            color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();
            var named = false;
            if (names[color]) {
                color = names[color];
                named = true;
            }
            else if (color == 'transparent') {
                return { r: 0, g: 0, b: 0, a: 0, format: "name" };
            }
    
            // Try to match string input using regular expressions.
            // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
            // Just return an object and let the conversion functions handle that.
            // This way the result will be the same whether the tinycolor is initialized with string or object.
            var match;
            if ((match = matchers.rgb.exec(color))) {
                return { r: match[1], g: match[2], b: match[3] };
            }
            if ((match = matchers.rgba.exec(color))) {
                return { r: match[1], g: match[2], b: match[3], a: match[4] };
            }
            if ((match = matchers.hsl.exec(color))) {
                return { h: match[1], s: match[2], l: match[3] };
            }
            if ((match = matchers.hsla.exec(color))) {
                return { h: match[1], s: match[2], l: match[3], a: match[4] };
            }
            if ((match = matchers.hsv.exec(color))) {
                return { h: match[1], s: match[2], v: match[3] };
            }
            if ((match = matchers.hsva.exec(color))) {
                return { h: match[1], s: match[2], v: match[3], a: match[4] };
            }
            if ((match = matchers.hex8.exec(color))) {
                return {
                    a: convertHexToDecimal(match[1]),
                    r: parseIntFromHex(match[2]),
                    g: parseIntFromHex(match[3]),
                    b: parseIntFromHex(match[4]),
                    format: named ? "name" : "hex8"
                };
            }
            if ((match = matchers.hex6.exec(color))) {
                return {
                    r: parseIntFromHex(match[1]),
                    g: parseIntFromHex(match[2]),
                    b: parseIntFromHex(match[3]),
                    format: named ? "name" : "hex"
                };
            }
            if ((match = matchers.hex3.exec(color))) {
                return {
                    r: parseIntFromHex(match[1] + '' + match[1]),
                    g: parseIntFromHex(match[2] + '' + match[2]),
                    b: parseIntFromHex(match[3] + '' + match[3]),
                    format: named ? "name" : "hex"
                };
            }
    
            return false;
        }
    
        window.tinycolor = tinycolor;
        })();
    
        $(function () {
            if ($.fn.spectrum.load) {
                $.fn.spectrum.processNativeColorInputs();
            }
        });
    
    });
    
    },{"jquery":416}],433:[function(require,module,exports){
    !function(){"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,n=new Array(t);i<t;i++)n[i]=e[i];return n}function l(e,t){var i;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(i=function(e,t){if(e){if("string"==typeof e)return a(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?a(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){i&&(e=i);var n=0,r=function(){};return{s:r,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,l=!0,o=!1;return{s:function(){i=e[Symbol.iterator]()},n:function(){var e=i.next();return l=e.done,e},e:function(e){o=!0,s=e},f:function(){try{l||null==i.return||i.return()}finally{if(o)throw s}}}}var o=86400,u={bubbles:!0,cancelable:!1,detail:null};function c(e,t){return e==o&&t.show2400?e:e%o}var m,d={appendTo:"body",className:null,closeOnWindow:!1,closeOnScroll:!1,disableTextInput:!1,disableTimeRanges:[],disableTouchKeyboard:!1,durationTime:null,forceRoundTime:!1,lang:{},listWidth:null,maxTime:null,minTime:null,noneOption:!1,orientation:"l",roundingFunction:function(e,t){if(null===e)return null;for(var i=0,n=0;n<e;)i++,n+=60*t.step(i);var r=n-60*t.step(i-1);return c(e-r<n-e?r:n,t)},scrollDefault:null,selectOnBlur:!1,show2400:!1,showDuration:!1,showOn:["click","focus"],step:30,stopScrollPropagation:!1,timeFormat:"g:ia",typeaheadHighlight:!0,useSelect:!1,wrapHours:!0},f={am:"am",pm:"pm",AM:"AM",PM:"PM",decimal:".",mins:"mins",hr:"hr",hrs:"hrs"},p=function(){function n(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};t(this,n),this._handleFormatValue=this._handleFormatValue.bind(this),this._handleKeyUp=this._handleKeyUp.bind(this),this.targetEl=e;var r=n.extractAttrOptions(e,Object.keys(d));this.settings=this.parseSettings(s(s(s({},d),i),r))}var r,a,c;return r=n,c=[{key:"extractAttrOptions",value:function(e,t){var i,n={},r=l(t);try{for(r.s();!(i=r.n()).done;){var s=i.value;s in e.dataset&&(n[s]=e.dataset[s])}}catch(e){r.e(e)}finally{r.f()}return n}},{key:"isVisible",value:function(e){var t=e[0];return t.offsetWidth>0&&t.offsetHeight>0}},{key:"hideAll",value:function(){var e,t=l(document.getElementsByClassName("ui-timepicker-input"));try{for(t.s();!(e=t.n()).done;){var i=e.value.timepickerObj;i&&i.hideMe()}}catch(e){t.e(e)}finally{t.f()}}}],(a=[{key:"hideMe",value:function(){if(this.settings.useSelect)this.targetEl.blur();else if(this.list&&n.isVisible(this.list)){this.settings.selectOnBlur&&this._selectValue(),this.list.hide();var e=new CustomEvent("hideTimepicker",u);this.targetEl.dispatchEvent(e)}}},{key:"_findRow",value:function(e){if(!e&&0!==e)return!1;var t=!1;return e=this.settings.roundingFunction(e,this.settings),!!this.list&&(this.list.find("li").each((function(i,n){var r=parseInt(n.dataset.time);if(!isNaN(r))return r==e?(t=n,!1):void 0})),t)}},{key:"_hideKeyboard",value:function(){return(window.navigator.msMaxTouchPoints||"ontouchstart"in document)&&this.settings.disableTouchKeyboard}},{key:"_setTimeValue",value:function(e,t){if("INPUT"===this.targetEl.nodeName){null===e&&""==this.targetEl.value||(this.targetEl.value=e);var i=this;i.settings.useSelect&&"select"!=t&&i.list&&i.list.val(i._roundAndFormatTime(i.anytime2int(e)))}var n=new CustomEvent("selectTime",u);if(this.selectedValue!=e){this.selectedValue=e;var r=new CustomEvent("changeTime",u),s=new CustomEvent("change",Object.assign(u,{detail:"timepicker"}));return"select"==t?(this.targetEl.dispatchEvent(n),this.targetEl.dispatchEvent(r),this.targetEl.dispatchEvent(s)):-1==["error","initial"].indexOf(t)&&this.targetEl.dispatchEvent(r),!0}return-1==["error","initial"].indexOf(t)&&this.targetEl.dispatchEvent(n),!1}},{key:"_getTimeValue",value:function(){return"INPUT"===this.targetEl.nodeName?this.targetEl.value:this.selectedValue}},{key:"_selectValue",value:function(){var e=this;e.settings;var t=e.list.find(".ui-timepicker-selected");if(t.hasClass("ui-timepicker-disabled"))return!1;if(!t.length)return!0;var i=t.get(0).dataset.time;if(i){var n=parseInt(i);isNaN(n)||(i=n)}return null!==i&&("string"!=typeof i&&(i=e._int2time(i)),e._setTimeValue(i,"select")),!0}},{key:"anytime2int",value:function(t){return"number"==typeof t?t:"string"==typeof t?this.time2int(t):"object"===e(t)&&t instanceof Date?3600*t.getHours()+60*t.getMinutes()+t.getSeconds():"function"==typeof t?t():null}},{key:"time2int",value:function(e){if(""===e||null==e)return null;if("now"===e)return this.anytime2int(new Date);if("string"!=typeof e)return e;e=e.toLowerCase().replace(/[\s\.]/g,""),"am"!==this.settings.lang.am||"a"!=e.slice(-1)&&"p"!=e.slice(-1)||(e+="m");var t=/^(([^0-9]*))?([0-9]?[0-9])(([0-5][0-9]))?(([0-5][0-9]))?(([^0-9]*))$/;e.match(/\W/)&&(t=/^(([^0-9]*))?([0-9]?[0-9])(\W+([0-5][0-9]?))?(\W+([0-5][0-9]))?(([^0-9]*))$/);var i=e.match(t);if(!i)return null;var n=parseInt(1*i[3],10),r=i[2]||i[9],s=this.parseMinuteString(i[5]),a=1*i[7]||0;r||2!=i[3].length||"0"!=i[3][0]||(r="am"),n>24&&!s&&(n=1*i[3][0],s=this.parseMinuteString(i[3][1]));var l=n;if(n<=12&&r){var u=(r=r.trim())==this.settings.lang.pm||r==this.settings.lang.PM;l=12==n?u?12:0:n+(u?12:0)}else if(3600*n+60*s+a>=o+(this.settings.show2400?1:0)){if(!1===this.settings.wrapHours)return null;l=n%24}var c=3600*l+60*s+a;if(n<12&&!r&&this.settings._twelveHourTime&&this.settings.scrollDefault()){var m=c-this.settings.scrollDefault();m<0&&m>=-43200&&(c=(c+43200)%o)}return c}},{key:"parseMinuteString",value:function(e){e||(e=0);var t=1;return 1==e.length&&(t=10),parseInt(e)*t||0}},{key:"intStringDateOrFunc2func",value:function(e){var t=this;return null==e?function(){return null}:"function"==typeof e?function(){return t.anytime2int(e())}:function(){return t.anytime2int(e)}}},{key:"parseSettings",value:function(e){if(e.lang=s(s({},f),e.lang),this.settings=e,e.listWidth&&(e.listWidth=this.anytime2int(e.listWidth)),e.minTime=this.intStringDateOrFunc2func(e.minTime),e.maxTime=this.intStringDateOrFunc2func(e.maxTime),e.durationTime=this.intStringDateOrFunc2func(e.durationTime),e.scrollDefault?e.scrollDefault=this.intStringDateOrFunc2func(e.scrollDefault):e.scrollDefault=e.minTime,"string"==typeof e.timeFormat&&e.timeFormat.match(/[gh]/)&&(e._twelveHourTime=!0),"function"!=typeof e.step){var t=e.step;e.step=function(){return t}}return e.disableTimeRanges=this._parseDisableTimeRanges(e.disableTimeRanges),e.closeOnWindowScroll&&!e.closeOnScroll&&(e.closeOnScroll=e.closeOnWindowScroll),!0===e.closeOnScroll&&(e.closeOnScroll=window.document),e}},{key:"_parseDisableTimeRanges",value:function(e){if(!e||0==e.length)return[];for(var t in e)e[t]=[this.anytime2int(e[t][0]),this.anytime2int(e[t][1])];for(t=(e=e.sort((function(e,t){return e[0]-t[0]}))).length-1;t>0;t--)e[t][0]<=e[t-1][1]&&(e[t-1]=[Math.min(e[t][0],e[t-1][0]),Math.max(e[t][1],e[t-1][1])],e.splice(t,1));return e}},{key:"_disableTextInputHandler",value:function(e){switch(e.keyCode){case 13:case 9:return;default:e.preventDefault()}}},{key:"_int2duration",value:function(e,t){e=Math.abs(e);var i,n,r=Math.round(e/60),s=[];return r<60?s=[r,this.settings.lang.mins]:(i=Math.floor(r/60),n=r%60,30==t&&30==n&&(i+=this.settings.lang.decimal+5),s.push(i),s.push(1==i?this.settings.lang.hr:this.settings.lang.hrs),30!=t&&n&&(s.push(n),s.push(this.settings.lang.mins))),s.join(" ")}},{key:"_roundAndFormatTime",value:function(e){if(null!==(e=this.settings.roundingFunction(e,this.settings)))return this._int2time(e)}},{key:"_int2time",value:function(e){if("number"!=typeof e)return null;var t=parseInt(e%60),i=parseInt(e/60%60),n=parseInt(e/3600%24),r=new Date(1970,0,2,n,i,t,0);if(isNaN(r.getTime()))return null;if("function"==typeof this.settings.timeFormat)return this.settings.timeFormat(r);for(var s,a,l="",u=0;u<this.settings.timeFormat.length;u++)switch(a=this.settings.timeFormat.charAt(u)){case"a":l+=r.getHours()>11?this.settings.lang.pm:this.settings.lang.am;break;case"A":l+=r.getHours()>11?this.settings.lang.PM:this.settings.lang.AM;break;case"g":l+=0==(s=r.getHours()%12)?"12":s;break;case"G":s=r.getHours(),e===o&&(s=this.settings.show2400?24:0),l+=s;break;case"h":0!=(s=r.getHours()%12)&&s<10&&(s="0"+s),l+=0===s?"12":s;break;case"H":s=r.getHours(),e===o&&(s=this.settings.show2400?24:0),l+=s>9?s:"0"+s;break;case"i":l+=(i=r.getMinutes())>9?i:"0"+i;break;case"s":l+=(t=r.getSeconds())>9?t:"0"+t;break;case"\\":u++,l+=this.settings.timeFormat.charAt(u);break;default:l+=a}return l}},{key:"_setSelected",value:function(){var e=this.list;e.find("li").removeClass("ui-timepicker-selected");var t=this.anytime2int(this._getTimeValue());if(null!==t){var i=this._findRow(t);if(i){var n=i.getBoundingClientRect(),r=e.get(0).getBoundingClientRect(),s=n.top-r.top;if(s+n.height>r.height||s<0){var a=e.scrollTop()+(n.top-r.top)-n.height;e.scrollTop(a)}var l=parseInt(i.dataset.time);(this.settings.forceRoundTime||l===t)&&i.classList.add("ui-timepicker-selected")}}}},{key:"_isFocused",value:function(e){return e===document.activeElement}},{key:"_handleFormatValue",value:function(e){e&&"timepicker"==e.detail||this._formatValue(e)}},{key:"_formatValue",value:function(e,t){if(""!==this.targetEl.value){if(!this._isFocused(this.targetEl)||e&&"change"==e.type){var i=this.settings,n=this.anytime2int(this.targetEl.value);if(null!==n){var r=this._isTimeRangeError(n,i);if(i.forceRoundTime){var s=i.roundingFunction(n,i);s!=n&&(n=s,t=null)}var a=this._int2time(n);if(r){this._setTimeValue(a);var l=new CustomEvent("timeRangeError",u);this.targetEl.dispatchEvent(l)}else this._setTimeValue(a,t)}else{var o=new CustomEvent("timeFormatError",u);this.targetEl.dispatchEvent(o)}}}else this._setTimeValue(null,t)}},{key:"_isTimeRangeError",value:function(e,t){if(null!==t.minTime&&null!==t.maxTime&&(e<t.minTime()||e>t.maxTime()))return!0;var i,n=l(t.disableTimeRanges);try{for(n.s();!(i=n.n()).done;){var r=i.value;if(e>=r[0]&&e<r[1])return!0}}catch(e){n.e(e)}finally{n.f()}return!1}},{key:"_generateNoneElement",value:function(t,i){var n,r,s,a;return"object"==e(t)?(n=t.label,r=t.className,s=t.value):"string"==typeof t?(n=t,s=""):$.error("Invalid noneOption value"),i?(a=document.createElement("option")).value=s:(a=document.createElement("li")).dataset.time=String(s),a.innerText=n,a.classList.add(r),a}},{key:"_handleKeyUp",value:function(e){var t=this;if(!this.list||!n.isVisible(this.list)||this.settings.disableTextInput)return!0;if("paste"!==e.type&&"cut"!==e.type)switch(e.keyCode){case 96:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 77:case 80:case 186:case 8:case 46:this.settings.typeaheadHighlight?this._setSelected():this.list.hide()}else setTimeout((function(){t.settings.typeaheadHighlight?t._setSelected():t.list.hide()}),0)}}])&&i(r.prototype,a),c&&i(r,c),n}();function h(t){return Array.isArray(t)?t.map(h):!0===t?{label:"None",value:""}:"object"===e(t)?t:{label:t,value:""}}function g(e){var t=document.createElement("option");return t.value=e.value||e.label,e.duration?t.appendChild(document.createTextNode(e.label+" ("+e.duration+")")):t.appendChild(document.createTextNode(e.label)),e.disabled&&(t.disabled=!0),t}function v(e){var t=document.createElement("li");if(t.dataset.time=e.value,e.className&&t.classList.add(e.className),t.className=e.className,t.appendChild(document.createTextNode(e.label)),e.duration){var i=document.createElement("span");i.appendChild(document.createTextNode("("+e.duration+")")),i.classList.add("ui-timepicker-duration"),t.appendChild(i)}return e.disabled&&t.classList.add("ui-timepicker-disabled"),t}function y(e){var t,i=[].concat(function(e){if(!e.noneOption)return[];var t=h(e.noneOption);return Array.isArray(e.noneOption)?t:[t]}(e.settings),function(e){var t,i,n=e.settings,r=null!==(t=n.minTime())&&void 0!==t?t:0,s=null!==(i=n.maxTime())&&void 0!==i?i:r+o-1;s<r&&(s+=o),86399===s&&"string"==typeof n.timeFormat&&n.show2400&&(s=o);for(var a=[],u=r,m=0;u<=s;m++,u+=60*n.step(m)){var d=u,f=e._int2time(d),p=d%o<43200?"ui-timepicker-am":"ui-timepicker-pm",h={label:f,value:c(d,n),className:p};if((null!==n.minTime()||null!==n.durationTime())&&n.showDuration){var g,v=null!==(g=n.durationTime())&&void 0!==g?g:n.minTime();v>u&&(v-=o);var y=e._int2duration(u-v,n.step());h.duration=y}var b,k=l(n.disableTimeRanges);try{for(k.s();!(b=k.n()).done;){var T=b.value;if(d%o>=T[0]&&d%o<T[1]){h.disabled=!0;break}}}catch(e){k.e(e)}finally{k.f()}a.push(h)}return a}(e));if(t=e.settings.useSelect?function(e,t){var i=document.createElement("select");i.classList.add("ui-timepicker-select"),t&&(i.name="ui-timepicker-"+t);var n,r=l(e);try{for(r.s();!(n=r.n()).done;){var s=g(n.value);i.appendChild(s)}}catch(e){r.e(e)}finally{r.f()}return i}(i,e.targetEl.name):function(e){var t=document.createElement("ul");t.classList.add("ui-timepicker-list");var i,n=l(e);try{for(n.s();!(i=n.n()).done;){var r=v(i.value);t.appendChild(r)}}catch(e){n.e(e)}finally{n.f()}var s=document.createElement("div");return s.classList.add("ui-timepicker-wrapper"),s.tabIndex=-1,s.style.display="none",s.style.position="absolute",s.appendChild(t),s}(i),e.settings.className){var n,r=l(e.settings.className.split(" "));try{for(r.s();!(n=r.n()).done;){var s=n.value;t.classList.add(s)}}catch(e){r.e(e)}finally{r.f()}}return!e.settings.showDuration||null===e.settings.minTime&&null===e.settings.durationTime||(t.classList.add("ui-timepicker-with-duration"),t.classList.add("ui-timepicker-step-"+e.settings.step())),t}!function(){if("function"==typeof window.CustomEvent)return!1;window.CustomEvent=function(e,t){t||(t={}),t=Object.assign(u,t);var i=document.createEvent("CustomEvent");return i.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),i}}(),m=function(t){var i={init:function(e){return this.each((function(){var r=t(this),a=new p(this,e),l=a.settings;if(l.lang,this.timepickerObj=a,r.addClass("ui-timepicker-input"),l.useSelect)n(r);else{if(r.prop("autocomplete","off"),l.showOn)for(var o in l.showOn)r.on(l.showOn[o]+".timepicker",i.show);r.on("change.timepicker",a._handleFormatValue),r.on("keydown.timepicker",s),r.on("keyup.timepicker",a._handleKeyUp),l.disableTextInput&&r.on("keydown.timepicker",a._disableTextInputHandler),r.on("cut.timepicker",a._handleKeyUp),r.on("paste.timepicker",a._handleKeyUp),a._formatValue(null,"initial")}}))},show:function(e){var i=t(this),s=i[0].timepickerObj,a=s.settings;if(e&&e.preventDefault(),a.useSelect)s.list.trigger("focus");else{s._hideKeyboard()&&i.trigger("blur");var l=s.list;if(!i.prop("readonly")&&(n(i),l=s.list,!p.isVisible(l))){i.is("input")&&(s.selectedValue=i.val()),s._setSelected(),p.hideAll(),"number"==typeof a.listWidth&&l.width(i.outerWidth()*a.listWidth),l.show();var o={};a.orientation.match(/r/)?o.left=i.offset().left+i.outerWidth()-l.outerWidth()+parseInt(l.css("marginLeft").replace("px",""),10):a.orientation.match(/l/)?o.left=i.offset().left+parseInt(l.css("marginLeft").replace("px",""),10):a.orientation.match(/c/)&&(o.left=i.offset().left+(i.outerWidth()-l.outerWidth())/2+parseInt(l.css("marginLeft").replace("px",""),10)),"t"==(a.orientation.match(/t/)?"t":a.orientation.match(/b/)?"b":i.offset().top+i.outerHeight(!0)+l.outerHeight()>t(window).height()+t(window).scrollTop()?"t":"b")?(l.addClass("ui-timepicker-positioned-top"),o.top=i.offset().top-l.outerHeight()+parseInt(l.css("marginTop").replace("px",""),10)):(l.removeClass("ui-timepicker-positioned-top"),o.top=i.offset().top+i.outerHeight()+parseInt(l.css("marginTop").replace("px",""),10)),l.offset(o);var u=l.find(".ui-timepicker-selected");if(!u.length){var c=s.anytime2int(s._getTimeValue());null!==c?u=t(s._findRow(c)):a.scrollDefault()&&(u=t(s._findRow(a.scrollDefault())))}if(u.length&&!u.hasClass("ui-timepicker-disabled")||(u=l.find("li:not(.ui-timepicker-disabled):first")),u&&u.length){var m=l.scrollTop()+u.position().top-u.outerHeight();l.scrollTop(m)}else l.scrollTop(0);return a.stopScrollPropagation&&t(document).on("wheel.ui-timepicker",".ui-timepicker-wrapper",(function(e){e.preventDefault();var i=t(this).scrollTop();t(this).scrollTop(i+e.originalEvent.deltaY)})),t(document).on("mousedown.ui-timepicker",r),window.addEventListener("resize",r),a.closeOnScroll&&t(a.closeOnScroll).on("scroll.ui-timepicker",r),i.trigger("showTimepicker"),this}}},hide:function(e){var t=this[0].timepickerObj;return t&&t.hideMe(),p.hideAll(),this},option:function(i,r){return"string"==typeof i&&void 0===r?this[0].timepickerObj.settings[i]:this.each((function(){var s=t(this),a=s[0].timepickerObj,l=a.settings,o=a.list;"object"==e(i)?l=t.extend(l,i):"string"==typeof i&&(l[i]=r),l=a.parseSettings(l),a.settings=l,a._formatValue({type:"change"},"initial"),o&&(o.remove(),a.list=null),l.useSelect&&n(s)}))},getSecondsFromMidnight:function(){var e=this[0].timepickerObj;return e.anytime2int(e._getTimeValue())},getTime:function(e){var t=this[0].timepickerObj,i=t._getTimeValue();if(!i)return null;var n=t.anytime2int(i);if(null===n)return null;e||(e=new Date);var r=new Date(e);return r.setHours(n/3600),r.setMinutes(n%3600/60),r.setSeconds(n%60),r.setMilliseconds(0),r},isVisible:function(){var e=this[0].timepickerObj;return!!(e&&e.list&&p.isVisible(e.list))},setTime:function(e){var t=this[0].timepickerObj,i=t.settings,n=t.anytime2int(e);if(t._isTimeRangeError(n,i)){var r=new CustomEvent("timeRangeError",u);t.targetEl.dispatchEvent(r)}if(i.forceRoundTime)var s=t._roundAndFormatTime(n);else s=t._int2time(n);return e&&null===s&&i.noneOption&&(s=e),t._setTimeValue(s,"initial"),t._formatValue({type:"change"},"initial"),t&&t.list&&t._setSelected(),this},remove:function(){var e=this;if(e.hasClass("ui-timepicker-input")){var t=e[0].timepickerObj,i=t.settings;return e.removeAttr("autocomplete","off"),e.removeClass("ui-timepicker-input"),e.removeData("timepicker-obj"),e.off(".timepicker"),t.list&&t.list.remove(),i.useSelect&&e.show(),t.list=null,this}}};function n(e){var n=e[0].timepickerObj,r=n.list,s=n.settings;r&&r.length&&(r.remove(),n.list=null);var a=t(y(n));if(r=s.useSelect?a:a.children("ul"),a.data("timepicker-input",e),n.list=a,s.useSelect)e.val()&&r.val(n._roundAndFormatTime(n.anytime2int(e.val()))),r.on("focus",(function(){t(this).data("timepicker-input").trigger("showTimepicker")})),r.on("blur",(function(){t(this).data("timepicker-input").trigger("hideTimepicker")})),r.on("change",(function(){n._setTimeValue(t(this).val(),"select")})),n._setTimeValue(r.val(),"initial"),e.hide().after(r);else{var l=s.appendTo;"string"==typeof l?l=t(l):"function"==typeof l&&(l=l(e)),l.append(a),n._setSelected(),r.on("mousedown click","li",(function(s){e.off("focus.timepicker"),e.on("focus.timepicker-ie-hack",(function(){e.off("focus.timepicker-ie-hack"),e.on("focus.timepicker",i.show)})),n._hideKeyboard()||e[0].focus(),r.find("li").removeClass("ui-timepicker-selected"),t(this).addClass("ui-timepicker-selected"),n._selectValue()&&(e.trigger("hideTimepicker"),r.on("mouseup.timepicker click.timepicker","li",(function(e){r.off("mouseup.timepicker click.timepicker"),a.hide()})))}))}}function r(e){if("focus"!=e.type||e.target!=window){var i=t(e.target);i.closest(".ui-timepicker-input").length||i.closest(".ui-timepicker-wrapper").length||(p.hideAll(),t(document).off(".ui-timepicker"),t(window).off(".ui-timepicker"))}}function s(e){var n=t(this),r=n[0].timepickerObj,s=r.list;if(!s||!p.isVisible(s)){if(40!=e.keyCode)return!0;i.show.call(n.get(0)),s=r.list,r._hideKeyboard()||n.trigger("focus")}switch(e.keyCode){case 13:return r._selectValue()&&(r._formatValue({type:"change"}),r.hideMe()),e.preventDefault(),!1;case 38:var a=s.find(".ui-timepicker-selected");return a.length?a.is(":first-child")||(a.removeClass("ui-timepicker-selected"),a.prev().addClass("ui-timepicker-selected"),a.prev().position().top<a.outerHeight()&&s.scrollTop(s.scrollTop()-a.outerHeight())):(s.find("li").each((function(e,i){if(t(i).position().top>0)return a=t(i),!1})),a.addClass("ui-timepicker-selected")),!1;case 40:return 0===(a=s.find(".ui-timepicker-selected")).length?(s.find("li").each((function(e,i){if(t(i).position().top>0)return a=t(i),!1})),a.addClass("ui-timepicker-selected")):a.is(":last-child")||(a.removeClass("ui-timepicker-selected"),a.next().addClass("ui-timepicker-selected"),a.next().position().top+2*a.outerHeight()>s.outerHeight()&&s.scrollTop(s.scrollTop()+a.outerHeight())),!1;case 27:s.find("li").removeClass("ui-timepicker-selected"),r.hideMe();break;case 9:r.hideMe();break;default:return!0}}t.fn.timepicker=function(n){return this.length?i[n]?this.hasClass("ui-timepicker-input")?i[n].apply(this,Array.prototype.slice.call(arguments,1)):this:"object"!==e(n)&&n?void t.error("Method "+n+" does not exist on jQuery.timepicker"):i.init.apply(this,arguments):this},t.fn.timepicker.defaults=d},"object"===("undefined"==typeof exports?"undefined":e(exports))&&exports&&"object"===("undefined"==typeof module?"undefined":e(module))&&module&&module.exports===exports?m(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],m):m(jQuery)}();
    
    },{"jquery":416}],434:[function(require,module,exports){
    (function (process){(function (){
    /**!
    * tippy.js v5.2.1
    * (c) 2017-2020 atomiks
    * MIT License
    */
    'use strict';
    
    function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
    
    var Popper = _interopDefault(require('popper.js'));
    
    function _extends() {
      _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
    
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
    
        return target;
      };
    
      return _extends.apply(this, arguments);
    }
    
    var version = "5.2.1";
    
    /**
     * Triggers reflow
     */
    function reflow(element) {
      void element.offsetHeight;
    }
    /**
     * Sets the innerHTML of an element
     */
    
    function setInnerHTML(element, html) {
      element[innerHTML()] = html;
    }
    /**
     * Determines if the value is a reference element
     */
    
    function isReferenceElement(value) {
      return !!(value && value._tippy && value._tippy.reference === value);
    }
    /**
     * Safe .hasOwnProperty check, for prototype-less objects
     */
    
    function hasOwnProperty(obj, key) {
      return {}.hasOwnProperty.call(obj, key);
    }
    /**
     * Returns an array of elements based on the value
     */
    
    function getArrayOfElements(value) {
      if (isElement(value)) {
        return [value];
      }
    
      if (isNodeList(value)) {
        return arrayFrom(value);
      }
    
      if (Array.isArray(value)) {
        return value;
      }
    
      return arrayFrom(document.querySelectorAll(value));
    }
    /**
     * Returns a value at a given index depending on if it's an array or number
     */
    
    function getValueAtIndexOrReturn(value, index, defaultValue) {
      if (Array.isArray(value)) {
        var v = value[index];
        return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;
      }
    
      return value;
    }
    /**
     * Prevents errors from being thrown while accessing nested modifier objects
     * in `popperOptions`
     */
    
    function getModifier(obj, key) {
      return obj && obj.modifiers && obj.modifiers[key];
    }
    /**
     * Determines if the value is of type
     */
    
    function isType(value, type) {
      var str = {}.toString.call(value);
      return str.indexOf('[object') === 0 && str.indexOf(type + "]") > -1;
    }
    /**
     * Determines if the value is of type Element
     */
    
    function isElement(value) {
      return isType(value, 'Element');
    }
    /**
     * Determines if the value is of type NodeList
     */
    
    function isNodeList(value) {
      return isType(value, 'NodeList');
    }
    /**
     * Determines if the value is of type MouseEvent
     */
    
    function isMouseEvent(value) {
      return isType(value, 'MouseEvent');
    }
    /**
     * Firefox extensions don't allow setting .innerHTML directly, this will trick
     * it
     */
    
    function innerHTML() {
      return 'innerHTML';
    }
    /**
     * Evaluates a function if one, or returns the value
     */
    
    function invokeWithArgsOrReturn(value, args) {
      return typeof value === 'function' ? value.apply(void 0, args) : value;
    }
    /**
     * Sets a popperInstance modifier's property to a value
     */
    
    function setModifierValue(modifiers, name, property, value) {
      modifiers.filter(function (m) {
        return m.name === name;
      })[0][property] = value;
    }
    /**
     * Returns a new `div` element
     */
    
    function div() {
      return document.createElement('div');
    }
    /**
     * Applies a transition duration to a list of elements
     */
    
    function setTransitionDuration(els, value) {
      els.forEach(function (el) {
        if (el) {
          el.style.transitionDuration = value + "ms";
        }
      });
    }
    /**
     * Sets the visibility state to elements so they can begin to transition
     */
    
    function setVisibilityState(els, state) {
      els.forEach(function (el) {
        if (el) {
          el.setAttribute('data-state', state);
        }
      });
    }
    /**
     * Debounce utility. To avoid bloating bundle size, we're only passing 1
     * argument here, a more generic function would pass all arguments. Only
     * `onMouseMove` uses this which takes the event object for now.
     */
    
    function debounce(fn, ms) {
      // Avoid wrapping in `setTimeout` if ms is 0 anyway
      if (ms === 0) {
        return fn;
      }
    
      var timeout;
      return function (arg) {
        clearTimeout(timeout);
        timeout = setTimeout(function () {
          fn(arg);
        }, ms);
      };
    }
    /**
     * Preserves the original function invocation when another function replaces it
     */
    
    function preserveInvocation(originalFn, currentFn, args) {
      if (originalFn && originalFn !== currentFn) {
        originalFn.apply(void 0, args);
      }
    }
    /**
     * Deletes properties from an object (pure)
     */
    
    function removeProperties(obj, keys) {
      var clone = _extends({}, obj);
    
      keys.forEach(function (key) {
        delete clone[key];
      });
      return clone;
    }
    /**
     * Ponyfill for Array.from - converts iterable values to an array
     */
    
    function arrayFrom(value) {
      return [].slice.call(value);
    }
    /**
     * Works like Element.prototype.closest, but uses a callback instead
     */
    
    function closestCallback(element, callback) {
      while (element) {
        if (callback(element)) {
          return element;
        }
    
        element = element.parentElement;
      }
    
      return null;
    }
    /**
     * Determines if an array or string includes a string
     */
    
    function includes(a, b) {
      return a.indexOf(b) > -1;
    }
    /**
     * Creates an array from string of values separated by whitespace
     */
    
    function splitBySpaces(value) {
      return value.split(/\s+/).filter(Boolean);
    }
    /**
     * Returns the `nextValue` if `nextValue` is not `undefined`, otherwise returns
     * `currentValue`
     */
    
    function useIfDefined(nextValue, currentValue) {
      return nextValue !== undefined ? nextValue : currentValue;
    }
    /**
     * Converts a value that's an array or single value to an array
     */
    
    function normalizeToArray(value) {
      return [].concat(value);
    }
    /**
     * Returns the ownerDocument of the first available element, otherwise global
     * document
     */
    
    function getOwnerDocument(elementOrElements) {
      var _normalizeToArray = normalizeToArray(elementOrElements),
          element = _normalizeToArray[0];
    
      return element ? element.ownerDocument || document : document;
    }
    /**
     * Adds item to array if array does not contain it
     */
    
    function pushIfUnique(arr, value) {
      if (arr.indexOf(value) === -1) {
        arr.push(value);
      }
    }
    /**
     * Adds `px` if value is a number, or returns it directly
     */
    
    function appendPxIfNumber(value) {
      return typeof value === 'number' ? value + "px" : value;
    }
    /**
     * Filters out duplicate elements in an array
     */
    
    function unique(arr) {
      return arr.filter(function (item, index) {
        return arr.indexOf(item) === index;
      });
    }
    /**
     * Returns number from number or CSS units string
     */
    
    function getNumber(value) {
      return typeof value === 'number' ? value : parseFloat(value);
    }
    /**
     * Gets number or CSS string units in pixels (e.g. `1rem` -> 16)
     */
    
    function getUnitsInPx(doc, value) {
      var isRem = typeof value === 'string' && includes(value, 'rem');
      var html = doc.documentElement;
      var rootFontSize = 16;
    
      if (html && isRem) {
        return parseFloat(getComputedStyle(html).fontSize || String(rootFontSize)) * getNumber(value);
      }
    
      return getNumber(value);
    }
    /**
     * Adds the `distancePx` value to the placement of a Popper.Padding object
     */
    
    function getComputedPadding(basePlacement, padding, distancePx) {
      if (padding === void 0) {
        padding = 5;
      }
    
      var freshPaddingObject = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
      var keys = Object.keys(freshPaddingObject);
      return keys.reduce(function (obj, key) {
        obj[key] = typeof padding === 'number' ? padding : padding[key];
    
        if (basePlacement === key) {
          obj[key] = typeof padding === 'number' ? padding + distancePx : padding[basePlacement] + distancePx;
        }
    
        return obj;
      }, freshPaddingObject);
    }
    
    function createMemoryLeakWarning(method) {
      var txt = method === 'destroy' ? 'n already-' : ' ';
      return "\n    " + method + "() was called on a" + txt + "destroyed instance. This is a no-op but\n    indicates a potential memory leak.\n  ";
    }
    function clean(value) {
      var spacesAndTabs = /[ \t]{2,}/g;
      var lineStartWithSpaces = /^[ \t]*/gm;
      return value.replace(spacesAndTabs, ' ').replace(lineStartWithSpaces, '').trim();
    }
    
    function getDevMessage(message) {
      return clean("\n  %ctippy.js\n\n  %c" + clean(message) + "\n\n  %c\uD83D\uDC77\u200D This is a development-only message. It will be removed in production.\n  ");
    }
    
    function getFormattedMessage(message) {
      return [getDevMessage(message), // title
      'color: #00C584; font-size: 1.3em; font-weight: bold;', // message
      'line-height: 1.5', // footer
      'color: #a6a095;'];
    }
    /**
     * Helpful wrapper around `console.warn()`.
     * TODO: Should we use a cache so it only warns a single time and not spam the
     * console? (Need to consider hot reloading and invalidation though). Chrome
     * already batches warnings as well.
     */
    
    function warnWhen(condition, message) {
      if (condition) {
        var _console;
    
        (_console = console).warn.apply(_console, getFormattedMessage(message));
      }
    }
    /**
     * Helpful wrapper around `console.error()`
     */
    
    function errorWhen(condition, message) {
      if (condition) {
        var _console2;
    
        (_console2 = console).error.apply(_console2, getFormattedMessage(message));
      }
    }
    /**
     * Validates the `targets` value passed to `tippy()`
     */
    
    function validateTargets(targets) {
      var didPassFalsyValue = !targets;
      var didPassPlainObject = Object.prototype.toString.call(targets) === '[object Object]' && !targets.addEventListener;
      errorWhen(didPassFalsyValue, ['tippy() was passed', '`' + String(targets) + '`', 'as its targets (first) argument. Valid types are: String, Element, Element[],', 'or NodeList.'].join(' '));
      errorWhen(didPassPlainObject, ['tippy() was passed a plain object which is no longer supported as an argument.', 'See: https://atomiks.github.io/tippyjs/misc/#custom-position'].join(' '));
    }
    
    var pluginProps = {
      animateFill: false,
      followCursor: false,
      inlinePositioning: false,
      sticky: false
    };
    var defaultProps = _extends({
      allowHTML: true,
      animation: 'fade',
      appendTo: function appendTo() {
        return document.body;
      },
      aria: 'describedby',
      arrow: true,
      boundary: 'scrollParent',
      content: '',
      delay: 0,
      distance: 10,
      duration: [300, 250],
      flip: true,
      flipBehavior: 'flip',
      flipOnUpdate: false,
      hideOnClick: true,
      ignoreAttributes: false,
      inertia: false,
      interactive: false,
      interactiveBorder: 2,
      interactiveDebounce: 0,
      lazy: true,
      maxWidth: 350,
      multiple: false,
      offset: 0,
      onAfterUpdate: function onAfterUpdate() {},
      onBeforeUpdate: function onBeforeUpdate() {},
      onCreate: function onCreate() {},
      onDestroy: function onDestroy() {},
      onHidden: function onHidden() {},
      onHide: function onHide() {},
      onMount: function onMount() {},
      onShow: function onShow() {},
      onShown: function onShown() {},
      onTrigger: function onTrigger() {},
      onUntrigger: function onUntrigger() {},
      placement: 'top',
      plugins: [],
      popperOptions: {},
      role: 'tooltip',
      showOnCreate: false,
      theme: '',
      touch: true,
      trigger: 'mouseenter focus',
      triggerTarget: null,
      updateDuration: 0,
      zIndex: 9999
    }, pluginProps);
    var defaultKeys = Object.keys(defaultProps);
    /**
     * If the setProps() method encounters one of these, the popperInstance must be
     * recreated
     */
    
    var POPPER_INSTANCE_DEPENDENCIES = ['arrow', 'boundary', 'distance', 'flip', 'flipBehavior', 'flipOnUpdate', 'offset', 'placement', 'popperOptions'];
    /**
     * Mutates the defaultProps object by setting the props specified
     */
    
    var setDefaultProps = function setDefaultProps(partialProps) {
      if (process.env.NODE_ENV !== "production") {
        validateProps(partialProps, []);
      }
    
      var keys = Object.keys(partialProps);
      keys.forEach(function (key) {
        defaultProps[key] = partialProps[key];
      });
    };
    /**
     * Returns an extended props object including plugin props
     */
    
    function getExtendedPassedProps(passedProps) {
      var plugins = passedProps.plugins || [];
      var pluginProps = plugins.reduce(function (acc, plugin) {
        var name = plugin.name,
            defaultValue = plugin.defaultValue;
    
        if (name) {
          acc[name] = passedProps[name] !== undefined ? passedProps[name] : defaultValue;
        }
    
        return acc;
      }, {});
      return _extends({}, passedProps, {}, pluginProps);
    }
    /**
     * Returns an object of optional props from data-tippy-* attributes
     */
    
    function getDataAttributeProps(reference, plugins) {
      var propKeys = plugins ? Object.keys(getExtendedPassedProps(_extends({}, defaultProps, {
        plugins: plugins
      }))) : defaultKeys;
      var props = propKeys.reduce(function (acc, key) {
        var valueAsString = (reference.getAttribute("data-tippy-" + key) || '').trim();
    
        if (!valueAsString) {
          return acc;
        }
    
        if (key === 'content') {
          acc[key] = valueAsString;
        } else {
          try {
            acc[key] = JSON.parse(valueAsString);
          } catch (e) {
            acc[key] = valueAsString;
          }
        }
    
        return acc;
      }, {});
      return props;
    }
    /**
     * Evaluates the props object by merging data attributes and disabling
     * conflicting props where necessary
     */
    
    function evaluateProps(reference, props) {
      var out = _extends({}, props, {
        content: invokeWithArgsOrReturn(props.content, [reference])
      }, props.ignoreAttributes ? {} : getDataAttributeProps(reference, props.plugins));
    
      if (out.interactive) {
        out.aria = null;
      }
    
      return out;
    }
    /**
     * Validates props with the valid `defaultProps` object
     */
    
    function validateProps(partialProps, plugins) {
      if (partialProps === void 0) {
        partialProps = {};
      }
    
      if (plugins === void 0) {
        plugins = [];
      }
    
      var keys = Object.keys(partialProps);
      keys.forEach(function (prop) {
        var value = partialProps[prop];
        var didSpecifyPlacementInPopperOptions = prop === 'popperOptions' && value !== null && typeof value === 'object' && hasOwnProperty(value, 'placement');
        var nonPluginProps = removeProperties(defaultProps, ['animateFill', 'followCursor', 'inlinePositioning', 'sticky']); // These props have custom warnings
    
        var customWarningProps = ['a11y', 'arrowType', 'showOnInit', 'size', 'target', 'touchHold'];
        var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop) && !includes(customWarningProps, prop); // Check if the prop exists in `plugins`
    
        if (didPassUnknownProp) {
          didPassUnknownProp = plugins.filter(function (plugin) {
            return plugin.name === prop;
          }).length === 0;
        }
    
        warnWhen(prop === 'target', ['The `target` prop was removed in v5 and replaced with the delegate() addon', 'in order to conserve bundle size.', 'See: https://atomiks.github.io/tippyjs/addons/#event-delegation'].join(' '));
        warnWhen(prop === 'a11y', ['The `a11y` prop was removed in v5. Make sure the element you are giving a', 'tippy to is natively focusable, such as <button> or <input>, not <div>', 'or <span>.'].join(' '));
        warnWhen(prop === 'showOnInit', 'The `showOnInit` prop was renamed to `showOnCreate` in v5.');
        warnWhen(prop === 'arrowType', ['The `arrowType` prop was removed in v5 in favor of overloading the `arrow`', 'prop.', '\n\n', '"round" string was replaced with importing the string from the package.', '\n\n', "* import {roundArrow} from 'tippy.js'; (ESM version)\n", '* const {roundArrow} = tippy; (IIFE CDN version)', '\n\n', 'Before: {arrow: true, arrowType: "round"}\n', 'After: {arrow: roundArrow}`'].join(' '));
        warnWhen(prop === 'touchHold', ['The `touchHold` prop was removed in v5 in favor of overloading the `touch`', 'prop.', '\n\n', 'Before: {touchHold: true}\n', 'After: {touch: "hold"}'].join(' '));
        warnWhen(prop === 'size', ['The `size` prop was removed in v5. Instead, use a theme that specifies', 'CSS padding and font-size properties.'].join(' '));
        warnWhen(prop === 'theme' && value === 'google', 'The included theme "google" was renamed to "material" in v5.');
        warnWhen(didSpecifyPlacementInPopperOptions, ['Specifying placement in `popperOptions` is not supported. Use the base-level', '`placement` prop instead.', '\n\n', 'Before: {popperOptions: {placement: "bottom"}}\n', 'After: {placement: "bottom"}'].join(' '));
        warnWhen(didPassUnknownProp, ["`" + prop + "`", "is not a valid prop. You may have spelled it incorrectly, or if it's a", 'plugin, forgot to pass it in an array as props.plugins.', '\n\n', 'In v5, the following props were turned into plugins:', '\n\n', '* animateFill\n', '* followCursor\n', '* sticky', '\n\n', 'All props: https://atomiks.github.io/tippyjs/all-props/\n', 'Plugins: https://atomiks.github.io/tippyjs/plugins/'].join(' '));
      });
    }
    
    var PASSIVE = {
      passive: true
    };
    var ROUND_ARROW = '<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>';
    var IOS_CLASS = "tippy-iOS";
    var POPPER_CLASS = "tippy-popper";
    var TOOLTIP_CLASS = "tippy-tooltip";
    var CONTENT_CLASS = "tippy-content";
    var BACKDROP_CLASS = "tippy-backdrop";
    var ARROW_CLASS = "tippy-arrow";
    var SVG_ARROW_CLASS = "tippy-svg-arrow";
    var POPPER_SELECTOR = "." + POPPER_CLASS;
    var TOOLTIP_SELECTOR = "." + TOOLTIP_CLASS;
    var CONTENT_SELECTOR = "." + CONTENT_CLASS;
    var ARROW_SELECTOR = "." + ARROW_CLASS;
    var SVG_ARROW_SELECTOR = "." + SVG_ARROW_CLASS;
    
    var currentInput = {
      isTouch: false
    };
    var lastMouseMoveTime = 0;
    /**
     * When a `touchstart` event is fired, it's assumed the user is using touch
     * input. We'll bind a `mousemove` event listener to listen for mouse input in
     * the future. This way, the `isTouch` property is fully dynamic and will handle
     * hybrid devices that use a mix of touch + mouse input.
     */
    
    function onDocumentTouchStart() {
      if (currentInput.isTouch) {
        return;
      }
    
      currentInput.isTouch = true;
    
      if (window.performance) {
        document.addEventListener('mousemove', onDocumentMouseMove);
      }
    }
    /**
     * When two `mousemove` event are fired consecutively within 20ms, it's assumed
     * the user is using mouse input again. `mousemove` can fire on touch devices as
     * well, but very rarely that quickly.
     */
    
    function onDocumentMouseMove() {
      var now = performance.now();
    
      if (now - lastMouseMoveTime < 20) {
        currentInput.isTouch = false;
        document.removeEventListener('mousemove', onDocumentMouseMove);
      }
    
      lastMouseMoveTime = now;
    }
    /**
     * When an element is in focus and has a tippy, leaving the tab/window and
     * returning causes it to show again. For mouse users this is unexpected, but
     * for keyboard use it makes sense.
     * TODO: find a better technique to solve this problem
     */
    
    function onWindowBlur() {
      var activeElement = document.activeElement;
    
      if (isReferenceElement(activeElement)) {
        var instance = activeElement._tippy;
    
        if (activeElement.blur && !instance.state.isVisible) {
          activeElement.blur();
        }
      }
    }
    /**
     * Adds the needed global event listeners
     */
    
    function bindGlobalEventListeners() {
      document.addEventListener('touchstart', onDocumentTouchStart, _extends({}, PASSIVE, {
        capture: true
      }));
      window.addEventListener('blur', onWindowBlur);
    }
    
    var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
    var ua = isBrowser ? navigator.userAgent : '';
    var isIE = /MSIE |Trident\//.test(ua);
    var isIOS = isBrowser && /iPhone|iPad|iPod/.test(navigator.platform);
    function updateIOSClass(isAdd) {
      var shouldAdd = isAdd && isIOS && currentInput.isTouch;
      document.body.classList[shouldAdd ? 'add' : 'remove'](IOS_CLASS);
    }
    
    /**
     * Returns the popper's placement, ignoring shifting (top-start, etc)
     */
    
    function getBasePlacement(placement) {
      return placement.split('-')[0];
    }
    /**
     * Adds `data-inertia` attribute
     */
    
    function addInertia(tooltip) {
      tooltip.setAttribute('data-inertia', '');
    }
    /**
     * Removes `data-inertia` attribute
     */
    
    function removeInertia(tooltip) {
      tooltip.removeAttribute('data-inertia');
    }
    /**
     * Adds interactive-related attributes
     */
    
    function addInteractive(tooltip) {
      tooltip.setAttribute('data-interactive', '');
    }
    /**
     * Removes interactive-related attributes
     */
    
    function removeInteractive(tooltip) {
      tooltip.removeAttribute('data-interactive');
    }
    /**
     * Sets the content of a tooltip
     */
    
    function setContent(contentEl, props) {
      if (isElement(props.content)) {
        setInnerHTML(contentEl, '');
        contentEl.appendChild(props.content);
      } else if (typeof props.content !== 'function') {
        var key = props.allowHTML ? 'innerHTML' : 'textContent';
        contentEl[key] = props.content;
      }
    }
    /**
     * Returns the child elements of a popper element
     */
    
    function getChildren(popper) {
      return {
        tooltip: popper.querySelector(TOOLTIP_SELECTOR),
        content: popper.querySelector(CONTENT_SELECTOR),
        arrow: popper.querySelector(ARROW_SELECTOR) || popper.querySelector(SVG_ARROW_SELECTOR)
      };
    }
    /**
     * Creates an arrow element and returns it
     */
    
    function createArrowElement(arrow) {
      var arrowElement = div();
    
      if (arrow === true) {
        arrowElement.className = ARROW_CLASS;
      } else {
        arrowElement.className = SVG_ARROW_CLASS;
    
        if (isElement(arrow)) {
          arrowElement.appendChild(arrow);
        } else {
          setInnerHTML(arrowElement, arrow);
        }
      }
    
      return arrowElement;
    }
    /**
     * Constructs the popper element and returns it
     */
    
    function createPopperElement(id, props) {
      var popper = div();
      popper.className = POPPER_CLASS;
      popper.style.position = 'absolute';
      popper.style.top = '0';
      popper.style.left = '0';
      var tooltip = div();
      tooltip.className = TOOLTIP_CLASS;
      tooltip.id = "tippy-" + id;
      tooltip.setAttribute('data-state', 'hidden');
      tooltip.setAttribute('tabindex', '-1');
      updateTheme(tooltip, 'add', props.theme);
      var content = div();
      content.className = CONTENT_CLASS;
      content.setAttribute('data-state', 'hidden');
    
      if (props.interactive) {
        addInteractive(tooltip);
      }
    
      if (props.arrow) {
        tooltip.setAttribute('data-arrow', '');
        tooltip.appendChild(createArrowElement(props.arrow));
      }
    
      if (props.inertia) {
        addInertia(tooltip);
      }
    
      setContent(content, props);
      tooltip.appendChild(content);
      popper.appendChild(tooltip);
      updatePopperElement(popper, props, props);
      return popper;
    }
    /**
     * Updates the popper element based on the new props
     */
    
    function updatePopperElement(popper, prevProps, nextProps) {
      var _getChildren = getChildren(popper),
          tooltip = _getChildren.tooltip,
          content = _getChildren.content,
          arrow = _getChildren.arrow;
    
      popper.style.zIndex = '' + nextProps.zIndex;
      tooltip.setAttribute('data-animation', nextProps.animation);
      tooltip.style.maxWidth = appendPxIfNumber(nextProps.maxWidth);
    
      if (nextProps.role) {
        tooltip.setAttribute('role', nextProps.role);
      } else {
        tooltip.removeAttribute('role');
      }
    
      if (prevProps.content !== nextProps.content) {
        setContent(content, nextProps);
      } // arrow
    
    
      if (!prevProps.arrow && nextProps.arrow) {
        // false to true
        tooltip.appendChild(createArrowElement(nextProps.arrow));
        tooltip.setAttribute('data-arrow', '');
      } else if (prevProps.arrow && !nextProps.arrow) {
        // true to false
        tooltip.removeChild(arrow);
        tooltip.removeAttribute('data-arrow');
      } else if (prevProps.arrow !== nextProps.arrow) {
        // true to 'round' or vice-versa
        tooltip.removeChild(arrow);
        tooltip.appendChild(createArrowElement(nextProps.arrow));
      } // interactive
    
    
      if (!prevProps.interactive && nextProps.interactive) {
        addInteractive(tooltip);
      } else if (prevProps.interactive && !nextProps.interactive) {
        removeInteractive(tooltip);
      } // inertia
    
    
      if (!prevProps.inertia && nextProps.inertia) {
        addInertia(tooltip);
      } else if (prevProps.inertia && !nextProps.inertia) {
        removeInertia(tooltip);
      } // theme
    
    
      if (prevProps.theme !== nextProps.theme) {
        updateTheme(tooltip, 'remove', prevProps.theme);
        updateTheme(tooltip, 'add', nextProps.theme);
      }
    }
    /**
     * Add/remove transitionend listener from tooltip
     */
    
    function updateTransitionEndListener(tooltip, action, listener) {
      ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
        tooltip[action + 'EventListener'](event, listener);
      });
    }
    /**
     * Adds/removes theme from tooltip's classList
     */
    
    function updateTheme(tooltip, action, theme) {
      splitBySpaces(theme).forEach(function (name) {
        tooltip.classList[action](name + "-theme");
      });
    }
    /**
     * Determines if the mouse cursor is outside of the popper's interactive border
     * region
     */
    
    function isCursorOutsideInteractiveBorder(popperTreeData, event) {
      var clientX = event.clientX,
          clientY = event.clientY;
      return popperTreeData.every(function (_ref) {
        var popperRect = _ref.popperRect,
            tooltipRect = _ref.tooltipRect,
            interactiveBorder = _ref.interactiveBorder;
        // Get min/max bounds of both the popper and tooltip rects due to
        // `distance` offset
        var mergedRect = {
          top: Math.min(popperRect.top, tooltipRect.top),
          right: Math.max(popperRect.right, tooltipRect.right),
          bottom: Math.max(popperRect.bottom, tooltipRect.bottom),
          left: Math.min(popperRect.left, tooltipRect.left)
        };
        var exceedsTop = mergedRect.top - clientY > interactiveBorder;
        var exceedsBottom = clientY - mergedRect.bottom > interactiveBorder;
        var exceedsLeft = mergedRect.left - clientX > interactiveBorder;
        var exceedsRight = clientX - mergedRect.right > interactiveBorder;
        return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
      });
    }
    
    var idCounter = 1;
    var mouseMoveListeners = [];
    /**
     * Used by `hideAll()`
     */
    
    var mountedInstances = [];
    /**
     * Creates and returns a Tippy object. We're using a closure pattern instead of
     * a class so that the exposed object API is clean without private members
     * prefixed with `_`.
     */
    
    function createTippy(reference, passedProps) {
      var props = evaluateProps(reference, _extends({}, defaultProps, {}, getExtendedPassedProps(passedProps))); // If the reference shouldn't have multiple tippys, return null early
    
      if (!props.multiple && reference._tippy) {
        return null;
      }
      /* ======================= 🔒 Private members 🔒 ======================= */
    
    
      var showTimeout;
      var hideTimeout;
      var scheduleHideAnimationFrame;
      var isBeingDestroyed = false;
      var isVisibleFromClick = false;
      var didHideDueToDocumentMouseDown = false;
      var popperUpdates = 0;
      var lastTriggerEvent;
      var currentMountCallback;
      var currentTransitionEndListener;
      var listeners = [];
      var debouncedOnMouseMove = debounce(onMouseMove, props.interactiveDebounce);
      var currentTarget; // Support iframe contexts
      // Static check that assumes any of the `triggerTarget` or `reference`
      // nodes will never change documents, even when they are updated
    
      var doc = getOwnerDocument(props.triggerTarget || reference);
      /* ======================= 🔑 Public members 🔑 ======================= */
    
      var id = idCounter++;
      var popper = createPopperElement(id, props);
      var popperChildren = getChildren(popper);
      var popperInstance = null;
      var plugins = unique(props.plugins); // These two elements are static
    
      var tooltip = popperChildren.tooltip,
          content = popperChildren.content;
      var transitionableElements = [tooltip, content];
      var state = {
        // The current real placement (`data-placement` attribute)
        currentPlacement: null,
        // Is the instance currently enabled?
        isEnabled: true,
        // Is the tippy currently showing and not transitioning out?
        isVisible: false,
        // Has the instance been destroyed?
        isDestroyed: false,
        // Is the tippy currently mounted to the DOM?
        isMounted: false,
        // Has the tippy finished transitioning in?
        isShown: false
      };
      var instance = {
        // properties
        id: id,
        reference: reference,
        popper: popper,
        popperChildren: popperChildren,
        popperInstance: popperInstance,
        props: props,
        state: state,
        plugins: plugins,
        // methods
        clearDelayTimeouts: clearDelayTimeouts,
        setProps: setProps,
        setContent: setContent,
        show: show,
        hide: hide,
        enable: enable,
        disable: disable,
        destroy: destroy
      };
      /* ==================== Initial instance mutations =================== */
    
      reference._tippy = instance;
      popper._tippy = instance;
      var pluginsHooks = plugins.map(function (plugin) {
        return plugin.fn(instance);
      });
      var hadAriaExpandedAttributeOnCreate = reference.hasAttribute('aria-expanded');
      addListenersToTriggerTarget();
      handleAriaExpandedAttribute();
    
      if (!props.lazy) {
        createPopperInstance();
      }
    
      invokeHook('onCreate', [instance]);
    
      if (props.showOnCreate) {
        scheduleShow();
      } // Prevent a tippy with a delay from hiding if the cursor left then returned
      // before it started hiding
    
    
      popper.addEventListener('mouseenter', function () {
        if (instance.props.interactive && instance.state.isVisible) {
          instance.clearDelayTimeouts();
        }
      });
      popper.addEventListener('mouseleave', function (event) {
        if (instance.props.interactive && includes(instance.props.trigger, 'mouseenter')) {
          debouncedOnMouseMove(event);
          doc.addEventListener('mousemove', debouncedOnMouseMove);
        }
      });
      return instance;
      /* ======================= 🔒 Private methods 🔒 ======================= */
    
      function getNormalizedTouchSettings() {
        var touch = instance.props.touch;
        return Array.isArray(touch) ? touch : [touch, 0];
      }
    
      function getIsCustomTouchBehavior() {
        return getNormalizedTouchSettings()[0] === 'hold';
      }
    
      function getCurrentTarget() {
        return currentTarget || reference;
      }
    
      function getDelay(isShow) {
        // For touch or keyboard input, force `0` delay for UX reasons
        // Also if the instance is mounted but not visible (transitioning out),
        // ignore delay
        if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === 'focus') {
          return 0;
        }
    
        return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);
      }
    
      function invokeHook(hook, args, shouldInvokePropsHook) {
        if (shouldInvokePropsHook === void 0) {
          shouldInvokePropsHook = true;
        }
    
        pluginsHooks.forEach(function (pluginHooks) {
          if (hasOwnProperty(pluginHooks, hook)) {
            // @ts-ignore
            pluginHooks[hook].apply(pluginHooks, args);
          }
        });
    
        if (shouldInvokePropsHook) {
          var _instance$props;
    
          // @ts-ignore
          (_instance$props = instance.props)[hook].apply(_instance$props, args);
        }
      }
    
      function handleAriaDescribedByAttribute() {
        var aria = instance.props.aria;
    
        if (!aria) {
          return;
        }
    
        var attr = "aria-" + aria;
        var id = tooltip.id;
        var nodes = normalizeToArray(instance.props.triggerTarget || reference);
        nodes.forEach(function (node) {
          var currentValue = node.getAttribute(attr);
    
          if (instance.state.isVisible) {
            node.setAttribute(attr, currentValue ? currentValue + " " + id : id);
          } else {
            var nextValue = currentValue && currentValue.replace(id, '').trim();
    
            if (nextValue) {
              node.setAttribute(attr, nextValue);
            } else {
              node.removeAttribute(attr);
            }
          }
        });
      }
    
      function handleAriaExpandedAttribute() {
        // If the user has specified `aria-expanded` on their reference when the
        // instance was created, we have to assume they're controlling it externally
        // themselves
        if (hadAriaExpandedAttributeOnCreate) {
          return;
        }
    
        var nodes = normalizeToArray(instance.props.triggerTarget || reference);
        nodes.forEach(function (node) {
          if (instance.props.interactive) {
            node.setAttribute('aria-expanded', instance.state.isVisible && node === getCurrentTarget() ? 'true' : 'false');
          } else {
            node.removeAttribute('aria-expanded');
          }
        });
      }
    
      function cleanupInteractiveMouseListeners() {
        doc.body.removeEventListener('mouseleave', scheduleHide);
        doc.removeEventListener('mousemove', debouncedOnMouseMove);
        mouseMoveListeners = mouseMoveListeners.filter(function (listener) {
          return listener !== debouncedOnMouseMove;
        });
      }
    
      function onDocumentMouseDown(event) {
        // Clicked on interactive popper
        if (instance.props.interactive && popper.contains(event.target)) {
          return;
        } // Clicked on the event listeners target
    
    
        if (getCurrentTarget().contains(event.target)) {
          if (currentInput.isTouch) {
            return;
          }
    
          if (instance.state.isVisible && includes(instance.props.trigger, 'click')) {
            return;
          }
        }
    
        if (instance.props.hideOnClick === true) {
          isVisibleFromClick = false;
          instance.clearDelayTimeouts();
          instance.hide(); // `mousedown` event is fired right before `focus` if pressing the
          // currentTarget. This lets a tippy with `focus` trigger know that it
          // should not show
    
          didHideDueToDocumentMouseDown = true;
          setTimeout(function () {
            didHideDueToDocumentMouseDown = false;
          }); // The listener gets added in `scheduleShow()`, but this may be hiding it
          // before it shows, and hide()'s early bail-out behavior can prevent it
          // from being cleaned up
    
          if (!instance.state.isMounted) {
            removeDocumentMouseDownListener();
          }
        }
      }
    
      function addDocumentMouseDownListener() {
        doc.addEventListener('mousedown', onDocumentMouseDown, true);
      }
    
      function removeDocumentMouseDownListener() {
        doc.removeEventListener('mousedown', onDocumentMouseDown, true);
      }
    
      function onTransitionedOut(duration, callback) {
        onTransitionEnd(duration, function () {
          if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {
            callback();
          }
        });
      }
    
      function onTransitionedIn(duration, callback) {
        onTransitionEnd(duration, callback);
      }
    
      function onTransitionEnd(duration, callback) {
        function listener(event) {
          if (event.target === tooltip) {
            updateTransitionEndListener(tooltip, 'remove', listener);
            callback();
          }
        } // Make callback synchronous if duration is 0
        // `transitionend` won't fire otherwise
    
    
        if (duration === 0) {
          return callback();
        }
    
        updateTransitionEndListener(tooltip, 'remove', currentTransitionEndListener);
        updateTransitionEndListener(tooltip, 'add', listener);
        currentTransitionEndListener = listener;
      }
    
      function on(eventType, handler, options) {
        if (options === void 0) {
          options = false;
        }
    
        var nodes = normalizeToArray(instance.props.triggerTarget || reference);
        nodes.forEach(function (node) {
          node.addEventListener(eventType, handler, options);
          listeners.push({
            node: node,
            eventType: eventType,
            handler: handler,
            options: options
          });
        });
      }
    
      function addListenersToTriggerTarget() {
        if (getIsCustomTouchBehavior()) {
          on('touchstart', onTrigger, PASSIVE);
          on('touchend', onMouseLeave, PASSIVE);
        }
    
        splitBySpaces(instance.props.trigger).forEach(function (eventType) {
          if (eventType === 'manual') {
            return;
          }
    
          on(eventType, onTrigger);
    
          switch (eventType) {
            case 'mouseenter':
              on('mouseleave', onMouseLeave);
              break;
    
            case 'focus':
              on(isIE ? 'focusout' : 'blur', onBlurOrFocusOut);
              break;
    
            case 'focusin':
              on('focusout', onBlurOrFocusOut);
              break;
          }
        });
      }
    
      function removeListenersFromTriggerTarget() {
        listeners.forEach(function (_ref) {
          var node = _ref.node,
              eventType = _ref.eventType,
              handler = _ref.handler,
              options = _ref.options;
          node.removeEventListener(eventType, handler, options);
        });
        listeners = [];
      }
    
      function onTrigger(event) {
        var shouldScheduleClickHide = false;
    
        if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {
          return;
        }
    
        lastTriggerEvent = event;
        currentTarget = event.currentTarget;
        handleAriaExpandedAttribute();
    
        if (!instance.state.isVisible && isMouseEvent(event)) {
          // If scrolling, `mouseenter` events can be fired if the cursor lands
          // over a new target, but `mousemove` events don't get fired. This
          // causes interactive tooltips to get stuck open until the cursor is
          // moved
          mouseMoveListeners.forEach(function (listener) {
            return listener(event);
          });
        } // Toggle show/hide when clicking click-triggered tooltips
    
    
        if (event.type === 'click' && (!includes(instance.props.trigger, 'mouseenter') || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {
          shouldScheduleClickHide = true;
        } else {
          var _getNormalizedTouchSe = getNormalizedTouchSettings(),
              value = _getNormalizedTouchSe[0],
              duration = _getNormalizedTouchSe[1];
    
          if (currentInput.isTouch && value === 'hold' && duration) {
            // We can hijack the show timeout here, it will be cleared by
            // `scheduleHide()` when necessary
            showTimeout = setTimeout(function () {
              scheduleShow(event);
            }, duration);
          } else {
            scheduleShow(event);
          }
        }
    
        if (event.type === 'click') {
          isVisibleFromClick = !shouldScheduleClickHide;
        }
    
        if (shouldScheduleClickHide) {
          scheduleHide(event);
        }
      }
    
      function onMouseMove(event) {
        var isCursorOverReferenceOrPopper = closestCallback(event.target, function (el) {
          return el === reference || el === popper;
        });
    
        if (event.type === 'mousemove' && isCursorOverReferenceOrPopper) {
          return;
        }
    
        var popperTreeData = arrayFrom(popper.querySelectorAll(POPPER_SELECTOR)).concat(popper).map(function (popper) {
          var instance = popper._tippy;
          var tooltip = instance.popperChildren.tooltip;
          var interactiveBorder = instance.props.interactiveBorder;
          return {
            popperRect: popper.getBoundingClientRect(),
            tooltipRect: tooltip.getBoundingClientRect(),
            interactiveBorder: interactiveBorder
          };
        });
    
        if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
          cleanupInteractiveMouseListeners();
          scheduleHide(event);
        }
      }
    
      function onMouseLeave(event) {
        if (isEventListenerStopped(event)) {
          return;
        }
    
        if (includes(instance.props.trigger, 'click') && isVisibleFromClick) {
          return;
        }
    
        if (instance.props.interactive) {
          doc.body.addEventListener('mouseleave', scheduleHide);
          doc.addEventListener('mousemove', debouncedOnMouseMove);
          pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
          debouncedOnMouseMove(event);
          return;
        }
    
        scheduleHide(event);
      }
    
      function onBlurOrFocusOut(event) {
        if (!includes(instance.props.trigger, 'focusin') && event.target !== getCurrentTarget()) {
          return;
        } // If focus was moved to within the popper
    
    
        if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {
          return;
        }
    
        scheduleHide(event);
      }
    
      function isEventListenerStopped(event) {
        var supportsTouch = 'ontouchstart' in window;
        var isTouchEvent = includes(event.type, 'touch');
        var isCustomTouch = getIsCustomTouchBehavior();
        return supportsTouch && currentInput.isTouch && isCustomTouch && !isTouchEvent || currentInput.isTouch && !isCustomTouch && isTouchEvent;
      }
    
      function createPopperInstance() {
        var popperOptions = instance.props.popperOptions;
        var arrow = instance.popperChildren.arrow;
        var flipModifier = getModifier(popperOptions, 'flip');
        var preventOverflowModifier = getModifier(popperOptions, 'preventOverflow');
        var distancePx;
    
        function applyMutations(data) {
          var prevPlacement = instance.state.currentPlacement;
          instance.state.currentPlacement = data.placement;
    
          if (instance.props.flip && !instance.props.flipOnUpdate) {
            if (data.flipped) {
              instance.popperInstance.options.placement = data.placement;
            }
    
            setModifierValue(instance.popperInstance.modifiers, 'flip', 'enabled', false);
          }
    
          tooltip.setAttribute('data-placement', data.placement);
    
          if (data.attributes['x-out-of-boundaries'] !== false) {
            tooltip.setAttribute('data-out-of-boundaries', '');
          } else {
            tooltip.removeAttribute('data-out-of-boundaries');
          }
    
          var basePlacement = getBasePlacement(data.placement);
          var isVerticalPlacement = includes(['top', 'bottom'], basePlacement);
          var isSecondaryPlacement = includes(['bottom', 'right'], basePlacement); // Apply `distance` prop
    
          tooltip.style.top = '0';
          tooltip.style.left = '0';
          tooltip.style[isVerticalPlacement ? 'top' : 'left'] = (isSecondaryPlacement ? 1 : -1) * distancePx + 'px'; // Careful not to cause an infinite loop here
          // Fixes https://github.com/FezVrasta/popper.js/issues/784
    
          if (prevPlacement && prevPlacement !== data.placement) {
            instance.popperInstance.update();
          }
        }
    
        var config = _extends({
          eventsEnabled: false,
          placement: instance.props.placement
        }, popperOptions, {
          modifiers: _extends({}, popperOptions && popperOptions.modifiers, {
            // We can't use `padding` on the popper el because of these bugs when
            // flipping from a vertical to horizontal placement or vice-versa,
            // there is severe flickering.
            // https://github.com/FezVrasta/popper.js/issues/720
            // This workaround increases bundle size by 250B minzip unfortunately,
            // due to need to custom compute the distance (since Popper rect does
            // not get affected by the inner tooltip's distance offset)
            tippyDistance: {
              enabled: true,
              order: 0,
              fn: function fn(data) {
                // `html` fontSize may change while `popperInstance` is alive
                // e.g. on resize in media queries
                distancePx = getUnitsInPx(doc, instance.props.distance);
                var basePlacement = getBasePlacement(data.placement);
                var computedPreventOverflowPadding = getComputedPadding(basePlacement, preventOverflowModifier && preventOverflowModifier.padding, distancePx);
                var computedFlipPadding = getComputedPadding(basePlacement, flipModifier && flipModifier.padding, distancePx);
                var instanceModifiers = instance.popperInstance.modifiers;
                setModifierValue(instanceModifiers, 'preventOverflow', 'padding', computedPreventOverflowPadding);
                setModifierValue(instanceModifiers, 'flip', 'padding', computedFlipPadding);
                return data;
              }
            },
            preventOverflow: _extends({
              boundariesElement: instance.props.boundary
            }, preventOverflowModifier),
            flip: _extends({
              enabled: instance.props.flip,
              behavior: instance.props.flipBehavior
            }, flipModifier),
            arrow: _extends({
              element: arrow,
              enabled: !!arrow
            }, getModifier(popperOptions, 'arrow')),
            offset: _extends({
              offset: instance.props.offset
            }, getModifier(popperOptions, 'offset'))
          }),
          onCreate: function onCreate(data) {
            applyMutations(data);
            preserveInvocation(popperOptions && popperOptions.onCreate, config.onCreate, [data]);
            runMountCallback();
          },
          onUpdate: function onUpdate(data) {
            applyMutations(data);
            preserveInvocation(popperOptions && popperOptions.onUpdate, config.onUpdate, [data]);
            runMountCallback();
          }
        });
    
        instance.popperInstance = new Popper(reference, popper, config);
      }
    
      function runMountCallback() {
        // Only invoke currentMountCallback after 2 updates
        // This fixes some bugs in Popper.js (TODO: aim for only 1 update)
        if (popperUpdates === 0) {
          popperUpdates++; // 1
    
          instance.popperInstance.update();
        } else if (currentMountCallback && popperUpdates === 1) {
          popperUpdates++; // 2
    
          reflow(popper);
          currentMountCallback();
        }
      }
    
      function mount() {
        // The mounting callback (`currentMountCallback`) is only run due to a
        // popperInstance update/create
        popperUpdates = 0;
        var appendTo = instance.props.appendTo;
        var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so
        // it's directly after the reference element so the elements inside the
        // tippy can be tabbed to
        // If there are clipping issues, the user can specify a different appendTo
        // and ensure focus management is handled correctly manually
    
        var node = getCurrentTarget();
    
        if (instance.props.interactive && appendTo === defaultProps.appendTo || appendTo === 'parent') {
          parentNode = node.parentNode;
        } else {
          parentNode = invokeWithArgsOrReturn(appendTo, [node]);
        } // The popper element needs to exist on the DOM before its position can be
        // updated as Popper.js needs to read its dimensions
    
    
        if (!parentNode.contains(popper)) {
          parentNode.appendChild(popper);
        }
    
        if (process.env.NODE_ENV !== "production") {
          // Accessibility check
          warnWhen(instance.props.interactive && appendTo === defaultProps.appendTo && node.nextElementSibling !== popper, ['Interactive tippy element may not be accessible via keyboard navigation', 'because it is not directly after the reference element in the DOM source', 'order.', '\n\n', 'Using a wrapper <div> or <span> tag around the reference element solves', 'this by creating a new parentNode context.', '\n\n', 'Specifying `appendTo: document.body` silences this warning, but it', 'assumes you are using a focus management solution to handle keyboard', 'navigation.', '\n\n', 'See: https://atomiks.github.io/tippyjs/accessibility/#interactivity'].join(' '));
        }
    
        setModifierValue(instance.popperInstance.modifiers, 'flip', 'enabled', instance.props.flip);
        instance.popperInstance.enableEventListeners(); // Mounting callback invoked in `onUpdate`
    
        instance.popperInstance.update();
      }
    
      function scheduleShow(event) {
        instance.clearDelayTimeouts();
    
        if (!instance.popperInstance) {
          createPopperInstance();
        }
    
        if (event) {
          invokeHook('onTrigger', [instance, event]);
        }
    
        addDocumentMouseDownListener();
        var delay = getDelay(true);
    
        if (delay) {
          showTimeout = setTimeout(function () {
            instance.show();
          }, delay);
        } else {
          instance.show();
        }
      }
    
      function scheduleHide(event) {
        instance.clearDelayTimeouts();
        invokeHook('onUntrigger', [instance, event]);
    
        if (!instance.state.isVisible) {
          removeDocumentMouseDownListener();
          return;
        } // For interactive tippies, scheduleHide is added to a document.body handler
        // from onMouseLeave so must intercept scheduled hides from mousemove/leave
        // events when trigger contains mouseenter and click, and the tip is
        // currently shown as a result of a click.
    
    
        if (includes(instance.props.trigger, 'mouseenter') && includes(instance.props.trigger, 'click') && includes(['mouseleave', 'mousemove'], event.type) && isVisibleFromClick) {
          return;
        }
    
        var delay = getDelay(false);
    
        if (delay) {
          hideTimeout = setTimeout(function () {
            if (instance.state.isVisible) {
              instance.hide();
            }
          }, delay);
        } else {
          // Fixes a `transitionend` problem when it fires 1 frame too
          // late sometimes, we don't want hide() to be called.
          scheduleHideAnimationFrame = requestAnimationFrame(function () {
            instance.hide();
          });
        }
      }
      /* ======================= 🔑 Public methods 🔑 ======================= */
    
    
      function enable() {
        instance.state.isEnabled = true;
      }
    
      function disable() {
        // Disabling the instance should also hide it
        // https://github.com/atomiks/tippy.js-react/issues/106
        instance.hide();
        instance.state.isEnabled = false;
      }
    
      function clearDelayTimeouts() {
        clearTimeout(showTimeout);
        clearTimeout(hideTimeout);
        cancelAnimationFrame(scheduleHideAnimationFrame);
      }
    
      function setProps(partialProps) {
        if (process.env.NODE_ENV !== "production") {
          warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('setProps'));
        }
    
        if (instance.state.isDestroyed) {
          return;
        }
    
        if (process.env.NODE_ENV !== "production") {
          validateProps(partialProps, plugins);
          warnWhen(partialProps.plugins ? partialProps.plugins.length !== plugins.length || plugins.some(function (p, i) {
            if (partialProps.plugins && partialProps.plugins[i]) {
              return p !== partialProps.plugins[i];
            } else {
              return true;
            }
          }) : false, "Cannot update plugins");
        }
    
        invokeHook('onBeforeUpdate', [instance, partialProps]);
        removeListenersFromTriggerTarget();
        var prevProps = instance.props;
        var nextProps = evaluateProps(reference, _extends({}, instance.props, {}, partialProps, {
          ignoreAttributes: true
        }));
        nextProps.ignoreAttributes = useIfDefined(partialProps.ignoreAttributes, prevProps.ignoreAttributes);
        instance.props = nextProps;
        addListenersToTriggerTarget();
    
        if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
          cleanupInteractiveMouseListeners();
          debouncedOnMouseMove = debounce(onMouseMove, nextProps.interactiveDebounce);
        }
    
        updatePopperElement(popper, prevProps, nextProps);
        instance.popperChildren = getChildren(popper); // Ensure stale aria-expanded attributes are removed
    
        if (prevProps.triggerTarget && !nextProps.triggerTarget) {
          normalizeToArray(prevProps.triggerTarget).forEach(function (node) {
            node.removeAttribute('aria-expanded');
          });
        } else if (nextProps.triggerTarget) {
          reference.removeAttribute('aria-expanded');
        }
    
        handleAriaExpandedAttribute();
    
        if (instance.popperInstance) {
          if (POPPER_INSTANCE_DEPENDENCIES.some(function (prop) {
            return hasOwnProperty(partialProps, prop) && partialProps[prop] !== prevProps[prop];
          })) {
            var currentReference = instance.popperInstance.reference;
            instance.popperInstance.destroy();
            createPopperInstance();
            instance.popperInstance.reference = currentReference;
    
            if (instance.state.isVisible) {
              instance.popperInstance.enableEventListeners();
            }
          } else {
            instance.popperInstance.update();
          }
        }
    
        invokeHook('onAfterUpdate', [instance, partialProps]);
      }
    
      function setContent(content) {
        instance.setProps({
          content: content
        });
      }
    
      function show(duration) {
        if (duration === void 0) {
          duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);
        }
    
        if (process.env.NODE_ENV !== "production") {
          warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('show'));
        } // Early bail-out
    
    
        var isAlreadyVisible = instance.state.isVisible;
        var isDestroyed = instance.state.isDestroyed;
        var isDisabled = !instance.state.isEnabled;
        var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;
    
        if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {
          return;
        } // Normalize `disabled` behavior across browsers.
        // Firefox allows events on disabled elements, but Chrome doesn't.
        // Using a wrapper element (i.e. <span>) is recommended.
    
    
        if (getCurrentTarget().hasAttribute('disabled')) {
          return;
        }
    
        if (!instance.popperInstance) {
          createPopperInstance();
        }
    
        invokeHook('onShow', [instance], false);
    
        if (instance.props.onShow(instance) === false) {
          return;
        }
    
        addDocumentMouseDownListener();
        popper.style.visibility = 'visible';
        instance.state.isVisible = true; // Prevent a transition of the popper from its previous position and of the
        // elements at a different placement
        // Check if the tippy was fully unmounted before `show()` was called, to
        // allow for smooth transition for `createSingleton()`
    
        if (!instance.state.isMounted) {
          setTransitionDuration(transitionableElements.concat(popper), 0);
        }
    
        currentMountCallback = function currentMountCallback() {
          if (!instance.state.isVisible) {
            return;
          }
    
          setTransitionDuration([popper], instance.props.updateDuration);
          setTransitionDuration(transitionableElements, duration);
          setVisibilityState(transitionableElements, 'visible');
          handleAriaDescribedByAttribute();
          handleAriaExpandedAttribute();
          pushIfUnique(mountedInstances, instance);
          updateIOSClass(true);
          instance.state.isMounted = true;
          invokeHook('onMount', [instance]);
          onTransitionedIn(duration, function () {
            instance.state.isShown = true;
            invokeHook('onShown', [instance]);
          });
        };
    
        mount();
      }
    
      function hide(duration) {
        if (duration === void 0) {
          duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);
        }
    
        if (process.env.NODE_ENV !== "production") {
          warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hide'));
        } // Early bail-out
    
    
        var isAlreadyHidden = !instance.state.isVisible && !isBeingDestroyed;
        var isDestroyed = instance.state.isDestroyed;
        var isDisabled = !instance.state.isEnabled && !isBeingDestroyed;
    
        if (isAlreadyHidden || isDestroyed || isDisabled) {
          return;
        }
    
        invokeHook('onHide', [instance], false);
    
        if (instance.props.onHide(instance) === false && !isBeingDestroyed) {
          return;
        }
    
        removeDocumentMouseDownListener();
        popper.style.visibility = 'hidden';
        instance.state.isVisible = false;
        instance.state.isShown = false;
        setTransitionDuration(transitionableElements, duration);
        setVisibilityState(transitionableElements, 'hidden');
        handleAriaDescribedByAttribute();
        handleAriaExpandedAttribute();
        onTransitionedOut(duration, function () {
          instance.popperInstance.disableEventListeners();
          instance.popperInstance.options.placement = instance.props.placement;
          popper.parentNode.removeChild(popper);
          mountedInstances = mountedInstances.filter(function (i) {
            return i !== instance;
          });
    
          if (mountedInstances.length === 0) {
            updateIOSClass(false);
          }
    
          instance.state.isMounted = false;
          invokeHook('onHidden', [instance]);
        });
      }
    
      function destroy() {
        if (process.env.NODE_ENV !== "production") {
          warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('destroy'));
        }
    
        if (instance.state.isDestroyed) {
          return;
        }
    
        isBeingDestroyed = true;
        instance.clearDelayTimeouts();
        instance.hide(0);
        removeListenersFromTriggerTarget();
        delete reference._tippy;
    
        if (instance.popperInstance) {
          instance.popperInstance.destroy();
        }
    
        isBeingDestroyed = false;
        instance.state.isDestroyed = true;
        invokeHook('onDestroy', [instance]);
      }
    }
    
    function tippy(targets, optionalProps,
    /** @deprecated use Props.plugins */
    plugins) {
      if (optionalProps === void 0) {
        optionalProps = {};
      }
    
      if (plugins === void 0) {
        plugins = [];
      }
    
      plugins = defaultProps.plugins.concat(optionalProps.plugins || plugins);
    
      if (process.env.NODE_ENV !== "production") {
        validateTargets(targets);
        validateProps(optionalProps, plugins);
      }
    
      bindGlobalEventListeners();
    
      var passedProps = _extends({}, optionalProps, {
        plugins: plugins
      });
    
      var elements = getArrayOfElements(targets);
    
      if (process.env.NODE_ENV !== "production") {
        var isSingleContentElement = isElement(passedProps.content);
        var isMoreThanOneReferenceElement = elements.length > 1;
        warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, ['tippy() was passed an Element as the `content` prop, but more than one tippy', 'instance was created by this invocation. This means the content element will', 'only be appended to the last tippy instance.', '\n\n', 'Instead, pass the .innerHTML of the element, or use a function that returns a', 'cloned version of the element instead.', '\n\n', '1) content: element.innerHTML\n', '2) content: () => element.cloneNode(true)'].join(' '));
      }
    
      var instances = elements.reduce(function (acc, reference) {
        var instance = reference && createTippy(reference, passedProps);
    
        if (instance) {
          acc.push(instance);
        }
    
        return acc;
      }, []);
      return isElement(targets) ? instances[0] : instances;
    }
    
    tippy.version = version;
    tippy.defaultProps = defaultProps;
    tippy.setDefaultProps = setDefaultProps;
    tippy.currentInput = currentInput;
    /**
     * Hides all visible poppers on the document
     */
    
    var hideAll = function hideAll(_temp) {
      var _ref = _temp === void 0 ? {} : _temp,
          excludedReferenceOrInstance = _ref.exclude,
          duration = _ref.duration;
    
      mountedInstances.forEach(function (instance) {
        var isExcluded = false;
    
        if (excludedReferenceOrInstance) {
          isExcluded = isReferenceElement(excludedReferenceOrInstance) ? instance.reference === excludedReferenceOrInstance : instance.popper === excludedReferenceOrInstance.popper;
        }
    
        if (!isExcluded) {
          instance.hide(duration);
        }
      });
    };
    /**
     * Returns a proxy wrapper function that passes the plugins
     * @deprecated use tippy.setDefaultProps({plugins: [...]});
     */
    
    function createTippyWithPlugins(outerPlugins) {
      if (process.env.NODE_ENV !== "production") {
        warnWhen(true, ['createTippyWithPlugins([...]) has been deprecated.', '\n\n', 'Use tippy.setDefaultProps({plugins: [...]}) instead.'].join(' '));
      }
    
      var tippyPluginsWrapper = function tippyPluginsWrapper(targets, optionalProps, innerPlugins) {
        if (optionalProps === void 0) {
          optionalProps = {};
        }
    
        if (innerPlugins === void 0) {
          innerPlugins = [];
        }
    
        innerPlugins = optionalProps.plugins || innerPlugins;
        return tippy(targets, _extends({}, optionalProps, {
          plugins: [].concat(outerPlugins, innerPlugins)
        }));
      };
    
      tippyPluginsWrapper.version = version;
      tippyPluginsWrapper.defaultProps = defaultProps;
      tippyPluginsWrapper.setDefaultProps = setDefaultProps;
      tippyPluginsWrapper.currentInput = currentInput; // @ts-ignore
    
      return tippyPluginsWrapper;
    }
    
    exports.BACKDROP_CLASS = BACKDROP_CLASS;
    exports.ROUND_ARROW = ROUND_ARROW;
    exports._extends = _extends;
    exports.arrayFrom = arrayFrom;
    exports.closestCallback = closestCallback;
    exports.createTippyWithPlugins = createTippyWithPlugins;
    exports.currentInput = currentInput;
    exports.defaultProps = defaultProps;
    exports.div = div;
    exports.errorWhen = errorWhen;
    exports.getBasePlacement = getBasePlacement;
    exports.getOwnerDocument = getOwnerDocument;
    exports.hideAll = hideAll;
    exports.includes = includes;
    exports.isBrowser = isBrowser;
    exports.isMouseEvent = isMouseEvent;
    exports.normalizeToArray = normalizeToArray;
    exports.removeProperties = removeProperties;
    exports.setVisibilityState = setVisibilityState;
    exports.tippy = tippy;
    exports.useIfDefined = useIfDefined;
    exports.warnWhen = warnWhen;
    
    
    }).call(this)}).call(this,require('_process'))
    
    },{"_process":423,"popper.js":422}],435:[function(require,module,exports){
    (function (process){(function (){
    /**!
    * tippy.js v5.2.1
    * (c) 2017-2020 atomiks
    * MIT License
    */
    'use strict';
    
    Object.defineProperty(exports, '__esModule', { value: true });
    
    var index = require('./tippy.chunk.cjs.js');
    require('popper.js');
    
    /**
     * Re-uses a single tippy element for many different tippy instances.
     * Replaces v4's `tippy.group()`.
     */
    
    var createSingleton = function createSingleton(tippyInstances, optionalProps,
    /** @deprecated use Props.plugins */
    plugins) {
      if (optionalProps === void 0) {
        optionalProps = {};
      }
    
      if (plugins === void 0) {
        plugins = [];
      }
    
      if (process.env.NODE_ENV !== "production") {
        index.errorWhen(!Array.isArray(tippyInstances), ['The first argument passed to createSingleton() must be an array of tippy', 'instances. The passed value was', String(tippyInstances)].join(' '));
      }
    
      plugins = optionalProps.plugins || plugins;
      tippyInstances.forEach(function (instance) {
        instance.disable();
      });
    
      var userAria = index._extends({}, index.defaultProps, {}, optionalProps).aria;
    
      var currentAria;
      var currentTarget;
      var shouldSkipUpdate = false;
      var references = tippyInstances.map(function (instance) {
        return instance.reference;
      });
      var singleton = {
        fn: function fn(instance) {
          function handleAriaDescribedByAttribute(isShow) {
            if (!currentAria) {
              return;
            }
    
            var attr = "aria-" + currentAria;
    
            if (isShow && !instance.props.interactive) {
              currentTarget.setAttribute(attr, instance.popperChildren.tooltip.id);
            } else {
              currentTarget.removeAttribute(attr);
            }
          }
    
          return {
            onAfterUpdate: function onAfterUpdate(_, _ref) {
              var aria = _ref.aria;
    
              // Ensure `aria` for the singleton instance stays `null`, while
              // changing the `userAria` value
              if (aria !== undefined && aria !== userAria) {
                if (!shouldSkipUpdate) {
                  userAria = aria;
                } else {
                  shouldSkipUpdate = true;
                  instance.setProps({
                    aria: null
                  });
                  shouldSkipUpdate = false;
                }
              }
            },
            onDestroy: function onDestroy() {
              tippyInstances.forEach(function (instance) {
                instance.enable();
              });
            },
            onMount: function onMount() {
              handleAriaDescribedByAttribute(true);
            },
            onUntrigger: function onUntrigger() {
              handleAriaDescribedByAttribute(false);
            },
            onTrigger: function onTrigger(_, event) {
              var target = event.currentTarget;
              var index = references.indexOf(target); // bail-out
    
              if (target === currentTarget) {
                return;
              }
    
              currentTarget = target;
              currentAria = userAria;
    
              if (instance.state.isVisible) {
                handleAriaDescribedByAttribute(true);
              }
    
              instance.popperInstance.reference = target;
              instance.setContent(tippyInstances[index].props.content);
            }
          };
        }
      };
      return index.tippy(index.div(), index._extends({}, optionalProps, {
        plugins: [singleton].concat(plugins),
        aria: null,
        triggerTarget: references
      }));
    };
    
    var BUBBLING_EVENTS_MAP = {
      mouseover: 'mouseenter',
      focusin: 'focus',
      click: 'click'
    };
    /**
     * Creates a delegate instance that controls the creation of tippy instances
     * for child elements (`target` CSS selector).
     */
    
    function delegate(targets, props,
    /** @deprecated use Props.plugins */
    plugins) {
      if (plugins === void 0) {
        plugins = [];
      }
    
      if (process.env.NODE_ENV !== "production") {
        index.errorWhen(!(props && props.target), ['You must specity a `target` prop indicating a CSS selector string matching', 'the target elements that should receive a tippy.'].join(' '));
      }
    
      plugins = props.plugins || plugins;
      var listeners = [];
      var childTippyInstances = [];
      var target = props.target;
      var nativeProps = index.removeProperties(props, ['target']);
    
      var parentProps = index._extends({}, nativeProps, {
        plugins: plugins,
        trigger: 'manual'
      });
    
      var childProps = index._extends({}, nativeProps, {
        plugins: plugins,
        showOnCreate: true
      });
    
      var returnValue = index.tippy(targets, parentProps);
      var normalizedReturnValue = index.normalizeToArray(returnValue);
    
      function onTrigger(event) {
        if (!event.target) {
          return;
        }
    
        var targetNode = event.target.closest(target);
    
        if (!targetNode) {
          return;
        } // Get relevant trigger with fallbacks:
        // 1. Check `data-tippy-trigger` attribute on target node
        // 2. Fallback to `trigger` passed to `delegate()`
        // 3. Fallback to `defaultProps.trigger`
    
    
        var trigger = targetNode.getAttribute('data-tippy-trigger') || props.trigger || index.defaultProps.trigger; // Only create the instance if the bubbling event matches the trigger type
    
        if (!index.includes(trigger, BUBBLING_EVENTS_MAP[event.type])) {
          return;
        }
    
        var instance = index.tippy(targetNode, childProps);
    
        if (instance) {
          childTippyInstances = childTippyInstances.concat(instance);
        }
      }
    
      function on(node, eventType, handler, options) {
        if (options === void 0) {
          options = false;
        }
    
        node.addEventListener(eventType, handler, options);
        listeners.push({
          node: node,
          eventType: eventType,
          handler: handler,
          options: options
        });
      }
    
      function addEventListeners(instance) {
        var reference = instance.reference;
        on(reference, 'mouseover', onTrigger);
        on(reference, 'focusin', onTrigger);
        on(reference, 'click', onTrigger);
      }
    
      function removeEventListeners() {
        listeners.forEach(function (_ref) {
          var node = _ref.node,
              eventType = _ref.eventType,
              handler = _ref.handler,
              options = _ref.options;
          node.removeEventListener(eventType, handler, options);
        });
        listeners = [];
      }
    
      function applyMutations(instance) {
        var originalDestroy = instance.destroy;
    
        instance.destroy = function (shouldDestroyChildInstances) {
          if (shouldDestroyChildInstances === void 0) {
            shouldDestroyChildInstances = true;
          }
    
          if (shouldDestroyChildInstances) {
            childTippyInstances.forEach(function (instance) {
              instance.destroy();
            });
          }
    
          childTippyInstances = [];
          removeEventListeners();
          originalDestroy();
        };
    
        addEventListeners(instance);
      }
    
      normalizedReturnValue.forEach(applyMutations);
      return returnValue;
    }
    
    var animateFill = {
      name: 'animateFill',
      defaultValue: false,
      fn: function fn(instance) {
        var _instance$popperChild = instance.popperChildren,
            tooltip = _instance$popperChild.tooltip,
            content = _instance$popperChild.content;
        var backdrop = instance.props.animateFill ? createBackdropElement() : null;
    
        function addBackdropToPopperChildren() {
          instance.popperChildren.backdrop = backdrop;
        }
    
        return {
          onCreate: function onCreate() {
            if (backdrop) {
              addBackdropToPopperChildren();
              tooltip.insertBefore(backdrop, tooltip.firstElementChild);
              tooltip.setAttribute('data-animatefill', '');
              tooltip.style.overflow = 'hidden';
              instance.setProps({
                animation: 'shift-away',
                arrow: false
              });
            }
          },
          onMount: function onMount() {
            if (backdrop) {
              var transitionDuration = tooltip.style.transitionDuration;
              var duration = Number(transitionDuration.replace('ms', '')); // The content should fade in after the backdrop has mostly filled the
              // tooltip element. `clip-path` is the other alternative but is not
              // well-supported and is buggy on some devices.
    
              content.style.transitionDelay = Math.round(duration / 10) + "ms";
              backdrop.style.transitionDuration = transitionDuration;
              index.setVisibilityState([backdrop], 'visible'); // Warn if the stylesheets are not loaded
    
              if (process.env.NODE_ENV !== "production") {
                index.warnWhen(getComputedStyle(backdrop).position !== 'absolute', "The `tippy.js/dist/backdrop.css` stylesheet has not been\n              imported!\n              \n              The `animateFill` plugin requires this stylesheet to work.");
                index.warnWhen(getComputedStyle(tooltip).transform === 'none', "The `tippy.js/animations/shift-away.css` stylesheet has not\n              been imported!\n              \n              The `animateFill` plugin requires this stylesheet to work.");
              }
            }
          },
          onShow: function onShow() {
            if (backdrop) {
              backdrop.style.transitionDuration = '0ms';
            }
          },
          onHide: function onHide() {
            if (backdrop) {
              index.setVisibilityState([backdrop], 'hidden');
            }
          },
          onAfterUpdate: function onAfterUpdate() {
            // With this type of prop, it's highly unlikely it will be changed
            // dynamically. We'll leave out the diff/update logic it to save bytes.
            // `popperChildren` is assigned a new object onAfterUpdate
            addBackdropToPopperChildren();
          }
        };
      }
    };
    
    function createBackdropElement() {
      var backdrop = index.div();
      backdrop.className = index.BACKDROP_CLASS;
      index.setVisibilityState([backdrop], 'hidden');
      return backdrop;
    }
    
    var followCursor = {
      name: 'followCursor',
      defaultValue: false,
      fn: function fn(instance) {
        var reference = instance.reference,
            popper = instance.popper;
        var originalReference = null; // Support iframe contexts
        // Static check that assumes any of the `triggerTarget` or `reference`
        // nodes will never change documents, even when they are updated
    
        var doc = index.getOwnerDocument(instance.props.triggerTarget || reference); // Internal state
    
        var lastMouseMoveEvent;
        var mouseCoords = null;
        var isInternallySettingControlledProp = false; // These are controlled by this plugin, so we need to store the user's
        // original prop value
    
        var userProps = instance.props;
    
        function setUserProps(props) {
          var keys = Object.keys(props);
          keys.forEach(function (prop) {
            userProps[prop] = index.useIfDefined(props[prop], userProps[prop]);
          });
        }
    
        function getIsManual() {
          return instance.props.trigger.trim() === 'manual';
        }
    
        function getIsEnabled() {
          // #597
          var isValidMouseEvent = getIsManual() ? true : // Check if a keyboard "click"
          mouseCoords !== null && !(mouseCoords.clientX === 0 && mouseCoords.clientY === 0);
          return instance.props.followCursor && isValidMouseEvent;
        }
    
        function getIsInitialBehavior() {
          return index.currentInput.isTouch || instance.props.followCursor === 'initial' && instance.state.isVisible;
        }
    
        function resetReference() {
          if (instance.popperInstance && originalReference) {
            instance.popperInstance.reference = originalReference;
          }
        }
    
        function handlePlacement() {
          // Due to `getVirtualOffsets()`, we need to reverse the placement if it's
          // shifted (start -> end, and vice-versa)
          // Early bail-out
          if (!getIsEnabled() && instance.props.placement === userProps.placement) {
            return;
          }
    
          var placement = userProps.placement;
          var shift = placement.split('-')[1];
          isInternallySettingControlledProp = true;
          instance.setProps({
            placement: getIsEnabled() && shift ? placement.replace(shift, shift === 'start' ? 'end' : 'start') : placement
          });
          isInternallySettingControlledProp = false;
        }
    
        function handlePopperListeners() {
          if (!instance.popperInstance) {
            return;
          } // Popper's scroll listeners make sense for `true` only. TODO: work out
          // how to only listen horizontal scroll for "horizontal" and vertical
          // scroll for "vertical"
    
    
          if (getIsEnabled() && getIsInitialBehavior()) {
            instance.popperInstance.disableEventListeners();
          }
        }
    
        function handleMouseMoveListener() {
          if (getIsEnabled()) {
            addListener();
          } else {
            resetReference();
          }
        }
    
        function triggerLastMouseMove() {
          if (getIsEnabled()) {
            onMouseMove(lastMouseMoveEvent);
          }
        }
    
        function addListener() {
          doc.addEventListener('mousemove', onMouseMove);
        }
    
        function removeListener() {
          doc.removeEventListener('mousemove', onMouseMove);
        }
    
        function onMouseMove(event) {
          var _lastMouseMoveEvent = lastMouseMoveEvent = event,
              clientX = _lastMouseMoveEvent.clientX,
              clientY = _lastMouseMoveEvent.clientY;
    
          if (!instance.popperInstance || !instance.state.currentPlacement) {
            return;
          } // If the instance is interactive, avoid updating the position unless it's
          // over the reference element
    
    
          var isCursorOverReference = index.closestCallback(event.target, function (el) {
            return el === reference;
          });
          var followCursor = instance.props.followCursor;
          var isHorizontal = followCursor === 'horizontal';
          var isVertical = followCursor === 'vertical';
          var isVerticalPlacement = index.includes(['top', 'bottom'], index.getBasePlacement(instance.state.currentPlacement)); // The virtual reference needs some size to prevent itself from overflowing
    
          var _getVirtualOffsets = getVirtualOffsets(popper, isVerticalPlacement),
              size = _getVirtualOffsets.size,
              x = _getVirtualOffsets.x,
              y = _getVirtualOffsets.y;
    
          if (isCursorOverReference || !instance.props.interactive) {
            // Preserve custom position ReferenceObjects, which may not be the
            // original targets reference passed as an argument
            if (originalReference === null) {
              originalReference = instance.popperInstance.reference;
            }
    
            instance.popperInstance.reference = {
              referenceNode: reference,
              // These `client` values don't get used by Popper.js if they are 0
              clientWidth: 0,
              clientHeight: 0,
              getBoundingClientRect: function getBoundingClientRect() {
                var rect = reference.getBoundingClientRect();
                return {
                  width: isVerticalPlacement ? size : 0,
                  height: isVerticalPlacement ? 0 : size,
                  top: (isHorizontal ? rect.top : clientY) - y,
                  bottom: (isHorizontal ? rect.bottom : clientY) + y,
                  left: (isVertical ? rect.left : clientX) - x,
                  right: (isVertical ? rect.right : clientX) + x
                };
              }
            };
            instance.popperInstance.update();
          }
    
          if (getIsInitialBehavior()) {
            removeListener();
          }
        }
    
        return {
          onAfterUpdate: function onAfterUpdate(_, partialProps) {
            if (!isInternallySettingControlledProp) {
              setUserProps(partialProps);
    
              if (partialProps.placement) {
                handlePlacement();
              }
            } // A new placement causes the popperInstance to be recreated
    
    
            if (partialProps.placement) {
              handlePopperListeners();
            } // Wait for `.update()` to set `instance.state.currentPlacement` to
            // the new placement
    
    
            requestAnimationFrame(triggerLastMouseMove);
          },
          onMount: function onMount() {
            triggerLastMouseMove();
            handlePopperListeners();
          },
          onShow: function onShow() {
            if (getIsManual()) {
              // Since there's no trigger event to use, we have to use these as
              // baseline coords
              mouseCoords = {
                clientX: 0,
                clientY: 0
              }; // Ensure `lastMouseMoveEvent` doesn't access any other properties
              // of a MouseEvent here
    
              lastMouseMoveEvent = mouseCoords;
              handlePlacement();
              handleMouseMoveListener();
            }
          },
          onTrigger: function onTrigger(_, event) {
            // Tapping on touch devices can trigger `mouseenter` then `focus`
            if (mouseCoords) {
              return;
            }
    
            if (index.isMouseEvent(event)) {
              mouseCoords = {
                clientX: event.clientX,
                clientY: event.clientY
              };
              lastMouseMoveEvent = event;
            }
    
            handlePlacement();
            handleMouseMoveListener();
          },
          onUntrigger: function onUntrigger() {
            // If untriggered before showing (`onHidden` will never be invoked)
            if (!instance.state.isVisible) {
              removeListener();
              mouseCoords = null;
            }
          },
          onHidden: function onHidden() {
            removeListener();
            resetReference();
            mouseCoords = null;
          }
        };
      }
    };
    function getVirtualOffsets(popper, isVerticalPlacement) {
      var size = isVerticalPlacement ? popper.offsetWidth : popper.offsetHeight;
      return {
        size: size,
        x: isVerticalPlacement ? size : 0,
        y: isVerticalPlacement ? 0 : size
      };
    }
    
    // position. This will require the `followCursor` plugin's fixes for overflow
    // due to using event.clientX/Y values. (normalizedPlacement, getVirtualOffsets)
    
    var inlinePositioning = {
      name: 'inlinePositioning',
      defaultValue: false,
      fn: function fn(instance) {
        var reference = instance.reference;
    
        function getIsEnabled() {
          return !!instance.props.inlinePositioning;
        }
    
        return {
          onHidden: function onHidden() {
            if (getIsEnabled()) {
              instance.popperInstance.reference = reference;
            }
          },
          onShow: function onShow() {
            if (!getIsEnabled()) {
              return;
            }
    
            instance.popperInstance.reference = {
              referenceNode: reference,
              // These `client` values don't get used by Popper.js if they are 0
              clientWidth: 0,
              clientHeight: 0,
              getBoundingClientRect: function getBoundingClientRect() {
                return getInlineBoundingClientRect(instance.state.currentPlacement && index.getBasePlacement(instance.state.currentPlacement), reference.getBoundingClientRect(), index.arrayFrom(reference.getClientRects()));
              }
            };
          }
        };
      }
    };
    function getInlineBoundingClientRect(currentBasePlacement, boundingRect, clientRects) {
      // Not an inline element, or placement is not yet known
      if (clientRects.length < 2 || currentBasePlacement === null) {
        return boundingRect;
      }
    
      switch (currentBasePlacement) {
        case 'top':
        case 'bottom':
          {
            var firstRect = clientRects[0];
            var lastRect = clientRects[clientRects.length - 1];
            var isTop = currentBasePlacement === 'top';
            var top = firstRect.top;
            var bottom = lastRect.bottom;
            var left = isTop ? firstRect.left : lastRect.left;
            var right = isTop ? firstRect.right : lastRect.right;
            var width = right - left;
            var height = bottom - top;
            return {
              top: top,
              bottom: bottom,
              left: left,
              right: right,
              width: width,
              height: height
            };
          }
    
        case 'left':
        case 'right':
          {
            var minLeft = Math.min.apply(Math, clientRects.map(function (rects) {
              return rects.left;
            }));
            var maxRight = Math.max.apply(Math, clientRects.map(function (rects) {
              return rects.right;
            }));
            var measureRects = clientRects.filter(function (rect) {
              return currentBasePlacement === 'left' ? rect.left === minLeft : rect.right === maxRight;
            });
            var _top = measureRects[0].top;
            var _bottom = measureRects[measureRects.length - 1].bottom;
            var _left = minLeft;
            var _right = maxRight;
    
            var _width = _right - _left;
    
            var _height = _bottom - _top;
    
            return {
              top: _top,
              bottom: _bottom,
              left: _left,
              right: _right,
              width: _width,
              height: _height
            };
          }
    
        default:
          {
            return boundingRect;
          }
      }
    }
    
    var sticky = {
      name: 'sticky',
      defaultValue: false,
      fn: function fn(instance) {
        var reference = instance.reference,
            popper = instance.popper;
    
        function getReference() {
          return instance.popperInstance ? instance.popperInstance.reference : reference;
        }
    
        function shouldCheck(value) {
          return instance.props.sticky === true || instance.props.sticky === value;
        }
    
        var prevRefRect = null;
        var prevPopRect = null;
    
        function updatePosition() {
          var currentRefRect = shouldCheck('reference') ? getReference().getBoundingClientRect() : null;
          var currentPopRect = shouldCheck('popper') ? popper.getBoundingClientRect() : null;
    
          if (currentRefRect && areRectsDifferent(prevRefRect, currentRefRect) || currentPopRect && areRectsDifferent(prevPopRect, currentPopRect)) {
            instance.popperInstance.update();
          }
    
          prevRefRect = currentRefRect;
          prevPopRect = currentPopRect;
    
          if (instance.state.isMounted) {
            requestAnimationFrame(updatePosition);
          }
        }
    
        return {
          onMount: function onMount() {
            if (instance.props.sticky) {
              updatePosition();
            }
          }
        };
      }
    };
    
    function areRectsDifferent(rectA, rectB) {
      if (rectA && rectB) {
        return rectA.top !== rectB.top || rectA.right !== rectB.right || rectA.bottom !== rectB.bottom || rectA.left !== rectB.left;
      }
    
      return true;
    }
    
    exports.createTippyWithPlugins = index.createTippyWithPlugins;
    exports.default = index.tippy;
    exports.hideAll = index.hideAll;
    exports.roundArrow = index.ROUND_ARROW;
    exports.animateFill = animateFill;
    exports.createSingleton = createSingleton;
    exports.delegate = delegate;
    exports.followCursor = followCursor;
    exports.inlinePositioning = inlinePositioning;
    exports.sticky = sticky;
    
    
    }).call(this)}).call(this,require('_process'))
    
    },{"./tippy.chunk.cjs.js":434,"_process":423,"popper.js":422}]},{},[57])(57)
    });
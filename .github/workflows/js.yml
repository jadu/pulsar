# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Run JS test suite

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    name: Node.js ${{ matrix.node-version }} Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        node-version: [18, 20]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: Setup Node.js ${{ matrix.node-version }}
      id: setup-node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Setup FontAwesome credentials
      if: env.FONTAWESOME_TOKEN != ''
      run: npm config set '//npm.fontawesome.com/:_authToken' "${{ secrets.FONTAWESOME_TOKEN }}"
      env:
        FONTAWESOME_TOKEN: ${{ secrets.FONTAWESOME_TOKEN }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build --if-present
    
    - name: Configure Chrome for headless testing on GitHub Actions
      run: |
        # Pre-configure system for Chrome headless to run properly in GitHub Actions
        # Allow running as root without sandbox in Actions containers
        echo 'export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true' >> $GITHUB_ENV
        echo 'export CHROME_BIN=/usr/bin/google-chrome' >> $GITHUB_ENV
        # Direct configuration for mochify to use
        echo "export CHROMIUM_BIN=/usr/bin/google-chrome" >> $GITHUB_ENV
        
        # Install Chrome dependencies
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends xvfb ca-certificates fonts-liberation libasound2 libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 lsb-release wget xdg-utils
        
        # Create a special puppeteer environment variable file
        # This ensures puppeteer picks up these flags in all cases
        mkdir -p ~/.config/puppeteer
        cat > ~/.config/puppeteer/config.json << EOF
        {
          "skipDownload": true,
          "executablePath": "/usr/bin/google-chrome",
          "args": ["--no-sandbox", "--disable-dev-shm-usage", "--disable-setuid-sandbox", "--headless", "--disable-gpu"]
        }
        EOF
        
        # Create a mochify override wrapper script that forces no-sandbox
        cat > mochify-runner.sh << EOF
        #!/bin/bash
        # Add required arguments to the mochify command for headless Chrome in CI
        NODE_OPTIONS="--max-old-space-size=4096" CHROMIUM_FLAGS="--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage" xvfb-run -a npm run test:headless:ci
        EOF
        chmod +x mochify-runner.sh
    
    - name: Add special test script for CI
      run: |
        # Add a special npm script for CI environments
        node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('./package.json')); pkg.scripts['test:headless:ci'] = 'mochify --reporter spec --transform [ babelify ] ./tests/harness/common \"./tests/js/web/**/*Test.js\"'; fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"
    
    - name: Run tests via wrapper
      run: ./mochify-runner.sh
      
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: js-test-results-node-${{ matrix.node-version }}
        path: |
          ./coverage/
          ./tests/js/web/index.html
        if-no-files-found: ignore
        retention-days: 7

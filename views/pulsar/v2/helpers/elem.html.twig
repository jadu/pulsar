{#  ----------------------------------------------------------------------------

# Input

A standard input field, accepts a `type` attribute to switch between:

 * File
 * Password
 * Text (default)

## Example usage

```twig
{{
    elem.input({
        'name': 'MyAwesomeField'
    })
}}
```

## Options

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
autofocus   | bool   | Whether the field should have input focus on page load
class       | string | A space separated list of class names
data        | hash   | Data attributes by key/value
disabled    | bool   | Stops the element from being interactive if true
id          | string | A unique identifier, if required
form        | string | Specific one or more forms this label belongs to
naked       | bool   | If true, removes all presentational markup and classes
name        | string | The name of this control
placeholder | string | A short hint that describes the expected value
type        | string | Defines the type of input to render (default text)
value       | string | Specifies the value of the input

#}
{% macro input(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    {% if options.naked is not defined or options.naked != true %}
        {% set options = options|defaults({'class': 'form__control'}) %}
    {% endif %}

    {% if options.help_id is defined and options.help_id is not empty %}
        {% set options = options|defaults({'aria-describedby': options.help_id}) %}
    {% endif %}

    <input{{ attributes(options|exclude('append bare help_id input_placement prepend naked')) }} />

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

# Label

Generates a `<label>` element to accompany an input

## Example usage

```twig
{{
    elem.label({
        'for': 'myInput'
    })
}}
```

## Options

Option  | Type   | Description
------- | ------ | -------------------------------------------------------------
class   | string | A space separated list of class names
data    | hash   | Data attributes by key/value
for     | string | Specific which form element this label is bound to
form    | string | Specific one or more forms this label belongs to
id      | string | A unique identifier, if required
name    | string | The name of this control

#}
{% macro label(options) %}

{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    {% set labelVisibilityClass = '' %}
    {% if options['show-label'] is defined and options['show-label'] is not null and options['show-label'] == false %}
        {% set labelVisibilityClass = ' hide' %}
    {% endif %}

    {% if options.label is not empty or options.guidance is not empty %}
        <label{{
            attributes(options
                |exclude('container guidance guidance-container label required show-label')
                |defaults({
                    'class': 'control__label' ~ labelVisibilityClass|default
                })
            )
        }}>
            {{- options.label|raw -}}
            {{ util.required(options.required|default(false)) }}
            {{ util.guidance(options.guidance|default, { 'guidance-container': options['guidance-container']|default }) }}
        </label>
    {% endif %}

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

# Paragraph

Generates a `<p>` element to accompany an input

## Example usage

```twig
{{
    elem.paragraph({
        'value': 'My content'
    })
}}
```

## Options

Option  | Type   | Description
------- | ------ | -------------------------------------------------------------
class   | string | A space separated list of class names
data    | hash   | Data attributes by key/value
id      | string | A unique identifier, if required
value   | string | Specifies the value of the paragraph

#}
{% macro paragraph(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    {% if options.value is not empty %}
        <p{{ attributes(options|exclude('value')) }}>
            {{- options.value|raw -}}
        </p>
    {% endif %}

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

# Select

A standard select field

## Example usage

```twig
{{
    elem.select({
        'name': 'MyAwesomeField'
    })
}}
```

## Options

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
class       | string | A space separated list of class names
data        | hash   | Data attributes by key/value
form        | string | Specific one or more forms this label belongs to
id          | string | A unique identifier, if required
options     | hash   | Hash of <option> elements by { 'value': 'label' }
name        | string | The name of this control
placeholder | string | A short hint that describes the expected value
selected    | string | The `value` to have as the selected option
type        | string | Defines the type of input to render (default text)
value       | string | Specifies the value of the input

#}
{% macro select(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}


    {% if options.help_id is defined and options.help_id is not empty %}
        {% set options = options|defaults({'aria-describedby': options.help_id}) %}
    {% endif %}

    <select{{
        attributes(options
            |exclude('append bare help_id label prepend selected value options')
            |defaults({
                'class': 'form__control'
            })
        )
    }}>

    {#
        Helpers have options, so do selects... so for this helper:
        * mainOptions = the main array of options passed to form.select({options})
        * options = the individual <option> elements to be created
    #}
    {% set mainOptions = options %}
    {% for value, label in options.options %}

        {#
            Detect if using nested option syntax, which allows you to add the
            `disabled` or `selected` attributes to individual options
        #}
        {% if label is iterable %}
            {% set options = label %}

            {% if options.options is defined and options.options is not empty %}

                {# optgroup nested syntax #}
                {% for option in options %}
                    {% if option is iterable %}
                        {% for item in option %}
                            <option {{ util.value(item.value) }}
                                {%- if mainOptions.selected is defined and item.value == mainOptions.selected %} selected{% endif -%}
                                {%- if item.disabled is defined and item.disabled == true %} disabled="disabled"{% endif -%}>
                                {{- item.label -}}
                            </option>
                            {% if loop.last %}
                                </optgroup>
                            {% endif %}
                        {% endfor %}
                    {% else %}
                        <optgroup label="{{ option }}">
                    {% endif %}
                {% endfor %}

            {# non-optgroup nested syntax #}
            {% else %}
                <option {{ util.value(label.value) }}
                    {%- if mainOptions.selected is defined and label.value == mainOptions.selected %} selected{% endif -%}
                    {%- if label.disabled is defined and label.disabled == true %} disabled="disabled"{% endif -%}>
                    {{- label.label -}}
                </option>
            {% endif %}

        {# legacy un-nested syntax #}
        {% else %}
            <option {{ util.value(value) }}
            {%- if mainOptions.selected is defined and value == mainOptions.selected %} selected{% endif -%}
            >
                {{- label -}}
            </option>
        {% endif %}
    {% endfor %}

    </select>

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

## Select2

A select field which uses the select2 plugin to extend functionality

## Example usage

```twig
{{
    elem.select2({
        'name': 'MyAwesomeField'
    })
}}
```

## Options

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
class       | string | A space separated list of class names
data        | hash   | Data attributes by key/value
form        | string | Specific one or more forms this label belongs to
id          | string | A unique identifier, if required
options     | hash   | Hash of <option> elements by { 'value': 'label' }
name        | string | The name of this control
placeholder | string | A short hint that describes the expected value
selected    | string | The `value` to have as the selected option
type        | string | Defines the type of input to render (default text)
value       | string | Specifies the value of the input

#}
{% macro select2(options) %}
{% spaceless %}
    {% import _self as elem %}

    {{ elem.select(options|merge({'class': 'select js-select2'})) }}

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

# Textarea

A standard texarea field.

## Example usage

```twig
{{
    elem.textarea({
        'name': 'MyAwesomeField'
    })
}}
```

## Options

Option      | Type    | Description
----------- | ------- | --------------------------------------------------------
class       | string  | A space separated list of class names
data        | hash    | Data attributes by key/value
form        | string  | Specific one or more forms this label belongs to
id          | string  | A unique identifier, if required
name        | string  | The name of this control
placeholder | string  | A short hint that describes the expected value
rows        | integer | The height, in rows
value       | string  | Specifies the value of the input

#}
{% macro textarea(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    {% if options.help_id is defined and options.help_id is not empty %}
        {% set options = options|defaults({'aria-describedby': options.help_id}) %}
    {% endif %}

    <textarea{{
        attributes(options
            |exclude('append bare help_id prepend value')
            |defaults({
                'class': 'form__control'
            })
        )
    }}>
    {%-
        if options.value is defined
        and options.value is not empty
    -%}
        {{- options.value -}}
    {%- endif -%}
    </textarea>

{% endspaceless %}
{% endmacro %}

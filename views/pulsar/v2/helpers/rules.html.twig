{% macro block_when(options) %}
{% spaceless %}
    {% import _self as rule %}

    {% if options['show_and'] is not defined or options['show_and'] != false %}
        {% set options = options|merge({ 'show_and': true }) %}
    {% endif %}
    {% if options['show_or'] is not defined or options['show_or'] != false %}
        {% set options = options|merge({ 'show_or': true }) %}
    {% endif %}

    {{
        rule.block(options
            |merge({
                'type': 'when'
            })
        )
    }}
{% endspaceless %}
{% endmacro %}

{% macro block_and(options) %}
{% spaceless %}
    {% import _self as rule %}

    {% if options['show_and'] is not defined or options['show_and'] != false %}
        {% set options = options|merge({ 'show_and': true }) %}
    {% endif %}
    {% if options['show_or'] is not defined or options['show_or'] != false %}
        {% set options = options|merge({ 'show_or': true }) %}
    {% endif %}

    {{
        rule.block(options
            |merge({
                'type': 'and'
            })
        )
    }}
{% endspaceless %}
{% endmacro %}

{% macro block_or(options) %}
{% spaceless %}
    {% import _self as rule %}

    {% if options['show_and'] is not defined or options['show_and'] != false %}
        {% set options = options|merge({ 'show_and': true }) %}
    {% endif %}
    {% if options['show_or'] is not defined or options['show_or'] != false %}
        {% set options = options|merge({ 'show_or': true }) %}
    {% endif %}

    {{
        rule.block(options
            |merge({
                'type': 'or'
            })
        )
    }}
{% endspaceless %}
{% endmacro %}

{% macro block_then(options) %}
{% spaceless %}
    {% import _self as rule %}

    {% if options['show_and'] is not defined or options['show_and'] != false %}
        {% set options = options|merge({ 'show_and': true }) %}
    {% endif %}
    {% if options['show_or'] is not defined or options['show_or'] != false %}
        {% set options = options|merge({ 'show_or': false }) %}
    {% endif %}

    {{
        rule.block(options
            |merge({
                'type': 'then'
            })
        )
    }}
{% endspaceless %}
{% endmacro %}


{% macro block(options) %}
{% import '@pulsar/pulsar/v2/helpers/form.html.twig' as form %}
{% spaceless %}

    {% set ruleClass = 'rules__step' %}

    {% if options.error is defined and options.error is not empty %}
        {% set ruleWrapperClass = ' has-error' %}
    {% endif %}

    <fieldset{{ attributes(options|defaults({'class': ruleClass})|only('class')) }}>
        <legend class="hide">{{ options.type|default }} rule block</legend>
        <div class="rule__triggers__container" data-index="1">

            <div class="rule-block-wrapper {% if ruleWrapperClass is defined and ruleWrapperClass is not empty %}{{ ruleWrapperClass }}{% endif %}">
                <div class="rule-block rule-block--{{ options.type|default }}" data-index="__index__">
                    <div class="rule-block__header rule-block__header--{{ options.type|default }}">
                        <h3 class="rule-block__heading">{{ options.type|default }}</h3>
                        <i data-tippy-placement="right" data-tippy-content="What should cause this rule to run" class="icon-question-sign rule-block__heading__icon"></i>
                    </div>

                    <div class="rule-block__controls rule__trigger__form">

                        {% if options.inputs is defined and options.inputs is not empty %}
                            {% for input in options.inputs %}
                                <div class="rule-block__control">
                                    {{- input|raw -}}
                                </div>
                            {% endfor %}
                        {% endif %}

                        {% if (options.removeable is defined and options.removeable != false) or options.removeable is not defined %}
                            <button type="button" data-action="remove" data-tippy-placement="left" data-tippy-content="Remove this item" class="btn remove-button js-remove-trigger "><i  class="icon-remove-sign"><span class="hide">Remove this item</span></i></button>
                        {% endif %}

                    </div>
                </div>
            </div>

            {% if options.show_or is defined and options.show_or == true %}
            <div class="conditional-block conditional-block--indented">
                <button type="button" class="btn btn--outline btn--inverse js-add-trigger" aria-label="Add a new OR condition">Or</button>
            </div>
            {% endif %}

            {% if options.show_and is defined and options.show_and == true %}
                {%
                    if options.show_and is defined and options.show_and == true
                    and options.show_or is defined and options.show_or == false
                %}
                    <div class="conditional-block conditional-block--indented">
                {% else %}
                    <div class="conditional-block conditional-block--flush">
                {% endif %}

                        <button type="button" class="btn btn--outline btn--inverse js-add-condition-collection" aria-label="Add a new AND condition">And</button> {# reseach diff between visual label and aria label in VC #}
                    </div>
            {% endif %}
        </div>
    </fieldset>
{% endspaceless %}
{% endmacro %}

{# -----------------------------------------------------------------------------

# Actions menu

Accepts a nested array of options to be converted into `html.link()` elements
and presented in a `html.button_dropdown()`.

Nested groups will be separated by a `html.divider()` element.

## Example usage

```twig
{{
    html.actions_menu({
        'items': [
            [
                {
                    'label': 'one',
                    'href': '/one'
                },
                {
                    'label': 'two',
                    'href': '/two'
                }
            ],
            [
                {
                    'label': 'three',
                    'href': '/three'
                }
            ]
        ]
    })
}}
```

## Options

Option | Type   | Description
------ | ------ | --------------------------------------------------------------
class  | string | CSS classes, space separated
href   | string | The URL attribute
icon   | string | An icon to place before the label
id     | string | A unique identifier, if required
label  | string | The link text label
data-* | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro actions_menu(items) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/html.html.twig' as html %}

    {% set actions = [] %}

    {% if items is iterable %}
        {% for item_groups in items %}
            {% for item_group in item_groups %}
                {% for item in item_group %}

                    {%
                        set actions = actions|merge([
                            html.link(item)
                        ])
                    %}

                {% endfor %}

                {% if not loop.last %}
                    {%
                        set actions = actions|merge([
                            html.divider()
                        ])
                    %}
                {% endif %}

            {% endfor %}
        {% endfor %}
    {% endif %}

    {{
        html.button_dropdown({
            'label': 'Actions',
            'items': actions
        })
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Badge

## Example usage

```twig
{{
    html.badge({
        'value': '123'
    })
}}
```

## Options

Option | Type   | Description
------ | ------ | --------------------------------------------------------------
class  | string | CSS classes, space separated
id     | string | A unique identifier, if required
label  | string | The value to display, usually an integer
data-* | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro badge(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    <span{{
        attributes(options
            |exclude('label')
            |defaults({
                'class': 'badge'
            })
        )
    }}>
        {{- options.label|default|raw -}}
    </span>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Block list

## Example usage

```twig
{{
    html.block_list({
        'items': [
            {'value': 'foo'},
            {'value': 'bar'},
            {'value': 'baz'}
        ]
    })
}}
```

## Example using `link` markup scheme

```twig
{{
    html.block_list({
        'type': 'link',
        'items': [
            {'label': 'foo', 'href': '#foo'},
            {'label': 'bar', 'href': '#bar'},
            {'label': 'baz', 'href': '#baz'}
        ]
    })
}}
```

## Options

Option | Type   | Description
------ | ------ | --------------------------------------------------------------
class  | string | CSS classes, space separated
footer | string | String/Markup to display in the footer row
header | string | String/Markup to display in the header row
id     | string | A unique identifier, if required
items  | array  | An `options` hash which will added as attributes to the `div`, `li` or `a` element (defined by `type`)
type   | string | Markup scheme to use: `ul` (default), `ol`, `div` or `link`
data-* | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro block_list(options) %}
{% spaceless %}
    {% import _self as html %}

    {% set mainTag = 'ul' %}

    {% if options.type is defined and options.type == 'link' %}
        {% set mainTag = 'div' %}
    {% elseif options.type is defined and options.type != 'ul' %}
        {% set mainTag = options.type %}
    {% endif %}

    <{{ mainTag }}{{ attributes(options
        |exclude('footer header items type')
        |defaults({'class': 'block-list'})
    )}}>

    {% if options.header is defined and options.header is not empty %}
        {% set header = {'value': options.header, 'class': 'block-list__header'} %}

        {% if options.type is defined and (options.type == 'div' or options.type == 'link') %}
            {{ html.div(header) }}
        {% else %}
            {{ html.li(header) }}
        {% endif %}
    {% endif %}

    {% for item in options.items %}
        {% set item = item|merge({'class': 'block-list__item'}) %}

        {% if options.type is defined and options.type == 'div' %}
            {{ html.div(item) }}
        {% elseif options.type is defined and options.type == 'link' %}
            {{ html.link(item) }}
        {% else %}
            {{ html.li(item) }}
        {% endif %}
    {% endfor %}

    {% if options.footer is defined and options.footer is not empty %}
        {% set footer = {'value': options.footer, 'class': 'block-list__footer'} %}

        {% if options.type is defined and (options.type == 'div' or options.type == 'link') %}
            {{ html.div(footer) }}
        {% else %}
            {{ html.li(footer) }}
        {% endif %}
    {% endif %}
    </{{ mainTag }}>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Button

## Example usage

```twig
{{
    html.button({
        'class': 'btn--primary',
        'label': 'Click Me All Over'
    })
}}
```

## Options

Option  | Type   | Description
------- | ------ | -------------------------------------------------------------
class   | string | A space separated list of class names
form    | string | Specifies one or more forms this label belongs to
href    | string | URL to use for link button types
id      | string | A unique identifier, if required
label   | string | The button label
type    | string | Can be `button` (default), `link`, `input`, `submit`
data-*  | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro button(options) %}
{% spaceless %}
    {% import _self as html %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    {% if options.type is defined and options.type == 'link' %}

        {{
            html.link(options|merge({
                'class': 'btn ' ~ options.class|default
            }))
        }}

    {% elseif options.type is defined and options.type == 'input' %}

        <input{{
            attributes(options
                |exclude('type label')
                |defaults({
                    'class': 'btn',
                    'type': 'button',
                    'value': options.label
                })
            )
        }} />

    {% elseif options.type is defined and options.type == 'submit' %}

        <button{{
            attributes(options
                |exclude('label')
                |defaults({
                    'class': 'btn'
                })
            )
        }}>
            {{- options.label|default|raw -}}
        </button>

    {% else %}

        <button{{
            attributes(options
                |exclude('caret label')
                |defaults({
                    'class': 'btn'
                })
            )
        }}>
            {{- options.label|default|raw -}}
            {{- util.caret(options.caret|default) -}}
        </button>

    {% endif %}
{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Button group

Group a series of related buttons together on a single line. Great for creating
toolbars.

## Example usage

```twig
{{
    html.button_group({
        'buttons': [
            html.button({ label: 'foo' }),
            html.button({ label: 'bar' }),
            html.button({ label: 'baz' })
        ]
    })
}}
```

## Options

Option  | Type   | Description
------- | ------ | -------------------------------------------------------------
buttons | array  | An array of `html.button()` elements
class   | string | Classes to be applied to the button group (not the buttons inside it)
id      | string | A unique identifier, if required
data-*  | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro button_group(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    <div{{
        attributes(options
            |exclude('buttons')
            |defaults({
                'class': 'btn__group'
            })
        )
    }}>
        {% for button in options.buttons -%}
            {{ button }}
        {% endfor %}
    </div>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Button dropdown

Show a dropdown/dropup menu when the button is clicked.

## Example usage

```twig
{{
    html.button_dropdown({
        'label': 'Drop Down',
        'items': [
            html.link({ 'label': 'foo', 'href': '#foo' }),
            html.link({ 'label': 'bar', 'href': '#bar' })
        ]
    })
}}
```

## Options applied to parent wrapper
Option       | Type   | Description
------------ | ------ | -----------------------------------------------------------
direction    | string | `down` (default) or `up`
parent_class | string | A space separated list of class names (applied to the wrapper)
data-*       | string | Data attributes, eg: `'data-foo': 'bar'` (applied to the button) ??


## Options applied to the button

Option       | Type   | Description
------------ | ------ | -----------------------------------------------------------
caret        | bool   | Whether to show the caret arrow in the label (default true)
class        | string | A space separated list of class names (applied to the button)
id           | string | A unique identifier, if required (applied to the button)
label        | string | The button label

## Options applied to the dropdown list

Option       | Type   | Description
------------ | ------ | -----------------------------------------------------------
items        | array  | An array of items to put in the dropdown list (usually links)
placement    | string | the alignment of the dropdown menu, `left` (default) or `right`

#}
{% macro button_dropdown(options) %}
{% spaceless %}
    {% import _self as html %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    <div{{
        attributes({
            'class': 'btn__group drop' ~ options.direction|default('down') ~ (options.parent_class is defined ? ' ' ~ options.parent_class : '')
        })
    }}>
        {{
            html.button(options
                |exclude('direction parent_class placement items')
                |defaults({
                    'caret': options.caret|default(true),
                    'class': 'dropdown__toggle' ~ (options.class is defined ? ' ' ~ options.class : ''),
                    'data-toggle': 'dropdown'
                })
            )
        }}

        {{
            html.list({
                'class': 'dropdown__menu pull-' ~ options.placement|default('left'),
                'items': options.items|default
            })
        }}
    </div>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Countdown

Helper which wires up jquery.countdown functionality for live countdowns. This
is a basic implementation for the time being, speak to Pulsar team if you need
extra functionality as per http://hilios.github.io/jQuery.countdown/documentation.html

## Example usage

```twig
{{
    html.countdown({
        'final-date': '2020/01/01 12:34:00',
        'format': '%ww %dd %Hh %Mm %S',
        'label': 'Expires 01/01/2010 at 12:34pm'
    })
}}
```

## Options

Option     | Type   | Description
---------- | ------ | --------------------------------------------------------------
class      | string | CSS classes, space separated
final-date | string | A native date() object, epoch timestamp (milliseconds) or date string
format     | string | A `strftime` string to format the countdown output (default: `%ww %dd %Hh %Mm %S`)
id         | string | A unique identifier, if required
label      | string | A fallback string to display if no js available
data-*     | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro countdown(options) %}
{% spaceless %}

    {%
        set options = options|default({})|merge({
            'data-final-date': options['final-date']|default,
            'data-format': options.format|default
        })
    %}

    <span{{
        attributes(options
            |exclude('final-date format label')
            |defaults({
                'class': 'js-countdown'
            })
        )
    }}>
        {{- options.label|default|raw -}}
    </span>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Div

Simple wrapper to create `<div>` elements, mainly used from within other helpers..

## Example usage

```twig
{{
    html.div({
        value: 'foo'
    })
}}
```

## Options

Option | Type   | Description
------ | ------ | --------------------------------------------------------------
class  | string | CSS classes, space separated
id     | string | A unique identifier, if required
value  | string | The value to display
data-* | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro div(options) %}
{% spaceless %}

    <div{{ attributes(options|exclude('value')) }}>
        {{- options.value|raw -}}
    </div>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Divider

Used in html.dropdown to insert lines between items.

## Example usage

```twig
{{ html.divider() }}
```

#}
{% macro divider() %}
{% spaceless %}
    <span class="divider"></span>
{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Edit button

Used by other helpers to add the edit icons. Uses data-attributes to
contain information about what object should be removed.

## Example usage

```twig
{{
    html.edit_button({
        'target': '#itemToEdit'
    })
}}
```

## Options

Option    | Type   | Description
--------- | ------ | -------------------------------------------------------------
class     | string | A space separated list of class names
id        | string | A unique identifier, if required
placement | string | Can be `top`, `left`, `bottom`, `right`
target    | string | CSS Selector of the item to be edited, will be turned into the `data-action-target` attribute
type      | string | Can be `button` (default), `link`, `input`, `submit`
data-*    | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro edit_button(options) %}
    {% spaceless %}
        {% import _self as html %}
        {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

        {{
            html.button(options
                |exclude('target placement')
                |merge({
                    'aria-label': 'edit',
                    'class': options.class|default ~ ' edit-button',
                    'data-action': 'edit',
                    'data-action-target': options.target|default,
                    'data-placement': options.placement|default('right'),
                    'data-title': options.tooltip|default('Edit this item'),
                    'data-toggle': 'tooltips',
                    'label': html.icon('pencil'),
                    'role': 'button',
                    'type': options.type|default('button'),
                })
            )
        }}

    {% endspaceless %}
{% endmacro %}

{# -----------------------------------------------------------------------------

# Icon

Help visually distinguish and provide extra meaning to certain items or actions. You can pass an icon name or mime type to generate the appropriate icon.

Pulsar currently uses Font Awesome 4.6.3. Older 3.2.1 icons are still supported and are mapped to their newer version 4 icon.

## Example usage

```twig
{{ html.icon('save') }}
```

```twig
{{ html.icon('application/msword') }}
```

## Options

Option | Type   | Description
------ | ------ | --------------------------------------------------------------
class  | string | CSS classes, space separated

#}
{% macro icon(icon_name, options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    {% set mime_types = {
        'application/msword': 'file-word-o',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'file-word-o',
        'application/vnd.ms-excel': 'file-excel-o',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'file-excel-o',
        'application/vnd.ms-powerpoint': 'file-powerpoint-o',
        'application/vnd.ms-office': 'file-o',
        'application/pdf': 'file-pdf-o',
        'text/plain': 'file-text-o',
        'text/html': 'file-code-o',
        'application': 'file-o',
        'text': 'file-text-o',
        'video': 'file-movie-o',
        'audio': 'file-audio-o',
        'image': 'file-image-o'
    } %}

    {% for mime, icon in mime_types %}
        {% if icon_name == mime %}
            {% set icon_name = icon %}
        {% elseif icon_name|split('/')[0] == mime %}
            {% set icon_name = icon %}
        {% endif %}
    {% endfor %}

    {% if options.class is defined and options.class is not empty %}
        {% set class = ' ' ~ options.class %}
    {% endif %}

    {% if options.colour is defined and options.colour is not empty %}
        {% set options = options|merge({ 'style': 'color: ' ~ options.colour }) %}
    {% endif %}

    {% if options is defined and options.label is not defined and options is iterable %}
        {% set options = options|merge({ 'aria-hidden': 'true' }) %}
    {% elseif options is defined and options.label is defined and options.label is not empty %}
        {% set label = '<span class="hide">' ~ options.label ~ '</span>' %}
    {% else %}
        {% set options = { 'aria-hidden': 'true' } %}
    {% endif %}

    <i{{
        attributes(options
            |exclude('colour label')
            |defaults({
                'class': 'icon-' ~ icon_name ~ class|default
            })
        )
    }}>{{ label|default|raw }}</i>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Label

Provide extra contextual meaning to things.

## Example usage

```twig
{{
    html.label({
        'label': 'new'
    })
}}
```

## Options

Option        | Type   | Description
------------- | ------ | --------------------------------------------------------------
class         | string | CSS classes, space separated
id            | string | A unique identifier, if required
label         | string | The value to display
removable     | bool   | Displays a remove sign at the end of the label
data-*        | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro label(options) %}
{% spaceless %}
    {% import _self as html %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    <span{{
        attributes(options
            |exclude('label removable remove_target')
            |defaults({
                'class': 'label'
            })
        )
    }}>
        {{- options.label|default|raw -}}
        {% if options.removable is defined and options.removable == true %}
        {{
            html.remove_button({
                'tooltip': false,
                'target': 'this',
                'type': 'link'
            })
        }}
        {% endif %}
    </span>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Link

## Example usage

```twig
{{
    html.link({
        'href': 'http://www.jadu.net',
        'label': 'Jadu'
    })
}}
```

## Options

Option | Type   | Description
------ | ------ | --------------------------------------------------------------
class  | string | CSS classes, space separated
href   | string | The URL attribute
icon   | string | An icon to place before the label
id     | string | A unique identifier, if required
label  | string | The link text label
data-* | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro link(options) %}
    {% import '@pulsar/pulsar/v2/helpers/html.html.twig' as html %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    <{{ attributes(options|exclude('icon label type value'), {'tag': ('a')}) }}>

        {%- if options.icon is defined and options.icon is not empty -%}
            {{- html.icon(options.icon) -}}&nbsp;
        {%- endif -%}

        {{- options.label|default|raw -}}
    </a>
{% endmacro %}


{# -----------------------------------------------------------------------------

# List

Pass an array of items and have them rendered as a simple ordered or unordered list, this is
particularly useful when chained with other helpers.

## Example usage

```twig
{{
    html.list({
        'items': [
            'foo',
            'bar'
        ]
    })
}}
```

## Options

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
active_item | int    | The index of the active item, will have the `.is-active` class applied
class       | string | CSS classes, space separated
id          | string | A unique identifier, if required
items       | array  | An array of items to be rendered as a list
type        | string | `ul` (default), `ol`
data-*      | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro list(options) %}
{% spaceless %}
    {% import _self as html %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}
    {% set list_type = options.type|default('ul') %}

    <{{ list_type }}{{ attributes(options|exclude('active_item items type')) }}>

    {% for list_item in options.items %}

        {% if loop.index == options.active_item|default(0) %}
            {% set item_class = 'is-active' %}
        {% else %}
            {% set item_class = null %}
        {% endif %}

        {{
            html.li({
                'class': item_class,
                'value': list_item
            })
        }}

    {% endfor %}

    </{{ list_type }}>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Link list

A specialised method to create a list of links without the need to manually
call multiple `html.link` helpers.

## Example usage

```twig
{{
    html.link_list({
        items: {
            'Value one': '#href_one',
            'Value two': '#href_two'
        }
    })
}}
```

## Options

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
active_item | int    | The index of the active item, will have the `.is-active` class applied
class       | string | CSS classes, space separated
id          | string | A unique identifier, if required
items       | hash   | A hash of links formatted by { label: href }
type        | string | ul (default) | ol
data-*      | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro link_list(options) %}
{% spaceless %}
    {% import _self as html %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}
    {% set items = [] %}

    {% for label, href in options.items %}
        {%
            set items = items|merge([
                html.link({
                    'label': label,
                    'href': href
                })
            ])
        %}
    {% endfor %}

    {{
        html.list({
            'active_item': options.active_item|default,
            'class': options.class|default(null),
            'data': options.data|default,
            'id': options.id|default,
            'items': items|default,
            'type': options.type|default
        })
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Li

Simple wrapper to create `<li>` elements, mainly used from within other helpers..

## Example usage

```twig
{{
    html.li({
        value: 'foo'
    })
}}
```

## Options

Option | Type   | Description
------ | ------ | --------------------------------------------------------------
class  | string | CSS classes, space separated
id     | string | A unique identifier, if required
value  | string | The value to display
data-* | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro li(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    <li{{ attributes(options|exclude('value')) }}>
        {{- options.value|raw -}}
    </li>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Loading

Give feedback to the user that something is happening or that information is
being retrieved from the server.

Adding the `hide` class will allow you to place the loading markup in the DOM on
pageload for you to toggle with javascript.

## Example usage

```twig
{{ html.loading() }}
```

## Options

Option | Type   | Description
-----  | ------ | --------------------------------------------------------------
class  | string | CSS classes, space separated
id     | string | A unique identifier, if required
data-* | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro loading(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    <span{{
        attributes(options
            |defaults({
                'class': 'loading'
            })
        )
    }}>
        <i>Loading...</i>
    </span>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Media

The media object is, typically, an image on the left with descriptive content
on the right.

## Example usage

```twig
{{
    html.media({
        'image': 'foo.png',
        'image_alt': 'foo alt',
        'title': 'Bar',
        'description': 'Baz'
    })
}}

```

## Options

Option      | Type      | Description
----------- | ------    | ------------------------------------------------------
action      | html/twig | A button/indicator to display on the right hand side
class       | string    | CSS classes, space separated
description | string    | Small descriptive text to sit underneath the title
href        | string    | If `type` is `link`, set the `href` attribute on the `a`
icon        | string    | Icon name used to display on the left hand side (alternative to image)
icon_colour | string    | Text colour to use for the `icon`, useful for branding
id          | string    | A unique identifier, if required
image       | string    | URL for the image to display on the left hand side
image_alt   | string    | Alt attribute for the `image`
title       | string    | The main title for this object
type        | string    | Markup scheme to use, can be either `div` (default) or `link`
data-*      | string    | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro media(options) %}
{% import '@pulsar/pulsar/v2/helpers/html.html.twig' as html %}
{% spaceless %}

    {% set type = 'div' %}
    {% if options.type is defined and options.type == 'link' %}
        {% set type = 'a' %}
    {% endif %}

    <{{ type }}{{
        attributes(options
            |exclude('action description icon icon_colour image image_alt title type value')
            |defaults({
                'class': 'media'
            })
        )
    }}>
    {% if options.icon is defined and options.icon is not empty %}
        {{ html.icon(options.icon, { 'class': 'media__image', 'colour': options.icon_colour|default('#000') }) }}
    {% elseif options.image is defined and options.image is not empty %}
        <img src="{{ options.image }}" alt="{{ options.image_alt|default }}" class="media__image" />
    {% endif %}
        <div class="media__body">
        {% if options.action is defined and options.action is not empty %}
            <span class="pull-right">
                {{ options.action|raw }}
            </span>
        {% endif %}
            <p>{{ options.title|raw }}</p>
        {% if options.description is defined and options.description is not empty %}
            <span class="small-type muted">{{ options.description|raw }}</span>
        {% endif %}
        </div>
    </{{ type }}>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Metadata

Provides a simple way to mark up key/value information provided by a Twig hash
or JSON object.

## Example usage

```twig
{{
    html.metadata({
        'items': {
            'File': 'true_lies.avi',
            'Size': '1.2 Gb',
            'Type': 'Video'
        }
    })
}}
```

## Options

Option | Type   | Description
------ | ------ | --------------------------------------------------------------
class  | string | CSS classes, space separated
id     | string | A unique identifier, if required
items  | hash   | A hash of data where key: value = title: description
data-* | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro metadata(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    <dl{{
        attributes(options
            |exclude('items')
            |defaults({
                'class': 'metadata'
            })
        )
    }}>
    {% for key, value in options.items %}

           <dt class="metadata__key">{{ key }}</dt><!--
        --><dd class="metadata__value">{{ value|raw }}</dd>

    {% endfor %}
    </dl>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Panel

Display important information in a prominent container.

## Example usage

```twig
{{
    html.panel({
        'title': 'In West Philadelphia born and raised',
        'body': 'In the playground was where I spent most of my days.'
    })
}}
```

## Options

Option | Type   | Description
------ | ------ | --------------------------------------------------------------
body   | string | The main content of the panel
class  | string | CSS classes, space separated
icon   | string | Icon to display next to the panel title
id     | string | A unique identifier, if required
title  | string | The title of the panel
data-* | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro panel(options) %}
{% spaceless %}
    {% import _self as html %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    <div{{
        attributes(options
            |exclude('icon title body')
            |defaults({
                'class': 'panel'
            })
        )
    }}>
        {% if options.icon is defined and options.icon is not empty %}
            {{ html.icon(options.icon|default, { 'class': 'panel__icon' }) }}
        {% endif %}

        {% if options.title is defined and options.title is not empty %}
        <div class="panel__title">
            {{ options.title|raw }}
        </div>
        {% endif %}
        <div class="panel__body">
            {{- options.body|raw -}}
        </div>
    </div>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Progress

Provide up-to-date feedback on the progress of a workflow or action with simple
progress bars.

## Example usage

```twig
{{
    html.progress({
        'value': 25
    })
}}
```

## Options

Option        | Type   | Description
------------- | ------ | -------------------------------------------------------
class         | string | CSS classes, space separated
id            | string | A unique identifier, if required
label         | string | Text to display inside the progress bar
value         | int    | The percentage value of the progress bar
value_visible | bool   | Whether to visually display the value inside the bar (default false)
data-*        | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro progress(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    <div class="progress">
        <div{{
            attributes(options
                |exclude('label value value_visible')
                |defaults({
                    'class': 'progress-bar',
                    'role': 'progressbar',
                    'aria-valuenow': options.value,
                    'aria-valuemin': '0',
                    'aria-valuemax': '100',
                    'style': 'width: ' ~ options.value ~ '%;'
                })
            )
        }}>

            {% if options.value_visible|default(false) %}
                {{- options.value|raw ~ '%' }}
            {% else %}
                <span class="hide">
                    {{- options.value ~ '%' }}
                </span>
            {% endif %}

            {{- options.label|default|raw -}}
        </div>
    </div>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Remove button

Used by other helpers to add the remove icons (x). Uses data-attributes to
contain information about what object should be removed.

## Example usage

```twig
{{
    html.remove_button({
        'target': '#itemToRemove'
    })
}}
```

## Options

Option    | Type   | Description
--------- | ------ | -------------------------------------------------------------
class     | string | A space separated list of class names
id        | string | A unique identifier, if required
placement | string | Can be `top`, `left`, `bottom`, `right`
target    | string | CSS Selector of the item to be removed, will be turned into the `data-action-target` attribute
type      | string | Can be `button` (default), `link`, `input`, `submit`
data-*    | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro remove_button(options) %}
{% spaceless %}
    {% import _self as html %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    {% if options.tooltip is not defined or options.tooltip != false %}
    {%
        set options = options|default({})|merge({
            'data-placement': options.placement|default('right'),
            'data-toggle': 'tooltips',
            'data-title': options.tooltip|default('Remove this item')
        })
    %}
    {% endif %}

    {{
        html.button(options
            |exclude('target placement')
            |merge({
                'class': options.class|default ~ ' remove-button',
                'type': options.type|default('button'),
                'data-action': 'remove',
                'data-action-target': options.target|default,
                'label': html.icon('remove-sign', { 'label': 'Remove' })
            })
        )
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Status

Displays a small visual indication of state, helpful when used within table
cells or piano list keys to avoid the need for a user to check many items
individually to determine their state.

## Example usage

```twig
{{ html.status('online') }}
```

The 'state' will be used for both the title attribute, and for the stateful
class name, eg:

```html
<span class="status is-online" title="online"></span>
```

### States

 * online (default)
 * offline
 * active
 * inactive

Some states are simply synonyms of each other, the choice of verb will be
defined by the context in which it is to be used.

## Options

Option | Type   | Description
------ | ------ | --------------------------------------------------------------
class  | string | CSS classes, space separated
id     | string | A unique identifier, if required
title  | string | Title attribute, defaults to 'state' if not supplied
data-* | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro status(state, options) %}
{% spaceless %}

{% if options.title is not defined %}
    {% set options = options|default({})|merge({ 'title': state|default('active') }) %}
{% endif %}

    <span{{
        attributes(options
            |exclude('state')
            |merge({
                'data-placement': options['data-placement']|default('top')
            })
            |defaults({
                'class': 'status is-' ~ state|default('active'),
                'data-toggle': 'tooltips'
            })
        )
    }}></span>

{% endspaceless %}
{% endmacro %}
{# -----------------------------------------------------------------------------

# DropZone

## Options applied to DropZone

All DropZone options should be prefixed with `data-dropzone-`, for example `data-dropzone-max-files`.

Option                              | Type      | Description
----------------------------------- | --------- | ----------------------------------------------------
helperLabel                         | string    | The label for the default helper text popup
helperTitle                         | string    | The heading for the default helper text popup
helperContent                       | string    | The content for the default helper text popup
helperContainer                     | string    | The selector for the container of the helper text popup
data-dropzone-max-files             | string    | The maximum ammount of files a DropZone will accept
data-dropzone-max-size              | string    | The combined file size limit of a group of files
data-dropzone-idle-timer-duration   | string    | The duration
data-dropzone-idle-html             | string    | The idle html for the DropZone info node
data-dropzone-window-enter-html     | string    | The window enter event html for the DropZone info node
data-dropzone-drop-zone-enter-html  | string    | The DropZone enter event html for the DropZone info node
data-dropzone-passive               | boolean   | Enable passive mode | default false
data-dropzone-show-input-node       | boolean   | Show associated input node | default false
data-dropzone-file-node-desc        | boolean   | Show file description in file html | default true
data-dropzone-file-node-name        | boolean   | Show file name in file html | default true
data-dropzone-file-node-size        | boolean   | Show file size in file html | default true
data-dropzone-file-node-type        | boolean   | Show file type in file html | default true

#}
{% macro dropzone(options) %}
    {% import _self as html %}
    {% set files = options['data-dropzone-max-files'] is defined ? options['data-dropzone-max-files'] : '5' %}
    {% set state = options['data-dropzone-passive']|default('false') == 'true' ? 'passive' : 'idle' %}
    {% set idle = options['data-dropzone-idle-html']|default('your files here or <a class="dropzone__browse" id="#">Browse Files</a>') %}
    {% spaceless %}
        <div{{ attributes(options|defaults(
            {
                'class': 'dropzone dropzone--' ~ state ~ ' dropzone--files-' ~ files
            }
        )) }}>
            <div class="dropzone__state"></div>
            <div class="dropzone__icon-wrapper">
                {{  html.icon('file-pdf-o', { 'class': 'dropzone__icon dropzone__icon--small dropzone__icon--left' }) }}
                {{  html.icon('file-image-o', { 'class': 'dropzone__icon dropzone__icon--small dropzone__icon--centre' }) }}
                {{  html.icon('file-text-o', { 'class': 'dropzone__icon dropzone__icon--small dropzone__icon--right' }) }}
                {{  html.icon('cloud-upload', { 'class': 'dropzone__icon dropzone__icon--main' }) }}
            </div>
            <p class="dropzone__label">Drag &amp; Drop</p>
            <p class="dropzone__info">{{ idle|raw }}</p>

            <p class="dropzone__help"
               data-toggle="popover"
               data-title="{{ options.helperTitle|default('Helper title')|raw }}"
               data-content="{{ options.helperContent|default('Helper content')|raw }}"
               data-html="true"
               data-placement="left"
               data-container="{{ options.helperContainer|default('#' ~ options.id) }}"
            >
                {{ html.icon('question-sign') }} {{ options.helperLabel|default('Only certain file types are allowed') }}
            </p>
        </div>
    {% endspaceless %}
{% endmacro %}


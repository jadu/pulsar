{# -----------------------------------------------------------------------------

# Button group

Creates a series of buttons on a single line which are radio or checkbox input
types.

## Example usage

```twig
{{
    form.button_group({
        'label': 'Band',
        'items': [
            form.radio_simple({
                'label': 'AM',
                'name': 'bands'
            }),
            form.radio_simple({
                'label': 'FM',
                'name': 'bands'
            }),
            form.radio_simple({
                'label': 'MW',
                'name': 'bands'
            })
        ]
    })
}}
```

## Options applied to parent wrapper

Option        | Type   | Description
------------- | ------ | -------------------------------------------------------
class         | string | A space separated list of class names
help          | string | Additional guidance information to be displayed next to the input
label         | string | Text for the `<label>` companion element
required      | bool   | Visually indicates that the field must be completed

## Options applied to input

Option        | Type   | Description
------------- | ------ | -------------------------------------------------------
items         | array  | An array of items to put in the dropdown list (usually radios)

#}
{% macro button_group(options) %}
{% spaceless %}
    {% import _self as form %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        form.group({
            'parent': options
                |only('bare class help id label required')
                |merge({'class': 'form__button-group'}),
            'controls': {'class': 'btn__group'},
            'inputs': options.items
        })
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Checkbox

Generates a checkbox input field.

## Example usage

```twig
{{
    form.checkbox({
        'label': 'Are you awesome?'
    })
}}
```

## Options applied to parent wrapper

Option        | Type   | Description
------------- | ------ | -------------------------------------------------------
class         | string | A space separated list of class names
help          | string | Additional guidance information to be displayed next to the input
label         | string | Text for the `<label>` companion element
required      | bool   | Visually indicates that the field must be completed

## Options applied to input

Option        | Type   | Description
------------- | ------ | -------------------------------------------------------
checked       | bool   | Whether the input is checked
form          | string | Specific one or more forms this label belongs to
id            | string | A unique identifier, will also be applied as the label's `for` attribute
indeterminate | bool   | Shows the checkbox as [-], overrides the value of `checked`
name          | string | The name of this control
required      | bool   | Adds `required` and `aria-required="true"` attributes
value         | string | Specifies the value of the input
data-*        | string | Data attributes, eg: `'data-foo': 'bar'`

*Any other options not listed here will be applied to the input.

#}
{% macro checkbox(options) %}
{% spaceless %}
    {% import _self as form %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        form.group({
            'parent': options
                |only('bare class help id label required')
                |defaults({
                    'class': 'form-checkbox'
                }),
            'inputs': [
                elem.input(
                    options
                        |exclude('bare class help label')
                        |defaults({
                            'class': 'checkbox',
                            'type': 'checkbox'
                        })
                )
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Checkbox inline

Creates a `<label>` element with a checkbox inside it and allows the checkbox to
be positioned either before or after the label value.

## Example usage

```twig
{{
    form.checkbox_inline({
        'id': 'areYouAwesome',
        'label': 'Are you awesome?',
        'name': 'areYouAwesome'
    })
}}
```

## Options applied to parent wrapper

Option          | Type   | Description
--------------- | ------ | -----------------------------------------------------
class           | string | A space separated list of class names
help            | string | Additional guidance information to be displayed next to the input
required        | bool   | Visually indicates that the field must be completed

## Options applied to input

Option          | Type   | Description
--------------- | ------ | -----------------------------------------------------
checked         | bool   | Whether the input is checked
form            | string | Specific one or more forms this label belongs to
id              | string | A unique identifier, will also be used as the label's `for` attribute
indeterminate   | bool   | Shows the checkbox as [-], overrides the value of `checked`
input_placement | string | left (default)|right position of the input vs the label value
label           | string | Text for the `<label>` companion element
name            | string | The name of this control
required        | bool   | Adds `required` and `aria-required="true"` attributes
value           | string | Specifies the value of the input
data-*          | string | Data attributes, eg: `'data-foo': 'bar'`

*Any other options not listed here will be applied to the input.

#}
{% macro checkbox_inline(options) %}
{% spaceless %}
    {% import _self as form %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {%
        set input = elem.input(options
            |merge({
                'class': 'checkbox',
                'label': null,
                'type': 'checkbox'
            }))
    %}

    {% set label = input ~ options.label %}

    {%
        if options.input_placement is defined
        and options.input_placement == 'right'
    %}
        {% set label = options.label ~ input %}
    {% endif %}

    {{
        form.group({
            'parent': options
                |only('bare class help id')
                |defaults({
                    'class': 'form-checkbox-inline'
                }),
            'inputs': [
                elem.label({
                    'for': options.id|default,
                    'label': label,
                    'required': options.required|default
                })
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Choice

Displayed as a question with multiple answers, each of which has it's own label and can allow either singular (checkboxes) or multiple (radios) choice.

By default, the choice helper will will automatically adhere to Pulsar's form styleguide by switching to a [select2](select2.md) element if more than 5 options are provided.

## Example usage

```twig
{{
    form.choice({
        'label': 'Do you like me?',
        'options': [
            {
                'label': 'Yes',
                'value': '1'
            },
            {
                'No': '0',
                'value': 'No'
            },
            {
                'label': 'Maybe',
                'value': '¯\_(ツ)_/¯'
            }
        ]
    })
}}
```

## Options

Option   | Type   | Description
-------- | ------ | -------------------------------------------------------
class    | string | A space separated list of class names
help     | string | Additional guidance information to be displayed next to the input
label    | string | Text for the main `<label>` companion element
optimize | string | `auto` use a select2 element if number of `options` is greater than 5 (default)
                    `few` force the use of checkboxes/radios regardless of the number of options
                    `many` force the use of select2 regardless of the number of options
options  | array  | An array of option hashes that will be passed to the [checkbox](checkbox.md) or  [radio](radio.md) helper, see their documentation for specifics
required | bool   | Visually indicates that the field must be completed, will not be displayed if `type` is radio as they're implicitly required
multiple | bool   | If `true`, uses checkboxes instead of radios, or passes the `multiple` attribute to the select2 element

#}
{% macro choice(options) %}
{% spaceless %}
    {% import _self as form %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {% set inputs = [] %}
    {%
        set options = options|merge({
            'multiple': options.multiple|default(false),
            'optimize': options.optimize|default('auto')
        })
    %}

    {% if options.optimize == 'many' or (options.options|length > 5 and options.optimize == 'auto') %}

        {% set select_options %}
        {% for select_option in options.options %}
            {%
                set select_options = select_options|merge({
                    (select_option.value): select_option.label
                })
            %}
        {% endfor %}

        {%
            set inputs = inputs|merge([
                form.select2({
                    'bare': true,
                    'multiple': options.multiple,
                    'options': select_options
                })
            ])
        %}

    {% else %}

        {% for input_options in options.options %}
            {% set input_options = input_options|merge({'bare': true}) %}
            {% if options.multiple %}
                {% set inputs = inputs|merge([ form.checkbox_inline(input_options) ]) %}
            {% else %}
                {% set inputs = inputs|merge([ form.radio_inline(input_options) ]) %}
            {% endif %}
        {% endfor %}

    {% endif %}

    {{
        form.group({
            'parent': options
                |only('bare class help id label required')
                |exclude('multiple')
                |defaults({'class': 'form-choice'}),
            'inputs': inputs
        })
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Content

Generates a paragraph of text where an input would normally be positioned within
a form while still allowing a regular form label to illustrate it.

Useful for presenting non-editable information within a form where you'd prefer
not to use a disabled input.

## Example usage

```twig
{{
    form.content({
        'label': 'It’s the remix to ignition',
        'value': 'Hot and fresh out the kitchen'
    })
}}
```

## Options applied to parent wrapper

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
class       | string | A space separated list of class names
help        | string | Additional guidance information to be displayed next to the input
label       | string | Text for the `<label>` companion element

## Options applied to paragraph

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
id          | string | A unique identifier, will also be used as the label's `for` attribute
value       | string | Specifies the value of the input
data-*      | string | Data attributes, eg: `'data-foo': 'bar'`

*Any other options not listed here will be applied to the paragraph.

#}
{% macro content(options) %}
{% spaceless %}
    {% import _self as form %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        form.group({
            'parent': options|only('bare class help id label'),
            'inputs': [
                elem.paragraph(
                    options|exclude('bare class help label')
                )
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Create

Creates the opening `<form>` element.

## Example usage

```twig
{{ form.create() }}
```

## Options

Option  | Type   | Description
------- | ------ | -------------------------------------------------------------
action  | string | URL to post to, will submit to self if empty
class   | string | A space separated list of class names
enctype | string | How the form-data should be encoded (requires method = POST)
id      | string | A unique identifier, if required
name    | string | The name of the form
method  | string | The HTTP method to be used to submit the form
data-*  | string | Data attributes, eg: `'data-foo': 'bar'`

## Enctype

The `enctype` attribute will be set to `application/x-www-form-urlencoded` by
default, unless you’re using a `method` other than `POST`.

##### Example

```twig
{{ form.create() }}
```

```html
<form method="POST" enctype="application/x-www-form-urlencoded" class="form">
```

## Using non-standard RESTful methods

As well as the usual `GET` and `POST` methods, you may also specify the
following:

`DELETE`, `PATCH` or `PUT`

These will then cause a hidden `<input name="_method" value="{{ method }}" />`
to be created automatically after the `<form>` element, and the `method`
attribute on the `form` element will be set to `POST`.

#}
{% macro create(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/form.html.twig' as form %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    {% set defaults = {'class': 'form'} %}
    {% set alternateMethods = ['DELETE', 'PATCH', 'PUT'] %}

    {% if options.method is defined and options.method|upper in alternateMethods %}
        {% set methodInput = form.hidden({'name': '_method', 'value': options.method|upper}) %}
    {% endif %}

    {%
        if options.method is not defined
        or options.method is empty
        or options.method|upper in alternateMethods
    %}
        {% set options = options|merge({'method': 'POST'}) %}
    {% endif %}

    {%
        if options.method is defined
        and options.method is not empty
        and (options.method|upper == 'POST')
    %}
        {% set options = options|merge({'enctype': options.enctype|default('application/x-www-form-urlencoded')}) %}
    {% endif %}

    <form{{ attributes(options|defaults(defaults)) }}>

    {{ methodInput|default }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Date

Generates a text input field which will show a date picker when focused.

## Example usage

```twig
{{
    form.date({
        'label': 'When is your birthday?'
    })
}}
```

## Options applied to parent wrapper

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
autofocus   | bool   | Whether the field should have input focus on page load
class       | string | A space separated list of class names
help        | string | Additional guidance information to be displayed next to the input
label       | string | Text for the `<label>` companion element
required    | bool   | Visually indicates that the field must be completed

## Options applied to input

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
autofocus   | bool   | Whether the field should have input focus on page load
disabled    | bool   | Stops the element from being interactive if true
form        | string | Specific one or more forms this label belongs to
id          | string | A unique identifier, will also be used as the label's `for` attribute
name        | string | The name of this control
placeholder | string | A short hint that describes the expected value
required    | bool   | Adds `required` and `aria-required="true"` attributes
value       | string | Specifies the value of the input
data-*      | string | Data attributes, eg: `'data-foo': 'bar'`

*Any other options not listed here will be applied to the input.

#}
{% macro date(options) %}
{% spaceless %}
    {% import _self as form %}

    {%
        set options = options|merge({
            'placeholder': options.placeholder|default('dd/mm/yyyy'),
            'data-datepicker': 'true'
        })
    %}

    {{ form.text(options) }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# End

Used in conjunction with `form.start()` and allows you to specify the buttons
required to submit/cancel the form, then closes the form with the `</form>`
element.

## Example usage

```twig
{{
    form.end({
        'actions': [
            form.submit({
                'label': 'Sign In'
            }),
            html.link({
                'label': 'Cancel',
                'href': '/home'
            })
        ]
    })
}}
```

## Options

Option  | Type   | Description
------- | ------ | -------------------------------------------------------------
actions | array  | Helpers to display as the actions, usually `form.submit()` but can be buttons, links etc...
class   | string | A space separated list of class names

#}
{% macro end(options) %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    {% if options.actions is defined %}
        <div{{
            attributes(options
                |exclude('actions')
                |defaults({
                    'class': 'form__actions'
                })
            )
        }}>
            {% for action in options.actions %}
                {{ action|raw }}
            {% endfor %}
        </div>
    {% endif %}
    </form>
{% endmacro %}


{# -----------------------------------------------------------------------------

# Fieldset start

Opens a `<fieldset>` and allows you to define an optional `<legend>`.

## Example usage

```twig
{{
    form.fieldset_start({
        'legend': 'I am Legend'
    })
}}
```

## Options

Option | Type   | Description
------ | ------ | --------------------------------------------------------------
class  | string | A space separated list of class names
form   | string | Specific one or more forms the fieldset belongs to
id     | string | A unique identifier, if required
legend | string | Label for the optional legend element
name   | string | The name of this control
data-* | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro fieldset_start(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    <fieldset{{ attributes(options|exclude('legend')) }}>
    {%
        if options.legend is defined
        and options.legend is not empty
    %}
        <legend class="legend">{{ options.legend|raw }}</legend>
    {% endif %}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Fieldset end

Used in conjunction with `fieldset.start()` and closes the `<fieldset>`.

## Example usage

```twig
{{ form.fieldset_end() }}
```

#}
{% macro fieldset_end() %}
{% spaceless %}

    </fieldset>

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# File

Generates a file input.

## Example usage

```twig
{{
    form.file({
        'label': 'Send us a pretty picture'
    })
}}
```

## Options applied to parent wrapper

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
class       | string | A space separated list of class names
help        | string | Additional guidance information to be displayed next to the input
label       | string  | Text for the `<label>` companion element
required    | bool   | Visually indicates that the field must be completed

## Options applied to input

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
autofocus   | bool   | Whether the field should have input focus on page load
disabled    | bool   | Stops the element from being interactive if true
form        | string | Specific one or more forms this label belongs to
id          | string | A unique identifier, will also be used as the label's `for` attribute
name        | string | The name of this control
placeholder | string | A short hint that describes the expected value
required    | bool   | Adds `required` and `aria-required="true"` attributes
value       | string | Specifies the value of the input
data-*      | string | Data attributes, eg: `'data-foo': 'bar'`

*Any other options not listed here will be applied to the input.
*
#}
{% macro file(options) %}
{% spaceless %}
    {% import _self as form %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        form.group({
            'parent': options|only('bare class help id label required'),
            'inputs': [
                elem.input(options
                    |exclude('bare class help label')
                    |defaults({'type': 'file'})
                    |merge({'class': 'file'})
                )
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Group

This is a constructor macro which generates an input field wrapped with
standard markup with the ability to prepend/append extra elements. It is called
by other macros like form.text and form.password.

```html
<div class="panel panel--info">
    <div class="panel__title">
        <i class="icon-info-sign"></i> Info
    </div>
    <div class="panel__body">
        <p>This helper is not really intended to be called directly from a
        view</p>
    </div>
</div>
```

Usually, you’ll have a single `options` hash to this You need to specify which
of the options you want to apply to the parent wrapper (usually a `<div>`) and
which you want to be attached to the actual form input element. Use the `only`
and `exclude` array functions to manipulate your options array.

## Example usage

```twig
{{
    form.group({
        'parent': options|only('class label help')
        'inputs': [
            elem.input(options
                |exclude('class label help')
            )
        ]
    })
}}
```

In this example, if `'class': 'FOO'`, `'label': 'BAR'` and `'help': 'BAZ'` will
be placed in the markup like so:

```html
<div class="form__group FOO">
    <label for="inputText" class="control__label">BAR</label>
    <div class="controls">
        <input id="inputText" name="inputText" placeholder="Placeholder"
            type="text" class="form__control">
        <p class="help-block">BAZ</p>
    </div>
</div>
```

## Options

Option | Type  | Description
------ | ----- | ---------------------------------------------------------------
parent | hash  | options to be applied to the parent wrapper
inputs | array | an array of inputs

## Options applied to the parent wrapper

Option           | Type   | Description
---------------- | ------ | ----------------------------------------------------
parent.append    | string | Content to display after the input, usually short text or icons
parent.class     | string | A space separated list of class names
parent.id        | string | A unique identifier, will also be used as the label's `for` attribute
parent.help      | string | Additional guidance information to be displayed next to the input
parent.inputs    | array  | One or more form inputs to display
parent.label     | string | Text for the `<label>` companion element
parent.prepend   | string | Content to display before the input, usually short text or icons
parent.removable | bool   | Whether to display a remove button after the input (default false)
parent.required  | bool   | Visually indicates that the field must be completed
parent.data-*    | string | Data attributes, eg: `'data-foo': 'bar'`

## Options applied to the controls wrapper

Option           | Type   | Description
---------------- | ------ | ----------------------------------------------------
controls.class   | string | A space separated list of class names

#}
{% macro group(options) %}
    {% import _self as form %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}
    {% import '@pulsar/pulsar/v2/helpers/html.html.twig' as html %}

    {% if options.parent.label is defined and options.parent.label is null %}
        {% set hasLabelClass = ' form__group--no-label' %}
    {% endif %}

    {% if options.parent.bare is not defined or options.parent.bare != true %}
    <div{{
        attributes(options.parent
                |only('class')
                |defaults({
                    'class': 'form__group' ~ hasLabelClass|default
                })
            )
    -}}>
    {% endif %}
        {{
            elem.label({
                'for': options.parent.id|default,
                'label': options.parent.label|default,
                'required': options.parent.required|default
            })
        }}
        {% if options.parent.bare is not defined or options.parent.bare != true %}
        <div class="controls{% if options.controls.class is defined %} {{ options.controls.class }}{% endif %}">
        {% endif %}

        {%
            if (
                options.parent.prepend is defined
                and options.parent.prepend is not empty
            ) or (
                options.parent.append is defined
                and options.parent.append is not empty
            )
        %}
            <div class="input-group">
                {{ util.addon(options.parent.prepend|default) }}
        {% elseif options.parent.removable is defined and options.parent.removable == true %}
            <div class="input-group is-removable">
        {% endif %}

        {% for input in options.inputs %}
                {{- input|raw -}}
        {% endfor %}

        {%
            if (
                options.parent.prepend is defined
                and options.parent.prepend is not empty
            ) or (
                options.parent.append is defined
                and options.parent.append is not empty
            )
        %}
                {{ util.addon(options.parent.append|default) }}
            </div>
        {% endif %}

        {% if options.parent.removable is defined and options.parent.removable == true %}
                {{ html.remove_button({ 'target': options.parent.id|default }) }}
            </div>
        {% endif %}

            {{ form.help({ 'value': options.parent.help|default }) }}
        {% if options.parent.bare is not defined or options.parent.bare != true %}
        </div>
        {% endif %}
    {% if options.parent.bare is not defined or options.parent.bare != true %}
    </div>
    {% endif %}

{% endmacro %}


{# -----------------------------------------------------------------------------

# Help

Additional guidance text to be displayed with a form control, normally called by
the `form.group()` helper and not really intended to be called directly from a
view.

## Example usage

```twig
{{
    form.help({
        'value': 'Your password'
    })
}}
```

## Options

Option | Type   | Description
------ | ------ | ---------------------------------------------------------
value  | string | The string or html markup to render inside the help block

#}
{% macro help(options) %}
{% spaceless %}

    {% if options.value is defined and options.value is not empty %}
        <p class="help-block">
            {{- options.value|raw -}}
        </p>
    {% endif %}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Hidden

Generates a hidden text input which can be used to store non user-editable data.

All presentational markup and classes will be removed from this input to prevent
it from affecting a form's layout.

## Example usage

```twig
{{
    form.hidden({
        'value': 'Shh, you can’t see me...'
    })
}}
```

## Options applied to input

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
disabled    | bool   | Stops the element from being interactive if true
form        | string | Specific one or more forms this label belongs to
id          | string | A unique identifier, will also be used as the label's `for` attribute
name        | string | The name of this control
value       | string | Specifies the value of the input
data-*      | string | Data attributes, eg: `'data-foo': 'bar'`

#}
{% macro hidden(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        elem.input(options
            |exclude('class help label')
            |merge({
                'type': 'hidden',
                'naked': true
            })
        )
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Password

Generates a password input field.

## Example usage

```twig
{{
    form.password({
        'label': 'Your password',
        'id': 'example-password'
    })
}}
```

## Options applied to parent wrapper

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
append      | string | Text or markup to include after the input element
class       | string | A space separated list of class names
help        | string | Additional guidance information to be displayed next to the input
label       | string | Text for the `<label>` companion element
prepend     | string | Text or markup to include before the input element
required    | bool   | Visually indicates that the field must be completed

## Options applied to input

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
autofocus   | bool   | Whether the field should have input focus on page load
disabled    | bool   | Stops the element from being interactive if true
form        | string | Specific one or more forms this label belongs to
id          | string | A unique identifier, will also be used as the label's `for` attribute
name        | string | The name of this control
placeholder | string | A short hint that describes the expected value
required    | bool   | Adds `required` and `aria-required="true"` attributes
value       | string | Specifies the value of the input
data-*      | string | Data attributes, eg: `'data-foo': 'bar'`

*Any other options not listed here will be applied to the input.

#}
{% macro password(options) %}
{% spaceless %}
    {% import _self as form %}

    {{ form.text(options|defaults({'type': 'password'})) }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Radio

Generates a radio input field.

## Example usage

```twig
{{
    form.radio({
        'label': 'GaGa',
        'id': 'example-radio'
    })
}}
```

## Options applied to parent wrapper

Option   | Type   | Description
-------- | ------ | ------------------------------------------------------------
class    | string | A space separated list of class names
help     | string | Additional guidance information to be displayed next to the input
label    | string | Text for the `<label>` companion element
required | bool   | Visually indicates that the field must be completed

## Options applied to input

Option   | Type   | Description
-------- | ------ | ------------------------------------------------------------
form     | string | Specific one or more forms this label belongs to
id       | string | A unique identifier, will also be used as the label's `for` attribute
name     | string | The name of this control
required | bool   | Adds `required` and `aria-required="true"` attributes
selected | bool   | Whether the input is checked
value    | string | Specifies the value of the input
data-*   | string | Data attributes, eg: `'data-foo': 'bar'`

*Any other options not listed here will be applied to the input.

#}
{% macro radio(options) %}
{% spaceless %}
    {% import _self as form %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        form.group({
            'parent': options
                |only('bare class help id label required')
                |defaults({
                    'class': 'form-radio'
                }),
            'inputs': [
                elem.input(options
                    |exclude('bare class help label')
                    |defaults({
                        'class': 'radio',
                        'type': 'radio'
                    })
                )
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Radio inline

Creates a `<label>` element with a radio input inside it and allows the radio to
be positioned either before or after the label value.

## Example usage

```twig
{{
    form.radio_inline({
        'label': 'Inline radio example',
        'id': 'example-radio-inline'
    })
}}
```

## Options applied to parent wrapper

Option          | Type   | Description
--------------- | ------ | -----------------------------------------------------
class           | string | A space separated list of class names
help            | string | Additional guidance information to be displayed next to the input
required        | bool   | Visually indicates that the field must be completed

## Options applied to input

Option          | Type   | Description
--------------- | ------ | -----------------------------------------------------
form            | string | Specific one or more forms this label belongs to
id              | string | A unique identifier, will also be used as the label's `for` attribute
label           | string | Text for the `<label>` companion element
input_placement | string | `left` (default), `right` position of the input vs the label value
name            | string | The name of this control
required        | bool   | Adds `required` and `aria-required="true"` attributes
selected        | bool   | Whether this radio button should be selected
value           | string | Specifies the value of the input
data-*          | string | Data attributes, eg: `'data-foo': 'bar'`

*Any other options not listed here will be applied to the input

#}
{% macro radio_inline(options) %}
{% spaceless %}
    {% import _self as form %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {%
        set input = elem.input(options
            |merge({
                'class': 'radio',
                'label': null,
                'type': 'radio'
            })
        )
    %}

    {% set label = input ~ options.label %}

    {%
        if options.input_placement is defined
        and options.input_placement == 'right'
    %}
        {% set label = options.label ~ input %}
    {% endif %}

    {{
        form.group({
            'parent': options
                |only('class help id bare radio')
                |defaults({
                    'class': 'form-radio-inline'
                }),
            'inputs': [
                elem.label({
                    'for': options.id|default,
                    'label': label
                })
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Radio Simple

Creates a radio input with a sibling label element, this allows other macros
like `form.button_group()` to use the input’s `:checked` state to modify the
label through the use of the sibling `+` CSS selector.

## Example usage

```twig
{{
    form.radio_simple({
        'label': 'Foo',
        'name': 'foo_group',
        'id': 'foo'
    })
}}
```

## Example output

```html
<input type="radio" name="bar" id="baz" /><label for="baz">Foo</label>
```

## Options applied to input

Option   | Type   | Description
-------- | ------ | ------------------------------------------------------------
form     | string | Specific one or more forms this label belongs to
help     | string | Additional guidance information to be displayed next to the input
id       | string | A unique identifier, will also be used as the label's `for` attribute
name     | string | The name of this control
required | bool   | Adds `required` and `aria-required="true"` attributes
selected | bool   | Whether this radio button should be selected
value    | string | Specifies the value of the input
data-*   | string | Data attributes, eg: `'data-foo': 'bar'`

## Options applied to label

Option   | Type   | Description
-------- | ------ | ------------------------------------------------------------
class    | string | A space separated list of class names
label    | string | Text for the `<label>` companion element
required | bool   | Visually indicates that the field must be completed

*Any other options not listed here will be applied to the input

#}
{% macro radio_simple(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        elem.input(options
            |exclude('class for label')
            |defaults({
                'type': 'radio'
            })
			|merge({'class': 'radio'})
        )
    }}
    {{
        elem.label(options
            |only('class label for required')
            |defaults({'for': options.id|default})
        )
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Select

Generates a select input.

## Example usage

```twig
{{
    form.select({
        'label': 'Pick a colour',
        'id': 'example-select',
        'options': {
            '': 'Choose',
            'colour_red': 'Red',
            'colour_blue': 'Blue'
        }
    })
}}
```

## Options applied to parent wrapper

Option      | Type   | Description
----------- | ------ | --------------------------------------------------------
class       | string | A space separated list of class names
help        | string | Additional guidance information to be displayed next to the input
label       | string | Text for the `<label>` companion element
required    | bool   | Visually indicates that the field must be completed

## Options applied to the input

Option      | Type   | Description
----------- | ------ | --------------------------------------------------------
form        | string | Specific one or more forms this label belongs to
id          | string | A unique identifier, will also be used as the label's `for` attribute
multiple    | bool   | Whether multiple options can be selected
name        | string | The name of this control
options     | hash   | The `<option>` attributes formatted as `{ 'value': 'label' }`
required    | bool   | Adds `required` and `aria-required="true"` attributes
selected    | string | The `id` of the item in `options` that should be initially selected
size        | int    | The number of items to display when the list is shown
data-*      | string | Data attributes, eg: `'data-foo': 'bar'`

*Any other options not listed here will be applied to the input.

#}
{% macro select(options) %}
{% spaceless %}
    {% import _self as form %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        form.group({
            'parent': options|only('bare class help id label required'),
            'inputs': [
                elem.select(
                    options
					|exclude('bare class help label')
					|merge({'class': 'select'})
                )
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Select2

Generates a select input using the select2 plugin (https://select2.github.io).

## Example usage

```twig
{{
    form.select2({
        'label': 'Pick a colour',
        'id': 'example-select',
        'options': {
            '': 'Choose',
            'colour_red': 'Red',
            'colour_blue': 'Blue'
        }
    })
}}
```

## Options applied to parent wrapper

Option      | Type   | Description
----------- | ------ | --------------------------------------------------------
class       | string | A space separated list of class names
help        | string | Additional guidance information to be displayed next to the input
label       | string | Text for the `<label>` companion element
required    | bool   | Visually indicates that the field must be completed

## Options applied to the input

Option      | Type   | Description
----------- | ------ | --------------------------------------------------------
data-html   | string | If `true`, uses Select2's templating functions to parse HTML within options
disabled    | string | Stops the element from being interactive if value = 'disabled'
form        | string | Specific one or more forms this label belongs to
id          | string | A unique identifier, will also be used as the label's `for` attribute
multiple    | bool   | Whether multiple options can be selected
name        | string | The name of this control
options     | hash   | The `<option>` attributes formatted as `{ 'value': 'label' }`
required    | bool   | Adds `required` and `aria-required="true"` attributes
selected    | string | The `id` of the item in `options` that should be initially selected
size        | int    | The number of items to display when the list is shown
data-*      | string | Data attributes, eg: `'data-foo': 'bar'`

*Any other options not listed here will be applied to the input.

#}
{% macro select2(options) %}
{% spaceless %}
    {% import _self as form %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        form.group({
            'parent': options|only('bare class help id label required'),
            'inputs': [
                elem.select2(options
                    |exclude('bare class help label')
                )
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

## Submit

Creates your standard form submit button. Accepts all the same arguments as the
`html.button()` helper.

### Example usage

```twig
{{
    form.submit({
        'label': 'GO GO GO!'
    })
}}
```

### Options

Option   | Type  | Description
-------- | ----- | -------------------------------------------------------------
class   | string | A space separated list of class names
form    | string | Specifies one or more forms this label belongs to
href    | string | URL to use for link button types
id      | string | A unique identifier, will also be used as the label's `for` attribute
name    | string | The name of this control
label   | string | The button label
type    | string | Can be button (default), link, input, submit
data-*  | string | Data attributes, eg: `'data-foo': 'bar'`

*Any other options not listed here will be applied to the input.

#}
{% macro submit(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/html.html.twig' as html %}

    {{
        html.button(options|merge({
            'class': options.class|default ~ ' js-submit-disable',
            'type': 'submit'
        }))
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Text

Generates a text input and passes it to the `group` helper to wrap it in the
required form markup.

## Example usage

```twig
{{
    form.text({
        'label': 'What’s your name, boss?'
    })
}}
```

## Options applied to parent wrapper

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
class       | string | A space separated list of class names
help        | string | Additional guidance information to be displayed next to the input
label       | string | Text for the `<label>` companion element
required    | bool   | Visually indicates that the field must be completed

## Options applied to input

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
autofocus   | bool   | Whether the field should have input focus on page load
disabled    | bool   | Stops the element from being interactive if true
form        | string | Specific one or more forms this label belongs to
id          | string | A unique identifier, will also be used as the label's `for` attribute
name        | string | The name of this control
placeholder | string | A short hint that describes the expected value
required    | bool   | Adds `required` and `aria-required="true"` attributes
value       | string | Specifies the value of the input
data-*      | string | Data attributes, eg: `'data-foo': 'bar'`

*Any other options not listed here will be applied to the input.

#}
{% macro text(options) %}
{% spaceless %}
    {% import _self as form %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {% set options = options|merge({ 'type': options.type|default('text') }) %}

    {{
        form.group({
            'parent': options|only('bare append class help id label prepend required'),
            'inputs': [
                elem.input(
                    options|exclude('bare class help label')
                )
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{# -----------------------------------------------------------------------------

# Textarea

Generates a `<textarea>` with options to control the number of rows (the height)
of the element.

## Example usage

```twig
{{
    form.textarea({
        'label': 'What is the meaning of life?'
    })
}}
```

## Options applied to parent wrapper

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
class       | string | A space separated list of class names
help        | string | Additional guidance information to be displayed next to the input
label       | string | Text for the `<label>` companion element
required    | bool   | Visually indicates that the field must be completed

## Options applied to input

Option      | Type   | Description
----------- | ------ | --------------------------------------------------------
autofocus   | bool   | Whether the field should have input focus on page load
form        | string | Specific one or more forms this label belongs to
id          | string | A unique identifier, will also be used as the label's `for` attribute
name        | string | The name of this control
placeholder | string | A short hint that describes the expected value
required    | bool   | Adds `required` and `aria-required="true"` attributes
rows        | int    | The height, in rows (default 2)
value       | string | Specifies the value of the input
data-*      | string | Data attributes, eg: `'data-foo': 'bar'`

*Any other options not listed here will be applied to the input.

#}
{% macro textarea(options) %}
{% spaceless %}
    {% import _self as form %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        form.group({
            'parent': options|only('bare class help id label required'),
            'inputs': [
                elem.textarea(
                    options
                        |exclude('bare class help label')
                        |merge({'class': 'textarea'})
                )
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}
